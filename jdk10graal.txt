[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 14, 2018 1:30:44 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1395:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1423:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != 'Z' && tokenOrDigitError('Z')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1459:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1490:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1518:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1554:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1599:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1902:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1929:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1958:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 15 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.5-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.5-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d5(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d7(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d9(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d11(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d11(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d13(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d11(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e7(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e11(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e13(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -jvmArgsAppend -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -prof gc -rf json -rff jdk10graal.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26347.407 ops/s
[info] # Warmup Iteration   2: 515661.057 ops/s
[info] # Warmup Iteration   3: 666918.196 ops/s
[info] # Warmup Iteration   4: 671703.378 ops/s
[info] # Warmup Iteration   5: 683790.996 ops/s
[info] Iteration   1: 678815.794 ops/s
[info]                  ·gc.alloc.rate:                   1873.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              4344.455 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.591 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4686.018 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.723 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 674817.970 ops/s
[info]                  ·gc.alloc.rate:                   1862.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              4344.524 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2035.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4747.858 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.875 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 677382.395 ops/s
[info]                  ·gc.alloc.rate:                                  1876.340 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4360.070 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3166.716 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 696230.029 ops/s
[info]                  ·gc.alloc.rate:            1922.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       4346.201 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4621.374 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 695919.170 ops/s
[info]                  ·gc.alloc.rate:            1921.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       4344.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4623.459 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   684633.072 ±(99.9%) 40597.123 ops/s [Average]
[info]   (min, avg, max) = (674817.970, 684633.072, 696230.029), stdev = 10542.944
[info]   CI (99.9%): [644035.948, 725230.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1891.186 ±(99.9%) 109.506 MB/sec [Average]
[info]   (min, avg, max) = (1862.619, 1891.186, 1922.485), stdev = 28.438
[info]   CI (99.9%): [1781.680, 2000.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4347.872 ±(99.9%) 26.442 B/op [Average]
[info]   (min, avg, max) = (4344.109, 4347.872, 4360.070), stdev = 6.867
[info]   CI (99.9%): [4321.430, 4374.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1901.567 ±(99.9%) 1160.378 MB/sec [Average]
[info]   (min, avg, max) = (1362.785, 1901.567, 2044.717), stdev = 301.347
[info]   CI (99.9%): [741.189, 3061.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4369.085 ±(99.9%) 2595.948 B/op [Average]
[info]   (min, avg, max) = (3166.716, 4369.085, 4747.858), stdev = 674.159
[info]   CI (99.9%): [1773.137, 6965.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 8.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.720 ±(99.9%) 20.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.720, 10.875), stdev = 5.214
[info]   CI (99.9%): [≈ 0, 23.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 24.000), stdev = 8.933
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:52:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1090.426 ops/s
[info] # Warmup Iteration   2: 1055339.035 ops/s
[info] # Warmup Iteration   3: 1470897.528 ops/s
[info] # Warmup Iteration   4: 1467152.538 ops/s
[info] # Warmup Iteration   5: 1513930.566 ops/s
[info] Iteration   1: 1486635.137 ops/s
[info]                  ·gc.alloc.rate:            989.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1424.578 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 1441407.532 ops/s
[info]                  ·gc.alloc.rate:            959.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 734.636 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1485767.983 ops/s
[info]                  ·gc.alloc.rate:                   998.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              1057.388 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1424.710 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.706 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 1505504.337 ops/s
[info]                  ·gc.alloc.rate:            1002.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 703.354 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 1501058.658 ops/s
[info]                  ·gc.alloc.rate:                   999.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1410.892 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1484074.730 ±(99.9%) 97748.625 ops/s [Average]
[info]   (min, avg, max) = (1441407.532, 1484074.730, 1505504.337), stdev = 25385.008
[info]   CI (99.9%): [1386326.104, 1581823.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   989.871 ±(99.9%) 67.271 MB/sec [Average]
[info]   (min, avg, max) = (959.710, 989.871, 1002.349), stdev = 17.470
[info]   CI (99.9%): [922.600, 1057.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1049.878 ±(99.9%) 16.167 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1049.878, 1057.388), stdev = 4.198
[info]   CI (99.9%): [1033.711, 1066.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1076.242 ±(99.9%) 1418.401 MB/sec [Average]
[info]   (min, avg, max) = (672.716, 1076.242, 1345.695), stdev = 368.354
[info]   CI (99.9%): [≈ 0, 2494.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1139.634 ±(99.9%) 1479.377 B/op [Average]
[info]   (min, avg, max) = (703.354, 1139.634, 1424.710), stdev = 384.190
[info]   CI (99.9%): [≈ 0, 2619.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 4.442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.664), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.700 ±(99.9%) 4.658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 2.794), stdev = 1.210
[info]   CI (99.9%): [≈ 0, 5.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   78.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 15.600, 20.000), stdev = 5.128
[info]   CI (99.9%): [78.000, 78.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3130180.078 ops/s
[info] # Warmup Iteration   2: 5094857.681 ops/s
[info] # Warmup Iteration   3: 5157363.640 ops/s
[info] # Warmup Iteration   4: 5433316.504 ops/s
[info] # Warmup Iteration   5: 5463008.932 ops/s
[info] Iteration   1: 5397604.701 ops/s
[info]                  ·gc.alloc.rate:            358.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.504 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 196.572 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 5476774.783 ops/s
[info]                  ·gc.alloc.rate:      361.857 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5437744.189 ops/s
[info]                  ·gc.alloc.rate:            359.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 195.108 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 5362252.214 ops/s
[info]                  ·gc.alloc.rate:      354.357 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5444615.203 ops/s
[info]                  ·gc.alloc.rate:            359.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 194.871 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5423798.218 ±(99.9%) 171216.928 ops/s [Average]
[info]   (min, avg, max) = (5362252.214, 5423798.218, 5476774.783), stdev = 44464.493
[info]   CI (99.9%): [5252581.290, 5595015.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   358.722 ±(99.9%) 10.592 MB/sec [Average]
[info]   (min, avg, max) = (354.357, 358.722, 361.857), stdev = 2.751
[info]   CI (99.9%): [348.129, 369.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.101 ±(99.9%) 0.868 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.101, 104.504), stdev = 0.225
[info]   CI (99.9%): [103.233, 104.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.438 ±(99.9%) 1421.655 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.438, 674.165), stdev = 369.199
[info]   CI (99.9%): [≈ 0, 1826.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   117.310 ±(99.9%) 412.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117.310, 196.572), stdev = 107.091
[info]   CI (99.9%): [≈ 0, 529.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:52:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2383.029 ops/s
[info] # Warmup Iteration   2: 93734.938 ops/s
[info] # Warmup Iteration   3: 267072.157 ops/s
[info] # Warmup Iteration   4: 275023.821 ops/s
[info] # Warmup Iteration   5: 273262.039 ops/s
[info] Iteration   1: 279328.403 ops/s
[info]                  ·gc.alloc.rate:                   2278.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              12842.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2026.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11417.474 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.326 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 282208.402 ops/s
[info]                  ·gc.alloc.rate:                   2302.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              12840.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2042.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11393.850 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.430 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 280289.235 ops/s
[info]                  ·gc.alloc.rate:            2286.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       12840.459 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15305.768 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 278568.614 ops/s
[info]                  ·gc.alloc.rate:            2272.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       12842.230 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11550.357 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 276605.767 ops/s
[info]                  ·gc.alloc.rate:            2257.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       12847.737 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11632.777 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   279400.084 ±(99.9%) 7980.669 ops/s [Average]
[info]   (min, avg, max) = (276605.767, 279400.084, 282208.402), stdev = 2072.554
[info]   CI (99.9%): [271419.415, 287380.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2279.631 ±(99.9%) 63.661 MB/sec [Average]
[info]   (min, avg, max) = (2257.565, 2279.631, 2302.122), stdev = 16.533
[info]   CI (99.9%): [2215.970, 2343.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12842.490 ±(99.9%) 11.889 B/op [Average]
[info]   (min, avg, max) = (12840.002, 12842.490, 12847.737), stdev = 3.088
[info]   CI (99.9%): [12830.601, 12854.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2176.609 ±(99.9%) 1182.932 MB/sec [Average]
[info]   (min, avg, max) = (2026.003, 2176.609, 2725.980), stdev = 307.204
[info]   CI (99.9%): [993.676, 3359.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12260.045 ±(99.9%) 6566.948 B/op [Average]
[info]   (min, avg, max) = (11393.850, 12260.045, 15305.768), stdev = 1705.415
[info]   CI (99.9%): [5693.097, 18826.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 12.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.326), stdev = 3.180
[info]   CI (99.9%): [≈ 0, 13.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   9.743 ±(99.9%) 69.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.743, 41.286), stdev = 17.924
[info]   CI (99.9%): [≈ 0, 78.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.200, 22.000), stdev = 7.430
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54536.416 ops/s
[info] # Warmup Iteration   2: 693800.705 ops/s
[info] # Warmup Iteration   3: 719792.935 ops/s
[info] # Warmup Iteration   4: 735613.505 ops/s
[info] # Warmup Iteration   5: 721768.365 ops/s
[info] Iteration   1: 739160.985 ops/s
[info]                  ·gc.alloc.rate:                   2002.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              4264.475 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2028.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4320.246 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.326 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 742804.557 ops/s
[info]                  ·gc.alloc.rate:                                  2012.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4264.886 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.374 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.793 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4331.512 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 749629.547 ops/s
[info]                  ·gc.alloc.rate:            2032.150 MB/sec
[info]                  ·gc.alloc.rate.norm:       4265.989 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4292.398 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 741713.231 ops/s
[info]                  ·gc.alloc.rate:                                  2011.080 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4267.651 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4337.824 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 750686.853 ops/s
[info]                  ·gc.alloc.rate:            2033.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       4264.726 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4286.155 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   744799.035 ±(99.9%) 19567.182 ops/s [Average]
[info]   (min, avg, max) = (739160.985, 744799.035, 750686.853), stdev = 5081.535
[info]   CI (99.9%): [725231.853, 764366.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2018.456 ±(99.9%) 53.328 MB/sec [Average]
[info]   (min, avg, max) = (2002.531, 2018.456, 2033.878), stdev = 13.849
[info]   CI (99.9%): [1965.127, 2071.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4265.545 ±(99.9%) 5.051 B/op [Average]
[info]   (min, avg, max) = (4264.475, 4265.545, 4267.651), stdev = 1.312
[info]   CI (99.9%): [4260.494, 4270.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.075 ±(99.9%) 0.644 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.374), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.159 ±(99.9%) 1.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.793), stdev = 0.354
[info]   CI (99.9%): [≈ 0, 1.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2041.155 ±(99.9%) 26.788 MB/sec [Average]
[info]   (min, avg, max) = (2028.720, 2041.155, 2044.730), stdev = 6.957
[info]   CI (99.9%): [2014.368, 2067.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4313.627 ±(99.9%) 89.368 B/op [Average]
[info]   (min, avg, max) = (4286.155, 4313.627, 4337.824), stdev = 23.208
[info]   CI (99.9%): [4224.260, 4402.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 12.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 7.326), stdev = 3.276
[info]   CI (99.9%): [≈ 0, 14.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.120 ±(99.9%) 26.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.120, 15.602), stdev = 6.977
[info]   CI (99.9%): [≈ 0, 29.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 17.000), stdev = 5.683
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_87620646/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 291110.263 ops/s
[info] # Warmup Iteration   2: 2299426.997 ops/s
[info] # Warmup Iteration   3: 2348997.944 ops/s
[info] # Warmup Iteration   4: 2358685.156 ops/s
[info] # Warmup Iteration   5: 2288876.703 ops/s
[info] Iteration   1: 2395238.463 ops/s
[info]                  ·gc.alloc.rate:            998.190 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 442.067 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2321719.403 ops/s
[info]                  ·gc.alloc.rate:            967.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 912.145 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 2301537.986 ops/s
[info]                  ·gc.alloc.rate:                   959.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        460.060 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.456 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 2320168.829 ops/s
[info]                  ·gc.alloc.rate:            967.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 456.838 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 2295536.273 ops/s
[info]                  ·gc.alloc.rate:                   956.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        923.013 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2326840.191 ±(99.9%) 153654.565 ops/s [Average]
[info]   (min, avg, max) = (2295536.273, 2326840.191, 2395238.463), stdev = 39903.603
[info]   CI (99.9%): [2173185.625, 2480494.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   969.787 ±(99.9%) 63.850 MB/sec [Average]
[info]   (min, avg, max) = (956.832, 969.787, 998.190), stdev = 16.582
[info]   CI (99.9%): [905.937, 1033.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.062 ±(99.9%) 0.342 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.062, 656.193), stdev = 0.089
[info]   CI (99.9%): [655.720, 656.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.024 ±(99.9%) 1419.076 MB/sec [Average]
[info]   (min, avg, max) = (672.644, 942.024, 1346.053), stdev = 368.529
[info]   CI (99.9%): [≈ 0, 2361.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   638.825 ±(99.9%) 980.321 B/op [Average]
[info]   (min, avg, max) = (442.067, 638.825, 923.013), stdev = 254.586
[info]   CI (99.9%): [≈ 0, 1619.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.548 ±(99.9%) 3.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.548, 2.284), stdev = 0.990
[info]   CI (99.9%): [≈ 0, 4.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.000, 19.000), stdev = 5.477
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:51:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2686997.590 ops/s
[info] # Warmup Iteration   2: 12693549.558 ops/s
[info] # Warmup Iteration   3: 13381049.455 ops/s
[info] # Warmup Iteration   4: 13409954.708 ops/s
[info] # Warmup Iteration   5: 13414331.016 ops/s
[info] Iteration   1: 13311185.204 ops/s
[info]                  ·gc.alloc.rate:            677.037 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79.708 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 12818154.717 ops/s
[info]                  ·gc.alloc.rate:            657.614 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.756 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82.774 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 13437302.326 ops/s
[info]                  ·gc.alloc.rate:            684.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78.960 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 13170492.853 ops/s
[info]                  ·gc.alloc.rate:                   669.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80.481 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 13262441.713 ops/s
[info]                  ·gc.alloc.rate:            674.107 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80.003 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   13199915.363 ±(99.9%) 901515.367 ops/s [Average]
[info]   (min, avg, max) = (12818154.717, 13199915.363, 13437302.326), stdev = 234120.678
[info]   CI (99.9%): [12298399.995, 14101430.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   672.518 ±(99.9%) 38.191 MB/sec [Average]
[info]   (min, avg, max) = (657.614, 672.518, 684.323), stdev = 9.918
[info]   CI (99.9%): [634.328, 710.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.193 ±(99.9%) 1.228 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.193, 80.756), stdev = 0.319
[info]   CI (99.9%): [78.965, 81.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   673.989 ±(99.9%) 1.253 MB/sec [Average]
[info]   (min, avg, max) = (673.447, 673.989, 674.314), stdev = 0.325
[info]   CI (99.9%): [672.735, 675.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   80.385 ±(99.9%) 5.564 B/op [Average]
[info]   (min, avg, max) = (78.960, 80.385, 82.774), stdev = 1.445
[info]   CI (99.9%): [74.821, 85.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4255420.520 ops/s
[info] # Warmup Iteration   2: 14148176.814 ops/s
[info] # Warmup Iteration   3: 14596498.577 ops/s
[info] # Warmup Iteration   4: 14616041.787 ops/s
[info] # Warmup Iteration   5: 14668104.843 ops/s
[info] Iteration   1: 14631550.988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14644090.330 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14633806.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 14642794.755 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14637725.019 ops/s
[info]                  ·gc.alloc.rate:      0.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   14637993.536 ±(99.9%) 21032.030 ops/s [Average]
[info]   (min, avg, max) = (14631550.988, 14637993.536, 14644090.330), stdev = 5461.951
[info]   CI (99.9%): [14616961.506, 14659025.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.010 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:50:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7762.239 ops/s
[info] # Warmup Iteration   2: 356949.982 ops/s
[info] # Warmup Iteration   3: 530289.312 ops/s
[info] # Warmup Iteration   4: 538174.443 ops/s
[info] # Warmup Iteration   5: 536986.459 ops/s
[info] Iteration   1: 537906.564 ops/s
[info]                  ·gc.alloc.rate:            1622.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       4747.778 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3937.172 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 538360.753 ops/s
[info]                  ·gc.alloc.rate:                   1622.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              4744.414 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2021.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5910.230 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.632 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   3: 547914.433 ops/s
[info]                  ·gc.alloc.rate:                   1652.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              4744.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.213 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3897.597 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.480 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 545610.013 ops/s
[info]                  ·gc.alloc.rate:                                  1650.767 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4761.701 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5896.943 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 551058.012 ops/s
[info]                  ·gc.alloc.rate:            1660.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       4744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3892.564 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   544169.955 ±(99.9%) 22495.565 ops/s [Average]
[info]   (min, avg, max) = (537906.564, 544169.955, 551058.012), stdev = 5842.027
[info]   CI (99.9%): [521674.390, 566665.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1641.745 ±(99.9%) 68.593 MB/sec [Average]
[info]   (min, avg, max) = (1622.437, 1641.745, 1660.579), stdev = 17.813
[info]   CI (99.9%): [1573.151, 1710.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4748.426 ±(99.9%) 29.192 B/op [Average]
[info]   (min, avg, max) = (4744.001, 4748.426, 4761.701), stdev = 7.581
[info]   CI (99.9%): [4719.234, 4777.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1626.244 ±(99.9%) 1430.389 MB/sec [Average]
[info]   (min, avg, max) = (1345.432, 1626.244, 2044.328), stdev = 371.467
[info]   CI (99.9%): [195.855, 3056.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4706.901 ±(99.9%) 4207.083 B/op [Average]
[info]   (min, avg, max) = (3892.564, 4706.901, 5910.230), stdev = 1092.566
[info]   CI (99.9%): [499.818, 8913.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.022 ±(99.9%) 26.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.022, 13.632), stdev = 6.919
[info]   CI (99.9%): [≈ 0, 31.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.000, 26.000), stdev = 10.075
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:50:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 352549.636 ops/s
[info] # Warmup Iteration   2: 1755798.276 ops/s
[info] # Warmup Iteration   3: 1876069.089 ops/s
[info] # Warmup Iteration   4: 1867326.401 ops/s
[info] # Warmup Iteration   5: 1853428.461 ops/s
[info] Iteration   1: 1877087.830 ops/s
[info]                  ·gc.alloc.rate:                                  2394.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2008.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1711.921 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.234 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 1875936.018 ops/s
[info]                  ·gc.alloc.rate:            2393.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       2008.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2286.911 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1867171.007 ops/s
[info]                  ·gc.alloc.rate:                                  2387.126 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2011.954 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1723.255 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1847150.694 ops/s
[info]                  ·gc.alloc.rate:                                  2358.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2009.435 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2322.487 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   5: 1894306.079 ops/s
[info]                  ·gc.alloc.rate:            2417.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       2008.756 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1698.593 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1872330.326 ±(99.9%) 66114.586 ops/s [Average]
[info]   (min, avg, max) = (1847150.694, 1872330.326, 1894306.079), stdev = 17169.748
[info]   CI (99.9%): [1806215.739, 1938444.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2390.158 ±(99.9%) 82.197 MB/sec [Average]
[info]   (min, avg, max) = (2358.104, 2390.158, 2417.654), stdev = 21.346
[info]   CI (99.9%): [2307.962, 2472.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2009.229 ±(99.9%) 6.301 B/op [Average]
[info]   (min, avg, max) = (2008.000, 2009.229, 2011.954), stdev = 1.636
[info]   CI (99.9%): [2002.928, 2015.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2316.329 ±(99.9%) 1438.458 MB/sec [Average]
[info]   (min, avg, max) = (2041.609, 2316.329, 2725.615), stdev = 373.563
[info]   CI (99.9%): [877.871, 3754.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1948.633 ±(99.9%) 1253.008 B/op [Average]
[info]   (min, avg, max) = (1698.593, 1948.633, 2322.487), stdev = 325.402
[info]   CI (99.9%): [695.625, 3201.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.447 ±(99.9%) 3.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.447, 2.234), stdev = 0.999
[info]   CI (99.9%): [≈ 0, 4.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 13.000), stdev = 3.782
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:50:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.720 ops/s
[info] # Warmup Iteration   2: 7297987.432 ops/s
[info] # Warmup Iteration   3: 7972024.744 ops/s
[info] # Warmup Iteration   4: 8004581.270 ops/s
[info] # Warmup Iteration   5: 7900544.993 ops/s
[info] Iteration   1: 8062437.701 ops/s
[info]                  ·gc.alloc.rate:            983.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 7800063.794 ops/s
[info]                  ·gc.alloc.rate:            954.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.578 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135.220 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 7695420.819 ops/s
[info]                  ·gc.alloc.rate:            939.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1340.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 274.113 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  24.000 ms
[info] Iteration   4: 8095317.248 ops/s
[info]                  ·gc.alloc.rate:            988.126 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.285 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 7933787.077 ops/s
[info]                  ·gc.alloc.rate:                   967.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1340.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        265.876 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   7917405.328 ±(99.9%) 655745.441 ops/s [Average]
[info]   (min, avg, max) = (7695420.819, 7917405.328, 8095317.248), stdev = 170295.009
[info]   CI (99.9%): [7261659.887, 8573150.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   966.567 ±(99.9%) 78.111 MB/sec [Average]
[info]   (min, avg, max) = (939.265, 966.567, 988.126), stdev = 20.285
[info]   CI (99.9%): [888.456, 1044.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.166 ±(99.9%) 0.920 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.166, 192.578), stdev = 0.239
[info]   CI (99.9%): [191.245, 193.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   938.217 ±(99.9%) 1412.756 MB/sec [Average]
[info]   (min, avg, max) = (670.039, 938.217, 1340.160), stdev = 366.888
[info]   CI (99.9%): [≈ 0, 2350.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   187.289 ±(99.9%) 291.028 B/op [Average]
[info]   (min, avg, max) = (130.285, 187.289, 274.113), stdev = 75.579
[info]   CI (99.9%): [≈ 0, 478.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.132 ±(99.9%) 1.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.132, 0.661), stdev = 0.295
[info]   CI (99.9%): [≈ 0, 1.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   84.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 16.800, 25.000), stdev = 7.050
[info]   CI (99.9%): [84.000, 84.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69670.903 ops/s
[info] # Warmup Iteration   2: 2444602.306 ops/s
[info] # Warmup Iteration   3: 2573039.982 ops/s
[info] # Warmup Iteration   4: 2559493.592 ops/s
[info] # Warmup Iteration   5: 2624359.863 ops/s
[info] Iteration   1: 2549824.048 ops/s
[info]                  ·gc.alloc.rate:            1594.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       984.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2018.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1245.840 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  29.000 ms
[info] Iteration   2: 2626121.467 ops/s
[info]                  ·gc.alloc.rate:                   1646.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              986.834 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        808.010 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 2651766.388 ops/s
[info]                  ·gc.alloc.rate:                                  1658.288 MB/sec
[info]                  ·gc.alloc.rate.norm:                             984.049 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.186 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1209.813 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.768 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 2657502.896 ops/s
[info]                  ·gc.alloc.rate:                                  1661.356 MB/sec
[info]                  ·gc.alloc.rate.norm:                             984.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       807.175 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2675772.187 ops/s
[info]                  ·gc.alloc.rate:                                  1673.021 MB/sec
[info]                  ·gc.alloc.rate.norm:                             984.204 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       801.644 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2632197.397 ±(99.9%) 190055.334 ops/s [Average]
[info]   (min, avg, max) = (2549824.048, 2632197.397, 2675772.187), stdev = 49356.767
[info]   CI (99.9%): [2442142.064, 2822252.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1646.713 ±(99.9%) 118.285 MB/sec [Average]
[info]   (min, avg, max) = (1594.426, 1646.713, 1673.021), stdev = 30.718
[info]   CI (99.9%): [1528.428, 1764.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   984.662 ±(99.9%) 4.685 B/op [Average]
[info]   (min, avg, max) = (984.029, 984.662, 986.834), stdev = 1.217
[info]   CI (99.9%): [979.977, 989.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.186), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.022 ±(99.9%) 0.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.110), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1626.124 ±(99.9%) 1414.932 MB/sec [Average]
[info]   (min, avg, max) = (1348.119, 1626.124, 2038.739), stdev = 367.453
[info]   CI (99.9%): [211.192, 3041.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   974.496 ±(99.9%) 891.889 B/op [Average]
[info]   (min, avg, max) = (801.644, 974.496, 1245.840), stdev = 231.621
[info]   CI (99.9%): [82.607, 1866.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.664), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.033 ±(99.9%) 5.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.033, 2.768), stdev = 1.420
[info]   CI (99.9%): [≈ 0, 6.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.000, 29.000), stdev = 10.909
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:49:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6876354.246 ops/s
[info] # Warmup Iteration   2: 11377977.538 ops/s
[info] # Warmup Iteration   3: 12133326.078 ops/s
[info] # Warmup Iteration   4: 12047044.506 ops/s
[info] # Warmup Iteration   5: 11975093.522 ops/s
[info] Iteration   1: 11918904.616 ops/s
[info]                  ·gc.alloc.rate:            1515.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 178.038 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 12178976.681 ops/s
[info]                  ·gc.alloc.rate:                   1547.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2025.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        261.771 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 11773109.309 ops/s
[info]                  ·gc.alloc.rate:                   1500.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.625 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1360.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        181.846 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 11408340.243 ops/s
[info]                  ·gc.alloc.rate:                                  1451.789 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.235 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       188.022 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 11351065.125 ops/s
[info]                  ·gc.alloc.rate:            1446.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.492 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.968 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   11726079.195 ±(99.9%) 1342355.684 ops/s [Average]
[info]   (min, avg, max) = (11351065.125, 11726079.195, 12178976.681), stdev = 348605.508
[info]   CI (99.9%): [10383723.511, 13068434.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1492.369 ±(99.9%) 165.863 MB/sec [Average]
[info]   (min, avg, max) = (1446.362, 1492.369, 1547.648), stdev = 43.074
[info]   CI (99.9%): [1326.506, 1658.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.306 ±(99.9%) 0.955 B/op [Average]
[info]   (min, avg, max) = (200.018, 200.306, 200.625), stdev = 0.248
[info]   CI (99.9%): [199.350, 201.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1492.009 ±(99.9%) 1148.550 MB/sec [Average]
[info]   (min, avg, max) = (1348.035, 1492.009, 2025.461), stdev = 298.275
[info]   CI (99.9%): [343.458, 2640.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   199.729 ±(99.9%) 134.667 B/op [Average]
[info]   (min, avg, max) = (178.038, 199.729, 261.771), stdev = 34.973
[info]   CI (99.9%): [65.062, 334.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.661), stdev = 2.127
[info]   CI (99.9%): [≈ 0, 9.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.192 ±(99.9%) 1.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.602), stdev = 0.277
[info]   CI (99.9%): [≈ 0, 1.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 19.000), stdev = 7.570
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5504.947 ops/s
[info] # Warmup Iteration   2: 255978.845 ops/s
[info] # Warmup Iteration   3: 995197.221 ops/s
[info] # Warmup Iteration   4: 1025729.572 ops/s
[info] # Warmup Iteration   5: 1036977.574 ops/s
[info] Iteration   1: 1037174.261 ops/s
[info]                  ·gc.alloc.rate:                   2506.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              3802.929 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2706.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4106.862 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      8.659 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.140 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 1047017.828 ops/s
[info]                  ·gc.alloc.rate:                                  2529.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3801.973 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4097.412 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1039019.395 ops/s
[info]                  ·gc.alloc.rate:            2508.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       3800.352 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4128.864 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1049899.947 ops/s
[info]                  ·gc.alloc.rate:            2534.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       3800.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3064.552 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1041161.219 ops/s
[info]                  ·gc.alloc.rate:                                  2514.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3800.843 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4120.486 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1042854.530 ±(99.9%) 20808.800 ops/s [Average]
[info]   (min, avg, max) = (1037174.261, 1042854.530, 1049899.947), stdev = 5403.979
[info]   CI (99.9%): [1022045.730, 1063663.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2518.549 ±(99.9%) 48.748 MB/sec [Average]
[info]   (min, avg, max) = (2506.012, 2518.549, 2534.570), stdev = 12.660
[info]   CI (99.9%): [2469.801, 2567.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3801.219 ±(99.9%) 4.665 B/op [Average]
[info]   (min, avg, max) = (3800.000, 3801.219, 3802.929), stdev = 1.211
[info]   CI (99.9%): [3796.554, 3805.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2585.465 ±(99.9%) 1165.924 MB/sec [Average]
[info]   (min, avg, max) = (2044.032, 2585.465, 2725.821), stdev = 302.787
[info]   CI (99.9%): [1419.542, 3751.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   3903.635 ±(99.9%) 1806.793 B/op [Average]
[info]   (min, avg, max) = (3064.552, 3903.635, 4128.864), stdev = 469.218
[info]   CI (99.9%): [2096.842, 5710.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 14.911 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 8.659), stdev = 3.872
[info]   CI (99.9%): [≈ 0, 16.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.628 ±(99.9%) 22.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.628, 13.140), stdev = 5.877
[info]   CI (99.9%): [≈ 0, 25.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.000, 24.000), stdev = 8.124
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 347550.658 ops/s
[info] # Warmup Iteration   2: 2090684.460 ops/s
[info] # Warmup Iteration   3: 2129965.084 ops/s
[info] # Warmup Iteration   4: 2095097.829 ops/s
[info] # Warmup Iteration   5: 2109022.867 ops/s
[info] Iteration   1: 2136826.036 ops/s
[info]                  ·gc.alloc.rate:                   1781.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              1312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        992.112 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 2141737.744 ops/s
[info]                  ·gc.alloc.rate:                   1785.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              1312.164 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2036.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1496.013 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.427 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 2161844.460 ops/s
[info]                  ·gc.alloc.rate:                                  1802.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.158 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       992.264 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2158940.798 ops/s
[info]                  ·gc.alloc.rate:            1799.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       1312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1490.362 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2134856.716 ops/s
[info]                  ·gc.alloc.rate:            1779.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       1312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1507.145 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2146841.151 ±(99.9%) 48763.305 ops/s [Average]
[info]   (min, avg, max) = (2134856.716, 2146841.151, 2161844.460), stdev = 12663.676
[info]   CI (99.9%): [2098077.846, 2195604.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1789.537 ±(99.9%) 40.521 MB/sec [Average]
[info]   (min, avg, max) = (1779.403, 1789.537, 1802.063), stdev = 10.523
[info]   CI (99.9%): [1749.016, 1830.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1312.033 ±(99.9%) 0.282 B/op [Average]
[info]   (min, avg, max) = (1312.000, 1312.033, 1312.164), stdev = 0.073
[info]   CI (99.9%): [1311.751, 1312.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.158), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.023 ±(99.9%) 0.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.115), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1766.753 ±(99.9%) 1448.140 MB/sec [Average]
[info]   (min, avg, max) = (1346.791, 1766.753, 2044.068), stdev = 376.077
[info]   CI (99.9%): [318.613, 3214.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1295.579 ±(99.9%) 1066.717 B/op [Average]
[info]   (min, avg, max) = (992.112, 1295.579, 1507.145), stdev = 277.023
[info]   CI (99.9%): [228.863, 2362.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.664), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.176 ±(99.9%) 6.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.176, 3.427), stdev = 1.647
[info]   CI (99.9%): [≈ 0, 7.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 16.000), stdev = 5.495
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:49:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.795 ops/s
[info] # Warmup Iteration   2: 16348272.667 ops/s
[info] # Warmup Iteration   3: 17432438.209 ops/s
[info] # Warmup Iteration   4: 17742638.204 ops/s
[info] # Warmup Iteration   5: 18120438.369 ops/s
[info] Iteration   1: 18316660.599 ops/s
[info]                  ·gc.alloc.rate:            560.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57.639 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 18052428.058 ops/s
[info]                  ·gc.alloc.rate:            551.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58.485 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 17491114.715 ops/s
[info]                  ·gc.alloc.rate:            533.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60.362 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 17983233.361 ops/s
[info]                  ·gc.alloc.rate:      548.424 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18193477.169 ops/s
[info]                  ·gc.alloc.rate:            554.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   18007382.780 ±(99.9%) 1216810.911 ops/s [Average]
[info]   (min, avg, max) = (17491114.715, 18007382.780, 18316660.599), stdev = 316001.930
[info]   CI (99.9%): [16790571.869, 19224193.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   549.562 ±(99.9%) 38.640 MB/sec [Average]
[info]   (min, avg, max) = (533.432, 549.562, 560.116), stdev = 10.035
[info]   CI (99.9%): [510.923, 588.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.035 ±(99.9%) 0.218 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.035, 48.130), stdev = 0.057
[info]   CI (99.9%): [47.816, 48.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   536.629 ±(99.9%) 1155.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.629, 670.817), stdev = 299.985
[info]   CI (99.9%): [≈ 0, 1691.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   46.903 ±(99.9%) 101.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.903, 60.362), stdev = 26.241
[info]   CI (99.9%): [≈ 0, 147.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 9.400, 12.000), stdev = 5.273
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:48:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_87620646/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 963814.028 ops/s
[info] # Warmup Iteration   2: 5484982.441 ops/s
[info] # Warmup Iteration   3: 5567588.305 ops/s
[info] # Warmup Iteration   4: 5644645.270 ops/s
[info] # Warmup Iteration   5: 5662141.819 ops/s
[info] Iteration   1: 5552552.338 ops/s
[info]                  ·gc.alloc.rate:                   1524.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2019.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        572.299 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   2: 5630276.558 ops/s
[info]                  ·gc.alloc.rate:                   1549.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              433.244 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        377.073 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.303 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 5701901.101 ops/s
[info]                  ·gc.alloc.rate:                   1564.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        374.918 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 5745364.574 ops/s
[info]                  ·gc.alloc.rate:                                  1576.797 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       373.336 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 5739029.087 ops/s
[info]                  ·gc.alloc.rate:            1575.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 560.647 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   5673824.732 ±(99.9%) 314960.998 ops/s [Average]
[info]   (min, avg, max) = (5552552.338, 5673824.732, 5745364.574), stdev = 81794.371
[info]   CI (99.9%): [5358863.733, 5988785.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1558.123 ±(99.9%) 83.968 MB/sec [Average]
[info]   (min, avg, max) = (1524.208, 1558.123, 1576.797), stdev = 21.806
[info]   CI (99.9%): [1474.155, 1642.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.253 ±(99.9%) 2.132 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.253, 433.244), stdev = 0.554
[info]   CI (99.9%): [430.121, 434.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1626.555 ±(99.9%) 1424.493 MB/sec [Average]
[info]   (min, avg, max) = (1348.768, 1626.555, 2044.080), stdev = 369.936
[info]   CI (99.9%): [202.062, 3051.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   451.655 ±(99.9%) 403.946 B/op [Average]
[info]   (min, avg, max) = (373.336, 451.655, 572.299), stdev = 104.903
[info]   CI (99.9%): [47.709, 855.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 8.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.662), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 10.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.519 ±(99.9%) 2.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.519, 1.303), stdev = 0.633
[info]   CI (99.9%): [≈ 0, 2.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.800, 28.000), stdev = 10.402
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8400466.353 ops/s
[info] # Warmup Iteration   2: 19485130.114 ops/s
[info] # Warmup Iteration   3: 20082799.836 ops/s
[info] # Warmup Iteration   4: 19645827.074 ops/s
[info] # Warmup Iteration   5: 19747807.780 ops/s
[info] Iteration   1: 19740435.516 ops/s
[info]                  ·gc.alloc.rate:            601.953 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53.747 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 19885827.170 ops/s
[info]                  ·gc.alloc.rate:      607.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19732801.612 ops/s
[info]                  ·gc.alloc.rate:            603.053 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53.764 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 20363685.929 ops/s
[info]                  ·gc.alloc.rate:            621.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52.099 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 19473330.901 ops/s
[info]                  ·gc.alloc.rate:            593.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54.484 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   19839216.226 ±(99.9%) 1265736.033 ops/s [Average]
[info]   (min, avg, max) = (19473330.901, 19839216.226, 20363685.929), stdev = 328707.628
[info]   CI (99.9%): [18573480.193, 21104952.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   605.496 ±(99.9%) 39.122 MB/sec [Average]
[info]   (min, avg, max) = (593.821, 605.496, 621.472), stdev = 10.160
[info]   CI (99.9%): [566.373, 644.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.042 ±(99.9%) 0.168 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.042, 48.103), stdev = 0.044
[info]   CI (99.9%): [47.874, 48.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.206 ±(99.9%) 1160.682 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.206, 674.037), stdev = 301.426
[info]   CI (99.9%): [≈ 0, 1699.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   42.819 ±(99.9%) 92.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.819, 54.484), stdev = 23.952
[info]   CI (99.9%): [≈ 0, 135.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.400, 8.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11103079.352 ops/s
[info] # Warmup Iteration   2: 21134062.550 ops/s
[info] # Warmup Iteration   3: 21782670.152 ops/s
[info] # Warmup Iteration   4: 21789480.057 ops/s
[info] # Warmup Iteration   5: 21766271.384 ops/s
[info] Iteration   1: 21789447.274 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 21781343.500 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21784743.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21781475.179 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21778631.675 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   21783128.159 ±(99.9%) 15955.238 ops/s [Average]
[info]   (min, avg, max) = (21778631.675, 21783128.159, 21789447.274), stdev = 4143.525
[info]   CI (99.9%): [21767172.921, 21799083.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:48:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79891.476 ops/s
[info] # Warmup Iteration   2: 1355195.940 ops/s
[info] # Warmup Iteration   3: 1400741.158 ops/s
[info] # Warmup Iteration   4: 1422482.423 ops/s
[info] # Warmup Iteration   5: 1406931.489 ops/s
[info] Iteration   1: 1409081.426 ops/s
[info]                  ·gc.alloc.rate:                   2132.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              2382.699 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2270.776 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1466974.547 ops/s
[info]                  ·gc.alloc.rate:                                  2200.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2360.337 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2193.300 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1471116.889 ops/s
[info]                  ·gc.alloc.rate:            2206.096 MB/sec
[info]                  ·gc.alloc.rate.norm:       2360.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2187.195 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1468721.567 ops/s
[info]                  ·gc.alloc.rate:            2203.520 MB/sec
[info]                  ·gc.alloc.rate.norm:       2361.392 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2190.757 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1463744.247 ops/s
[info]                  ·gc.alloc.rate:            2194.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       2360.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2930.962 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1455927.735 ±(99.9%) 101369.602 ops/s [Average]
[info]   (min, avg, max) = (1409081.426, 1455927.735, 1471116.889), stdev = 26325.364
[info]   CI (99.9%): [1354558.133, 1557297.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2187.487 ±(99.9%) 118.635 MB/sec [Average]
[info]   (min, avg, max) = (2132.902, 2187.487, 2206.096), stdev = 30.809
[info]   CI (99.9%): [2068.852, 2306.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2364.897 ±(99.9%) 38.381 B/op [Average]
[info]   (min, avg, max) = (2360.000, 2364.897, 2382.699), stdev = 9.967
[info]   CI (99.9%): [2326.516, 2403.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.122), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.130), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2178.341 ±(99.9%) 1178.359 MB/sec [Average]
[info]   (min, avg, max) = (2032.713, 2178.341, 2725.683), stdev = 306.016
[info]   CI (99.9%): [999.982, 3356.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2354.598 ±(99.9%) 1247.909 B/op [Average]
[info]   (min, avg, max) = (2187.195, 2354.598, 2930.962), stdev = 324.078
[info]   CI (99.9%): [1106.689, 3602.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.190 ±(99.9%) 10.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.190, 5.952), stdev = 2.662
[info]   CI (99.9%): [≈ 0, 11.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 14.000), stdev = 4.219
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:47:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107290.315 ops/s
[info] # Warmup Iteration   2: 245384.722 ops/s
[info] # Warmup Iteration   3: 250535.821 ops/s
[info] # Warmup Iteration   4: 250205.545 ops/s
[info] # Warmup Iteration   5: 250091.908 ops/s
[info] Iteration   1: 250108.354 ops/s
[info]                  ·gc.alloc.rate:            1372.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       8634.773 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8484.181 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 251749.480 ops/s
[info]                  ·gc.alloc.rate:            1381.020 MB/sec
[info]                  ·gc.alloc.rate.norm:       8634.387 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8428.853 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 245170.493 ops/s
[info]                  ·gc.alloc.rate:                   1344.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              8632.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4344.727 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.829 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 250915.858 ops/s
[info]                  ·gc.alloc.rate:                                  1376.921 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8637.489 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.275 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12807.080 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.714 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 254069.889 ops/s
[info]                  ·gc.alloc.rate:            1393.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       8632.521 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8442.980 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   250402.815 ±(99.9%) 12623.427 ops/s [Average]
[info]   (min, avg, max) = (245170.493, 250402.815, 254069.889), stdev = 3278.264
[info]   CI (99.9%): [237779.388, 263026.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1373.544 ±(99.9%) 69.672 MB/sec [Average]
[info]   (min, avg, max) = (1344.404, 1373.544, 1393.314), stdev = 18.094
[info]   CI (99.9%): [1303.873, 1443.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8634.235 ±(99.9%) 8.354 B/op [Average]
[info]   (min, avg, max) = (8632.002, 8634.235, 8637.489), stdev = 2.170
[info]   CI (99.9%): [8625.880, 8642.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.055 ±(99.9%) 0.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.275), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1355.456 ±(99.9%) 1858.412 MB/sec [Average]
[info]   (min, avg, max) = (676.676, 1355.456, 2041.605), stdev = 482.624
[info]   CI (99.9%): [≈ 0, 3213.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8501.564 ±(99.9%) 11523.945 B/op [Average]
[info]   (min, avg, max) = (4344.727, 8501.564, 12807.080), stdev = 2992.732
[info]   CI (99.9%): [≈ 0, 20025.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 2.664), stdev = 1.298
[info]   CI (99.9%): [≈ 0, 5.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   5.909 ±(99.9%) 31.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.909, 16.714), stdev = 8.206
[info]   CI (99.9%): [≈ 0, 37.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.000, 16.000), stdev = 5.477
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149058.772 ops/s
[info] # Warmup Iteration   2: 376007.603 ops/s
[info] # Warmup Iteration   3: 393637.728 ops/s
[info] # Warmup Iteration   4: 389526.410 ops/s
[info] # Warmup Iteration   5: 388728.881 ops/s
[info] Iteration   1: 389766.506 ops/s
[info]                  ·gc.alloc.rate:            493.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       1992.686 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2716.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 393631.716 ops/s
[info]                  ·gc.alloc.rate:      498.143 MB/sec
[info]                  ·gc.alloc.rate.norm: 1992.047 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 402131.909 ops/s
[info]                  ·gc.alloc.rate:            510.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       1997.353 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2633.185 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 402127.661 ops/s
[info]                  ·gc.alloc.rate:            508.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       1992.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2633.237 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 399220.713 ops/s
[info]                  ·gc.alloc.rate:            521.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       2054.530 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2652.296 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   397375.701 ±(99.9%) 21136.841 ops/s [Average]
[info]   (min, avg, max) = (389766.506, 397375.701, 402131.909), stdev = 5489.171
[info]   CI (99.9%): [376238.860, 418512.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   506.388 ±(99.9%) 41.872 MB/sec [Average]
[info]   (min, avg, max) = (493.485, 506.388, 521.119), stdev = 10.874
[info]   CI (99.9%): [464.517, 548.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2005.751 ±(99.9%) 105.343 B/op [Average]
[info]   (min, avg, max) = (1992.047, 2005.751, 2054.530), stdev = 27.357
[info]   CI (99.9%): [1900.409, 2111.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.187 ±(99.9%) 1158.488 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.187, 672.786), stdev = 300.856
[info]   CI (99.9%): [≈ 0, 1696.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2127.084 ±(99.9%) 4580.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2127.084, 2716.699), stdev = 1189.570
[info]   CI (99.9%): [≈ 0, 6707.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.600, 10.000), stdev = 4.278
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 705612.946 ops/s
[info] # Warmup Iteration   2: 955377.310 ops/s
[info] # Warmup Iteration   3: 976607.663 ops/s
[info] # Warmup Iteration   4: 979513.611 ops/s
[info] # Warmup Iteration   5: 984349.230 ops/s
[info] Iteration   1: 984905.234 ops/s
[info]                  ·gc.alloc.rate:            655.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1077.247 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 973169.771 ops/s
[info]                  ·gc.alloc.rate:            649.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       1051.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1090.239 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 940605.278 ops/s
[info]                  ·gc.alloc.rate:            634.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       1061.478 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1127.984 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 966780.698 ops/s
[info]                  ·gc.alloc.rate:            643.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1097.398 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 961040.594 ops/s
[info]                  ·gc.alloc.rate:            646.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       1059.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1103.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   965300.315 ±(99.9%) 63168.837 ops/s [Average]
[info]   (min, avg, max) = (940605.278, 965300.315, 984905.234), stdev = 16404.746
[info]   CI (99.9%): [902131.478, 1028469.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   646.039 ±(99.9%) 30.509 MB/sec [Average]
[info]   (min, avg, max) = (634.297, 646.039, 655.701), stdev = 7.923
[info]   CI (99.9%): [615.530, 676.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1053.568 ±(99.9%) 24.671 B/op [Average]
[info]   (min, avg, max) = (1048.001, 1053.568, 1061.478), stdev = 6.407
[info]   CI (99.9%): [1028.897, 1078.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.017 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (673.984, 674.017, 674.044), stdev = 0.025
[info]   CI (99.9%): [673.920, 674.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1099.373 ±(99.9%) 72.472 B/op [Average]
[info]   (min, avg, max) = (1077.247, 1099.373, 1127.984), stdev = 18.821
[info]   CI (99.9%): [1026.901, 1171.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25073.775 ops/s
[info] # Warmup Iteration   2: 73601.239 ops/s
[info] # Warmup Iteration   3: 73644.775 ops/s
[info] # Warmup Iteration   4: 78341.859 ops/s
[info] # Warmup Iteration   5: 78314.193 ops/s
[info] Iteration   1: 79606.477 ops/s
[info]                  ·gc.alloc.rate:                                  2439.211 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48233.616 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40391.643 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                26.340 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 80241.322 ops/s
[info]                  ·gc.alloc.rate:                                  2459.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48245.586 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53461.581 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 79972.903 ops/s
[info]                  ·gc.alloc.rate:            2456.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       48344.839 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53644.050 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 80638.406 ops/s
[info]                  ·gc.alloc.rate:                                  2471.472 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48238.755 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39900.311 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 80351.576 ops/s
[info]                  ·gc.alloc.rate:            2465.751 MB/sec
[info]                  ·gc.alloc.rate.norm:       48294.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53391.066 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   80162.137 ±(99.9%) 1508.102 ops/s [Average]
[info]   (min, avg, max) = (79606.477, 80162.137, 80638.406), stdev = 391.649
[info]   CI (99.9%): [78654.035, 81670.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2458.490 ±(99.9%) 47.045 MB/sec [Average]
[info]   (min, avg, max) = (2439.211, 2458.490, 2471.472), stdev = 12.218
[info]   CI (99.9%): [2411.445, 2505.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   48271.383 ±(99.9%) 183.353 B/op [Average]
[info]   (min, avg, max) = (48233.616, 48271.383, 48344.839), stdev = 47.616
[info]   CI (99.9%): [48088.031, 48454.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.070), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2452.814 ±(99.9%) 1438.982 MB/sec [Average]
[info]   (min, avg, max) = (2042.637, 2452.814, 2725.986), stdev = 373.699
[info]   CI (99.9%): [1013.832, 3891.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   48157.730 ±(99.9%) 28172.627 B/op [Average]
[info]   (min, avg, max) = (39900.311, 48157.730, 53644.050), stdev = 7316.342
[info]   CI (99.9%): [19985.103, 76330.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.268 ±(99.9%) 45.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.268, 26.340), stdev = 11.779
[info]   CI (99.9%): [≈ 0, 50.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:46:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146387.155 ops/s
[info] # Warmup Iteration   2: 300635.526 ops/s
[info] # Warmup Iteration   3: 312391.951 ops/s
[info] # Warmup Iteration   4: 304213.163 ops/s
[info] # Warmup Iteration   5: 303268.637 ops/s
[info] Iteration   1: 303107.555 ops/s
[info]                  ·gc.alloc.rate:      470.021 MB/sec
[info]                  ·gc.alloc.rate.norm: 2440.214 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 300217.001 ops/s
[info]                  ·gc.alloc.rate:            465.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       2441.439 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3533.886 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 299465.733 ops/s
[info]                  ·gc.alloc.rate:                   465.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              2448.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3539.470 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 303497.064 ops/s
[info]                  ·gc.alloc.rate:      470.501 MB/sec
[info]                  ·gc.alloc.rate.norm: 2440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 309274.790 ops/s
[info]                  ·gc.alloc.rate:            479.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       2440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3430.630 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   303112.429 ±(99.9%) 14889.171 ops/s [Average]
[info]   (min, avg, max) = (299465.733, 303112.429, 309274.790), stdev = 3866.670
[info]   CI (99.9%): [288223.258, 318001.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   470.302 ±(99.9%) 21.836 MB/sec [Average]
[info]   (min, avg, max) = (465.610, 470.302, 479.585), stdev = 5.671
[info]   CI (99.9%): [448.466, 492.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2441.989 ±(99.9%) 13.757 B/op [Average]
[info]   (min, avg, max) = (2440.001, 2441.989, 2448.290), stdev = 3.573
[info]   CI (99.9%): [2428.232, 2455.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.328 ±(99.9%) 1421.271 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.328, 674.294), stdev = 369.099
[info]   CI (99.9%): [≈ 0, 1825.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2100.797 ±(99.9%) 7386.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2100.797, 3539.470), stdev = 1918.246
[info]   CI (99.9%): [≈ 0, 9487.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.700 ±(99.9%) 6.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 3.501), stdev = 1.566
[info]   CI (99.9%): [≈ 0, 6.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272443.190 ops/s
[info] # Warmup Iteration   2: 798917.918 ops/s
[info] # Warmup Iteration   3: 849230.883 ops/s
[info] # Warmup Iteration   4: 846853.460 ops/s
[info] # Warmup Iteration   5: 844627.354 ops/s
[info] Iteration   1: 855391.945 ops/s
[info]                  ·gc.alloc.rate:      617.328 MB/sec
[info]                  ·gc.alloc.rate.norm: 1136.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 848648.201 ops/s
[info]                  ·gc.alloc.rate:            612.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1247.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 845055.550 ops/s
[info]                  ·gc.alloc.rate:            612.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       1140.638 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1252.984 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 849395.679 ops/s
[info]                  ·gc.alloc.rate:            613.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1246.567 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 846349.663 ops/s
[info]                  ·gc.alloc.rate:            615.512 MB/sec
[info]                  ·gc.alloc.rate.norm:       1144.672 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1251.183 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   848968.207 ±(99.9%) 15368.267 ops/s [Average]
[info]   (min, avg, max) = (845055.550, 848968.207, 855391.945), stdev = 3991.090
[info]   CI (99.9%): [833599.940, 864336.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   614.171 ±(99.9%) 8.337 MB/sec [Average]
[info]   (min, avg, max) = (612.461, 614.171, 617.328), stdev = 2.165
[info]   CI (99.9%): [605.834, 622.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1138.677 ±(99.9%) 15.023 B/op [Average]
[info]   (min, avg, max) = (1136.001, 1138.677, 1144.672), stdev = 3.901
[info]   CI (99.9%): [1123.654, 1153.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.194 ±(99.9%) 1158.504 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.194, 672.786), stdev = 300.860
[info]   CI (99.9%): [≈ 0, 1696.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   999.686 ±(99.9%) 2151.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 999.686, 1252.984), stdev = 558.848
[info]   CI (99.9%): [≈ 0, 3151.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.600, 10.000), stdev = 4.278
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1446352.230 ops/s
[info] # Warmup Iteration   2: 2026370.195 ops/s
[info] # Warmup Iteration   3: 1993075.697 ops/s
[info] # Warmup Iteration   4: 2046840.897 ops/s
[info] # Warmup Iteration   5: 2052487.948 ops/s
[info] Iteration   1: 2047823.599 ops/s
[info]                  ·gc.alloc.rate:            946.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1036.240 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 2073052.730 ops/s
[info]                  ·gc.alloc.rate:            959.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 511.800 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 2046668.624 ops/s
[info]                  ·gc.alloc.rate:            946.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1036.815 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   4: 2050268.314 ops/s
[info]                  ·gc.alloc.rate:            948.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 517.470 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 2061575.643 ops/s
[info]                  ·gc.alloc.rate:            953.471 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 514.653 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2055877.782 ±(99.9%) 43419.705 ops/s [Average]
[info]   (min, avg, max) = (2046668.624, 2055877.782, 2073052.730), stdev = 11275.959
[info]   CI (99.9%): [2012458.077, 2099297.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   950.924 ±(99.9%) 20.323 MB/sec [Average]
[info]   (min, avg, max) = (946.909, 950.924, 959.040), stdev = 5.278
[info]   CI (99.9%): [930.601, 971.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.016 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.016, 728.081), stdev = 0.036
[info]   CI (99.9%): [727.877, 728.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.726 ±(99.9%) 1421.670 MB/sec [Average]
[info]   (min, avg, max) = (674.022, 943.726, 1348.433), stdev = 369.203
[info]   CI (99.9%): [≈ 0, 2365.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   723.396 ±(99.9%) 1100.730 B/op [Average]
[info]   (min, avg, max) = (511.800, 723.396, 1036.815), stdev = 285.856
[info]   CI (99.9%): [≈ 0, 1824.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 11.200, 17.000), stdev = 5.310
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1807622.015 ops/s
[info] # Warmup Iteration   2: 2204760.320 ops/s
[info] # Warmup Iteration   3: 2319764.350 ops/s
[info] # Warmup Iteration   4: 2291890.972 ops/s
[info] # Warmup Iteration   5: 2318707.161 ops/s
[info] Iteration   1: 2320700.117 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2313800.748 ops/s
[info]                  ·gc.alloc.rate:      0.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.307 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2313129.707 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2313875.507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2315430.606 ops/s
[info]                  ·gc.alloc.rate:      0.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2315387.337 ±(99.9%) 11888.343 ops/s [Average]
[info]   (min, avg, max) = (2313129.707, 2315387.337, 2320700.117), stdev = 3087.365
[info]   CI (99.9%): [2303498.994, 2327275.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.091 ±(99.9%) 0.776 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.091, 0.451), stdev = 0.202
[info]   CI (99.9%): [≈ 0, 0.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.062 ±(99.9%) 0.528 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.062, 0.307), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:46:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198706.931 ops/s
[info] # Warmup Iteration   2: 404434.327 ops/s
[info] # Warmup Iteration   3: 411863.311 ops/s
[info] # Warmup Iteration   4: 415207.336 ops/s
[info] # Warmup Iteration   5: 405317.951 ops/s
[info] Iteration   1: 411684.170 ops/s
[info]                  ·gc.alloc.rate:                   594.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              2272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2572.211 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.547 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 417440.725 ops/s
[info]                  ·gc.alloc.rate:            604.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       2277.751 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2539.199 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 420857.188 ops/s
[info]                  ·gc.alloc.rate:            608.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       2276.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2518.478 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 421589.282 ops/s
[info]                  ·gc.alloc.rate:                   608.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              2272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2511.714 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.487 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 421438.882 ops/s
[info]                  ·gc.alloc.rate:            608.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       2272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2515.161 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   418602.049 ±(99.9%) 16253.020 ops/s [Average]
[info]   (min, avg, max) = (411684.170, 418602.049, 421589.282), stdev = 4220.858
[info]   CI (99.9%): [402349.030, 434855.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   604.818 ±(99.9%) 23.843 MB/sec [Average]
[info]   (min, avg, max) = (594.313, 604.818, 608.838), stdev = 6.192
[info]   CI (99.9%): [580.975, 628.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2273.995 ±(99.9%) 10.716 B/op [Average]
[info]   (min, avg, max) = (2272.001, 2273.995, 2277.751), stdev = 2.783
[info]   CI (99.9%): [2263.279, 2284.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   673.214 ±(99.9%) 1.483 MB/sec [Average]
[info]   (min, avg, max) = (672.768, 673.214, 673.636), stdev = 0.385
[info]   CI (99.9%): [671.731, 674.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2531.353 ±(99.9%) 97.121 B/op [Average]
[info]   (min, avg, max) = (2511.714, 2531.353, 2572.211), stdev = 25.222
[info]   CI (99.9%): [2434.232, 2628.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.007 ±(99.9%) 5.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.007, 2.547), stdev = 1.379
[info]   CI (99.9%): [≈ 0, 6.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8357.870 ops/s
[info] # Warmup Iteration   2: 16055.973 ops/s
[info] # Warmup Iteration   3: 15942.121 ops/s
[info] # Warmup Iteration   4: 16530.883 ops/s
[info] # Warmup Iteration   5: 16245.990 ops/s
[info] Iteration   1: 16474.229 ops/s
[info]                  ·gc.alloc.rate:            1104.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       105560.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 128677.591 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 16526.011 ops/s
[info]                  ·gc.alloc.rate:                   1115.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              106250.909 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        64136.387 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.439 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 16307.545 ops/s
[info]                  ·gc.alloc.rate:            1098.268 MB/sec
[info]                  ·gc.alloc.rate.norm:       106008.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130051.453 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 16593.750 ops/s
[info]                  ·gc.alloc.rate:                   1112.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              105557.412 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        128063.117 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 442.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 16687.522 ops/s
[info]                  ·gc.alloc.rate:                   1119.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              105551.720 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        63957.482 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 251.306 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   16517.811 ±(99.9%) 547.099 ops/s [Average]
[info]   (min, avg, max) = (16307.545, 16517.811, 16687.522), stdev = 142.080
[info]   CI (99.9%): [15970.712, 17064.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1110.178 ±(99.9%) 32.795 MB/sec [Average]
[info]   (min, avg, max) = (1098.268, 1110.178, 1119.421), stdev = 8.517
[info]   CI (99.9%): [1077.383, 1142.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   105785.643 ±(99.9%) 1253.225 B/op [Average]
[info]   (min, avg, max) = (105551.720, 105785.643, 106250.909), stdev = 325.459
[info]   CI (99.9%): [104532.418, 107038.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1079.188 ±(99.9%) 1417.896 MB/sec [Average]
[info]   (min, avg, max) = (673.356, 1079.188, 1350.033), stdev = 368.223
[info]   CI (99.9%): [≈ 0, 2497.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   102977.206 ±(99.9%) 136873.679 B/op [Average]
[info]   (min, avg, max) = (63957.482, 102977.206, 130051.453), stdev = 35545.660
[info]   CI (99.9%): [≈ 0, 239850.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 9.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   151.399 ±(99.9%) 741.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 151.399, 442.251), stdev = 192.455
[info]   CI (99.9%): [≈ 0, 892.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.400, 16.000), stdev = 4.930
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8776.371 ops/s
[info] # Warmup Iteration   2: 27212.481 ops/s
[info] # Warmup Iteration   3: 27692.714 ops/s
[info] # Warmup Iteration   4: 28116.724 ops/s
[info] # Warmup Iteration   5: 27983.357 ops/s
[info] Iteration   1: 27748.576 ops/s
[info]                  ·gc.alloc.rate:            697.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       39562.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38158.887 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 27981.928 ops/s
[info]                  ·gc.alloc.rate:            701.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       39445.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37842.556 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 28104.806 ops/s
[info]                  ·gc.alloc.rate:            703.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       39393.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37674.283 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 28131.888 ops/s
[info]                  ·gc.alloc.rate:            703.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       39384.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37639.470 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 28133.215 ops/s
[info]                  ·gc.alloc.rate:            703.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       39384.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37638.132 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   28020.083 ±(99.9%) 631.696 ops/s [Average]
[info]   (min, avg, max) = (27748.576, 28020.083, 28133.215), stdev = 164.050
[info]   CI (99.9%): [27388.386, 28651.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   701.945 ±(99.9%) 10.716 MB/sec [Average]
[info]   (min, avg, max) = (697.377, 701.945, 703.875), stdev = 2.783
[info]   CI (99.9%): [691.229, 712.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39433.818 ±(99.9%) 293.357 B/op [Average]
[info]   (min, avg, max) = (39384.014, 39433.818, 39562.286), stdev = 76.184
[info]   CI (99.9%): [39140.461, 39727.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.684 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (672.639, 672.684, 672.717), stdev = 0.031
[info]   CI (99.9%): [672.565, 672.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   37790.665 ±(99.9%) 856.609 B/op [Average]
[info]   (min, avg, max) = (37638.132, 37790.665, 38158.887), stdev = 222.459
[info]   CI (99.9%): [36934.056, 38647.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28200.719 ops/s
[info] # Warmup Iteration   2: 41946.241 ops/s
[info] # Warmup Iteration   3: 42184.162 ops/s
[info] # Warmup Iteration   4: 42599.267 ops/s
[info] # Warmup Iteration   5: 42628.976 ops/s
[info] Iteration   1: 43132.870 ops/s
[info]                  ·gc.alloc.rate:      579.376 MB/sec
[info]                  ·gc.alloc.rate.norm: 21144.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42408.394 ops/s
[info]                  ·gc.alloc.rate:            571.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       21204.231 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25017.892 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 42699.056 ops/s
[info]                  ·gc.alloc.rate:            573.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       21152.241 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24848.005 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 42616.355 ops/s
[info]                  ·gc.alloc.rate:            572.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24895.808 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 42725.905 ops/s
[info]                  ·gc.alloc.rate:            573.885 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24832.887 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   42716.516 ±(99.9%) 1016.445 ops/s [Average]
[info]   (min, avg, max) = (42408.394, 42716.516, 43132.870), stdev = 263.968
[info]   CI (99.9%): [41700.071, 43732.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   574.154 ±(99.9%) 11.963 MB/sec [Average]
[info]   (min, avg, max) = (571.272, 574.154, 579.376), stdev = 3.107
[info]   CI (99.9%): [562.191, 586.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21157.701 ±(99.9%) 101.096 B/op [Average]
[info]   (min, avg, max) = (21144.010, 21157.701, 21204.231), stdev = 26.254
[info]   CI (99.9%): [21056.604, 21258.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.218 ±(99.9%) 1160.708 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.218, 674.060), stdev = 301.432
[info]   CI (99.9%): [≈ 0, 1699.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   19918.918 ±(99.9%) 42877.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19918.918, 25017.892), stdev = 11135.251
[info]   CI (99.9%): [≈ 0, 62796.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 8.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:45:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6705.082 ops/s
[info] # Warmup Iteration   2: 22421.114 ops/s
[info] # Warmup Iteration   3: 24146.190 ops/s
[info] # Warmup Iteration   4: 24350.927 ops/s
[info] # Warmup Iteration   5: 23905.799 ops/s
[info] Iteration   1: 23887.578 ops/s
[info]                  ·gc.alloc.rate:                   1176.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              77531.514 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        88697.978 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.888 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 23983.458 ops/s
[info]                  ·gc.alloc.rate:            1176.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       77218.362 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88386.721 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 23897.764 ops/s
[info]                  ·gc.alloc.rate:                   1172.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              77230.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        88657.160 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 219.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 24258.476 ops/s
[info]                  ·gc.alloc.rate:                   1190.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              77230.465 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        43865.336 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 86.434 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 24208.129 ops/s
[info]                  ·gc.alloc.rate:                   1187.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              77216.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        88301.593 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 259.838 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   24047.081 ±(99.9%) 673.613 ops/s [Average]
[info]   (min, avg, max) = (23887.578, 24047.081, 24258.476), stdev = 174.935
[info]   CI (99.9%): [23373.468, 24720.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1180.760 ±(99.9%) 29.516 MB/sec [Average]
[info]   (min, avg, max) = (1172.582, 1180.760, 1190.232), stdev = 7.665
[info]   CI (99.9%): [1151.244, 1210.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77285.297 ±(99.9%) 530.612 B/op [Average]
[info]   (min, avg, max) = (77216.017, 77285.297, 77531.514), stdev = 137.798
[info]   CI (99.9%): [76754.685, 77815.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1214.650 ±(99.9%) 1159.587 MB/sec [Average]
[info]   (min, avg, max) = (676.028, 1214.650, 1358.020), stdev = 301.141
[info]   CI (99.9%): [55.063, 2374.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79581.758 ±(99.9%) 76885.078 B/op [Average]
[info]   (min, avg, max) = (43865.336, 79581.758, 88697.978), stdev = 19966.811
[info]   CI (99.9%): [2696.679, 156466.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 6.638 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 3.996), stdev = 1.724
[info]   CI (99.9%): [≈ 0, 8.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   121.900 ±(99.9%) 433.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 121.900, 259.838), stdev = 112.611
[info]   CI (99.9%): [≈ 0, 555.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 13.800, 19.000), stdev = 6.221
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8384.950 ops/s
[info] # Warmup Iteration   2: 21407.815 ops/s
[info] # Warmup Iteration   3: 22306.755 ops/s
[info] # Warmup Iteration   4: 22584.608 ops/s
[info] # Warmup Iteration   5: 22539.299 ops/s
[info] Iteration   1: 21561.002 ops/s
[info]                  ·gc.alloc.rate:                   1240.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              90558.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98361.738 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 22574.020 ops/s
[info]                  ·gc.alloc.rate:                   1287.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              89754.385 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        93952.930 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 46.442 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 22571.218 ops/s
[info]                  ·gc.alloc.rate:                   1284.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              89577.860 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        94011.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 185.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 22772.710 ops/s
[info]                  ·gc.alloc.rate:                   1296.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              89573.657 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        93638.477 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 276.220 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 22934.223 ops/s
[info]                  ·gc.alloc.rate:                                  1305.673 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89586.932 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.970 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       93480.009 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                45.711 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   22482.634 ±(99.9%) 2067.980 ops/s [Average]
[info]   (min, avg, max) = (21561.002, 22482.634, 22934.223), stdev = 537.048
[info]   CI (99.9%): [20414.655, 24550.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1282.988 ±(99.9%) 96.861 MB/sec [Average]
[info]   (min, avg, max) = (1240.462, 1282.988, 1305.673), stdev = 25.154
[info]   CI (99.9%): [1186.127, 1379.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89810.253 ±(99.9%) 1636.797 B/op [Average]
[info]   (min, avg, max) = (89573.657, 89810.253, 90558.427), stdev = 425.071
[info]   CI (99.9%): [88173.455, 91447.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.102), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.394 ±(99.9%) 12.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.394, 6.970), stdev = 3.117
[info]   CI (99.9%): [≈ 0, 13.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1352.246 ±(99.9%) 25.312 MB/sec [Average]
[info]   (min, avg, max) = (1347.351, 1352.246, 1362.412), stdev = 6.573
[info]   CI (99.9%): [1326.934, 1377.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   94689.003 ±(99.9%) 7951.039 B/op [Average]
[info]   (min, avg, max) = (93480.009, 94689.003, 98361.738), stdev = 2064.859
[info]   CI (99.9%): [86737.965, 102640.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 5.907 MB/sec [Average]
[info]   (min, avg, max) = (0.666, 1.732, 3.998), stdev = 1.534
[info]   CI (99.9%): [≈ 0, 7.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   120.558 ±(99.9%) 407.315 B/op [Average]
[info]   (min, avg, max) = (45.711, 120.558, 276.220), stdev = 105.778
[info]   CI (99.9%): [≈ 0, 527.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.800, 17.000), stdev = 6.017
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6498.122 ops/s
[info] # Warmup Iteration   2: 19293.937 ops/s
[info] # Warmup Iteration   3: 21155.123 ops/s
[info] # Warmup Iteration   4: 21389.013 ops/s
[info] # Warmup Iteration   5: 21269.802 ops/s
[info] Iteration   1: 21098.238 ops/s
[info]                  ·gc.alloc.rate:            1163.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       86752.791 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 100375.487 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 21305.637 ops/s
[info]                  ·gc.alloc.rate:                   1170.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              86440.240 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99449.627 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 21468.909 ops/s
[info]                  ·gc.alloc.rate:            1178.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       86416.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49320.624 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 21271.062 ops/s
[info]                  ·gc.alloc.rate:                   1168.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              86431.880 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99801.015 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 344.991 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 21476.392 ops/s
[info]                  ·gc.alloc.rate:                   1179.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              86422.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99536.614 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 292.898 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   21324.048 ±(99.9%) 603.736 ops/s [Average]
[info]   (min, avg, max) = (21098.238, 21324.048, 21476.392), stdev = 156.788
[info]   CI (99.9%): [20720.312, 21927.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1171.826 ±(99.9%) 26.744 MB/sec [Average]
[info]   (min, avg, max) = (1163.083, 1171.826, 1179.000), stdev = 6.945
[info]   CI (99.9%): [1145.082, 1198.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86492.586 ±(99.9%) 561.246 B/op [Average]
[info]   (min, avg, max) = (86416.019, 86492.586, 86752.791), stdev = 145.754
[info]   CI (99.9%): [85931.340, 87053.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1214.294 ±(99.9%) 1165.834 MB/sec [Average]
[info]   (min, avg, max) = (672.765, 1214.294, 1357.914), stdev = 302.763
[info]   CI (99.9%): [48.460, 2380.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   89696.673 ±(99.9%) 86923.642 B/op [Average]
[info]   (min, avg, max) = (49320.624, 89696.673, 100375.487), stdev = 22573.794
[info]   CI (99.9%): [2773.031, 176620.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 8.772 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.662), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 10.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   137.420 ±(99.9%) 646.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 137.420, 344.991), stdev = 167.935
[info]   CI (99.9%): [≈ 0, 784.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 14.000, 19.000), stdev = 5.292
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14822.984 ops/s
[info] # Warmup Iteration   2: 24793.667 ops/s
[info] # Warmup Iteration   3: 25015.472 ops/s
[info] # Warmup Iteration   4: 25116.946 ops/s
[info] # Warmup Iteration   5: 24916.762 ops/s
[info] Iteration   1: 25447.429 ops/s
[info]                  ·gc.alloc.rate:                   1349.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              83490.490 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83343.912 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 25458.143 ops/s
[info]                  ·gc.alloc.rate:                   1350.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              83480.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83304.636 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 25553.141 ops/s
[info]                  ·gc.alloc.rate:                   1355.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              83488.714 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83200.130 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 246.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 25862.872 ops/s
[info]                  ·gc.alloc.rate:                   1372.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              83484.978 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82692.711 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 202.678 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 25895.415 ops/s
[info]                  ·gc.alloc.rate:                                  1373.397 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83480.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.869 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82833.455 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   25643.400 ±(99.9%) 844.843 ops/s [Average]
[info]   (min, avg, max) = (25447.429, 25643.400, 25895.415), stdev = 219.403
[info]   CI (99.9%): [24798.557, 26488.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1360.149 ±(99.9%) 45.035 MB/sec [Average]
[info]   (min, avg, max) = (1349.793, 1360.149, 1373.397), stdev = 11.695
[info]   CI (99.9%): [1315.114, 1405.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   83484.843 ±(99.9%) 18.615 B/op [Average]
[info]   (min, avg, max) = (83480.016, 83484.843, 83490.490), stdev = 4.834
[info]   CI (99.9%): [83466.228, 83503.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.574 ±(99.9%) 4.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.574, 2.869), stdev = 1.283
[info]   CI (99.9%): [≈ 0, 5.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1353.439 ±(99.9%) 27.190 MB/sec [Average]
[info]   (min, avg, max) = (1347.280, 1353.439, 1362.760), stdev = 7.061
[info]   CI (99.9%): [1326.249, 1380.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   83074.969 ±(99.9%) 1131.186 B/op [Average]
[info]   (min, avg, max) = (82692.711, 83074.969, 83343.912), stdev = 293.766
[info]   CI (99.9%): [81943.782, 84206.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 6.930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.996), stdev = 1.800
[info]   CI (99.9%): [≈ 0, 8.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   106.242 ±(99.9%) 424.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.242, 246.154), stdev = 110.257
[info]   CI (99.9%): [≈ 0, 530.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.800, 16.000), stdev = 5.891
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:44:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14378.416 ops/s
[info] # Warmup Iteration   2: 25463.988 ops/s
[info] # Warmup Iteration   3: 25409.383 ops/s
[info] # Warmup Iteration   4: 25548.719 ops/s
[info] # Warmup Iteration   5: 25393.525 ops/s
[info] Iteration   1: 25612.049 ops/s
[info]                  ·gc.alloc.rate:                   1275.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              78376.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82807.091 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.933 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 25659.758 ops/s
[info]                  ·gc.alloc.rate:            1278.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       78404.477 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82689.855 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 25589.112 ops/s
[info]                  ·gc.alloc.rate:                   1274.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              78376.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82881.505 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 204.848 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 25456.576 ops/s
[info]                  ·gc.alloc.rate:                   1270.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              78545.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83767.471 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 288.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 25961.720 ops/s
[info]                  ·gc.alloc.rate:                                  1292.778 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78376.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.385 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82616.547 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   25655.843 ±(99.9%) 719.500 ops/s [Average]
[info]   (min, avg, max) = (25456.576, 25655.843, 25961.720), stdev = 186.852
[info]   CI (99.9%): [24936.343, 26375.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1278.288 ±(99.9%) 33.068 MB/sec [Average]
[info]   (min, avg, max) = (1270.424, 1278.288, 1292.778), stdev = 8.588
[info]   CI (99.9%): [1245.220, 1311.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78415.505 ±(99.9%) 282.759 B/op [Average]
[info]   (min, avg, max) = (78376.016, 78415.505, 78545.000), stdev = 73.432
[info]   CI (99.9%): [78132.747, 78698.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.477 ±(99.9%) 4.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.477, 2.385), stdev = 1.067
[info]   CI (99.9%): [≈ 0, 4.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1352.220 ±(99.9%) 25.517 MB/sec [Average]
[info]   (min, avg, max) = (1347.445, 1352.220, 1362.724), stdev = 6.627
[info]   CI (99.9%): [1326.703, 1377.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   82952.494 ±(99.9%) 1798.099 B/op [Average]
[info]   (min, avg, max) = (82616.547, 82952.494, 83767.471), stdev = 466.961
[info]   CI (99.9%): [81154.395, 84750.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   106.813 ±(99.9%) 508.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.813, 288.285), stdev = 132.005
[info]   CI (99.9%): [≈ 0, 615.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.200, 16.000), stdev = 5.495
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2338.549 ops/s
[info] # Warmup Iteration   2: 6334.012 ops/s
[info] # Warmup Iteration   3: 7316.473 ops/s
[info] # Warmup Iteration   4: 7235.403 ops/s
[info] # Warmup Iteration   5: 7316.679 ops/s
[info] Iteration   1: 7263.026 ops/s
[info]                  ·gc.alloc.rate:            951.240 MB/sec
[info]                  ·gc.alloc.rate.norm:       206166.926 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 291736.247 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 7329.159 ops/s
[info]                  ·gc.alloc.rate:                   960.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        144463.478 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 143.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 7325.605 ops/s
[info]                  ·gc.alloc.rate:            959.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       206144.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144685.456 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 7181.261 ops/s
[info]                  ·gc.alloc.rate:                   940.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              206191.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        294880.067 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 145.980 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 7317.511 ops/s
[info]                  ·gc.alloc.rate:            959.300 MB/sec
[info]                  ·gc.alloc.rate.norm:       206336.695 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144843.604 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7283.312 ±(99.9%) 242.667 ops/s [Average]
[info]   (min, avg, max) = (7181.261, 7283.312, 7329.159), stdev = 63.020
[info]   CI (99.9%): [7040.645, 7525.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   954.187 ±(99.9%) 32.254 MB/sec [Average]
[info]   (min, avg, max) = (940.711, 954.187, 960.212), stdev = 8.376
[info]   CI (99.9%): [921.933, 986.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   206196.553 ±(99.9%) 310.807 B/op [Average]
[info]   (min, avg, max) = (206144.056, 206196.553, 206336.695), stdev = 80.716
[info]   CI (99.9%): [205885.746, 206507.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   942.225 ±(99.9%) 1418.258 MB/sec [Average]
[info]   (min, avg, max) = (672.906, 942.225, 1346.051), stdev = 368.317
[info]   CI (99.9%): [≈ 0, 2360.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   204121.770 ±(99.9%) 313532.360 B/op [Average]
[info]   (min, avg, max) = (144463.478, 204121.770, 294880.067), stdev = 81423.358
[info]   CI (99.9%): [≈ 0, 517654.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   57.803 ±(99.9%) 304.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.803, 145.980), stdev = 79.156
[info]   CI (99.9%): [≈ 0, 362.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.400, 18.000), stdev = 4.669
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8551.716 ops/s
[info] # Warmup Iteration   2: 17152.636 ops/s
[info] # Warmup Iteration   3: 17100.494 ops/s
[info] # Warmup Iteration   4: 17254.671 ops/s
[info] # Warmup Iteration   5: 17235.823 ops/s
[info] Iteration   1: 17189.119 ops/s
[info]                  ·gc.alloc.rate:                   1328.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              121628.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        123386.997 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 60.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 17119.450 ops/s
[info]                  ·gc.alloc.rate:                   1334.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              122718.665 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        123876.971 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 61.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 17250.233 ops/s
[info]                  ·gc.alloc.rate:                   1334.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              121813.948 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        123247.486 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 425.410 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 17500.493 ops/s
[info]                  ·gc.alloc.rate:                   1350.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              121488.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        122265.974 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 239.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 17553.577 ops/s
[info]                  ·gc.alloc.rate:                                  1355.364 MB/sec
[info]                  ·gc.alloc.rate.norm:                             121488.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       122188.546 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17322.574 ±(99.9%) 743.983 ops/s [Average]
[info]   (min, avg, max) = (17119.450, 17322.574, 17553.577), stdev = 193.210
[info]   CI (99.9%): [16578.592, 18066.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1340.835 ±(99.9%) 44.730 MB/sec [Average]
[info]   (min, avg, max) = (1328.186, 1340.835, 1355.364), stdev = 11.616
[info]   CI (99.9%): [1296.106, 1385.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   121827.379 ±(99.9%) 1986.495 B/op [Average]
[info]   (min, avg, max) = (121488.023, 121827.379, 122718.665), stdev = 515.886
[info]   CI (99.9%): [119840.884, 123813.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.102), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.822 ±(99.9%) 15.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.822, 9.109), stdev = 4.074
[info]   CI (99.9%): [≈ 0, 17.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1353.631 ±(99.9%) 27.878 MB/sec [Average]
[info]   (min, avg, max) = (1347.391, 1353.631, 1363.180), stdev = 7.240
[info]   CI (99.9%): [1325.753, 1381.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   122993.195 ±(99.9%) 2840.821 B/op [Average]
[info]   (min, avg, max) = (122188.546, 122993.195, 123876.971), stdev = 737.752
[info]   CI (99.9%): [120152.374, 125834.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.388 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 9.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   157.451 ±(99.9%) 672.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 157.451, 425.410), stdev = 174.576
[info]   CI (99.9%): [≈ 0, 829.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.000, 17.000), stdev = 6.205
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16160.647 ops/s
[info] # Warmup Iteration   2: 33248.046 ops/s
[info] # Warmup Iteration   3: 33912.687 ops/s
[info] # Warmup Iteration   4: 33257.058 ops/s
[info] # Warmup Iteration   5: 33976.234 ops/s
[info] Iteration   1: 34087.854 ops/s
[info]                  ·gc.alloc.rate:            839.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       38752.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31063.906 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 33773.739 ops/s
[info]                  ·gc.alloc.rate:            831.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       38759.882 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62705.335 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 34098.147 ops/s
[info]                  ·gc.alloc.rate:            839.529 MB/sec
[info]                  ·gc.alloc.rate.norm:       38752.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31054.798 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 34108.883 ops/s
[info]                  ·gc.alloc.rate:            839.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       38756.881 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31043.874 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 34044.424 ops/s
[info]                  ·gc.alloc.rate:            838.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       38765.972 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31104.049 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   34022.609 ±(99.9%) 543.945 ops/s [Average]
[info]   (min, avg, max) = (33773.739, 34022.609, 34108.883), stdev = 141.261
[info]   CI (99.9%): [33478.664, 34566.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   837.838 ±(99.9%) 13.231 MB/sec [Average]
[info]   (min, avg, max) = (831.770, 837.838, 839.866), stdev = 3.436
[info]   CI (99.9%): [824.607, 851.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38757.352 ±(99.9%) 22.612 B/op [Average]
[info]   (min, avg, max) = (38752.012, 38757.352, 38765.972), stdev = 5.872
[info]   CI (99.9%): [38734.741, 38779.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.375 ±(99.9%) 1158.631 MB/sec [Average]
[info]   (min, avg, max) = (672.724, 807.375, 1345.628), stdev = 300.893
[info]   CI (99.9%): [≈ 0, 1966.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   37394.392 ±(99.9%) 54483.783 B/op [Average]
[info]   (min, avg, max) = (31043.874, 37394.392, 62705.335), stdev = 14149.265
[info]   CI (99.9%): [≈ 0, 91878.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.000, 18.000), stdev = 3.937
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:43:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45007.214 ops/s
[info] # Warmup Iteration   2: 58216.473 ops/s
[info] # Warmup Iteration   3: 60083.558 ops/s
[info] # Warmup Iteration   4: 59467.920 ops/s
[info] # Warmup Iteration   5: 58943.536 ops/s
[info] Iteration   1: 59344.817 ops/s
[info]                  ·gc.alloc.rate:                   767.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              20348.531 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17878.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.666 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 59731.688 ops/s
[info]                  ·gc.alloc.rate:            771.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       20341.890 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17779.912 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 59161.111 ops/s
[info]                  ·gc.alloc.rate:            764.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35866.321 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 60016.169 ops/s
[info]                  ·gc.alloc.rate:            777.628 MB/sec
[info]                  ·gc.alloc.rate.norm:       20390.259 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17677.438 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 59434.816 ops/s
[info]                  ·gc.alloc.rate:            768.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       20353.751 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17851.705 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   59537.720 ±(99.9%) 1300.373 ops/s [Average]
[info]   (min, avg, max) = (59161.111, 59537.720, 60016.169), stdev = 337.703
[info]   CI (99.9%): [58237.348, 60838.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   770.003 ±(99.9%) 19.423 MB/sec [Average]
[info]   (min, avg, max) = (764.523, 770.003, 777.628), stdev = 5.044
[info]   CI (99.9%): [750.580, 789.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20354.088 ±(99.9%) 82.024 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20354.088, 20390.259), stdev = 21.301
[info]   CI (99.9%): [20272.064, 20436.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   809.110 ±(99.9%) 1160.815 MB/sec [Average]
[info]   (min, avg, max) = (673.974, 809.110, 1348.377), stdev = 301.460
[info]   CI (99.9%): [≈ 0, 1969.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   21410.710 ±(99.9%) 31118.233 B/op [Average]
[info]   (min, avg, max) = (17677.438, 21410.710, 35866.321), stdev = 8081.306
[info]   CI (99.9%): [≈ 0, 52528.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.533 ±(99.9%) 30.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.533, 17.666), stdev = 7.901
[info]   CI (99.9%): [≈ 0, 33.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.800, 14.000), stdev = 2.950
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4297.485 ops/s
[info] # Warmup Iteration   2: 23077.427 ops/s
[info] # Warmup Iteration   3: 24151.237 ops/s
[info] # Warmup Iteration   4: 24327.483 ops/s
[info] # Warmup Iteration   5: 24422.598 ops/s
[info] Iteration   1: 24248.184 ops/s
[info]                  ·gc.alloc.rate:            1509.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       97989.659 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87327.294 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 24336.577 ops/s
[info]                  ·gc.alloc.rate:                   1498.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              96888.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2021.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        130748.897 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 301.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   3: 24783.323 ops/s
[info]                  ·gc.alloc.rate:                   1525.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              96877.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        86214.463 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 253.821 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 24899.969 ops/s
[info]                  ·gc.alloc.rate:            1532.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       96872.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86149.721 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 24904.949 ops/s
[info]                  ·gc.alloc.rate:                                  1534.190 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96954.935 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.997 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86128.969 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   24634.600 ±(99.9%) 1223.395 ops/s [Average]
[info]   (min, avg, max) = (24248.184, 24634.600, 24904.949), stdev = 317.712
[info]   CI (99.9%): [23411.205, 25857.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1519.997 ±(99.9%) 60.419 MB/sec [Average]
[info]   (min, avg, max) = (1498.048, 1519.997, 1534.190), stdev = 15.691
[info]   CI (99.9%): [1459.578, 1580.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   97116.380 ±(99.9%) 1884.178 B/op [Average]
[info]   (min, avg, max) = (96872.020, 97116.380, 97989.659), stdev = 489.315
[info]   CI (99.9%): [95232.202, 99000.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.199 ±(99.9%) 1.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.199, 0.997), stdev = 0.446
[info]   CI (99.9%): [≈ 0, 1.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1490.083 ±(99.9%) 1144.451 MB/sec [Average]
[info]   (min, avg, max) = (1345.297, 1490.083, 2021.592), stdev = 297.210
[info]   CI (99.9%): [345.632, 2634.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   95313.869 ±(99.9%) 76301.309 B/op [Average]
[info]   (min, avg, max) = (86128.969, 95313.869, 130748.897), stdev = 19815.208
[info]   CI (99.9%): [19012.560, 171615.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   111.077 ±(99.9%) 589.271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 111.077, 301.563), stdev = 153.032
[info]   CI (99.9%): [≈ 0, 700.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.800, 26.000), stdev = 10.281
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9244.622 ops/s
[info] # Warmup Iteration   2: 25013.716 ops/s
[info] # Warmup Iteration   3: 25495.438 ops/s
[info] # Warmup Iteration   4: 25623.599 ops/s
[info] # Warmup Iteration   5: 25619.589 ops/s
[info] Iteration   1: 25685.201 ops/s
[info]                  ·gc.alloc.rate:            1454.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       89144.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82452.549 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 25761.564 ops/s
[info]                  ·gc.alloc.rate:                   1459.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              89145.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82206.145 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 203.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 25758.476 ops/s
[info]                  ·gc.alloc.rate:                   1459.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              89188.271 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2033.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        124259.695 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 325.607 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 25520.437 ops/s
[info]                  ·gc.alloc.rate:                                  1445.338 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.985 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84047.109 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25706.021 ops/s
[info]                  ·gc.alloc.rate:                                  1455.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.596 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83442.359 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   25686.340 ±(99.9%) 379.120 ops/s [Average]
[info]   (min, avg, max) = (25520.437, 25686.340, 25761.564), stdev = 98.456
[info]   CI (99.9%): [25307.220, 26065.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1454.924 ±(99.9%) 22.264 MB/sec [Average]
[info]   (min, avg, max) = (1445.338, 1454.924, 1459.550), stdev = 5.782
[info]   CI (99.9%): [1432.660, 1477.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89153.229 ±(99.9%) 75.492 B/op [Average]
[info]   (min, avg, max) = (89144.016, 89153.229, 89188.271), stdev = 19.605
[info]   CI (99.9%): [89077.737, 89228.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.316 ±(99.9%) 1.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.316, 0.985), stdev = 0.454
[info]   CI (99.9%): [≈ 0, 2.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1490.003 ±(99.9%) 1170.354 MB/sec [Average]
[info]   (min, avg, max) = (1345.406, 1490.003, 2033.487), stdev = 303.937
[info]   CI (99.9%): [319.649, 2660.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   91281.571 ±(99.9%) 71045.747 B/op [Average]
[info]   (min, avg, max) = (82206.145, 91281.571, 124259.695), stdev = 18450.355
[info]   CI (99.9%): [20235.825, 162327.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 5.328), stdev = 2.474
[info]   CI (99.9%): [≈ 0, 11.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   105.817 ±(99.9%) 582.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105.817, 325.607), stdev = 151.193
[info]   CI (99.9%): [≈ 0, 688.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.200, 19.000), stdev = 7.823
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24792.375 ops/s
[info] # Warmup Iteration   2: 32743.635 ops/s
[info] # Warmup Iteration   3: 34118.171 ops/s
[info] # Warmup Iteration   4: 33848.962 ops/s
[info] # Warmup Iteration   5: 34686.563 ops/s
[info] Iteration   1: 34608.417 ops/s
[info]                  ·gc.alloc.rate:            1364.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       62044.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61312.085 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 34699.115 ops/s
[info]                  ·gc.alloc.rate:            1367.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       62018.735 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61151.323 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 33979.559 ops/s
[info]                  ·gc.alloc.rate:                   1342.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              62181.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        62572.080 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 215.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 34991.027 ops/s
[info]                  ·gc.alloc.rate:                   1378.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              62016.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        61176.920 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 119.837 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 35085.470 ops/s
[info]                  ·gc.alloc.rate:            1382.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       62016.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61136.057 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   34672.718 ±(99.9%) 1675.125 ops/s [Average]
[info]   (min, avg, max) = (33979.559, 34672.718, 35085.470), stdev = 435.025
[info]   CI (99.9%): [32997.592, 36347.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1366.993 ±(99.9%) 59.931 MB/sec [Average]
[info]   (min, avg, max) = (1342.715, 1366.993, 1382.354), stdev = 15.564
[info]   CI (99.9%): [1307.061, 1426.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   62055.228 ±(99.9%) 275.076 B/op [Average]
[info]   (min, avg, max) = (62016.012, 62055.228, 62181.251), stdev = 71.436
[info]   CI (99.9%): [61780.153, 62330.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1353.984 ±(99.9%) 26.641 MB/sec [Average]
[info]   (min, avg, max) = (1348.022, 1353.984, 1362.739), stdev = 6.918
[info]   CI (99.9%): [1327.343, 1380.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   61469.693 ±(99.9%) 2388.087 B/op [Average]
[info]   (min, avg, max) = (61136.057, 61469.693, 62572.080), stdev = 620.178
[info]   CI (99.9%): [59081.606, 63857.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 8.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 4.664), stdev = 2.128
[info]   CI (99.9%): [≈ 0, 9.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   67.163 ±(99.9%) 377.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.163, 215.979), stdev = 98.048
[info]   CI (99.9%): [≈ 0, 444.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.800, 16.000), stdev = 5.975
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:42:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22149.761 ops/s
[info] # Warmup Iteration   2: 34138.770 ops/s
[info] # Warmup Iteration   3: 34650.692 ops/s
[info] # Warmup Iteration   4: 34653.816 ops/s
[info] # Warmup Iteration   5: 35010.400 ops/s
[info] Iteration   1: 34890.841 ops/s
[info]                  ·gc.alloc.rate:            1314.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       59290.340 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60818.370 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 34919.104 ops/s
[info]                  ·gc.alloc.rate:            1316.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       59362.833 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60767.869 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 34403.449 ops/s
[info]                  ·gc.alloc.rate:                   1296.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              59304.976 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        61801.044 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 213.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 35377.743 ops/s
[info]                  ·gc.alloc.rate:                   1332.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              59277.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1360.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        60514.716 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 118.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 35579.209 ops/s
[info]                  ·gc.alloc.rate:            1340.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       59272.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      681.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30143.687 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   35034.069 ±(99.9%) 1771.612 ops/s [Average]
[info]   (min, avg, max) = (34403.449, 35034.069, 35579.209), stdev = 460.082
[info]   CI (99.9%): [33262.457, 36805.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1319.966 ±(99.9%) 65.390 MB/sec [Average]
[info]   (min, avg, max) = (1296.456, 1319.966, 1340.106), stdev = 16.982
[info]   CI (99.9%): [1254.576, 1385.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   59301.462 ±(99.9%) 140.968 B/op [Average]
[info]   (min, avg, max) = (59272.011, 59301.462, 59362.833), stdev = 36.609
[info]   CI (99.9%): [59160.494, 59442.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1217.735 ±(99.9%) 1154.375 MB/sec [Average]
[info]   (min, avg, max) = (681.532, 1217.735, 1360.106), stdev = 299.788
[info]   CI (99.9%): [63.359, 2372.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   54809.137 ±(99.9%) 53127.800 B/op [Average]
[info]   (min, avg, max) = (30143.687, 54809.137, 61801.044), stdev = 13797.121
[info]   CI (99.9%): [1681.337, 107936.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 8.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 4.663), stdev = 2.128
[info]   CI (99.9%): [≈ 0, 9.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   66.371 ±(99.9%) 372.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.371, 213.317), stdev = 96.863
[info]   CI (99.9%): [≈ 0, 439.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 10.000, 15.000), stdev = 6.245
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140957.168 ops/s
[info] # Warmup Iteration   2: 299108.732 ops/s
[info] # Warmup Iteration   3: 303491.857 ops/s
[info] # Warmup Iteration   4: 300500.264 ops/s
[info] # Warmup Iteration   5: 304270.944 ops/s
[info] Iteration   1: 303634.857 ops/s
[info]                  ·gc.alloc.rate:            1529.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       7931.207 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6988.274 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 301525.999 ops/s
[info]                  ·gc.alloc.rate:                   1518.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              7929.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7037.399 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 294635.110 ops/s
[info]                  ·gc.alloc.rate:                   1491.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              7967.438 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2037.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10881.375 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.908 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 303198.745 ops/s
[info]                  ·gc.alloc.rate:            1528.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       7934.767 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7074.646 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 303248.002 ops/s
[info]                  ·gc.alloc.rate:                                  1527.926 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7928.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7073.060 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   301248.543 ±(99.9%) 14575.349 ops/s [Average]
[info]   (min, avg, max) = (294635.110, 301248.543, 303634.857), stdev = 3785.172
[info]   CI (99.9%): [286673.194, 315823.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1519.371 ±(99.9%) 61.956 MB/sec [Average]
[info]   (min, avg, max) = (1491.680, 1519.371, 1529.987), stdev = 16.090
[info]   CI (99.9%): [1457.415, 1581.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7938.095 ±(99.9%) 63.942 B/op [Average]
[info]   (min, avg, max) = (7928.001, 7938.095, 7967.438), stdev = 16.606
[info]   CI (99.9%): [7874.153, 8002.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1491.852 ±(99.9%) 1174.324 MB/sec [Average]
[info]   (min, avg, max) = (1348.011, 1491.852, 2037.233), stdev = 304.968
[info]   CI (99.9%): [317.528, 2666.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7810.951 ±(99.9%) 6610.702 B/op [Average]
[info]   (min, avg, max) = (6988.274, 7810.951, 10881.375), stdev = 1716.778
[info]   CI (99.9%): [1200.249, 14421.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.663), stdev = 2.128
[info]   CI (99.9%): [≈ 0, 9.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   7.763 ±(99.9%) 43.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.763, 24.908), stdev = 11.319
[info]   CI (99.9%): [≈ 0, 51.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.800, 17.000), stdev = 7.050
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.862 ops/s
[info] # Warmup Iteration   2: 1289046.479 ops/s
[info] # Warmup Iteration   3: 1314299.215 ops/s
[info] # Warmup Iteration   4: 1326447.640 ops/s
[info] # Warmup Iteration   5: 1347896.312 ops/s
[info] Iteration   1: 1332583.341 ops/s
[info]                  ·gc.alloc.rate:            419.899 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 792.256 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1325884.181 ops/s
[info]                  ·gc.alloc.rate:                   420.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              499.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        795.488 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.791 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 1311823.530 ops/s
[info]                  ·gc.alloc.rate:      413.357 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1291670.683 ops/s
[info]                  ·gc.alloc.rate:            408.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       497.651 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 817.334 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 1311958.204 ops/s
[info]                  ·gc.alloc.rate:      413.483 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1314783.988 ±(99.9%) 60609.597 ops/s [Average]
[info]   (min, avg, max) = (1291670.683, 1314783.988, 1332583.341), stdev = 15740.120
[info]   CI (99.9%): [1254174.391, 1375393.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   415.126 ±(99.9%) 19.418 MB/sec [Average]
[info]   (min, avg, max) = (408.438, 415.126, 420.453), stdev = 5.043
[info]   CI (99.9%): [395.708, 434.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.959 ±(99.9%) 5.448 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.959, 499.144), stdev = 1.415
[info]   CI (99.9%): [491.511, 502.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.318 ±(99.9%) 1414.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.318, 670.812), stdev = 367.265
[info]   CI (99.9%): [≈ 0, 1816.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   481.016 ±(99.9%) 1691.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 481.016, 817.334), stdev = 439.211
[info]   CI (99.9%): [≈ 0, 2172.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.158 ±(99.9%) 1.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.791), stdev = 0.354
[info]   CI (99.9%): [≈ 0, 1.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 11.000), stdev = 5.675
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214181.439 ops/s
[info] # Warmup Iteration   2: 519842.235 ops/s
[info] # Warmup Iteration   3: 552291.089 ops/s
[info] # Warmup Iteration   4: 545075.209 ops/s
[info] # Warmup Iteration   5: 544213.731 ops/s
[info] Iteration   1: 552205.218 ops/s
[info]                  ·gc.alloc.rate:      443.398 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 533437.313 ops/s
[info]                  ·gc.alloc.rate:            430.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       1268.732 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1986.963 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 548973.014 ops/s
[info]                  ·gc.alloc.rate:                   443.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              1267.857 B/op
[info]                  ·gc.churn.G1_Old_Gen:             669.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1915.640 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.897 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 552652.328 ops/s
[info]                  ·gc.alloc.rate:      444.331 MB/sec
[info]                  ·gc.alloc.rate.norm: 1265.309 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 547015.170 ops/s
[info]                  ·gc.alloc.rate:            439.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1937.531 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   546856.608 ±(99.9%) 30245.320 ops/s [Average]
[info]   (min, avg, max) = (533437.313, 546856.608, 552652.328), stdev = 7854.613
[info]   CI (99.9%): [516611.289, 577101.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   440.082 ±(99.9%) 22.938 MB/sec [Average]
[info]   (min, avg, max) = (430.015, 440.082, 444.331), stdev = 5.957
[info]   CI (99.9%): [417.144, 463.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1265.980 ±(99.9%) 8.476 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1265.980, 1268.732), stdev = 2.201
[info]   CI (99.9%): [1257.504, 1274.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.345 ±(99.9%) 1417.825 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.345, 673.447), stdev = 368.205
[info]   CI (99.9%): [≈ 0, 1821.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1168.027 ±(99.9%) 4106.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1168.027, 1986.963), stdev = 1066.571
[info]   CI (99.9%): [≈ 0, 5275.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.663), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.379 ±(99.9%) 3.266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.897), stdev = 0.848
[info]   CI (99.9%): [≈ 0, 3.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.600, 10.000), stdev = 5.128
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:41:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1380290.341 ops/s
[info] # Warmup Iteration   2: 1681874.078 ops/s
[info] # Warmup Iteration   3: 1745941.463 ops/s
[info] # Warmup Iteration   4: 1729833.231 ops/s
[info] # Warmup Iteration   5: 1745238.347 ops/s
[info] Iteration   1: 1726593.797 ops/s
[info]                  ·gc.alloc.rate:            335.299 MB/sec
[info]                  ·gc.alloc.rate.norm:       305.572 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 614.480 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1745509.865 ops/s
[info]                  ·gc.alloc.rate:      337.224 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1707720.497 ops/s
[info]                  ·gc.alloc.rate:            329.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 621.306 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1748428.438 ops/s
[info]                  ·gc.alloc.rate:      337.741 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1728568.827 ops/s
[info]                  ·gc.alloc.rate:            333.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 613.796 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1731364.285 ±(99.9%) 63298.415 ops/s [Average]
[info]   (min, avg, max) = (1707720.497, 1731364.285, 1748428.438), stdev = 16438.397
[info]   CI (99.9%): [1668065.870, 1794662.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   334.833 ±(99.9%) 12.031 MB/sec [Average]
[info]   (min, avg, max) = (329.945, 334.833, 337.741), stdev = 3.124
[info]   CI (99.9%): [322.802, 346.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.341 ±(99.9%) 2.653 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.341, 305.572), stdev = 0.689
[info]   CI (99.9%): [301.688, 306.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.542 ±(99.9%) 1422.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.542, 674.279), stdev = 369.295
[info]   CI (99.9%): [≈ 0, 1826.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   369.916 ±(99.9%) 1300.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 369.916, 621.306), stdev = 337.699
[info]   CI (99.9%): [≈ 0, 1670.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13733.586 ops/s
[info] # Warmup Iteration   2: 61696.089 ops/s
[info] # Warmup Iteration   3: 67873.814 ops/s
[info] # Warmup Iteration   4: 69084.689 ops/s
[info] # Warmup Iteration   5: 69909.828 ops/s
[info] Iteration   1: 71359.538 ops/s
[info]                  ·gc.alloc.rate:                                  2316.438 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51088.439 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.586 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       44969.403 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                88.146 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 72241.950 ops/s
[info]                  ·gc.alloc.rate:                                  2342.757 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51037.964 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       44537.814 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 71798.537 ops/s
[info]                  ·gc.alloc.rate:            2326.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       51008.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.238 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59751.748 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 72248.002 ops/s
[info]                  ·gc.alloc.rate:                                  2341.572 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51016.584 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       44533.500 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 71965.528 ops/s
[info]                  ·gc.alloc.rate:                                  2333.769 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51035.313 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59613.112 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   71922.711 ±(99.9%) 1417.622 ops/s [Average]
[info]   (min, avg, max) = (71359.538, 71922.711, 72248.002), stdev = 368.152
[info]   CI (99.9%): [70505.089, 73340.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2332.196 ±(99.9%) 42.329 MB/sec [Average]
[info]   (min, avg, max) = (2316.438, 2332.196, 2342.757), stdev = 10.993
[info]   CI (99.9%): [2289.866, 2374.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51037.261 ±(99.9%) 120.343 B/op [Average]
[info]   (min, avg, max) = (51008.006, 51037.261, 51088.439), stdev = 31.253
[info]   CI (99.9%): [50916.919, 51157.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.027), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.151 ±(99.9%) 0.949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.151, 0.586), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2315.729 ±(99.9%) 1440.880 MB/sec [Average]
[info]   (min, avg, max) = (2038.990, 2315.729, 2726.019), stdev = 374.192
[info]   CI (99.9%): [874.848, 3756.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   50681.115 ±(99.9%) 31648.799 B/op [Average]
[info]   (min, avg, max) = (44533.500, 50681.115, 59751.748), stdev = 8219.093
[info]   CI (99.9%): [19032.316, 82329.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   17.629 ±(99.9%) 151.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.629, 88.146), stdev = 39.420
[info]   CI (99.9%): [≈ 0, 169.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 11.000), stdev = 2.864
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167286.193 ops/s
[info] # Warmup Iteration   2: 296292.911 ops/s
[info] # Warmup Iteration   3: 315361.449 ops/s
[info] # Warmup Iteration   4: 313166.263 ops/s
[info] # Warmup Iteration   5: 310926.207 ops/s
[info] Iteration   1: 307506.840 ops/s
[info]                  ·gc.alloc.rate:            482.801 MB/sec
[info]                  ·gc.alloc.rate.norm:       2471.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3450.284 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 315500.943 ops/s
[info]                  ·gc.alloc.rate:      489.477 MB/sec
[info]                  ·gc.alloc.rate.norm: 2442.330 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 310955.744 ops/s
[info]                  ·gc.alloc.rate:                   483.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              2448.178 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3408.627 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.372 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 313127.927 ops/s
[info]                  ·gc.alloc.rate:            485.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       2440.529 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3388.336 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 315718.970 ops/s
[info]                  ·gc.alloc.rate:      489.486 MB/sec
[info]                  ·gc.alloc.rate.norm: 2440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   312562.085 ±(99.9%) 13207.598 ops/s [Average]
[info]   (min, avg, max) = (307506.840, 312562.085, 315718.970), stdev = 3429.971
[info]   CI (99.9%): [299354.486, 325769.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   486.188 ±(99.9%) 12.181 MB/sec [Average]
[info]   (min, avg, max) = (482.801, 486.188, 489.486), stdev = 3.163
[info]   CI (99.9%): [474.007, 498.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2448.519 ±(99.9%) 51.138 B/op [Average]
[info]   (min, avg, max) = (2440.001, 2448.519, 2471.555), stdev = 13.280
[info]   CI (99.9%): [2397.381, 2499.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.293 ±(99.9%) 1421.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.293, 674.080), stdev = 369.068
[info]   CI (99.9%): [≈ 0, 1825.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2049.449 ±(99.9%) 7204.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2049.449, 3450.284), stdev = 1871.016
[info]   CI (99.9%): [≈ 0, 9254.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.674 ±(99.9%) 5.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.372), stdev = 1.508
[info]   CI (99.9%): [≈ 0, 6.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 8.000), stdev = 4.382
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.789 ops/s
[info] # Warmup Iteration   2: 1207929.082 ops/s
[info] # Warmup Iteration   3: 1234361.782 ops/s
[info] # Warmup Iteration   4: 1263991.327 ops/s
[info] # Warmup Iteration   5: 1248247.970 ops/s
[info] Iteration   1: 1250384.465 ops/s
[info]                  ·gc.alloc.rate:            579.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       729.705 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 844.353 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1248539.776 ops/s
[info]                  ·gc.alloc.rate:            579.718 MB/sec
[info]                  ·gc.alloc.rate.norm:       730.913 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 845.586 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 1236825.328 ops/s
[info]                  ·gc.alloc.rate:            572.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 853.623 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1215537.336 ops/s
[info]                  ·gc.alloc.rate:            562.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 868.535 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 1220344.487 ops/s
[info]                  ·gc.alloc.rate:                   564.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        864.265 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.859 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1234326.278 ±(99.9%) 61328.350 ops/s [Average]
[info]   (min, avg, max) = (1215537.336, 1234326.278, 1250384.465), stdev = 15926.778
[info]   CI (99.9%): [1172997.929, 1295654.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   571.731 ±(99.9%) 31.534 MB/sec [Average]
[info]   (min, avg, max) = (562.247, 571.731, 579.756), stdev = 8.189
[info]   CI (99.9%): [540.197, 603.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.924 ±(99.9%) 5.139 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.924, 730.913), stdev = 1.335
[info]   CI (99.9%): [723.785, 734.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   670.736 ±(99.9%) 0.929 MB/sec [Average]
[info]   (min, avg, max) = (670.366, 670.736, 671.014), stdev = 0.241
[info]   CI (99.9%): [669.806, 671.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   855.272 ±(99.9%) 41.853 B/op [Average]
[info]   (min, avg, max) = (844.353, 855.272, 868.535), stdev = 10.869
[info]   CI (99.9%): [813.420, 897.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.172 ±(99.9%) 1.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.172, 0.859), stdev = 0.384
[info]   CI (99.9%): [≈ 0, 1.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 11.800, 12.000), stdev = 0.447
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:40:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 478115.029 ops/s
[info] # Warmup Iteration   2: 895044.369 ops/s
[info] # Warmup Iteration   3: 969765.867 ops/s
[info] # Warmup Iteration   4: 973534.354 ops/s
[info] # Warmup Iteration   5: 972461.400 ops/s
[info] Iteration   1: 976006.161 ops/s
[info]                  ·gc.alloc.rate:                   689.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1084.921 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 974325.127 ops/s
[info]                  ·gc.alloc.rate:            688.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1087.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 973119.344 ops/s
[info]                  ·gc.alloc.rate:            687.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1089.215 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 970744.141 ops/s
[info]                  ·gc.alloc.rate:                   687.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              1114.605 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1090.763 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.080 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 937311.343 ops/s
[info]                  ·gc.alloc.rate:            677.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.945 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1130.830 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   966301.223 ±(99.9%) 62837.751 ops/s [Average]
[info]   (min, avg, max) = (937311.343, 966301.223, 976006.161), stdev = 16318.764
[info]   CI (99.9%): [903463.472, 1029138.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   686.043 ±(99.9%) 19.603 MB/sec [Average]
[info]   (min, avg, max) = (677.078, 686.043, 689.695), stdev = 5.091
[info]   CI (99.9%): [666.440, 705.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1117.555 ±(99.9%) 41.950 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1117.555, 1136.945), stdev = 10.894
[info]   CI (99.9%): [1075.606, 1159.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   673.166 ±(99.9%) 1.292 MB/sec [Average]
[info]   (min, avg, max) = (672.792, 673.166, 673.439), stdev = 0.336
[info]   CI (99.9%): [671.874, 674.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1096.696 ±(99.9%) 73.944 B/op [Average]
[info]   (min, avg, max) = (1084.921, 1096.696, 1130.830), stdev = 19.203
[info]   CI (99.9%): [1022.752, 1170.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.431 ±(99.9%) 2.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 1.080), stdev = 0.590
[info]   CI (99.9%): [≈ 0, 2.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1882220.185 ops/s
[info] # Warmup Iteration   2: 2231239.619 ops/s
[info] # Warmup Iteration   3: 2379001.905 ops/s
[info] # Warmup Iteration   4: 2298256.407 ops/s
[info] # Warmup Iteration   5: 2379723.730 ops/s
[info] Iteration   1: 2353929.030 ops/s
[info]                  ·gc.alloc.rate:            1090.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       729.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 901.505 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 2346935.392 ops/s
[info]                  ·gc.alloc.rate:            1086.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.537 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 904.162 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 2366677.073 ops/s
[info]                  ·gc.alloc.rate:            1096.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       729.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 448.302 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2363042.058 ops/s
[info]                  ·gc.alloc.rate:                   1092.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        897.956 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 2378080.301 ops/s
[info]                  ·gc.alloc.rate:                   1100.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.299 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        448.355 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.882 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2361732.771 ±(99.9%) 46097.808 ops/s [Average]
[info]   (min, avg, max) = (2346935.392, 2361732.771, 2378080.301), stdev = 11971.454
[info]   CI (99.9%): [2315634.962, 2407830.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1093.259 ±(99.9%) 20.468 MB/sec [Average]
[info]   (min, avg, max) = (1086.296, 1093.259, 1100.296), stdev = 5.315
[info]   CI (99.9%): [1072.791, 1113.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.664 ±(99.9%) 2.203 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.664, 729.400), stdev = 0.572
[info]   CI (99.9%): [726.461, 730.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1079.118 ±(99.9%) 1418.169 MB/sec [Average]
[info]   (min, avg, max) = (673.984, 1079.118, 1348.164), stdev = 368.294
[info]   CI (99.9%): [≈ 0, 2497.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   720.056 ±(99.9%) 955.198 B/op [Average]
[info]   (min, avg, max) = (448.302, 720.056, 904.162), stdev = 248.062
[info]   CI (99.9%): [≈ 0, 1675.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.620 ±(99.9%) 3.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.620, 2.218), stdev = 0.972
[info]   CI (99.9%): [≈ 0, 4.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.000, 16.000), stdev = 5.148
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2130778.035 ops/s
[info] # Warmup Iteration   2: 2684486.003 ops/s
[info] # Warmup Iteration   3: 2789182.346 ops/s
[info] # Warmup Iteration   4: 2792927.781 ops/s
[info] # Warmup Iteration   5: 2791867.704 ops/s
[info] Iteration   1: 2793005.167 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2793913.966 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2725902.642 ops/s
[info]                  ·gc.alloc.rate:      6.571 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.794 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2790750.505 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.096 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2793390.264 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2779392.509 ±(99.9%) 115234.729 ops/s [Average]
[info]   (min, avg, max) = (2725902.642, 2779392.509, 2793913.966), stdev = 29926.093
[info]   CI (99.9%): [2664157.779, 2894627.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.348 ±(99.9%) 11.245 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.348, 6.571), stdev = 2.920
[info]   CI (99.9%): [≈ 0, 12.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.778 ±(99.9%) 6.494 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.778, 3.794), stdev = 1.687
[info]   CI (99.9%): [≈ 0, 7.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271143.900 ops/s
[info] # Warmup Iteration   2: 520840.578 ops/s
[info] # Warmup Iteration   3: 524744.669 ops/s
[info] # Warmup Iteration   4: 526867.773 ops/s
[info] # Warmup Iteration   5: 532538.897 ops/s
[info] Iteration   1: 526232.919 ops/s
[info]                  ·gc.alloc.rate:            569.614 MB/sec
[info]                  ·gc.alloc.rate.norm:       1704.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2014.239 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 527062.744 ops/s
[info]                  ·gc.alloc.rate:                   572.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              1708.924 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2009.079 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.989 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 528946.465 ops/s
[info]                  ·gc.alloc.rate:            572.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       1704.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2003.910 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 519752.567 ops/s
[info]                  ·gc.alloc.rate:            563.278 MB/sec
[info]                  ·gc.alloc.rate.norm:       1705.856 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2039.352 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 528009.052 ops/s
[info]                  ·gc.alloc.rate:            572.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       1707.362 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2007.439 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   526000.750 ±(99.9%) 14007.566 ops/s [Average]
[info]   (min, avg, max) = (519752.567, 526000.750, 528946.465), stdev = 3637.720
[info]   CI (99.9%): [511993.184, 540008.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   570.132 ±(99.9%) 15.568 MB/sec [Average]
[info]   (min, avg, max) = (563.278, 570.132, 572.731), stdev = 4.043
[info]   CI (99.9%): [554.563, 585.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1706.029 ±(99.9%) 8.262 B/op [Average]
[info]   (min, avg, max) = (1704.001, 1706.029, 1708.924), stdev = 2.146
[info]   CI (99.9%): [1697.767, 1714.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   673.293 ±(99.9%) 0.693 MB/sec [Average]
[info]   (min, avg, max) = (672.976, 673.293, 673.400), stdev = 0.180
[info]   CI (99.9%): [672.600, 673.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2014.804 ±(99.9%) 54.750 B/op [Average]
[info]   (min, avg, max) = (2003.910, 2014.804, 2039.352), stdev = 14.218
[info]   CI (99.9%): [1960.054, 2069.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.398 ±(99.9%) 3.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.398, 1.989), stdev = 0.890
[info]   CI (99.9%): [≈ 0, 3.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:39:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80258.949 ops/s
[info] # Warmup Iteration   2: 147564.282 ops/s
[info] # Warmup Iteration   3: 157164.731 ops/s
[info] # Warmup Iteration   4: 154794.662 ops/s
[info] # Warmup Iteration   5: 155213.519 ops/s
[info] Iteration   1: 157410.511 ops/s
[info]                  ·gc.alloc.rate:                   1890.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              18906.231 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2024.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20240.748 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 46.622 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 160000.186 ops/s
[info]                  ·gc.alloc.rate:                                  1922.070 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18906.971 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20075.839 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                32.761 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 157409.524 ops/s
[info]                  ·gc.alloc.rate:                                  1899.310 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18992.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20440.818 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 160797.029 ops/s
[info]                  ·gc.alloc.rate:            1931.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       18907.388 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.600 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13339.218 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 158096.186 ops/s
[info]                  ·gc.alloc.rate:                                  1901.468 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18931.182 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20351.750 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   158742.687 ±(99.9%) 6018.474 ops/s [Average]
[info]   (min, avg, max) = (157409.524, 158742.687, 160797.029), stdev = 1562.979
[info]   CI (99.9%): [152724.213, 164761.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1908.959 ±(99.9%) 65.653 MB/sec [Average]
[info]   (min, avg, max) = (1890.557, 1908.959, 1931.388), stdev = 17.050
[info]   CI (99.9%): [1843.306, 1974.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18928.757 ±(99.9%) 142.081 B/op [Average]
[info]   (min, avg, max) = (18906.231, 18928.757, 18992.013), stdev = 36.898
[info]   CI (99.9%): [18786.676, 19070.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1903.170 ±(99.9%) 1164.064 MB/sec [Average]
[info]   (min, avg, max) = (1362.600, 1903.170, 2044.198), stdev = 302.304
[info]   CI (99.9%): [739.106, 3067.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18889.675 ±(99.9%) 11959.281 B/op [Average]
[info]   (min, avg, max) = (13339.218, 18889.675, 20440.818), stdev = 3105.787
[info]   CI (99.9%): [6930.393, 30848.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.662), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   15.877 ±(99.9%) 85.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.877, 46.622), stdev = 22.286
[info]   CI (99.9%): [≈ 0, 101.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 21.000), stdev = 7.694
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156137.862 ops/s
[info] # Warmup Iteration   2: 363767.994 ops/s
[info] # Warmup Iteration   3: 362040.088 ops/s
[info] # Warmup Iteration   4: 367838.621 ops/s
[info] # Warmup Iteration   5: 363285.263 ops/s
[info] Iteration   1: 369446.387 ops/s
[info]                  ·gc.alloc.rate:      285.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 369561.761 ops/s
[info]                  ·gc.alloc.rate:      285.485 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 365488.879 ops/s
[info]                  ·gc.alloc.rate:            283.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       1219.527 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2900.177 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 369686.620 ops/s
[info]                  ·gc.alloc.rate:      285.623 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 365551.354 ops/s
[info]                  ·gc.alloc.rate:                   283.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              1221.835 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2896.690 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.868 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   367947.000 ±(99.9%) 8537.532 ops/s [Average]
[info]   (min, avg, max) = (365488.879, 367947.000, 369686.620), stdev = 2217.170
[info]   CI (99.9%): [359409.468, 376484.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   284.698 ±(99.9%) 4.395 MB/sec [Average]
[info]   (min, avg, max) = (283.169, 284.698, 285.623), stdev = 1.141
[info]   CI (99.9%): [280.302, 289.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1217.873 ±(99.9%) 10.358 B/op [Average]
[info]   (min, avg, max) = (1216.001, 1217.873, 1221.835), stdev = 2.690
[info]   CI (99.9%): [1207.515, 1228.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.234 ±(99.9%) 1419.596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.234, 673.408), stdev = 368.665
[info]   CI (99.9%): [≈ 0, 1688.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1159.373 ±(99.9%) 6113.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1159.373, 2900.177), stdev = 1587.538
[info]   CI (99.9%): [≈ 0, 7272.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.574 ±(99.9%) 4.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.574, 2.868), stdev = 1.283
[info]   CI (99.9%): [≈ 0, 5.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 9.000), stdev = 4.930
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 908024.178 ops/s
[info] # Warmup Iteration   2: 1076066.203 ops/s
[info] # Warmup Iteration   3: 1125644.509 ops/s
[info] # Warmup Iteration   4: 1138955.864 ops/s
[info] # Warmup Iteration   5: 1140042.160 ops/s
[info] Iteration   1: 1129270.044 ops/s
[info]                  ·gc.alloc.rate:            219.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       306.285 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 940.462 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1139481.945 ops/s
[info]                  ·gc.alloc.rate:      220.067 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1139853.125 ops/s
[info]                  ·gc.alloc.rate:      220.149 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1130352.357 ops/s
[info]                  ·gc.alloc.rate:                   218.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        938.628 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.927 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1137254.558 ops/s
[info]                  ·gc.alloc.rate:      220.300 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.873 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1135242.406 ±(99.9%) 19526.872 ops/s [Average]
[info]   (min, avg, max) = (1129270.044, 1135242.406, 1139853.125), stdev = 5071.067
[info]   CI (99.9%): [1115715.533, 1154769.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   219.706 ±(99.9%) 3.150 MB/sec [Average]
[info]   (min, avg, max) = (218.293, 219.706, 220.300), stdev = 0.818
[info]   CI (99.9%): [216.556, 222.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.632 ±(99.9%) 3.843 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.632, 306.285), stdev = 0.998
[info]   CI (99.9%): [300.789, 308.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.733 ±(99.9%) 1422.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.733, 674.669), stdev = 369.347
[info]   CI (99.9%): [≈ 0, 1691.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   375.818 ±(99.9%) 1981.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 375.818, 940.462), stdev = 514.610
[info]   CI (99.9%): [≈ 0, 2357.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.185 ±(99.9%) 1.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.185, 0.927), stdev = 0.415
[info]   CI (99.9%): [≈ 0, 1.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:38:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14998.681 ops/s
[info] # Warmup Iteration   2: 60307.197 ops/s
[info] # Warmup Iteration   3: 59942.453 ops/s
[info] # Warmup Iteration   4: 61061.339 ops/s
[info] # Warmup Iteration   5: 61867.700 ops/s
[info] Iteration   1: 61929.408 ops/s
[info]                  ·gc.alloc.rate:                                  2314.065 MB/sec
[info]                  ·gc.alloc.rate.norm:                             58797.946 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.702 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2720.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69137.623 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                101.573 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 61823.817 ops/s
[info]                  ·gc.alloc.rate:            2314.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       58917.462 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52044.697 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 62163.274 ops/s
[info]                  ·gc.alloc.rate:                                  2321.553 MB/sec
[info]                  ·gc.alloc.rate.norm:                             58784.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       51756.755 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 60925.423 ops/s
[info]                  ·gc.alloc.rate:                                  2285.988 MB/sec
[info]                  ·gc.alloc.rate.norm:                             59060.334 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70410.952 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 60998.630 ops/s
[info]                  ·gc.alloc.rate:            2283.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       58909.895 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52746.759 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   61568.110 ±(99.9%) 2184.622 ops/s [Average]
[info]   (min, avg, max) = (60925.423, 61568.110, 62163.274), stdev = 567.339
[info]   CI (99.9%): [59383.488, 63752.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2303.745 ±(99.9%) 68.762 MB/sec [Average]
[info]   (min, avg, max) = (2283.022, 2303.745, 2321.553), stdev = 17.857
[info]   CI (99.9%): [2234.983, 2372.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   58893.929 ±(99.9%) 429.632 B/op [Average]
[info]   (min, avg, max) = (58784.007, 58893.929, 59060.334), stdev = 111.574
[info]   CI (99.9%): [58464.297, 59323.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.172 ±(99.9%) 1.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.172, 0.702), stdev = 0.299
[info]   CI (99.9%): [≈ 0, 1.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2315.735 ±(99.9%) 1432.168 MB/sec [Average]
[info]   (min, avg, max) = (2044.026, 2315.735, 2725.325), stdev = 371.929
[info]   CI (99.9%): [883.567, 3747.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   59219.357 ±(99.9%) 37168.414 B/op [Average]
[info]   (min, avg, max) = (51756.755, 59219.357, 70410.952), stdev = 9652.519
[info]   CI (99.9%): [22050.943, 96387.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   20.315 ±(99.9%) 174.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.315, 101.573), stdev = 45.425
[info]   CI (99.9%): [≈ 0, 195.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128057.455 ops/s
[info] # Warmup Iteration   2: 265947.374 ops/s
[info] # Warmup Iteration   3: 269101.340 ops/s
[info] # Warmup Iteration   4: 272479.116 ops/s
[info] # Warmup Iteration   5: 269087.209 ops/s
[info] Iteration   1: 264544.064 ops/s
[info]                  ·gc.alloc.rate:            1168.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       6954.953 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8021.581 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 264223.217 ops/s
[info]                  ·gc.alloc.rate:            1167.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       6953.278 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8031.143 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 265328.920 ops/s
[info]                  ·gc.alloc.rate:            1173.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       6961.899 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3998.594 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 270543.947 ops/s
[info]                  ·gc.alloc.rate:                   1195.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              6953.297 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7858.827 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 266680.037 ops/s
[info]                  ·gc.alloc.rate:                   1188.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              7014.261 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8023.813 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   266264.037 ±(99.9%) 9909.029 ops/s [Average]
[info]   (min, avg, max) = (264223.217, 266264.037, 270543.947), stdev = 2573.343
[info]   CI (99.9%): [256355.008, 276173.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1178.677 ±(99.9%) 48.316 MB/sec [Average]
[info]   (min, avg, max) = (1167.088, 1178.677, 1195.140), stdev = 12.547
[info]   CI (99.9%): [1130.362, 1226.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6967.538 ±(99.9%) 101.503 B/op [Average]
[info]   (min, avg, max) = (6953.278, 6967.538, 7014.261), stdev = 26.360
[info]   CI (99.9%): [6866.035, 7069.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1216.147 ±(99.9%) 1166.985 MB/sec [Average]
[info]   (min, avg, max) = (674.082, 1216.147, 1359.829), stdev = 303.062
[info]   CI (99.9%): [49.162, 2383.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7186.792 ±(99.9%) 6868.474 B/op [Average]
[info]   (min, avg, max) = (3998.594, 7186.792, 8031.143), stdev = 1783.721
[info]   CI (99.9%): [318.317, 14055.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.996), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.582 ±(99.9%) 45.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.582, 23.251), stdev = 11.819
[info]   CI (99.9%): [≈ 0, 54.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 12.200, 16.000), stdev = 4.382
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 814982.432 ops/s
[info] # Warmup Iteration   2: 1631839.688 ops/s
[info] # Warmup Iteration   3: 1627456.290 ops/s
[info] # Warmup Iteration   4: 1678638.644 ops/s
[info] # Warmup Iteration   5: 1633397.506 ops/s
[info] Iteration   1: 1655881.362 ops/s
[info]                  ·gc.alloc.rate:                   851.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              809.439 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1279.642 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 1693396.805 ops/s
[info]                  ·gc.alloc.rate:            869.606 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.283 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 625.955 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1677759.098 ops/s
[info]                  ·gc.alloc.rate:            861.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 631.768 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1664709.152 ops/s
[info]                  ·gc.alloc.rate:            854.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.300 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 636.696 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1650239.891 ops/s
[info]                  ·gc.alloc.rate:                   847.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1283.936 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1668397.262 ±(99.9%) 67043.270 ops/s [Average]
[info]   (min, avg, max) = (1650239.891, 1668397.262, 1693396.805), stdev = 17410.924
[info]   CI (99.9%): [1601353.991, 1735440.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   856.845 ±(99.9%) 33.812 MB/sec [Average]
[info]   (min, avg, max) = (847.126, 856.845, 869.606), stdev = 8.781
[info]   CI (99.9%): [823.033, 890.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.404 ±(99.9%) 2.296 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.404, 809.439), stdev = 0.596
[info]   CI (99.9%): [806.109, 810.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.477 ±(99.9%) 1418.909 MB/sec [Average]
[info]   (min, avg, max) = (673.331, 942.477, 1346.158), stdev = 368.486
[info]   CI (99.9%): [≈ 0, 2361.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   891.599 ±(99.9%) 1371.661 B/op [Average]
[info]   (min, avg, max) = (625.955, 891.599, 1283.936), stdev = 356.216
[info]   CI (99.9%): [≈ 0, 2263.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.254 ±(99.9%) 1.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.254, 0.635), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.600, 19.000), stdev = 5.413
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1843258.154 ops/s
[info] # Warmup Iteration   2: 2215664.490 ops/s
[info] # Warmup Iteration   3: 2420598.810 ops/s
[info] # Warmup Iteration   4: 2373807.302 ops/s
[info] # Warmup Iteration   5: 2366736.780 ops/s
[info] Iteration   1: 2397090.617 ops/s
[info]                  ·gc.alloc.rate:            645.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 442.624 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 2413365.846 ops/s
[info]                  ·gc.alloc.rate:            651.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       425.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 439.608 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 2412665.104 ops/s
[info]                  ·gc.alloc.rate:            649.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 439.759 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2404275.257 ops/s
[info]                  ·gc.alloc.rate:            648.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.812 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 441.277 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 2420163.019 ops/s
[info]                  ·gc.alloc.rate:            651.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 438.404 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2409511.969 ±(99.9%) 34438.657 ops/s [Average]
[info]   (min, avg, max) = (2397090.617, 2409511.969, 2420163.019), stdev = 8943.610
[info]   CI (99.9%): [2375073.312, 2443950.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   649.696 ±(99.9%) 9.694 MB/sec [Average]
[info]   (min, avg, max) = (645.849, 649.696, 651.922), stdev = 2.518
[info]   CI (99.9%): [640.002, 659.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.442 ±(99.9%) 2.182 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.442, 425.258), stdev = 0.567
[info]   CI (99.9%): [422.261, 426.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.015 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (673.920, 674.015, 674.063), stdev = 0.060
[info]   CI (99.9%): [673.784, 674.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   440.334 ±(99.9%) 6.302 B/op [Average]
[info]   (min, avg, max) = (438.404, 440.334, 442.624), stdev = 1.637
[info]   CI (99.9%): [434.032, 446.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:37:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1984881.061 ops/s
[info] # Warmup Iteration   2: 2552318.270 ops/s
[info] # Warmup Iteration   3: 2644208.708 ops/s
[info] # Warmup Iteration   4: 2636117.124 ops/s
[info] # Warmup Iteration   5: 2647698.292 ops/s
[info] Iteration   1: 2646360.680 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2644265.713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2644976.728 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2646799.837 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2646716.498 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2645823.891 ±(99.9%) 4383.211 ops/s [Average]
[info]   (min, avg, max) = (2644265.713, 2645823.891, 2646799.837), stdev = 1138.306
[info]   CI (99.9%): [2641440.680, 2650207.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11520.583 ops/s
[info] # Warmup Iteration   2: 38307.727 ops/s
[info] # Warmup Iteration   3: 38540.552 ops/s
[info] # Warmup Iteration   4: 39057.152 ops/s
[info] # Warmup Iteration   5: 38677.705 ops/s
[info] Iteration   1: 38628.982 ops/s
[info]                  ·gc.alloc.rate:            1634.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       66598.950 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54878.237 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 38402.526 ops/s
[info]                  ·gc.alloc.rate:                   1627.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.933 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2026.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83047.416 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.992 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 327.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 39192.226 ops/s
[info]                  ·gc.alloc.rate:                                  1658.741 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66617.567 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.792 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54703.893 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                26.750 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 40034.193 ops/s
[info]                  ·gc.alloc.rate:            1694.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       66592.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53577.067 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 39955.793 ops/s
[info]                  ·gc.alloc.rate:            1690.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       66592.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80526.481 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   39242.744 ±(99.9%) 2868.699 ops/s [Average]
[info]   (min, avg, max) = (38402.526, 39242.744, 40034.193), stdev = 744.992
[info]   CI (99.9%): [36374.045, 42111.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1660.957 ±(99.9%) 119.169 MB/sec [Average]
[info]   (min, avg, max) = (1627.149, 1660.957, 1694.014), stdev = 30.948
[info]   CI (99.9%): [1541.788, 1780.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66619.494 ±(99.9%) 171.487 B/op [Average]
[info]   (min, avg, max) = (66592.010, 66619.494, 66696.933), stdev = 44.535
[info]   CI (99.9%): [66448.007, 66790.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.358 ±(99.9%) 3.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.358, 1.792), stdev = 0.802
[info]   CI (99.9%): [≈ 0, 3.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1628.418 ±(99.9%) 1430.327 MB/sec [Average]
[info]   (min, avg, max) = (1346.663, 1628.418, 2044.360), stdev = 371.451
[info]   CI (99.9%): [198.091, 3058.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65346.619 ±(99.9%) 57923.829 B/op [Average]
[info]   (min, avg, max) = (53577.067, 65346.619, 83047.416), stdev = 15042.634
[info]   CI (99.9%): [7422.790, 123270.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 13.522 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.992), stdev = 3.512
[info]   CI (99.9%): [≈ 0, 15.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   70.871 ±(99.9%) 554.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 70.871, 327.603), stdev = 143.985
[info]   CI (99.9%): [≈ 0, 625.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 19.000), stdev = 7.981
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121369.148 ops/s
[info] # Warmup Iteration   2: 217778.120 ops/s
[info] # Warmup Iteration   3: 223356.651 ops/s
[info] # Warmup Iteration   4: 221119.999 ops/s
[info] # Warmup Iteration   5: 229076.094 ops/s
[info] Iteration   1: 231941.658 ops/s
[info]                  ·gc.alloc.rate:                                  2382.225 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16168.584 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.246 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2721.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18474.342 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                22.601 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 225485.340 ops/s
[info]                  ·gc.alloc.rate:            2322.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       16210.613 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14269.408 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 225577.901 ops/s
[info]                  ·gc.alloc.rate:                                  2322.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16204.191 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19018.204 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 228430.177 ops/s
[info]                  ·gc.alloc.rate:                                  2346.330 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16168.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14085.842 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 228148.329 ops/s
[info]                  ·gc.alloc.rate:                                  2344.801 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16171.884 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14102.509 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   227916.681 ±(99.9%) 10169.472 ops/s [Average]
[info]   (min, avg, max) = (225485.340, 227916.681, 231941.658), stdev = 2640.979
[info]   CI (99.9%): [217747.209, 238086.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2343.516 ±(99.9%) 94.796 MB/sec [Average]
[info]   (min, avg, max) = (2322.006, 2343.516, 2382.225), stdev = 24.618
[info]   CI (99.9%): [2248.720, 2438.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16184.655 ±(99.9%) 80.638 B/op [Average]
[info]   (min, avg, max) = (16168.002, 16184.655, 16210.613), stdev = 20.941
[info]   CI (99.9%): [16104.017, 16265.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.036), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.064 ±(99.9%) 0.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.246), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2316.062 ±(99.9%) 1432.986 MB/sec [Average]
[info]   (min, avg, max) = (2043.948, 2316.062, 2725.493), stdev = 372.142
[info]   CI (99.9%): [883.076, 3749.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   15990.061 ±(99.9%) 9720.654 B/op [Average]
[info]   (min, avg, max) = (14085.842, 15990.061, 19018.204), stdev = 2524.423
[info]   CI (99.9%): [6269.407, 25710.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.520 ±(99.9%) 38.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.520, 22.601), stdev = 10.108
[info]   CI (99.9%): [≈ 0, 43.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74801.446 ops/s
[info] # Warmup Iteration   2: 265693.752 ops/s
[info] # Warmup Iteration   3: 277153.539 ops/s
[info] # Warmup Iteration   4: 279594.785 ops/s
[info] # Warmup Iteration   5: 280282.178 ops/s
[info] Iteration   1: 280240.512 ops/s
[info]                  ·gc.alloc.rate:            1343.568 MB/sec
[info]                  ·gc.alloc.rate.norm:       7545.835 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.538 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7556.900 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 280515.907 ops/s
[info]                  ·gc.alloc.rate:                   1344.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7553.204 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 281114.165 ops/s
[info]                  ·gc.alloc.rate:                   1347.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544.792 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7555.651 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 282912.860 ops/s
[info]                  ·gc.alloc.rate:                   1356.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              7546.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7555.896 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 284587.048 ops/s
[info]                  ·gc.alloc.rate:                                  1363.972 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7544.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7537.034 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   281874.098 ±(99.9%) 7081.915 ops/s [Average]
[info]   (min, avg, max) = (280240.512, 281874.098, 284587.048), stdev = 1839.151
[info]   CI (99.9%): [274792.183, 288956.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1351.134 ±(99.9%) 33.794 MB/sec [Average]
[info]   (min, avg, max) = (1343.568, 1351.134, 1363.972), stdev = 8.776
[info]   CI (99.9%): [1317.339, 1384.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7544.954 ±(99.9%) 3.864 B/op [Average]
[info]   (min, avg, max) = (7544.001, 7544.954, 7546.142), stdev = 1.004
[info]   CI (99.9%): [7541.090, 7548.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.141), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1352.342 ±(99.9%) 29.533 MB/sec [Average]
[info]   (min, avg, max) = (1345.538, 1352.342, 1362.712), stdev = 7.670
[info]   CI (99.9%): [1322.810, 1381.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7551.737 ±(99.9%) 32.079 B/op [Average]
[info]   (min, avg, max) = (7537.034, 7551.737, 7556.900), stdev = 8.331
[info]   CI (99.9%): [7519.658, 7583.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.996), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 9.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.670 ±(99.9%) 44.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.670, 22.376), stdev = 11.635
[info]   CI (99.9%): [≈ 0, 54.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.400, 19.000), stdev = 7.057
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:36:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1654154.425 ops/s
[info] # Warmup Iteration   2: 2103398.966 ops/s
[info] # Warmup Iteration   3: 2142897.941 ops/s
[info] # Warmup Iteration   4: 2113781.749 ops/s
[info] # Warmup Iteration   5: 2158423.076 ops/s
[info] Iteration   1: 2154761.099 ops/s
[info]                  ·gc.alloc.rate:            744.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 492.405 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 2157833.593 ops/s
[info]                  ·gc.alloc.rate:            748.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       545.918 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 491.704 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2100950.032 ops/s
[info]                  ·gc.alloc.rate:            732.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       548.696 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 505.009 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 2150483.593 ops/s
[info]                  ·gc.alloc.rate:            746.751 MB/sec
[info]                  ·gc.alloc.rate.norm:       546.491 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 493.374 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 2163211.143 ops/s
[info]                  ·gc.alloc.rate:            747.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 490.453 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2145447.892 ±(99.9%) 97435.224 ops/s [Average]
[info]   (min, avg, max) = (2100950.032, 2145447.892, 2163211.143), stdev = 25303.618
[info]   CI (99.9%): [2048012.669, 2242883.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   744.038 ±(99.9%) 25.295 MB/sec [Average]
[info]   (min, avg, max) = (732.502, 744.038, 748.338), stdev = 6.569
[info]   CI (99.9%): [718.744, 769.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   545.865 ±(99.9%) 7.354 B/op [Average]
[info]   (min, avg, max) = (544.000, 545.865, 548.696), stdev = 1.910
[info]   CI (99.9%): [538.511, 553.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.091 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (674.022, 674.091, 674.182), stdev = 0.079
[info]   CI (99.9%): [673.787, 674.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   494.589 ±(99.9%) 22.802 B/op [Average]
[info]   (min, avg, max) = (490.453, 494.589, 505.009), stdev = 5.922
[info]   CI (99.9%): [471.787, 517.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5736.946 ops/s
[info] # Warmup Iteration   2: 56768.364 ops/s
[info] # Warmup Iteration   3: 61110.951 ops/s
[info] # Warmup Iteration   4: 63258.076 ops/s
[info] # Warmup Iteration   5: 61566.232 ops/s
[info] Iteration   1: 63115.132 ops/s
[info]                  ·gc.alloc.rate:                                  2401.569 MB/sec
[info]                  ·gc.alloc.rate.norm:                             59885.563 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.709 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2720.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67837.603 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                99.663 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 63370.973 ops/s
[info]                  ·gc.alloc.rate:            2410.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       59880.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50772.771 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 63179.028 ops/s
[info]                  ·gc.alloc.rate:            2404.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       59880.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67899.498 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 63841.154 ops/s
[info]                  ·gc.alloc.rate:            2428.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       59881.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50399.044 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 63613.157 ops/s
[info]                  ·gc.alloc.rate:                                  2421.423 MB/sec
[info]                  ·gc.alloc.rate.norm:                             59902.346 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67439.535 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   63423.889 ±(99.9%) 1167.990 ops/s [Average]
[info]   (min, avg, max) = (63115.132, 63423.889, 63841.154), stdev = 303.323
[info]   CI (99.9%): [62255.899, 64591.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2413.414 ±(99.9%) 44.440 MB/sec [Average]
[info]   (min, avg, max) = (2401.569, 2413.414, 2428.894), stdev = 11.541
[info]   CI (99.9%): [2368.974, 2457.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   59885.822 ±(99.9%) 36.643 B/op [Average]
[info]   (min, avg, max) = (59880.006, 59885.822, 59902.346), stdev = 9.516
[info]   CI (99.9%): [59849.179, 59922.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.552 ±(99.9%) 4.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.552, 2.709), stdev = 1.206
[info]   CI (99.9%): [≈ 0, 5.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2452.274 ±(99.9%) 1434.401 MB/sec [Average]
[info]   (min, avg, max) = (2044.156, 2452.274, 2726.368), stdev = 372.509
[info]   CI (99.9%): [1017.873, 3886.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   60869.690 ±(99.9%) 36158.915 B/op [Average]
[info]   (min, avg, max) = (50399.044, 60869.690, 67899.498), stdev = 9390.355
[info]   CI (99.9%): [24710.775, 97028.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   19.933 ±(99.9%) 171.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.933, 99.663), stdev = 44.571
[info]   CI (99.9%): [≈ 0, 191.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 11.000), stdev = 2.702
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94915.985 ops/s
[info] # Warmup Iteration   2: 193363.754 ops/s
[info] # Warmup Iteration   3: 197468.182 ops/s
[info] # Warmup Iteration   4: 194950.813 ops/s
[info] # Warmup Iteration   5: 199438.677 ops/s
[info] Iteration   1: 194701.330 ops/s
[info]                  ·gc.alloc.rate:                   1647.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.558 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16337.220 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.924 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   2: 200954.746 ops/s
[info]                  ·gc.alloc.rate:                   1701.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              13323.833 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10611.597 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 196769.549 ops/s
[info]                  ·gc.alloc.rate:                                  1672.125 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13374.120 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.660 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16352.197 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 200726.608 ops/s
[info]                  ·gc.alloc.rate:            1699.046 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10686.644 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 201626.337 ops/s
[info]                  ·gc.alloc.rate:            1708.329 MB/sec
[info]                  ·gc.alloc.rate.norm:       13333.311 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15958.502 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   198955.714 ±(99.9%) 11733.968 ops/s [Average]
[info]   (min, avg, max) = (194701.330, 198955.714, 201626.337), stdev = 3047.274
[info]   CI (99.9%): [187221.746, 210689.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1685.601 ±(99.9%) 97.782 MB/sec [Average]
[info]   (min, avg, max) = (1647.394, 1685.601, 1708.329), stdev = 25.394
[info]   CI (99.9%): [1587.819, 1783.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13334.254 ±(99.9%) 88.335 B/op [Average]
[info]   (min, avg, max) = (13320.002, 13334.254, 13374.120), stdev = 22.940
[info]   CI (99.9%): [13245.919, 13422.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.132 ±(99.9%) 1.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.132, 0.660), stdev = 0.295
[info]   CI (99.9%): [≈ 0, 1.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1765.536 ±(99.9%) 1429.617 MB/sec [Average]
[info]   (min, avg, max) = (1354.830, 1765.536, 2044.681), stdev = 371.267
[info]   CI (99.9%): [335.919, 3195.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13989.232 ±(99.9%) 11757.112 B/op [Average]
[info]   (min, avg, max) = (10611.597, 13989.232, 16352.197), stdev = 3053.285
[info]   CI (99.9%): [2232.120, 25746.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   12.689 ±(99.9%) 68.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.689, 36.520), stdev = 17.703
[info]   CI (99.9%): [≈ 0, 80.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 25.000), stdev = 9.311
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676756.037 ops/s
[info] # Warmup Iteration   2: 1342635.477 ops/s
[info] # Warmup Iteration   3: 1365965.653 ops/s
[info] # Warmup Iteration   4: 1395627.438 ops/s
[info] # Warmup Iteration   5: 1397315.518 ops/s
[info] Iteration   1: 1392471.735 ops/s
[info]                  ·gc.alloc.rate:            815.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       921.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 761.210 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1394181.900 ops/s
[info]                  ·gc.alloc.rate:            815.401 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.421 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 760.273 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1378707.315 ops/s
[info]                  ·gc.alloc.rate:                   812.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              928.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1536.873 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 1397317.089 ops/s
[info]                  ·gc.alloc.rate:            816.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 758.543 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1393756.989 ops/s
[info]                  ·gc.alloc.rate:            814.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 759.740 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1391287.006 ±(99.9%) 27933.451 ops/s [Average]
[info]   (min, avg, max) = (1378707.315, 1391287.006, 1397317.089), stdev = 7254.229
[info]   CI (99.9%): [1363353.554, 1419220.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   815.007 ±(99.9%) 5.354 MB/sec [Average]
[info]   (min, avg, max) = (812.996, 815.007, 816.865), stdev = 1.391
[info]   CI (99.9%): [809.652, 820.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   921.973 ±(99.9%) 13.457 B/op [Average]
[info]   (min, avg, max) = (920.000, 921.973, 928.156), stdev = 3.495
[info]   CI (99.9%): [908.516, 935.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.890 ±(99.9%) 1158.724 MB/sec [Average]
[info]   (min, avg, max) = (672.805, 807.890, 1346.186), stdev = 300.917
[info]   CI (99.9%): [≈ 0, 1966.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   915.328 ±(99.9%) 1337.928 B/op [Average]
[info]   (min, avg, max) = (758.543, 915.328, 1536.873), stdev = 347.456
[info]   CI (99.9%): [≈ 0, 2253.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.152 ±(99.9%) 1.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.760), stdev = 0.340
[info]   CI (99.9%): [≈ 0, 1.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.600, 18.000), stdev = 4.159
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:35:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2125728.198 ops/s
[info] # Warmup Iteration   2: 2531143.832 ops/s
[info] # Warmup Iteration   3: 2633595.009 ops/s
[info] # Warmup Iteration   4: 2737768.907 ops/s
[info] # Warmup Iteration   5: 2766295.186 ops/s
[info] Iteration   1: 2742209.846 ops/s
[info]                  ·gc.alloc.rate:            935.468 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.962 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 773.839 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 2776186.132 ops/s
[info]                  ·gc.alloc.rate:            945.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 382.185 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 2775547.688 ops/s
[info]                  ·gc.alloc.rate:            945.288 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 382.241 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2734032.558 ops/s
[info]                  ·gc.alloc.rate:            935.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       538.381 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 776.147 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   5: 2770410.112 ops/s
[info]                  ·gc.alloc.rate:            943.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 382.983 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2759677.267 ±(99.9%) 77069.864 ops/s [Average]
[info]   (min, avg, max) = (2734032.558, 2759677.267, 2776186.132), stdev = 20014.799
[info]   CI (99.9%): [2682607.403, 2836747.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   940.998 ±(99.9%) 19.945 MB/sec [Average]
[info]   (min, avg, max) = (935.301, 940.998, 945.418), stdev = 5.180
[info]   CI (99.9%): [921.053, 960.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.673 ±(99.9%) 4.007 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.673, 538.381), stdev = 1.041
[info]   CI (99.9%): [532.666, 540.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.774 ±(99.9%) 1421.797 MB/sec [Average]
[info]   (min, avg, max) = (674.085, 943.774, 1348.360), stdev = 369.236
[info]   CI (99.9%): [≈ 0, 2365.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   539.479 ±(99.9%) 827.872 B/op [Average]
[info]   (min, avg, max) = (382.185, 539.479, 776.147), stdev = 214.996
[info]   CI (99.9%): [≈ 0, 1367.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.600, 15.000), stdev = 4.037
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2377717.511 ops/s
[info] # Warmup Iteration   2: 2993472.212 ops/s
[info] # Warmup Iteration   3: 2975908.293 ops/s
[info] # Warmup Iteration   4: 3066553.021 ops/s
[info] # Warmup Iteration   5: 3067465.587 ops/s
[info] Iteration   1: 2980392.010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3065803.371 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3067088.005 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2983710.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3067380.180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3032874.862 ±(99.9%) 178723.430 ops/s [Average]
[info]   (min, avg, max) = (2980392.010, 3032874.862, 3067380.180), stdev = 46413.907
[info]   CI (99.9%): [2854151.432, 3211598.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99999.146 ops/s
[info] # Warmup Iteration   2: 252191.955 ops/s
[info] # Warmup Iteration   3: 265019.157 ops/s
[info] # Warmup Iteration   4: 264875.972 ops/s
[info] # Warmup Iteration   5: 263991.335 ops/s
[info] Iteration   1: 274429.118 ops/s
[info]                  ·gc.alloc.rate:                                  2242.865 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11693.972 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                22.922 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 278779.658 ops/s
[info]                  ·gc.alloc.rate:                                  2278.457 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11542.113 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 278717.783 ops/s
[info]                  ·gc.alloc.rate:            2277.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       12864.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.583 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15392.576 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 278187.415 ops/s
[info]                  ·gc.alloc.rate:                                  2276.004 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12875.355 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11566.715 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 278041.110 ops/s
[info]                  ·gc.alloc.rate:            2273.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       12869.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11572.663 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   277631.017 ±(99.9%) 7003.079 ops/s [Average]
[info]   (min, avg, max) = (274429.118, 277631.017, 278779.658), stdev = 1818.677
[info]   CI (99.9%): [270627.938, 284634.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2269.689 ±(99.9%) 58.260 MB/sec [Average]
[info]   (min, avg, max) = (2242.865, 2269.689, 2278.457), stdev = 15.130
[info]   CI (99.9%): [2211.428, 2327.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12867.295 ±(99.9%) 19.332 B/op [Average]
[info]   (min, avg, max) = (12864.001, 12867.295, 12875.355), stdev = 5.020
[info]   CI (99.9%): [12847.963, 12886.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.110), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2179.542 ±(99.9%) 1175.431 MB/sec [Average]
[info]   (min, avg, max) = (2038.867, 2179.542, 2725.583), stdev = 305.256
[info]   CI (99.9%): [1004.111, 3354.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12353.608 ±(99.9%) 6545.542 B/op [Average]
[info]   (min, avg, max) = (11542.113, 12353.608, 15392.576), stdev = 1699.857
[info]   CI (99.9%): [5808.065, 18899.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.584 ±(99.9%) 39.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.584, 22.922), stdev = 10.251
[info]   CI (99.9%): [≈ 0, 44.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10149.651 ops/s
[info] # Warmup Iteration   2: 23699.654 ops/s
[info] # Warmup Iteration   3: 24000.237 ops/s
[info] # Warmup Iteration   4: 23907.013 ops/s
[info] # Warmup Iteration   5: 24283.160 ops/s
[info] Iteration   1: 24331.574 ops/s
[info]                  ·gc.alloc.rate:                   1395.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              90251.657 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.533 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        87169.478 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 24492.251 ops/s
[info]                  ·gc.alloc.rate:            1399.863 MB/sec
[info]                  ·gc.alloc.rate.norm:       89944.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86593.022 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 24347.512 ops/s
[info]                  ·gc.alloc.rate:                   1392.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              90030.230 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        87277.278 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 301.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 24643.790 ops/s
[info]                  ·gc.alloc.rate:                   1408.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              89952.968 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        86775.183 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 212.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 24707.171 ops/s
[info]                  ·gc.alloc.rate:                                  1411.856 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89944.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86819.089 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   24504.460 ±(99.9%) 653.408 ops/s [Average]
[info]   (min, avg, max) = (24331.574, 24504.460, 24707.171), stdev = 169.688
[info]   CI (99.9%): [23851.051, 25157.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1401.613 ±(99.9%) 31.984 MB/sec [Average]
[info]   (min, avg, max) = (1392.694, 1401.613, 1411.856), stdev = 8.306
[info]   CI (99.9%): [1369.629, 1433.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   90024.578 ±(99.9%) 508.317 B/op [Average]
[info]   (min, avg, max) = (89944.017, 90024.578, 90251.657), stdev = 132.008
[info]   CI (99.9%): [89516.261, 90532.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.095), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.212 ±(99.9%) 10.438 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.212, 6.061), stdev = 2.711
[info]   CI (99.9%): [≈ 0, 11.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1353.374 ±(99.9%) 26.839 MB/sec [Average]
[info]   (min, avg, max) = (1347.533, 1353.374, 1362.804), stdev = 6.970
[info]   CI (99.9%): [1326.535, 1380.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   86926.810 ±(99.9%) 1102.194 B/op [Average]
[info]   (min, avg, max) = (86593.022, 86926.810, 87277.278), stdev = 286.236
[info]   CI (99.9%): [85824.616, 88029.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   111.435 ±(99.9%) 530.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 111.435, 301.402), stdev = 137.700
[info]   CI (99.9%): [≈ 0, 641.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.000, 16.000), stdev = 5.788
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.817 ops/s
[info] # Warmup Iteration   2: 75918.868 ops/s
[info] # Warmup Iteration   3: 83749.094 ops/s
[info] # Warmup Iteration   4: 84942.875 ops/s
[info] # Warmup Iteration   5: 84112.669 ops/s
[info] Iteration   1: 83380.850 ops/s
[info]                  ·gc.alloc.rate:            751.000 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25322.942 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  23.000 ms
[info] Iteration   2: 84836.515 ops/s
[info]                  ·gc.alloc.rate:                   767.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              14235.831 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12431.998 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.358 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 82551.293 ops/s
[info]                  ·gc.alloc.rate:            743.813 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12789.371 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 85095.710 ops/s
[info]                  ·gc.alloc.rate:            766.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       14177.957 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12394.311 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 84989.024 ops/s
[info]                  ·gc.alloc.rate:                   765.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12409.767 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.336 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   84170.678 ±(99.9%) 4396.716 ops/s [Average]
[info]   (min, avg, max) = (82551.293, 84170.678, 85095.710), stdev = 1141.813
[info]   CI (99.9%): [79773.962, 88567.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   758.876 ±(99.9%) 41.571 MB/sec [Average]
[info]   (min, avg, max) = (743.813, 758.876, 767.495), stdev = 10.796
[info]   CI (99.9%): [717.306, 800.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14188.361 ±(99.9%) 102.235 B/op [Average]
[info]   (min, avg, max) = (14176.005, 14188.361, 14235.831), stdev = 26.550
[info]   CI (99.9%): [14086.125, 14290.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   804.618 ±(99.9%) 1155.742 MB/sec [Average]
[info]   (min, avg, max) = (670.072, 804.618, 1341.529), stdev = 300.143
[info]   CI (99.9%): [≈ 0, 1960.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   15069.678 ±(99.9%) 22079.950 B/op [Average]
[info]   (min, avg, max) = (12394.311, 15069.678, 25322.942), stdev = 5734.093
[info]   CI (99.9%): [≈ 0, 37149.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   4.939 ±(99.9%) 26.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.939, 12.358), stdev = 6.763
[info]   CI (99.9%): [≈ 0, 30.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 14.000, 23.000), stdev = 5.050
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20975.813 ops/s
[info] # Warmup Iteration   2: 51978.643 ops/s
[info] # Warmup Iteration   3: 52395.391 ops/s
[info] # Warmup Iteration   4: 54262.352 ops/s
[info] # Warmup Iteration   5: 53072.803 ops/s
[info] Iteration   1: 53874.474 ops/s
[info]                  ·gc.alloc.rate:                   889.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.319 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39328.411 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 54285.938 ops/s
[info]                  ·gc.alloc.rate:            896.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       25990.769 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19505.696 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 54341.343 ops/s
[info]                  ·gc.alloc.rate:            896.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       25976.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19485.598 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 53818.995 ops/s
[info]                  ·gc.alloc.rate:                   888.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              25985.283 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39349.846 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.480 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 54418.916 ops/s
[info]                  ·gc.alloc.rate:            898.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       25976.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19476.582 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   54147.933 ±(99.9%) 1076.915 ops/s [Average]
[info]   (min, avg, max) = (53818.995, 54147.933, 54418.916), stdev = 279.671
[info]   CI (99.9%): [53071.018, 55224.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   893.817 ±(99.9%) 17.666 MB/sec [Average]
[info]   (min, avg, max) = (888.414, 893.817, 898.220), stdev = 4.588
[info]   CI (99.9%): [876.151, 911.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25980.877 ±(99.9%) 26.220 B/op [Average]
[info]   (min, avg, max) = (25976.008, 25980.877, 25990.769), stdev = 6.809
[info]   CI (99.9%): [25954.657, 26007.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.130 ±(99.9%) 1419.232 MB/sec [Average]
[info]   (min, avg, max) = (672.702, 942.130, 1346.419), stdev = 368.570
[info]   CI (99.9%): [≈ 0, 2361.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   27429.227 ±(99.9%) 41865.013 B/op [Average]
[info]   (min, avg, max) = (19476.582, 27429.227, 39349.846), stdev = 10872.211
[info]   CI (99.9%): [≈ 0, 69294.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.788 ±(99.9%) 41.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.788, 19.480), stdev = 10.664
[info]   CI (99.9%): [≈ 0, 48.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.600, 18.000), stdev = 4.930
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82528.494 ops/s
[info] # Warmup Iteration   2: 131804.696 ops/s
[info] # Warmup Iteration   3: 131365.165 ops/s
[info] # Warmup Iteration   4: 132690.760 ops/s
[info] # Warmup Iteration   5: 135471.178 ops/s
[info] Iteration   1: 136925.805 ops/s
[info]                  ·gc.alloc.rate:            882.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       10145.797 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7748.796 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 136797.843 ops/s
[info]                  ·gc.alloc.rate:            881.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7755.706 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 135533.955 ops/s
[info]                  ·gc.alloc.rate:            875.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       10166.947 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15656.392 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 133920.074 ops/s
[info]                  ·gc.alloc.rate:            873.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       10268.123 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.234 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7922.526 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 136688.072 ops/s
[info]                  ·gc.alloc.rate:            881.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       10145.217 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7762.003 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   135973.150 ±(99.9%) 4911.194 ops/s [Average]
[info]   (min, avg, max) = (133920.074, 135973.150, 136925.805), stdev = 1275.421
[info]   CI (99.9%): [131061.956, 140884.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   878.898 ±(99.9%) 15.009 MB/sec [Average]
[info]   (min, avg, max) = (873.852, 878.898, 882.461), stdev = 3.898
[info]   CI (99.9%): [863.889, 893.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10174.017 ±(99.9%) 205.861 B/op [Average]
[info]   (min, avg, max) = (10144.003, 10174.017, 10268.123), stdev = 53.461
[info]   CI (99.9%): [9968.157, 10379.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.925 ±(99.9%) 1161.135 MB/sec [Average]
[info]   (min, avg, max) = (673.975, 808.925, 1348.341), stdev = 301.543
[info]   CI (99.9%): [≈ 0, 1970.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9369.084 ±(99.9%) 13536.780 B/op [Average]
[info]   (min, avg, max) = (7748.796, 9369.084, 15656.392), stdev = 3515.459
[info]   CI (99.9%): [≈ 0, 22905.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.000, 15.000), stdev = 3.391
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5960.445 ops/s
[info] # Warmup Iteration   2: 25394.689 ops/s
[info] # Warmup Iteration   3: 28925.041 ops/s
[info] # Warmup Iteration   4: 28656.897 ops/s
[info] # Warmup Iteration   5: 28693.045 ops/s
[info] Iteration   1: 29512.216 ops/s
[info]                  ·gc.alloc.rate:                   1540.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              82181.649 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.190 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71792.537 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.523 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 29233.023 ops/s
[info]                  ·gc.alloc.rate:                   1526.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              82187.559 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2021.533 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        108845.617 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 251.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   3: 29035.516 ops/s
[info]                  ·gc.alloc.rate:                   1516.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              82183.637 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        73588.082 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 216.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 29102.837 ops/s
[info]                  ·gc.alloc.rate:                                  1520.683 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82246.987 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73704.359 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 29284.699 ops/s
[info]                  ·gc.alloc.rate:            1528.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       82176.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73243.880 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   29233.658 ±(99.9%) 711.522 ops/s [Average]
[info]   (min, avg, max) = (29035.516, 29233.658, 29512.216), stdev = 184.780
[info]   CI (99.9%): [28522.136, 29945.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1526.611 ±(99.9%) 36.520 MB/sec [Average]
[info]   (min, avg, max) = (1516.015, 1526.611, 1540.998), stdev = 9.484
[info]   CI (99.9%): [1490.090, 1563.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82195.169 ±(99.9%) 112.688 B/op [Average]
[info]   (min, avg, max) = (82176.014, 82195.169, 82246.987), stdev = 29.265
[info]   CI (99.9%): [82082.481, 82307.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1490.132 ±(99.9%) 1144.178 MB/sec [Average]
[info]   (min, avg, max) = (1346.190, 1490.132, 2021.533), stdev = 297.139
[info]   CI (99.9%): [345.954, 2634.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80234.895 ±(99.9%) 61656.889 B/op [Average]
[info]   (min, avg, max) = (71792.537, 80234.895, 108845.617), stdev = 16012.098
[info]   CI (99.9%): [18578.006, 141891.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 8.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.663), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 10.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   100.643 ±(99.9%) 473.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 100.643, 251.044), stdev = 123.061
[info]   CI (99.9%): [≈ 0, 574.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.200, 24.000), stdev = 9.706
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16401.106 ops/s
[info] # Warmup Iteration   2: 30036.469 ops/s
[info] # Warmup Iteration   3: 29674.559 ops/s
[info] # Warmup Iteration   4: 29953.157 ops/s
[info] # Warmup Iteration   5: 29773.639 ops/s
[info] Iteration   1: 29382.617 ops/s
[info]                  ·gc.alloc.rate:      342.128 MB/sec
[info]                  ·gc.alloc.rate.norm: 18327.484 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 29863.941 ops/s
[info]                  ·gc.alloc.rate:            341.018 MB/sec
[info]                  ·gc.alloc.rate.norm:       17976.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35528.288 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 30124.921 ops/s
[info]                  ·gc.alloc.rate:      344.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 17976.139 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 29753.047 ops/s
[info]                  ·gc.alloc.rate:            343.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       18154.244 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35659.618 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 30116.971 ops/s
[info]                  ·gc.alloc.rate:      343.968 MB/sec
[info]                  ·gc.alloc.rate.norm: 17976.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   29848.299 ±(99.9%) 1178.828 ops/s [Average]
[info]   (min, avg, max) = (29382.617, 29848.299, 30124.921), stdev = 306.138
[info]   CI (99.9%): [28669.471, 31027.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   342.883 ±(99.9%) 4.966 MB/sec [Average]
[info]   (min, avg, max) = (341.018, 342.883, 344.003), stdev = 1.290
[info]   CI (99.9%): [337.917, 347.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   18081.979 ±(99.9%) 606.259 B/op [Average]
[info]   (min, avg, max) = (17976.014, 18081.979, 18327.484), stdev = 157.444
[info]   CI (99.9%): [17475.719, 18688.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   269.665 ±(99.9%) 1421.864 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.665, 674.326), stdev = 369.253
[info]   CI (99.9%): [≈ 0, 1691.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   14237.581 ±(99.9%) 75070.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14237.581, 35659.618), stdev = 19495.666
[info]   CI (99.9%): [≈ 0, 89308.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 8.000), stdev = 4.382
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12307.275 ops/s
[info] # Warmup Iteration   2: 29575.594 ops/s
[info] # Warmup Iteration   3: 28914.852 ops/s
[info] # Warmup Iteration   4: 29582.455 ops/s
[info] # Warmup Iteration   5: 29136.821 ops/s
[info] Iteration   1: 29690.382 ops/s
[info]                  ·gc.alloc.rate:      333.416 MB/sec
[info]                  ·gc.alloc.rate.norm: 17672.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 29310.310 ops/s
[info]                  ·gc.alloc.rate:            330.168 MB/sec
[info]                  ·gc.alloc.rate.norm:       17731.664 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36161.493 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 29679.104 ops/s
[info]                  ·gc.alloc.rate:      333.533 MB/sec
[info]                  ·gc.alloc.rate.norm: 17688.664 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 29376.541 ops/s
[info]                  ·gc.alloc.rate:            331.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       17756.528 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36080.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 29738.468 ops/s
[info]                  ·gc.alloc.rate:      334.082 MB/sec
[info]                  ·gc.alloc.rate.norm: 17681.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   29558.961 ±(99.9%) 767.797 ops/s [Average]
[info]   (min, avg, max) = (29310.310, 29558.961, 29738.468), stdev = 199.394
[info]   CI (99.9%): [28791.164, 30326.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   332.520 ±(99.9%) 6.401 MB/sec [Average]
[info]   (min, avg, max) = (330.168, 332.520, 334.082), stdev = 1.662
[info]   CI (99.9%): [326.119, 338.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17705.979 ±(99.9%) 140.048 B/op [Average]
[info]   (min, avg, max) = (17672.014, 17705.979, 17756.528), stdev = 36.370
[info]   CI (99.9%): [17565.932, 17846.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.345 ±(99.9%) 1420.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.345, 673.387), stdev = 368.815
[info]   CI (99.9%): [≈ 0, 1689.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14448.352 ±(99.9%) 76182.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14448.352, 36161.493), stdev = 19784.241
[info]   CI (99.9%): [≈ 0, 90630.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 9.000), stdev = 4.669
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22723.588 ops/s
[info] # Warmup Iteration   2: 30127.992 ops/s
[info] # Warmup Iteration   3: 32664.578 ops/s
[info] # Warmup Iteration   4: 31409.164 ops/s
[info] # Warmup Iteration   5: 32702.831 ops/s
[info] Iteration   1: 31538.296 ops/s
[info]                  ·gc.alloc.rate:            346.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       17294.811 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33642.728 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 31056.867 ops/s
[info]                  ·gc.alloc.rate:      341.211 MB/sec
[info]                  ·gc.alloc.rate.norm: 17288.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 32458.333 ops/s
[info]                  ·gc.alloc.rate:            359.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       17413.625 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32689.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 32709.839 ops/s
[info]                  ·gc.alloc.rate:      359.346 MB/sec
[info]                  ·gc.alloc.rate.norm: 17288.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32366.289 ops/s
[info]                  ·gc.alloc.rate:                   358.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              17433.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32745.732 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 32.389 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   32025.925 ±(99.9%) 2686.786 ops/s [Average]
[info]   (min, avg, max) = (31056.867, 32025.925, 32709.839), stdev = 697.750
[info]   CI (99.9%): [29339.139, 34712.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   352.935 ±(99.9%) 32.650 MB/sec [Average]
[info]   (min, avg, max) = (341.211, 352.935, 359.346), stdev = 8.479
[info]   CI (99.9%): [320.285, 385.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   17343.544 ±(99.9%) 282.322 B/op [Average]
[info]   (min, avg, max) = (17288.012, 17343.544, 17433.258), stdev = 73.318
[info]   CI (99.9%): [17061.222, 17625.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.312 ±(99.9%) 1421.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.312, 674.152), stdev = 369.085
[info]   CI (99.9%): [≈ 0, 1825.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   19815.545 ±(99.9%) 69669.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19815.545, 33642.728), stdev = 18092.989
[info]   CI (99.9%): [≈ 0, 89485.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.478 ±(99.9%) 55.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.478, 32.389), stdev = 14.485
[info]   CI (99.9%): [≈ 0, 62.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23024.320 ops/s
[info] # Warmup Iteration   2: 32788.584 ops/s
[info] # Warmup Iteration   3: 32557.897 ops/s
[info] # Warmup Iteration   4: 32487.955 ops/s
[info] # Warmup Iteration   5: 32405.893 ops/s
[info] Iteration   1: 32758.041 ops/s
[info]                  ·gc.alloc.rate:      322.380 MB/sec
[info]                  ·gc.alloc.rate.norm: 15488.204 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 31546.315 ops/s
[info]                  ·gc.alloc.rate:            314.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       15715.297 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33633.131 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 32884.549 ops/s
[info]                  ·gc.alloc.rate:      323.614 MB/sec
[info]                  ·gc.alloc.rate.norm: 15488.153 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 32566.208 ops/s
[info]                  ·gc.alloc.rate:            320.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       15488.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32578.869 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 32866.363 ops/s
[info]                  ·gc.alloc.rate:      323.447 MB/sec
[info]                  ·gc.alloc.rate.norm: 15488.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   32524.295 ±(99.9%) 2160.853 ops/s [Average]
[info]   (min, avg, max) = (31546.315, 32524.295, 32884.549), stdev = 561.167
[info]   CI (99.9%): [30363.442, 34685.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   320.970 ±(99.9%) 13.838 MB/sec [Average]
[info]   (min, avg, max) = (314.946, 320.970, 323.614), stdev = 3.594
[info]   CI (99.9%): [307.132, 334.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   15533.536 ±(99.9%) 391.254 B/op [Average]
[info]   (min, avg, max) = (15488.012, 15533.536, 15715.297), stdev = 101.607
[info]   CI (99.9%): [15142.281, 15924.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.624 ±(99.9%) 1421.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.624, 674.089), stdev = 369.198
[info]   CI (99.9%): [≈ 0, 1691.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   13242.400 ±(99.9%) 69838.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13242.400, 33633.131), stdev = 18136.733
[info]   CI (99.9%): [≈ 0, 83080.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 8.000), stdev = 4.382
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2793.306 ops/s
[info] # Warmup Iteration   2: 18528.756 ops/s
[info] # Warmup Iteration   3: 19950.609 ops/s
[info] # Warmup Iteration   4: 19669.803 ops/s
[info] # Warmup Iteration   5: 19907.370 ops/s
[info] Iteration   1: 19936.094 ops/s
[info]                  ·gc.alloc.rate:            698.329 MB/sec
[info]                  ·gc.alloc.rate.norm:       55139.921 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53214.930 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 19723.464 ops/s
[info]                  ·gc.alloc.rate:            700.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       55897.167 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53789.483 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 19756.494 ops/s
[info]                  ·gc.alloc.rate:            693.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       55242.472 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53702.374 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 19982.165 ops/s
[info]                  ·gc.alloc.rate:                   698.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              54941.216 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        105804.242 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 20220.790 ops/s
[info]                  ·gc.alloc.rate:            705.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       54912.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52470.278 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19923.802 ±(99.9%) 769.855 ops/s [Average]
[info]   (min, avg, max) = (19723.464, 19923.802, 20220.790), stdev = 199.929
[info]   CI (99.9%): [19153.947, 20693.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   699.240 ±(99.9%) 17.148 MB/sec [Average]
[info]   (min, avg, max) = (693.400, 699.240, 705.735), stdev = 4.453
[info]   CI (99.9%): [682.092, 716.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55226.559 ±(99.9%) 1537.644 B/op [Average]
[info]   (min, avg, max) = (54912.020, 55226.559, 55897.167), stdev = 399.321
[info]   CI (99.9%): [53688.915, 56764.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   808.238 ±(99.9%) 1155.023 MB/sec [Average]
[info]   (min, avg, max) = (673.949, 808.238, 1344.815), stdev = 299.956
[info]   CI (99.9%): [≈ 0, 1963.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   63796.261 ±(99.9%) 90447.829 B/op [Average]
[info]   (min, avg, max) = (52470.278, 63796.261, 105804.242), stdev = 23489.014
[info]   CI (99.9%): [≈ 0, 154244.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.665), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.460 ±(99.9%) 90.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.460, 52.301), stdev = 23.390
[info]   CI (99.9%): [≈ 0, 100.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.800, 16.000), stdev = 3.493
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6828.298 ops/s
[info] # Warmup Iteration   2: 17423.157 ops/s
[info] # Warmup Iteration   3: 18186.808 ops/s
[info] # Warmup Iteration   4: 18577.715 ops/s
[info] # Warmup Iteration   5: 17608.541 ops/s
[info] Iteration   1: 18389.091 ops/s
[info]                  ·gc.alloc.rate:            520.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       44552.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57582.740 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 18010.570 ops/s
[info]                  ·gc.alloc.rate:            517.427 MB/sec
[info]                  ·gc.alloc.rate.norm:       45212.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58791.038 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 18535.474 ops/s
[info]                  ·gc.alloc.rate:      524.696 MB/sec
[info]                  ·gc.alloc.rate.norm: 44556.644 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18391.844 ops/s
[info]                  ·gc.alloc.rate:            520.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       44552.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57573.349 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 18404.912 ops/s
[info]                  ·gc.alloc.rate:            521.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       44552.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57532.690 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   18346.378 ±(99.9%) 760.056 ops/s [Average]
[info]   (min, avg, max) = (18010.570, 18346.378, 18535.474), stdev = 197.384
[info]   CI (99.9%): [17586.322, 19106.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   520.847 ±(99.9%) 9.956 MB/sec [Average]
[info]   (min, avg, max) = (517.427, 520.847, 524.696), stdev = 2.586
[info]   CI (99.9%): [510.891, 530.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44684.957 ±(99.9%) 1134.682 B/op [Average]
[info]   (min, avg, max) = (44552.022, 44684.957, 45212.072), stdev = 294.673
[info]   CI (99.9%): [43550.274, 45819.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.227 ±(99.9%) 1158.575 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.227, 672.835), stdev = 300.878
[info]   CI (99.9%): [≈ 0, 1696.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   46295.964 ±(99.9%) 99676.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46295.964, 58791.038), stdev = 25885.700
[info]   CI (99.9%): [≈ 0, 145972.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.400, 10.000), stdev = 4.159
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80522.420 ops/s
[info] # Warmup Iteration   2: 97331.892 ops/s
[info] # Warmup Iteration   3: 94993.581 ops/s
[info] # Warmup Iteration   4: 102091.327 ops/s
[info] # Warmup Iteration   5: 101444.646 ops/s
[info] Iteration   1: 102402.297 ops/s
[info]                  ·gc.alloc.rate:      266.587 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 101260.469 ops/s
[info]                  ·gc.alloc.rate:      276.253 MB/sec
[info]                  ·gc.alloc.rate.norm: 4293.736 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 101215.884 ops/s
[info]                  ·gc.alloc.rate:            265.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       4126.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10482.860 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 102200.308 ops/s
[info]                  ·gc.alloc.rate:      266.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 4098.626 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 101273.866 ops/s
[info]                  ·gc.alloc.rate:            263.531 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10476.340 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   101670.565 ±(99.9%) 2235.648 ops/s [Average]
[info]   (min, avg, max) = (101215.884, 101670.565, 102402.297), stdev = 580.591
[info]   CI (99.9%): [99434.916, 103906.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   267.571 ±(99.9%) 19.220 MB/sec [Average]
[info]   (min, avg, max) = (263.531, 267.571, 276.253), stdev = 4.991
[info]   CI (99.9%): [248.351, 286.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4142.096 ±(99.9%) 330.061 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4142.096, 4293.736), stdev = 85.716
[info]   CI (99.9%): [3812.036, 4472.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.642 ±(99.9%) 1421.742 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.642, 674.176), stdev = 369.222
[info]   CI (99.9%): [≈ 0, 1691.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4191.840 ±(99.9%) 22102.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4191.840, 10482.860), stdev = 5739.914
[info]   CI (99.9%): [≈ 0, 26294.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:31:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4454.416 ops/s
[info] # Warmup Iteration   2: 13811.047 ops/s
[info] # Warmup Iteration   3: 14098.727 ops/s
[info] # Warmup Iteration   4: 14570.114 ops/s
[info] # Warmup Iteration   5: 14560.005 ops/s
[info] Iteration   1: 14525.905 ops/s
[info]                  ·gc.alloc.rate:            865.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       93800.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145920.211 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 14834.712 ops/s
[info]                  ·gc.alloc.rate:            885.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       93987.252 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71370.157 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 14944.939 ops/s
[info]                  ·gc.alloc.rate:            893.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       94142.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70854.470 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 14502.263 ops/s
[info]                  ·gc.alloc.rate:            866.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       94004.540 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 146027.130 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   5: 14975.798 ops/s
[info]                  ·gc.alloc.rate:            898.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       94428.634 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70703.102 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   14756.723 ±(99.9%) 877.085 ops/s [Average]
[info]   (min, avg, max) = (14502.263, 14756.723, 14975.798), stdev = 227.776
[info]   CI (99.9%): [13879.638, 15633.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   882.035 ±(99.9%) 59.147 MB/sec [Average]
[info]   (min, avg, max) = (865.661, 882.035, 898.424), stdev = 15.360
[info]   CI (99.9%): [822.888, 941.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   94072.505 ±(99.9%) 898.515 B/op [Average]
[info]   (min, avg, max) = (93800.037, 94072.505, 94428.634), stdev = 233.341
[info]   CI (99.9%): [93173.991, 94971.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   942.101 ±(99.9%) 1420.247 MB/sec [Average]
[info]   (min, avg, max) = (672.692, 942.101, 1346.668), stdev = 368.834
[info]   CI (99.9%): [≈ 0, 2362.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   100975.014 ±(99.9%) 158179.552 B/op [Average]
[info]   (min, avg, max) = (70703.102, 100975.014, 146027.130), stdev = 41078.727
[info]   CI (99.9%): [≈ 0, 259154.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.200, 19.000), stdev = 4.868
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21840.752 ops/s
[info] # Warmup Iteration   2: 43156.101 ops/s
[info] # Warmup Iteration   3: 43602.918 ops/s
[info] # Warmup Iteration   4: 42389.507 ops/s
[info] # Warmup Iteration   5: 43757.300 ops/s
[info] Iteration   1: 41919.756 ops/s
[info]                  ·gc.alloc.rate:            634.664 MB/sec
[info]                  ·gc.alloc.rate.norm:       23825.352 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25310.283 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 42119.872 ops/s
[info]                  ·gc.alloc.rate:            637.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       23830.373 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25190.716 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 43544.736 ops/s
[info]                  ·gc.alloc.rate:                   662.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              23963.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24341.814 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 43925.605 ops/s
[info]                  ·gc.alloc.rate:            665.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       23827.791 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24154.578 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 43939.130 ops/s
[info]                  ·gc.alloc.rate:            665.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       23836.507 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24122.473 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   43089.820 ±(99.9%) 3820.036 ops/s [Average]
[info]   (min, avg, max) = (41919.756, 43089.820, 43939.130), stdev = 992.051
[info]   CI (99.9%): [39269.784, 46909.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   653.186 ±(99.9%) 60.169 MB/sec [Average]
[info]   (min, avg, max) = (634.664, 653.186, 665.684), stdev = 15.626
[info]   CI (99.9%): [593.017, 713.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23856.622 ±(99.9%) 229.729 B/op [Average]
[info]   (min, avg, max) = (23825.352, 23856.622, 23963.086), stdev = 59.660
[info]   CI (99.9%): [23626.893, 24086.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   673.893 ±(99.9%) 1.317 MB/sec [Average]
[info]   (min, avg, max) = (673.411, 673.893, 674.220), stdev = 0.342
[info]   CI (99.9%): [672.576, 675.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   24623.973 ±(99.9%) 2231.768 B/op [Average]
[info]   (min, avg, max) = (24122.473, 24623.973, 25310.283), stdev = 579.583
[info]   CI (99.9%): [22392.205, 26855.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.815 ±(99.9%) 41.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.815, 24.077), stdev = 10.768
[info]   CI (99.9%): [≈ 0, 46.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26498.812 ops/s
[info] # Warmup Iteration   2: 54252.885 ops/s
[info] # Warmup Iteration   3: 54312.806 ops/s
[info] # Warmup Iteration   4: 54771.467 ops/s
[info] # Warmup Iteration   5: 55155.567 ops/s
[info] Iteration   1: 54565.992 ops/s
[info]                  ·gc.alloc.rate:                   762.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              21992.883 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19405.976 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.214 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 55540.033 ops/s
[info]                  ·gc.alloc.rate:            767.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       21736.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19083.207 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 55600.754 ops/s
[info]                  ·gc.alloc.rate:                   767.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              21736.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19044.448 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.856 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 55430.597 ops/s
[info]                  ·gc.alloc.rate:            765.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       21742.677 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19121.414 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 55084.530 ops/s
[info]                  ·gc.alloc.rate:            760.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       21739.989 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19242.546 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   55244.381 ±(99.9%) 1650.454 ops/s [Average]
[info]   (min, avg, max) = (54565.992, 55244.381, 55600.754), stdev = 428.618
[info]   CI (99.9%): [53593.927, 56894.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   764.751 ±(99.9%) 11.708 MB/sec [Average]
[info]   (min, avg, max) = (760.803, 764.751, 767.829), stdev = 3.041
[info]   CI (99.9%): [753.043, 776.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21789.537 ±(99.9%) 437.850 B/op [Average]
[info]   (min, avg, max) = (21736.007, 21789.537, 21992.883), stdev = 113.708
[info]   CI (99.9%): [21351.687, 22227.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   673.134 ±(99.9%) 1.465 MB/sec [Average]
[info]   (min, avg, max) = (672.691, 673.134, 673.438), stdev = 0.381
[info]   CI (99.9%): [671.669, 674.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19179.518 ±(99.9%) 565.113 B/op [Average]
[info]   (min, avg, max) = (19044.448, 19179.518, 19405.976), stdev = 146.758
[info]   CI (99.9%): [18614.406, 19744.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.614 ±(99.9%) 40.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.614, 19.214), stdev = 10.427
[info]   CI (99.9%): [≈ 0, 47.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123306.855 ops/s
[info] # Warmup Iteration   2: 168174.552 ops/s
[info] # Warmup Iteration   3: 167992.295 ops/s
[info] # Warmup Iteration   4: 169462.116 ops/s
[info] # Warmup Iteration   5: 167987.940 ops/s
[info] Iteration   1: 168577.357 ops/s
[info]                  ·gc.alloc.rate:      267.903 MB/sec
[info]                  ·gc.alloc.rate.norm: 2501.640 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 163171.832 ops/s
[info]                  ·gc.alloc.rate:      258.817 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 165388.645 ops/s
[info]                  ·gc.alloc.rate:            262.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       2497.621 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6415.170 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 168953.708 ops/s
[info]                  ·gc.alloc.rate:      269.644 MB/sec
[info]                  ·gc.alloc.rate.norm: 2512.175 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 168262.279 ops/s
[info]                  ·gc.alloc.rate:            267.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       2498.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6305.388 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   166870.764 ±(99.9%) 9639.348 ops/s [Average]
[info]   (min, avg, max) = (163171.832, 166870.764, 168953.708), stdev = 2503.308
[info]   CI (99.9%): [157231.416, 176510.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   265.191 ±(99.9%) 17.075 MB/sec [Average]
[info]   (min, avg, max) = (258.817, 265.191, 269.644), stdev = 4.434
[info]   CI (99.9%): [248.116, 282.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2501.106 ±(99.9%) 25.108 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2501.106, 2512.175), stdev = 6.521
[info]   CI (99.9%): [2475.998, 2526.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.678 ±(99.9%) 1421.934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.678, 674.237), stdev = 369.272
[info]   CI (99.9%): [≈ 0, 1691.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2544.112 ±(99.9%) 13415.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2544.112, 6415.170), stdev = 3483.884
[info]   CI (99.9%): [≈ 0, 15959.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136750.942 ops/s
[info] # Warmup Iteration   2: 173315.492 ops/s
[info] # Warmup Iteration   3: 176024.742 ops/s
[info] # Warmup Iteration   4: 177130.526 ops/s
[info] # Warmup Iteration   5: 177158.869 ops/s
[info] Iteration   1: 176996.768 ops/s
[info]                  ·gc.alloc.rate:      0.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.606 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 175492.541 ops/s
[info]                  ·gc.alloc.rate:      7.481 MB/sec
[info]                  ·gc.alloc.rate.norm: 67.092 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 177173.055 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 177352.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 177045.144 ops/s
[info]                  ·gc.alloc.rate:      0.004 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   176812.008 ±(99.9%) 2889.268 ops/s [Average]
[info]   (min, avg, max) = (175492.541, 176812.008, 177352.533), stdev = 750.334
[info]   CI (99.9%): [173922.740, 179701.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.578 ±(99.9%) 12.724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.578, 7.481), stdev = 3.304
[info]   CI (99.9%): [≈ 0, 14.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   14.148 ±(99.9%) 114.122 B/op [Average]
[info]   (min, avg, max) = (0.002, 14.148, 67.092), stdev = 29.637
[info]   CI (99.9%): [≈ 0, 128.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21243.070 ops/s
[info] # Warmup Iteration   2: 48727.187 ops/s
[info] # Warmup Iteration   3: 50391.213 ops/s
[info] # Warmup Iteration   4: 50214.368 ops/s
[info] # Warmup Iteration   5: 51430.696 ops/s
[info] Iteration   1: 51406.926 ops/s
[info]                  ·gc.alloc.rate:            799.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       24480.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20619.099 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 51119.239 ops/s
[info]                  ·gc.alloc.rate:            795.885 MB/sec
[info]                  ·gc.alloc.rate.norm:       24504.614 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20734.438 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 44404.325 ops/s
[info]                  ·gc.alloc.rate:            691.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       24496.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23870.983 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 51409.378 ops/s
[info]                  ·gc.alloc.rate:                   799.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              24480.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20596.701 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.393 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 50841.047 ops/s
[info]                  ·gc.alloc.rate:            791.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       24486.637 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41676.607 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   49836.183 ±(99.9%) 11727.603 ops/s [Average]
[info]   (min, avg, max) = (44404.325, 49836.183, 51409.378), stdev = 3045.621
[info]   CI (99.9%): [38108.580, 61563.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   775.473 ±(99.9%) 181.619 MB/sec [Average]
[info]   (min, avg, max) = (691.330, 775.473, 799.581), stdev = 47.166
[info]   CI (99.9%): [593.855, 957.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24489.503 ±(99.9%) 41.399 B/op [Average]
[info]   (min, avg, max) = (24480.008, 24489.503, 24504.614), stdev = 10.751
[info]   CI (99.9%): [24448.104, 24530.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   807.937 ±(99.9%) 1159.134 MB/sec [Average]
[info]   (min, avg, max) = (672.742, 807.937, 1346.423), stdev = 301.023
[info]   CI (99.9%): [≈ 0, 1967.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   25499.565 ±(99.9%) 35234.572 B/op [Average]
[info]   (min, avg, max) = (20596.701, 25499.565, 41676.607), stdev = 9150.306
[info]   CI (99.9%): [≈ 0, 60734.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.079 ±(99.9%) 35.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.079, 20.393), stdev = 9.120
[info]   CI (99.9%): [≈ 0, 39.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 18.000), stdev = 4.025
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36498.785 ops/s
[info] # Warmup Iteration   2: 85426.540 ops/s
[info] # Warmup Iteration   3: 84933.193 ops/s
[info] # Warmup Iteration   4: 86377.203 ops/s
[info] # Warmup Iteration   5: 89078.983 ops/s
[info] Iteration   1: 89289.368 ops/s
[info]                  ·gc.alloc.rate:                   1795.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              31656.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23741.609 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 58.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 88277.848 ops/s
[info]                  ·gc.alloc.rate:                   1775.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              31661.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36279.414 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 83.128 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 89356.587 ops/s
[info]                  ·gc.alloc.rate:                                  1797.940 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31656.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2045.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36007.695 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 89749.274 ops/s
[info]                  ·gc.alloc.rate:            1806.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       31679.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23900.300 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 89192.597 ops/s
[info]                  ·gc.alloc.rate:            1793.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       31656.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36072.679 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   89173.135 ±(99.9%) 2092.337 ops/s [Average]
[info]   (min, avg, max) = (88277.848, 89173.135, 89749.274), stdev = 543.373
[info]   CI (99.9%): [87080.798, 91265.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1794.006 ±(99.9%) 43.226 MB/sec [Average]
[info]   (min, avg, max) = (1775.824, 1794.006, 1806.442), stdev = 11.226
[info]   CI (99.9%): [1750.780, 1837.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31661.608 ±(99.9%) 38.374 B/op [Average]
[info]   (min, avg, max) = (31656.005, 31661.608, 31679.007), stdev = 9.966
[info]   CI (99.9%): [31623.235, 31699.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.215 ±(99.9%) 1.849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.215, 1.074), stdev = 0.480
[info]   CI (99.9%): [≈ 0, 2.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1766.796 ±(99.9%) 1448.249 MB/sec [Average]
[info]   (min, avg, max) = (1346.852, 1766.796, 2045.100), stdev = 376.106
[info]   CI (99.9%): [318.547, 3215.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31200.339 ±(99.9%) 25943.354 B/op [Average]
[info]   (min, avg, max) = (23741.609, 31200.339, 36279.414), stdev = 6737.407
[info]   CI (99.9%): [5256.985, 57143.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.367 ±(99.9%) 153.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.367, 83.128), stdev = 39.791
[info]   CI (99.9%): [≈ 0, 181.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 17.000), stdev = 5.788
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:29:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29554.301 ops/s
[info] # Warmup Iteration   2: 91586.614 ops/s
[info] # Warmup Iteration   3: 96351.818 ops/s
[info] # Warmup Iteration   4: 92315.210 ops/s
[info] # Warmup Iteration   5: 92168.825 ops/s
[info] Iteration   1: 98653.172 ops/s
[info]                  ·gc.alloc.rate:            1293.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       20617.687 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1343.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21424.619 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 99129.899 ops/s
[info]                  ·gc.alloc.rate:            1298.638 MB/sec
[info]                  ·gc.alloc.rate.norm:       20620.200 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10681.948 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 97323.319 ops/s
[info]                  ·gc.alloc.rate:                   1274.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              20616.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21760.053 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 97546.288 ops/s
[info]                  ·gc.alloc.rate:                   1277.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              20620.828 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21838.840 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 75.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 99027.382 ops/s
[info]                  ·gc.alloc.rate:                   1297.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              20621.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21650.138 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   98336.012 ±(99.9%) 3254.904 ops/s [Average]
[info]   (min, avg, max) = (97323.319, 98336.012, 99129.899), stdev = 845.288
[info]   CI (99.9%): [95081.108, 101590.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1288.361 ±(99.9%) 43.499 MB/sec [Average]
[info]   (min, avg, max) = (1274.701, 1288.361, 1298.638), stdev = 11.296
[info]   CI (99.9%): [1244.862, 1331.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20619.184 ±(99.9%) 8.642 B/op [Average]
[info]   (min, avg, max) = (20616.004, 20619.184, 20621.199), stdev = 2.244
[info]   CI (99.9%): [20610.542, 20627.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1215.494 ±(99.9%) 1168.671 MB/sec [Average]
[info]   (min, avg, max) = (672.737, 1215.494, 1362.317), stdev = 303.500
[info]   CI (99.9%): [46.824, 2384.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19471.120 ±(99.9%) 18928.875 B/op [Average]
[info]   (min, avg, max) = (10681.948, 19471.120, 21838.840), stdev = 4915.769
[info]   CI (99.9%): [542.245, 38399.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.137
[info]   CI (99.9%): [≈ 0, 9.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   27.936 ±(99.9%) 132.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.936, 75.232), stdev = 34.536
[info]   CI (99.9%): [≈ 0, 160.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.800, 19.000), stdev = 6.181
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90165.403 ops/s
[info] # Warmup Iteration   2: 136272.528 ops/s
[info] # Warmup Iteration   3: 135694.842 ops/s
[info] # Warmup Iteration   4: 139444.454 ops/s
[info] # Warmup Iteration   5: 143458.017 ops/s
[info] Iteration   1: 141617.174 ops/s
[info]                  ·gc.alloc.rate:            1292.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       14360.796 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14984.416 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 141594.505 ops/s
[info]                  ·gc.alloc.rate:            1291.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       14354.227 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14986.956 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 142092.307 ops/s
[info]                  ·gc.alloc.rate:                   1294.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              14336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14934.436 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 142660.558 ops/s
[info]                  ·gc.alloc.rate:                   1300.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              14338.461 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14955.720 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 44.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 142164.166 ops/s
[info]                  ·gc.alloc.rate:                                  1295.433 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14336.276 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.430 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15087.955 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   142025.742 ±(99.9%) 1699.828 ops/s [Average]
[info]   (min, avg, max) = (141594.505, 142025.742, 142660.558), stdev = 441.440
[info]   CI (99.9%): [140325.914, 143725.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1294.638 ±(99.9%) 13.359 MB/sec [Average]
[info]   (min, avg, max) = (1291.275, 1294.638, 1300.138), stdev = 3.469
[info]   CI (99.9%): [1281.278, 1307.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14345.153 ±(99.9%) 44.506 B/op [Average]
[info]   (min, avg, max) = (14336.003, 14345.153, 14360.796), stdev = 11.558
[info]   CI (99.9%): [14300.646, 14389.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.086 ±(99.9%) 0.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.086, 0.430), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 0.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1352.827 ±(99.9%) 26.203 MB/sec [Average]
[info]   (min, avg, max) = (1348.097, 1352.827, 1363.355), stdev = 6.805
[info]   CI (99.9%): [1326.624, 1379.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14989.897 ±(99.9%) 226.976 B/op [Average]
[info]   (min, avg, max) = (14934.436, 14989.897, 15087.955), stdev = 58.945
[info]   CI (99.9%): [14762.921, 15216.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.998), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.198 ±(99.9%) 85.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.198, 44.095), stdev = 22.325
[info]   CI (99.9%): [≈ 0, 102.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.800, 16.000), stdev = 5.718
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1982.898 ops/s
[info] # Warmup Iteration   2: 32909.820 ops/s
[info] # Warmup Iteration   3: 36632.607 ops/s
[info] # Warmup Iteration   4: 35092.780 ops/s
[info] # Warmup Iteration   5: 35784.835 ops/s
[info] Iteration   1: 36655.312 ops/s
[info]                  ·gc.alloc.rate:                   1880.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              80733.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        86771.208 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 200.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   2: 37401.863 ops/s
[info]                  ·gc.alloc.rate:                   1918.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              80723.444 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        57122.180 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 168.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 37441.693 ops/s
[info]                  ·gc.alloc.rate:                                  1920.730 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80725.945 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85934.623 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 37202.866 ops/s
[info]                  ·gc.alloc.rate:            1909.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       80775.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86484.272 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 37482.493 ops/s
[info]                  ·gc.alloc.rate:            1922.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       80720.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85840.640 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   37236.845 ±(99.9%) 1318.349 ops/s [Average]
[info]   (min, avg, max) = (36655.312, 37236.845, 37482.493), stdev = 342.371
[info]   CI (99.9%): [35918.496, 38555.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1910.244 ±(99.9%) 67.295 MB/sec [Average]
[info]   (min, avg, max) = (1880.287, 1910.244, 1922.476), stdev = 17.476
[info]   CI (99.9%): [1842.949, 1977.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80735.530 ±(99.9%) 87.254 B/op [Average]
[info]   (min, avg, max) = (80720.013, 80735.530, 80775.143), stdev = 22.660
[info]   CI (99.9%): [80648.276, 80822.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.211 ±(99.9%) 1.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.211, 1.056), stdev = 0.472
[info]   CI (99.9%): [≈ 0, 2.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1902.371 ±(99.9%) 1173.733 MB/sec [Average]
[info]   (min, avg, max) = (1357.408, 1902.371, 2044.662), stdev = 304.815
[info]   CI (99.9%): [728.637, 3076.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80430.585 ±(99.9%) 50195.011 B/op [Average]
[info]   (min, avg, max) = (57122.180, 80430.585, 86771.208), stdev = 13035.485
[info]   CI (99.9%): [30235.573, 130625.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   73.674 ±(99.9%) 390.899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73.674, 200.197), stdev = 101.515
[info]   CI (99.9%): [≈ 0, 464.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.000, 26.000), stdev = 8.775
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80676.465 ops/s
[info] # Warmup Iteration   2: 152198.952 ops/s
[info] # Warmup Iteration   3: 163584.271 ops/s
[info] # Warmup Iteration   4: 164900.673 ops/s
[info] # Warmup Iteration   5: 163009.784 ops/s
[info] Iteration   1: 155481.496 ops/s
[info]                  ·gc.alloc.rate:            538.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       5448.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6823.866 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 158275.589 ops/s
[info]                  ·gc.alloc.rate:            555.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       5524.394 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6703.298 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 166591.156 ops/s
[info]                  ·gc.alloc.rate:            576.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       5448.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6368.622 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 137480.195 ops/s
[info]                  ·gc.alloc.rate:                   475.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7709.557 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.626 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 167982.423 ops/s
[info]                  ·gc.alloc.rate:      581.412 MB/sec
[info]                  ·gc.alloc.rate.norm: 5448.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   157162.172 ±(99.9%) 47059.381 ops/s [Average]
[info]   (min, avg, max) = (137480.195, 157162.172, 167982.423), stdev = 12221.172
[info]   CI (99.9%): [110102.791, 204221.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   545.507 ±(99.9%) 164.054 MB/sec [Average]
[info]   (min, avg, max) = (475.859, 545.507, 581.412), stdev = 42.604
[info]   CI (99.9%): [381.453, 709.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5463.281 ±(99.9%) 131.550 B/op [Average]
[info]   (min, avg, max) = (5448.002, 5463.281, 5524.394), stdev = 34.163
[info]   CI (99.9%): [5331.731, 5594.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.110 ±(99.9%) 1160.475 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.110, 674.165), stdev = 301.372
[info]   CI (99.9%): [≈ 0, 1699.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5521.069 ±(99.9%) 12036.723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5521.069, 7709.557), stdev = 3125.899
[info]   CI (99.9%): [≈ 0, 17557.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.525 ±(99.9%) 13.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.525, 7.626), stdev = 3.410
[info]   CI (99.9%): [≈ 0, 14.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.400, 8.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:28:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200911.320 ops/s
[info] # Warmup Iteration   2: 368002.713 ops/s
[info] # Warmup Iteration   3: 362777.288 ops/s
[info] # Warmup Iteration   4: 368630.217 ops/s
[info] # Warmup Iteration   5: 376532.286 ops/s
[info] Iteration   1: 371079.375 ops/s
[info]                  ·gc.alloc.rate:            382.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       1622.787 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2856.278 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 374232.307 ops/s
[info]                  ·gc.alloc.rate:      378.473 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 372027.034 ops/s
[info]                  ·gc.alloc.rate:            376.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.944 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2849.116 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 374695.945 ops/s
[info]                  ·gc.alloc.rate:      379.476 MB/sec
[info]                  ·gc.alloc.rate.norm: 1593.375 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 372121.793 ops/s
[info]                  ·gc.alloc.rate:            377.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       1597.732 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2848.350 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   372831.291 ±(99.9%) 5983.759 ops/s [Average]
[info]   (min, avg, max) = (371079.375, 372831.291, 374695.945), stdev = 1553.963
[info]   CI (99.9%): [366847.532, 378815.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   378.965 ±(99.9%) 8.916 MB/sec [Average]
[info]   (min, avg, max) = (376.509, 378.965, 382.627), stdev = 2.316
[info]   CI (99.9%): [370.049, 387.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1599.768 ±(99.9%) 50.271 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1599.768, 1622.787), stdev = 13.055
[info]   CI (99.9%): [1549.497, 1650.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   404.059 ±(99.9%) 1420.326 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.059, 673.465), stdev = 368.854
[info]   CI (99.9%): [≈ 0, 1824.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1710.749 ±(99.9%) 6013.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1710.749, 2856.278), stdev = 1561.696
[info]   CI (99.9%): [≈ 0, 7724.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.400, 10.000), stdev = 4.980
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 471073.552 ops/s
[info] # Warmup Iteration   2: 572467.079 ops/s
[info] # Warmup Iteration   3: 639877.966 ops/s
[info] # Warmup Iteration   4: 643268.135 ops/s
[info] # Warmup Iteration   5: 637966.586 ops/s
[info] Iteration   1: 638657.430 ops/s
[info]                  ·gc.alloc.rate:            490.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1661.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 636652.530 ops/s
[info]                  ·gc.alloc.rate:            488.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.553 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1666.513 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 645479.144 ops/s
[info]                  ·gc.alloc.rate:      495.387 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 633896.646 ops/s
[info]                  ·gc.alloc.rate:            487.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       1211.364 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1673.686 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 635635.202 ops/s
[info]                  ·gc.alloc.rate:            489.696 MB/sec
[info]                  ·gc.alloc.rate.norm:       1212.570 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1669.103 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   638064.191 ±(99.9%) 17284.488 ops/s [Average]
[info]   (min, avg, max) = (633896.646, 638064.191, 645479.144), stdev = 4488.727
[info]   CI (99.9%): [620779.702, 655348.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   490.389 ±(99.9%) 11.293 MB/sec [Average]
[info]   (min, avg, max) = (487.848, 490.389, 495.387), stdev = 2.933
[info]   CI (99.9%): [479.097, 501.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1209.698 ±(99.9%) 8.191 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1209.698, 1212.570), stdev = 2.127
[info]   CI (99.9%): [1201.507, 1217.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.252 ±(99.9%) 1160.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.252, 674.098), stdev = 301.451
[info]   CI (99.9%): [≈ 0, 1700.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1334.104 ±(99.9%) 2871.812 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1334.104, 1673.686), stdev = 745.800
[info]   CI (99.9%): [≈ 0, 4205.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.000, 8.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 529632.276 ops/s
[info] # Warmup Iteration   2: 624351.696 ops/s
[info] # Warmup Iteration   3: 647900.269 ops/s
[info] # Warmup Iteration   4: 683789.122 ops/s
[info] # Warmup Iteration   5: 684491.984 ops/s
[info] Iteration   1: 684996.862 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 684031.116 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 684870.525 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 684977.136 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 645220.935 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   676819.315 ±(99.9%) 68035.332 ops/s [Average]
[info]   (min, avg, max) = (645220.935, 676819.315, 684996.862), stdev = 17668.560
[info]   CI (99.9%): [608783.983, 744854.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109121.125 ops/s
[info] # Warmup Iteration   2: 252308.240 ops/s
[info] # Warmup Iteration   3: 260608.076 ops/s
[info] # Warmup Iteration   4: 260845.249 ops/s
[info] # Warmup Iteration   5: 256468.883 ops/s
[info] Iteration   1: 253133.912 ops/s
[info]                  ·gc.alloc.rate:                   699.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              4346.452 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4182.857 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.141 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 254431.019 ops/s
[info]                  ·gc.alloc.rate:            700.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4165.725 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 253964.926 ops/s
[info]                  ·gc.alloc.rate:            700.890 MB/sec
[info]                  ·gc.alloc.rate.norm:       4343.563 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4168.730 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 252583.938 ops/s
[info]                  ·gc.alloc.rate:            695.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8384.291 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   5: 255935.755 ops/s
[info]                  ·gc.alloc.rate:            705.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4137.186 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   254009.910 ±(99.9%) 4979.481 ops/s [Average]
[info]   (min, avg, max) = (252583.938, 254009.910, 255935.755), stdev = 1293.155
[info]   CI (99.9%): [249030.429, 258989.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   700.309 ±(99.9%) 12.957 MB/sec [Average]
[info]   (min, avg, max) = (695.789, 700.309, 705.063), stdev = 3.365
[info]   CI (99.9%): [687.352, 713.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4339.604 ±(99.9%) 19.396 B/op [Average]
[info]   (min, avg, max) = (4336.002, 4339.604, 4346.452), stdev = 5.037
[info]   CI (99.9%): [4320.207, 4359.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   807.359 ±(99.9%) 1158.193 MB/sec [Average]
[info]   (min, avg, max) = (672.678, 807.359, 1345.409), stdev = 300.779
[info]   CI (99.9%): [≈ 0, 1965.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5007.758 ±(99.9%) 7268.523 B/op [Average]
[info]   (min, avg, max) = (4137.186, 5007.758, 8384.291), stdev = 1887.612
[info]   CI (99.9%): [≈ 0, 12276.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.828 ±(99.9%) 7.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.828, 4.141), stdev = 1.852
[info]   CI (99.9%): [≈ 0, 7.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.000, 18.000), stdev = 3.937
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:27:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17552.050 ops/s
[info] # Warmup Iteration   2: 34950.467 ops/s
[info] # Warmup Iteration   3: 34711.769 ops/s
[info] # Warmup Iteration   4: 34204.404 ops/s
[info] # Warmup Iteration   5: 35292.569 ops/s
[info] Iteration   1: 35018.523 ops/s
[info]                  ·gc.alloc.rate:                   1622.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              72940.752 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90831.680 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 149.690 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 34929.969 ops/s
[info]                  ·gc.alloc.rate:                   1623.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              73148.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        61043.636 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 180.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 35603.107 ops/s
[info]                  ·gc.alloc.rate:                                  1651.837 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72998.738 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90345.742 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                29.448 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 35055.993 ops/s
[info]                  ·gc.alloc.rate:                                  1624.362 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72938.640 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.682 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61190.111 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 35563.231 ops/s
[info]                  ·gc.alloc.rate:            1648.135 MB/sec
[info]                  ·gc.alloc.rate.norm:       72945.379 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60316.188 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   35234.165 ±(99.9%) 1240.577 ops/s [Average]
[info]   (min, avg, max) = (34929.969, 35234.165, 35603.107), stdev = 322.174
[info]   CI (99.9%): [33993.587, 36474.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1634.140 ±(99.9%) 55.971 MB/sec [Average]
[info]   (min, avg, max) = (1622.760, 1634.140, 1651.837), stdev = 14.535
[info]   CI (99.9%): [1578.169, 1690.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   72994.323 ±(99.9%) 344.598 B/op [Average]
[info]   (min, avg, max) = (72938.640, 72994.323, 73148.106), stdev = 89.491
[info]   CI (99.9%): [72649.726, 73338.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.023), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.337 ±(99.9%) 1.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.337, 1.004), stdev = 0.476
[info]   CI (99.9%): [≈ 0, 2.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1629.121 ±(99.9%) 1418.635 MB/sec [Average]
[info]   (min, avg, max) = (1354.934, 1629.121, 2044.371), stdev = 368.415
[info]   CI (99.9%): [210.486, 3047.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   72745.471 ±(99.9%) 62737.934 B/op [Average]
[info]   (min, avg, max) = (60316.188, 72745.471, 90831.680), stdev = 16292.842
[info]   CI (99.9%): [10007.537, 135483.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   71.841 ±(99.9%) 332.882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 71.841, 180.070), stdev = 86.448
[info]   CI (99.9%): [≈ 0, 404.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 23.000), stdev = 8.173
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.821 ops/s
[info] # Warmup Iteration   2: 255495.684 ops/s
[info] # Warmup Iteration   3: 273158.753 ops/s
[info] # Warmup Iteration   4: 273891.974 ops/s
[info] # Warmup Iteration   5: 273269.646 ops/s
[info] Iteration   1: 278849.487 ops/s
[info]                  ·gc.alloc.rate:      289.091 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 276958.007 ops/s
[info]                  ·gc.alloc.rate:      289.607 MB/sec
[info]                  ·gc.alloc.rate.norm: 1645.437 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 276680.501 ops/s
[info]                  ·gc.alloc.rate:            287.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       1635.660 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3815.870 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 279661.046 ops/s
[info]                  ·gc.alloc.rate:      289.955 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 279205.751 ops/s
[info]                  ·gc.alloc.rate:            289.556 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3781.095 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   278270.958 ±(99.9%) 5235.414 ops/s [Average]
[info]   (min, avg, max) = (276680.501, 278270.958, 279661.046), stdev = 1359.620
[info]   CI (99.9%): [273035.544, 283506.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   289.145 ±(99.9%) 3.698 MB/sec [Average]
[info]   (min, avg, max) = (287.518, 289.145, 289.955), stdev = 0.960
[info]   CI (99.9%): [285.447, 292.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1635.420 ±(99.9%) 22.407 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1635.420, 1645.437), stdev = 5.819
[info]   CI (99.9%): [1613.013, 1657.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   268.323 ±(99.9%) 1414.788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.323, 670.857), stdev = 367.416
[info]   CI (99.9%): [≈ 0, 1683.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1519.393 ±(99.9%) 8011.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1519.393, 3815.870), stdev = 2080.551
[info]   CI (99.9%): [≈ 0, 9530.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 10.000), stdev = 5.477
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25309.632 ops/s
[info] # Warmup Iteration   2: 90650.606 ops/s
[info] # Warmup Iteration   3: 94139.932 ops/s
[info] # Warmup Iteration   4: 94518.222 ops/s
[info] # Warmup Iteration   5: 95595.545 ops/s
[info] Iteration   1: 94582.707 ops/s
[info]                  ·gc.alloc.rate:                   1040.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              17321.759 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22401.870 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 95609.128 ops/s
[info]                  ·gc.alloc.rate:            1051.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       17320.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11085.657 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 94796.284 ops/s
[info]                  ·gc.alloc.rate:            1043.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       17320.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22362.366 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 94585.701 ops/s
[info]                  ·gc.alloc.rate:                   1040.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22400.923 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.420 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 95380.468 ops/s
[info]                  ·gc.alloc.rate:                   1055.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              17425.399 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11156.935 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.984 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   94990.858 ±(99.9%) 1829.211 ops/s [Average]
[info]   (min, avg, max) = (94582.707, 94990.858, 95609.128), stdev = 475.040
[info]   CI (99.9%): [93161.647, 96820.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1046.510 ±(99.9%) 26.846 MB/sec [Average]
[info]   (min, avg, max) = (1040.765, 1046.510, 1055.880), stdev = 6.972
[info]   CI (99.9%): [1019.664, 1073.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17341.434 ±(99.9%) 180.765 B/op [Average]
[info]   (min, avg, max) = (17320.004, 17341.434, 17425.399), stdev = 46.944
[info]   CI (99.9%): [17160.669, 17522.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1077.662 ±(99.9%) 1416.545 MB/sec [Average]
[info]   (min, avg, max) = (673.312, 1077.662, 1346.784), stdev = 367.872
[info]   CI (99.9%): [≈ 0, 2494.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17881.550 ±(99.9%) 23763.523 B/op [Average]
[info]   (min, avg, max) = (11085.657, 17881.550, 22401.870), stdev = 6171.311
[info]   CI (99.9%): [≈ 0, 41645.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.698 ±(99.9%) 88.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.698, 55.420), stdev = 22.976
[info]   CI (99.9%): [≈ 0, 106.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   71.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 14.200, 19.000), stdev = 6.221
[info]   CI (99.9%): [71.000, 71.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366487.205 ops/s
[info] # Warmup Iteration   2: 436396.059 ops/s
[info] # Warmup Iteration   3: 423001.493 ops/s
[info] # Warmup Iteration   4: 439784.390 ops/s
[info] # Warmup Iteration   5: 427710.440 ops/s
[info] Iteration   1: 441244.172 ops/s
[info]                  ·gc.alloc.rate:      287.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 435225.327 ops/s
[info]                  ·gc.alloc.rate:            284.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       1030.421 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2437.793 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 441896.545 ops/s
[info]                  ·gc.alloc.rate:      287.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 440606.917 ops/s
[info]                  ·gc.alloc.rate:      286.680 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.037 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 432641.614 ops/s
[info]                  ·gc.alloc.rate:            286.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       1043.833 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2452.367 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   438322.915 ±(99.9%) 15922.480 ops/s [Average]
[info]   (min, avg, max) = (432641.614, 438322.915, 441896.545), stdev = 4135.017
[info]   CI (99.9%): [422400.435, 454245.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   286.599 ±(99.9%) 3.823 MB/sec [Average]
[info]   (min, avg, max) = (284.894, 286.599, 287.452), stdev = 0.993
[info]   CI (99.9%): [282.776, 290.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1029.259 ±(99.9%) 33.142 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1029.259, 1043.833), stdev = 8.607
[info]   CI (99.9%): [996.117, 1062.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.625 ±(99.9%) 1421.654 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.625, 674.116), stdev = 369.199
[info]   CI (99.9%): [≈ 0, 1691.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   978.032 ±(99.9%) 5156.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 978.032, 2452.367), stdev = 1339.235
[info]   CI (99.9%): [≈ 0, 6134.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:26:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3437.815 ops/s
[info] # Warmup Iteration   2: 28128.971 ops/s
[info] # Warmup Iteration   3: 31714.962 ops/s
[info] # Warmup Iteration   4: 32066.526 ops/s
[info] # Warmup Iteration   5: 31784.151 ops/s
[info] Iteration   1: 32296.405 ops/s
[info]                  ·gc.alloc.rate:                   1541.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              75114.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        65602.950 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 32.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 32709.603 ops/s
[info]                  ·gc.alloc.rate:                   1560.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              75080.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2021.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        97277.339 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 224.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   3: 33383.725 ops/s
[info]                  ·gc.alloc.rate:                   1592.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              75086.664 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        64001.135 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 188.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 33516.722 ops/s
[info]                  ·gc.alloc.rate:                                  1599.069 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75080.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63995.540 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 33392.635 ops/s
[info]                  ·gc.alloc.rate:            1592.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       75080.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96352.578 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   33059.818 ±(99.9%) 2046.551 ops/s [Average]
[info]   (min, avg, max) = (32296.405, 33059.818, 33516.722), stdev = 531.483
[info]   CI (99.9%): [31013.267, 35106.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1577.267 ±(99.9%) 96.987 MB/sec [Average]
[info]   (min, avg, max) = (1541.291, 1577.267, 1599.069), stdev = 25.187
[info]   CI (99.9%): [1480.280, 1674.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75088.210 ±(99.9%) 57.336 B/op [Average]
[info]   (min, avg, max) = (75080.012, 75088.210, 75114.343), stdev = 14.890
[info]   CI (99.9%): [75030.873, 75145.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.462 ±(99.9%) 3.978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.462, 2.310), stdev = 1.033
[info]   CI (99.9%): [≈ 0, 4.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1626.513 ±(99.9%) 1429.113 MB/sec [Average]
[info]   (min, avg, max) = (1346.124, 1626.513, 2044.154), stdev = 371.136
[info]   CI (99.9%): [197.401, 3055.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77445.908 ±(99.9%) 68143.284 B/op [Average]
[info]   (min, avg, max) = (63995.540, 77445.908, 97277.339), stdev = 17696.594
[info]   CI (99.9%): [9302.625, 145589.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 8.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.663), stdev = 2.279
[info]   CI (99.9%): [≈ 0, 10.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   89.049 ±(99.9%) 418.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 89.049, 224.363), stdev = 108.682
[info]   CI (99.9%): [≈ 0, 507.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.800, 24.000), stdev = 9.203
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40259.311 ops/s
[info] # Warmup Iteration   2: 69306.925 ops/s
[info] # Warmup Iteration   3: 68835.424 ops/s
[info] # Warmup Iteration   4: 69139.474 ops/s
[info] # Warmup Iteration   5: 68559.644 ops/s
[info] Iteration   1: 68956.484 ops/s
[info]                  ·gc.alloc.rate:      335.206 MB/sec
[info]                  ·gc.alloc.rate.norm: 7651.444 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 69169.480 ops/s
[info]                  ·gc.alloc.rate:      332.538 MB/sec
[info]                  ·gc.alloc.rate.norm: 7567.854 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 68560.179 ops/s
[info]                  ·gc.alloc.rate:                   329.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              7566.294 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15459.814 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.292 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 69154.234 ops/s
[info]                  ·gc.alloc.rate:      332.150 MB/sec
[info]                  ·gc.alloc.rate.norm: 7560.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 68558.951 ops/s
[info]                  ·gc.alloc.rate:            329.513 MB/sec
[info]                  ·gc.alloc.rate.norm:       7565.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15475.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   68879.866 ±(99.9%) 1171.459 ops/s [Average]
[info]   (min, avg, max) = (68558.951, 68879.866, 69169.480), stdev = 304.224
[info]   CI (99.9%): [67708.406, 70051.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   331.793 ±(99.9%) 9.138 MB/sec [Average]
[info]   (min, avg, max) = (329.513, 331.793, 335.206), stdev = 2.373
[info]   CI (99.9%): [322.655, 340.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7582.148 ±(99.9%) 149.595 B/op [Average]
[info]   (min, avg, max) = (7560.007, 7582.148, 7651.444), stdev = 38.849
[info]   CI (99.9%): [7432.553, 7731.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   269.487 ±(99.9%) 1420.925 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.487, 674.065), stdev = 369.010
[info]   CI (99.9%): [≈ 0, 1690.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6187.074 ±(99.9%) 32622.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6187.074, 15475.557), stdev = 8472.002
[info]   CI (99.9%): [≈ 0, 38809.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.058 ±(99.9%) 26.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.058, 15.292), stdev = 6.839
[info]   CI (99.9%): [≈ 0, 29.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 8.000), stdev = 4.382
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.755 ops/s
[info] # Warmup Iteration   2: 78035.132 ops/s
[info] # Warmup Iteration   3: 80300.739 ops/s
[info] # Warmup Iteration   4: 79273.678 ops/s
[info] # Warmup Iteration   5: 81229.373 ops/s
[info] Iteration   1: 80935.461 ops/s
[info]                  ·gc.alloc.rate:            405.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13044.697 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 80575.463 ops/s
[info]                  ·gc.alloc.rate:            406.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       7932.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13103.296 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 81538.647 ops/s
[info]                  ·gc.alloc.rate:      408.674 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 80489.369 ops/s
[info]                  ·gc.alloc.rate:            404.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       7914.488 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13116.806 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 81736.849 ops/s
[info]                  ·gc.alloc.rate:      409.675 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   81055.158 ±(99.9%) 2163.753 ops/s [Average]
[info]   (min, avg, max) = (80489.369, 81055.158, 81736.849), stdev = 561.920
[info]   CI (99.9%): [78891.405, 83218.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   406.967 ±(99.9%) 8.110 MB/sec [Average]
[info]   (min, avg, max) = (404.725, 406.967, 409.675), stdev = 2.106
[info]   CI (99.9%): [398.857, 415.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   7902.143 ±(99.9%) 78.349 B/op [Average]
[info]   (min, avg, max) = (7888.005, 7902.143, 7932.209), stdev = 20.347
[info]   CI (99.9%): [7823.794, 7980.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.491 ±(99.9%) 1414.814 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.491, 670.867), stdev = 367.423
[info]   CI (99.9%): [≈ 0, 1817.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   7852.960 ±(99.9%) 27604.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7852.960, 13116.806), stdev = 7168.790
[info]   CI (99.9%): [≈ 0, 35457.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.600, 12.000), stdev = 6.066
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27891.514 ops/s
[info] # Warmup Iteration   2: 69784.931 ops/s
[info] # Warmup Iteration   3: 70967.731 ops/s
[info] # Warmup Iteration   4: 71241.067 ops/s
[info] # Warmup Iteration   5: 71925.967 ops/s
[info] Iteration   1: 71355.828 ops/s
[info]                  ·gc.alloc.rate:            375.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       8276.934 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14854.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 71872.327 ops/s
[info]                  ·gc.alloc.rate:      377.678 MB/sec
[info]                  ·gc.alloc.rate.norm: 8272.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 71043.299 ops/s
[info]                  ·gc.alloc.rate:            374.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       8302.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14919.994 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 72099.138 ops/s
[info]                  ·gc.alloc.rate:      379.044 MB/sec
[info]                  ·gc.alloc.rate.norm: 8272.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 71245.252 ops/s
[info]                  ·gc.alloc.rate:            374.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       8272.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14876.862 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   71523.169 ±(99.9%) 1710.362 ops/s [Average]
[info]   (min, avg, max) = (71043.299, 71523.169, 72099.138), stdev = 444.175
[info]   CI (99.9%): [69812.807, 73233.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   376.272 ±(99.9%) 7.627 MB/sec [Average]
[info]   (min, avg, max) = (374.579, 376.272, 379.044), stdev = 1.981
[info]   CI (99.9%): [368.645, 383.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8278.994 ±(99.9%) 50.243 B/op [Average]
[info]   (min, avg, max) = (8272.006, 8278.994, 8302.021), stdev = 13.048
[info]   CI (99.9%): [8228.752, 8329.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   404.142 ±(99.9%) 1420.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.142, 673.664), stdev = 368.930
[info]   CI (99.9%): [≈ 0, 1824.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8930.283 ±(99.9%) 31391.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8930.283, 14919.994), stdev = 8152.229
[info]   CI (99.9%): [≈ 0, 40321.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.400, 9.000), stdev = 4.930
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57667.932 ops/s
[info] # Warmup Iteration   2: 76915.363 ops/s
[info] # Warmup Iteration   3: 79607.600 ops/s
[info] # Warmup Iteration   4: 80758.501 ops/s
[info] # Warmup Iteration   5: 81992.902 ops/s
[info] Iteration   1: 80183.062 ops/s
[info]                  ·gc.alloc.rate:            409.948 MB/sec
[info]                  ·gc.alloc.rate.norm:       8047.248 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13232.398 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 81122.492 ops/s
[info]                  ·gc.alloc.rate:            406.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       7892.340 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13078.929 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 81650.789 ops/s
[info]                  ·gc.alloc.rate:      409.178 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 81010.253 ops/s
[info]                  ·gc.alloc.rate:            407.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       7914.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13097.332 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 80783.297 ops/s
[info]                  ·gc.alloc.rate:            404.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13134.130 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   80949.979 ±(99.9%) 2056.108 ops/s [Average]
[info]   (min, avg, max) = (80183.062, 80949.979, 81650.789), stdev = 533.965
[info]   CI (99.9%): [78893.871, 83006.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   407.593 ±(99.9%) 7.849 MB/sec [Average]
[info]   (min, avg, max) = (404.818, 407.593, 409.948), stdev = 2.038
[info]   CI (99.9%): [399.744, 415.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7925.986 ±(99.9%) 264.390 B/op [Average]
[info]   (min, avg, max) = (7888.005, 7925.986, 8047.248), stdev = 68.661
[info]   CI (99.9%): [7661.596, 8190.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.237 ±(99.9%) 1160.748 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.237, 674.092), stdev = 301.443
[info]   CI (99.9%): [≈ 0, 1699.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10508.558 ±(99.9%) 22621.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10508.558, 13232.398), stdev = 5874.761
[info]   CI (99.9%): [≈ 0, 33130.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.400, 8.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57765.445 ops/s
[info] # Warmup Iteration   2: 79923.654 ops/s
[info] # Warmup Iteration   3: 80897.252 ops/s
[info] # Warmup Iteration   4: 80589.056 ops/s
[info] # Warmup Iteration   5: 81806.267 ops/s
[info] Iteration   1: 80571.372 ops/s
[info]                  ·gc.alloc.rate:            340.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       6651.939 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13168.521 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 82012.485 ops/s
[info]                  ·gc.alloc.rate:      346.653 MB/sec
[info]                  ·gc.alloc.rate.norm: 6652.585 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 78393.933 ops/s
[info]                  ·gc.alloc.rate:            331.090 MB/sec
[info]                  ·gc.alloc.rate.norm:       6648.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13534.327 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 81579.960 ops/s
[info]                  ·gc.alloc.rate:      344.634 MB/sec
[info]                  ·gc.alloc.rate.norm: 6648.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 80643.686 ops/s
[info]                  ·gc.alloc.rate:            343.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       6699.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13156.765 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   80640.287 ±(99.9%) 5382.912 ops/s [Average]
[info]   (min, avg, max) = (78393.933, 80640.287, 82012.485), stdev = 1397.925
[info]   CI (99.9%): [75257.375, 86023.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   341.238 ±(99.9%) 23.436 MB/sec [Average]
[info]   (min, avg, max) = (331.090, 341.238, 346.653), stdev = 6.086
[info]   CI (99.9%): [317.801, 364.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   6659.951 ±(99.9%) 84.930 B/op [Average]
[info]   (min, avg, max) = (6648.005, 6659.951, 6699.220), stdev = 22.056
[info]   CI (99.9%): [6575.021, 6744.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   404.472 ±(99.9%) 1421.775 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.472, 674.259), stdev = 369.231
[info]   CI (99.9%): [≈ 0, 1826.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   7971.923 ±(99.9%) 28028.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7971.923, 13534.327), stdev = 7278.919
[info]   CI (99.9%): [≈ 0, 36000.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2726.153 ops/s
[info] # Warmup Iteration   2: 8141.777 ops/s
[info] # Warmup Iteration   3: 8405.748 ops/s
[info] # Warmup Iteration   4: 8460.052 ops/s
[info] # Warmup Iteration   5: 8330.780 ops/s
[info] Iteration   1: 8474.766 ops/s
[info]                  ·gc.alloc.rate:                   1431.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              265968.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        250238.203 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 123.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 8479.241 ops/s
[info]                  ·gc.alloc.rate:            1433.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       265968.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 249996.542 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 8445.399 ops/s
[info]                  ·gc.alloc.rate:                   1427.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              266093.682 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        251593.697 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 868.848 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 8399.894 ops/s
[info]                  ·gc.alloc.rate:                   1420.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              266120.826 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        254593.554 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 624.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8417.190 ops/s
[info]                  ·gc.alloc.rate:                                  1422.654 MB/sec
[info]                  ·gc.alloc.rate.norm:                             266024.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.765 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       382240.141 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8443.298 ±(99.9%) 134.111 ops/s [Average]
[info]   (min, avg, max) = (8399.894, 8443.298, 8479.241), stdev = 34.828
[info]   CI (99.9%): [8309.187, 8577.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1427.183 ±(99.9%) 21.078 MB/sec [Average]
[info]   (min, avg, max) = (1420.616, 1427.183, 1433.059), stdev = 5.474
[info]   CI (99.9%): [1406.104, 1448.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   266034.933 ±(99.9%) 271.549 B/op [Average]
[info]   (min, avg, max) = (265968.048, 266034.933, 266120.826), stdev = 70.521
[info]   CI (99.9%): [265763.384, 266306.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.353 ±(99.9%) 3.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.353, 1.765), stdev = 0.789
[info]   CI (99.9%): [≈ 0, 3.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1489.469 ±(99.9%) 1194.163 MB/sec [Average]
[info]   (min, avg, max) = (1347.004, 1489.469, 2044.159), stdev = 310.120
[info]   CI (99.9%): [295.306, 2683.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   277732.427 ±(99.9%) 225070.998 B/op [Average]
[info]   (min, avg, max) = (249996.542, 277732.427, 382240.141), stdev = 58450.224
[info]   CI (99.9%): [52661.429, 502803.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   323.310 ±(99.9%) 1536.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 323.310, 868.848), stdev = 399.040
[info]   CI (99.9%): [≈ 0, 1859.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.200, 16.000), stdev = 5.762
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2309.528 ops/s
[info] # Warmup Iteration   2: 7258.200 ops/s
[info] # Warmup Iteration   3: 7798.474 ops/s
[info] # Warmup Iteration   4: 7807.952 ops/s
[info] # Warmup Iteration   5: 7854.279 ops/s
[info] Iteration   1: 7846.257 ops/s
[info]                  ·gc.alloc.rate:            1269.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       254671.987 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 269893.415 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 7706.178 ops/s
[info]                  ·gc.alloc.rate:            1246.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       254659.847 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 274795.475 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 7935.364 ops/s
[info]                  ·gc.alloc.rate:                   1283.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              254616.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        133416.699 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 660.479 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 7841.419 ops/s
[info]                  ·gc.alloc.rate:                   1285.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              258110.468 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        271669.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 802.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 7988.098 ops/s
[info]                  ·gc.alloc.rate:                                  1292.803 MB/sec
[info]                  ·gc.alloc.rate.norm:                             254704.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.578 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       268246.476 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                262.472 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   7863.463 ±(99.9%) 413.941 ops/s [Average]
[info]   (min, avg, max) = (7706.178, 7863.463, 7988.098), stdev = 107.499
[info]   CI (99.9%): [7449.523, 8277.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1275.823 ±(99.9%) 69.999 MB/sec [Average]
[info]   (min, avg, max) = (1246.991, 1275.823, 1292.803), stdev = 18.179
[info]   CI (99.9%): [1205.824, 1345.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   255352.482 ±(99.9%) 5938.016 B/op [Average]
[info]   (min, avg, max) = (254616.051, 255352.482, 258110.468), stdev = 1542.084
[info]   CI (99.9%): [249414.466, 261290.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.116 ±(99.9%) 18.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.116, 10.578), stdev = 4.731
[info]   CI (99.9%): [≈ 0, 20.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1215.765 ±(99.9%) 1169.341 MB/sec [Average]
[info]   (min, avg, max) = (672.665, 1215.765, 1361.540), stdev = 303.674
[info]   CI (99.9%): [46.424, 2385.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   243604.378 ±(99.9%) 237371.389 B/op [Average]
[info]   (min, avg, max) = (133416.699, 243604.378, 274795.475), stdev = 61644.596
[info]   CI (99.9%): [6232.989, 480975.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.996), stdev = 1.860
[info]   CI (99.9%): [≈ 0, 8.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   345.025 ±(99.9%) 1432.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 345.025, 802.175), stdev = 371.953
[info]   CI (99.9%): [≈ 0, 1777.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.400, 19.000), stdev = 5.983
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111989.232 ops/s
[info] # Warmup Iteration   2: 139412.195 ops/s
[info] # Warmup Iteration   3: 131758.649 ops/s
[info] # Warmup Iteration   4: 136789.752 ops/s
[info] # Warmup Iteration   5: 146533.487 ops/s
[info] Iteration   1: 139993.798 ops/s
[info]                  ·gc.alloc.rate:            365.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       4114.377 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7579.165 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 146873.150 ops/s
[info]                  ·gc.alloc.rate:      382.633 MB/sec
[info]                  ·gc.alloc.rate.norm: 4099.526 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 143310.979 ops/s
[info]                  ·gc.alloc.rate:            372.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7403.710 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 146892.306 ops/s
[info]                  ·gc.alloc.rate:      382.267 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 144946.079 ops/s
[info]                  ·gc.alloc.rate:            377.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7319.801 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   144403.263 ±(99.9%) 11098.073 ops/s [Average]
[info]   (min, avg, max) = (139993.798, 144403.263, 146892.306), stdev = 2882.134
[info]   CI (99.9%): [133305.189, 155501.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   376.211 ±(99.9%) 26.923 MB/sec [Average]
[info]   (min, avg, max) = (365.912, 376.211, 382.633), stdev = 6.992
[info]   CI (99.9%): [349.287, 403.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4100.382 ±(99.9%) 30.691 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4100.382, 4114.377), stdev = 7.970
[info]   CI (99.9%): [4069.691, 4131.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.484 ±(99.9%) 1421.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.484, 674.197), stdev = 369.242
[info]   CI (99.9%): [≈ 0, 1826.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4460.535 ±(99.9%) 15683.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4460.535, 7579.165), stdev = 4072.968
[info]   CI (99.9%): [≈ 0, 20144.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 944.453 ops/s
[info] # Warmup Iteration   2: 3540.351 ops/s
[info] # Warmup Iteration   3: 3733.510 ops/s
[info] # Warmup Iteration   4: 3977.852 ops/s
[info] # Warmup Iteration   5: 3980.218 ops/s
[info] Iteration   1: 4029.289 ops/s
[info]                  ·gc.alloc.rate:                   1143.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              446610.578 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        262729.288 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 260.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 3990.385 ops/s
[info]                  ·gc.alloc.rate:            1132.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       446816.924 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 530854.733 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 3981.804 ops/s
[info]                  ·gc.alloc.rate:            1131.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       447126.375 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 531790.992 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 3981.563 ops/s
[info]                  ·gc.alloc.rate:                   1129.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              446663.892 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        533107.306 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1579.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 3968.128 ops/s
[info]                  ·gc.alloc.rate:                   1131.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              448920.752 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        268418.548 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1320.957 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   3990.234 ±(99.9%) 89.485 ops/s [Average]
[info]   (min, avg, max) = (3968.128, 3990.234, 4029.289), stdev = 23.239
[info]   CI (99.9%): [3900.748, 4079.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1133.798 ±(99.9%) 20.766 MB/sec [Average]
[info]   (min, avg, max) = (1129.938, 1133.798, 1143.271), stdev = 5.393
[info]   CI (99.9%): [1113.032, 1154.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   447227.704 ±(99.9%) 3725.460 B/op [Average]
[info]   (min, avg, max) = (446610.578, 447227.704, 448920.752), stdev = 967.490
[info]   CI (99.9%): [443502.244, 450953.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1077.836 ±(99.9%) 1417.388 MB/sec [Average]
[info]   (min, avg, max) = (672.556, 1077.836, 1348.616), stdev = 368.091
[info]   CI (99.9%): [≈ 0, 2495.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   425380.173 ±(99.9%) 561803.349 B/op [Average]
[info]   (min, avg, max) = (262729.288, 425380.173, 533107.306), stdev = 145898.546
[info]   CI (99.9%): [≈ 0, 987183.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 7.388 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 3.996), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   632.133 ±(99.9%) 2926.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 632.133, 1579.577), stdev = 759.885
[info]   CI (99.9%): [≈ 0, 3558.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 13.400, 19.000), stdev = 6.656
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9766.206 ops/s
[info] # Warmup Iteration   2: 19380.226 ops/s
[info] # Warmup Iteration   3: 19216.596 ops/s
[info] # Warmup Iteration   4: 19400.255 ops/s
[info] # Warmup Iteration   5: 19392.753 ops/s
[info] Iteration   1: 19402.040 ops/s
[info]                  ·gc.alloc.rate:            1046.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       84887.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.583 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54625.153 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 19314.974 ops/s
[info]                  ·gc.alloc.rate:            1040.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       84797.797 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109742.271 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 19655.475 ops/s
[info]                  ·gc.alloc.rate:            1056.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       84616.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53922.194 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 19531.560 ops/s
[info]                  ·gc.alloc.rate:                   1050.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              84629.744 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        108528.904 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 268.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   5: 19754.083 ops/s
[info]                  ·gc.alloc.rate:                   1064.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              84795.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53920.094 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 106.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   19531.626 ±(99.9%) 690.320 ops/s [Average]
[info]   (min, avg, max) = (19314.974, 19531.626, 19754.083), stdev = 179.274
[info]   CI (99.9%): [18841.307, 20221.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1051.713 ±(99.9%) 35.443 MB/sec [Average]
[info]   (min, avg, max) = (1040.549, 1051.713, 1064.462), stdev = 9.204
[info]   CI (99.9%): [1016.270, 1087.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   84745.147 ±(99.9%) 453.193 B/op [Average]
[info]   (min, avg, max) = (84616.021, 84745.147, 84887.098), stdev = 117.693
[info]   CI (99.9%): [84291.954, 85198.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   943.434 ±(99.9%) 1417.440 MB/sec [Average]
[info]   (min, avg, max) = (673.369, 943.434, 1346.698), stdev = 368.105
[info]   CI (99.9%): [≈ 0, 2360.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   76147.723 ±(99.9%) 115974.038 B/op [Average]
[info]   (min, avg, max) = (53920.094, 76147.723, 109742.271), stdev = 30118.089
[info]   CI (99.9%): [≈ 0, 192121.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   74.902 ±(99.9%) 452.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 74.902, 268.370), stdev = 117.513
[info]   CI (99.9%): [≈ 0, 527.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 11.200, 17.000), stdev = 5.357
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:23:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10356.590 ops/s
[info] # Warmup Iteration   2: 20781.606 ops/s
[info] # Warmup Iteration   3: 21046.898 ops/s
[info] # Warmup Iteration   4: 21416.153 ops/s
[info] # Warmup Iteration   5: 21297.100 ops/s
[info] Iteration   1: 21162.738 ops/s
[info]                  ·gc.alloc.rate:            1120.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       83331.416 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 100116.790 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 21131.407 ops/s
[info]                  ·gc.alloc.rate:                   1116.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              83127.401 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        100268.375 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 21257.555 ops/s
[info]                  ·gc.alloc.rate:            1122.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       83107.751 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49810.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 21363.070 ops/s
[info]                  ·gc.alloc.rate:                   1127.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              83088.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99371.322 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 343.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 21523.210 ops/s
[info]                  ·gc.alloc.rate:                   1136.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              83098.344 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99319.295 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 292.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   21287.596 ±(99.9%) 615.191 ops/s [Average]
[info]   (min, avg, max) = (21131.407, 21287.596, 21523.210), stdev = 159.763
[info]   CI (99.9%): [20672.405, 21902.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1124.639 ±(99.9%) 29.539 MB/sec [Average]
[info]   (min, avg, max) = (1116.187, 1124.639, 1136.177), stdev = 7.671
[info]   CI (99.9%): [1095.100, 1154.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   83150.586 ±(99.9%) 393.236 B/op [Average]
[info]   (min, avg, max) = (83088.019, 83150.586, 83331.416), stdev = 102.122
[info]   CI (99.9%): [82757.350, 83543.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1214.439 ±(99.9%) 1166.284 MB/sec [Average]
[info]   (min, avg, max) = (672.698, 1214.439, 1357.961), stdev = 302.880
[info]   CI (99.9%): [48.155, 2380.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   89777.171 ±(99.9%) 86047.933 B/op [Average]
[info]   (min, avg, max) = (49810.072, 89777.171, 100268.375), stdev = 22346.375
[info]   CI (99.9%): [3729.238, 175825.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 8.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.663), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 10.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   137.076 ±(99.9%) 644.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 137.076, 343.506), stdev = 167.275
[info]   CI (99.9%): [≈ 0, 781.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 13.600, 19.000), stdev = 5.367
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105467.722 ops/s
[info] # Warmup Iteration   2: 129700.475 ops/s
[info] # Warmup Iteration   3: 130685.589 ops/s
[info] # Warmup Iteration   4: 131705.609 ops/s
[info] # Warmup Iteration   5: 130190.227 ops/s
[info] Iteration   1: 131602.495 ops/s
[info]                  ·gc.alloc.rate:      290.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 128835.898 ops/s
[info]                  ·gc.alloc.rate:            286.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       3500.908 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8235.487 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 125344.317 ops/s
[info]                  ·gc.alloc.rate:      277.539 MB/sec
[info]                  ·gc.alloc.rate.norm: 3484.873 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 131408.152 ops/s
[info]                  ·gc.alloc.rate:      291.094 MB/sec
[info]                  ·gc.alloc.rate.norm: 3486.775 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 130240.377 ops/s
[info]                  ·gc.alloc.rate:            288.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8146.405 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   129486.248 ±(99.9%) 9877.385 ops/s [Average]
[info]   (min, avg, max) = (125344.317, 129486.248, 131602.495), stdev = 2565.125
[info]   CI (99.9%): [119608.863, 139363.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   286.824 ±(99.9%) 21.342 MB/sec [Average]
[info]   (min, avg, max) = (277.539, 286.824, 291.094), stdev = 5.542
[info]   CI (99.9%): [265.482, 308.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3486.513 ±(99.9%) 33.053 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3486.513, 3500.908), stdev = 8.584
[info]   CI (99.9%): [3453.460, 3519.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.651 ±(99.9%) 1421.791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.651, 674.199), stdev = 369.235
[info]   CI (99.9%): [≈ 0, 1691.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3276.378 ±(99.9%) 17275.823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3276.378, 8235.487), stdev = 4486.476
[info]   CI (99.9%): [≈ 0, 20552.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 8.000), stdev = 4.382
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109601.507 ops/s
[info] # Warmup Iteration   2: 136244.351 ops/s
[info] # Warmup Iteration   3: 126791.333 ops/s
[info] # Warmup Iteration   4: 137741.266 ops/s
[info] # Warmup Iteration   5: 137701.109 ops/s
[info] Iteration   1: 137662.816 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 137614.248 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 137733.842 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.947 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 137759.106 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 137721.507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   137698.304 ±(99.9%) 226.363 ops/s [Average]
[info]   (min, avg, max) = (137614.248, 137698.304, 137759.106), stdev = 58.786
[info]   CI (99.9%): [137471.941, 137924.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.392 ±(99.9%) 3.347 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.392, 1.947), stdev = 0.869
[info]   CI (99.9%): [≈ 0, 3.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10301.938 ops/s
[info] # Warmup Iteration   2: 21401.736 ops/s
[info] # Warmup Iteration   3: 21402.173 ops/s
[info] # Warmup Iteration   4: 21672.723 ops/s
[info] # Warmup Iteration   5: 21439.229 ops/s
[info] Iteration   1: 21379.823 ops/s
[info]                  ·gc.alloc.rate:                   1171.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              86288.649 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99105.462 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 21437.351 ops/s
[info]                  ·gc.alloc.rate:            1171.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       85982.581 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98881.666 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 21665.408 ops/s
[info]                  ·gc.alloc.rate:                   1181.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              85864.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        48874.510 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.391 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 21532.559 ops/s
[info]                  ·gc.alloc.rate:                   1174.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              85880.303 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98644.826 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 292.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 21802.530 ops/s
[info]                  ·gc.alloc.rate:                   1191.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              85958.715 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98044.044 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 288.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   21563.534 ±(99.9%) 661.730 ops/s [Average]
[info]   (min, avg, max) = (21379.823, 21563.534, 21802.530), stdev = 171.849
[info]   CI (99.9%): [20901.804, 22225.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1178.171 ±(99.9%) 32.482 MB/sec [Average]
[info]   (min, avg, max) = (1171.043, 1178.171, 1191.203), stdev = 8.436
[info]   CI (99.9%): [1145.689, 1210.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85994.853 ±(99.9%) 661.403 B/op [Average]
[info]   (min, avg, max) = (85864.019, 85994.853, 86288.649), stdev = 171.764
[info]   CI (99.9%): [85333.451, 86656.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1214.711 ±(99.9%) 1166.804 MB/sec [Average]
[info]   (min, avg, max) = (672.736, 1214.711, 1358.680), stdev = 303.015
[info]   CI (99.9%): [47.907, 2381.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   88710.102 ±(99.9%) 85762.663 B/op [Average]
[info]   (min, avg, max) = (48874.510, 88710.102, 99105.462), stdev = 22272.291
[info]   CI (99.9%): [2947.439, 174472.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 7.567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 3.998), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 9.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   135.614 ±(99.9%) 549.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 135.614, 292.137), stdev = 142.627
[info]   CI (99.9%): [≈ 0, 684.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 13.400, 19.000), stdev = 5.683
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:22:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63073.276 ops/s
[info] # Warmup Iteration   2: 118526.459 ops/s
[info] # Warmup Iteration   3: 123377.695 ops/s
[info] # Warmup Iteration   4: 125769.551 ops/s
[info] # Warmup Iteration   5: 125962.788 ops/s
[info] Iteration   1: 124327.300 ops/s
[info]                  ·gc.alloc.rate:            1603.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       20306.715 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2021.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25600.733 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  24.000 ms
[info] Iteration   2: 125817.319 ops/s
[info]                  ·gc.alloc.rate:                   1624.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              20311.647 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16899.076 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 126763.782 ops/s
[info]                  ·gc.alloc.rate:                   1635.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              20311.360 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2040.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25341.228 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.353 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 127495.151 ops/s
[info]                  ·gc.alloc.rate:                                  1644.614 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20304.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16824.318 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 127661.796 ops/s
[info]                  ·gc.alloc.rate:                                  1647.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20304.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16801.655 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   126413.069 ±(99.9%) 5293.260 ops/s [Average]
[info]   (min, avg, max) = (124327.300, 126413.069, 127661.796), stdev = 1374.643
[info]   CI (99.9%): [121119.810, 131706.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1631.076 ±(99.9%) 68.337 MB/sec [Average]
[info]   (min, avg, max) = (1603.783, 1631.076, 1647.206), stdev = 17.747
[info]   CI (99.9%): [1562.739, 1699.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20307.547 ±(99.9%) 14.552 B/op [Average]
[info]   (min, avg, max) = (20304.003, 20307.547, 20311.647), stdev = 3.779
[info]   CI (99.9%): [20292.995, 20322.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1627.944 ±(99.9%) 1418.407 MB/sec [Average]
[info]   (min, avg, max) = (1351.176, 1627.944, 2040.820), stdev = 368.356
[info]   CI (99.9%): [209.538, 3046.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   20293.402 ±(99.9%) 18203.876 B/op [Average]
[info]   (min, avg, max) = (16801.655, 20293.402, 25600.733), stdev = 4727.489
[info]   CI (99.9%): [2089.526, 38497.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.998), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.270 ±(99.9%) 97.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.270, 49.997), stdev = 25.203
[info]   CI (99.9%): [≈ 0, 115.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.800, 24.000), stdev = 9.039
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.815 ops/s
[info] # Warmup Iteration   2: 459137.118 ops/s
[info] # Warmup Iteration   3: 521035.106 ops/s
[info] # Warmup Iteration   4: 516788.481 ops/s
[info] # Warmup Iteration   5: 519313.150 ops/s
[info] Iteration   1: 519709.194 ops/s
[info]                  ·gc.alloc.rate:            540.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       1636.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2031.475 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 517506.099 ops/s
[info]                  ·gc.alloc.rate:            536.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2040.055 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 521875.301 ops/s
[info]                  ·gc.alloc.rate:      541.095 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 517362.676 ops/s
[info]                  ·gc.alloc.rate:            536.375 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2040.678 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 518046.404 ops/s
[info]                  ·gc.alloc.rate:            537.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2037.984 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   518899.935 ±(99.9%) 7342.059 ops/s [Average]
[info]   (min, avg, max) = (517362.676, 518899.935, 521875.301), stdev = 1906.709
[info]   CI (99.9%): [511557.876, 526241.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   538.276 ±(99.9%) 8.458 MB/sec [Average]
[info]   (min, avg, max) = (536.375, 538.276, 541.095), stdev = 2.196
[info]   CI (99.9%): [529.818, 546.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.821 ±(99.9%) 7.066 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.821, 1636.104), stdev = 1.835
[info]   CI (99.9%): [1625.756, 1639.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   536.584 ±(99.9%) 1155.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.584, 670.780), stdev = 299.960
[info]   CI (99.9%): [≈ 0, 1691.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1630.038 ±(99.9%) 3508.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1630.038, 2040.678), stdev = 911.226
[info]   CI (99.9%): [≈ 0, 5138.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 8.200, 11.000), stdev = 4.604
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112991.842 ops/s
[info] # Warmup Iteration   2: 253867.034 ops/s
[info] # Warmup Iteration   3: 254559.947 ops/s
[info] # Warmup Iteration   4: 255472.033 ops/s
[info] # Warmup Iteration   5: 258716.838 ops/s
[info] Iteration   1: 255946.818 ops/s
[info]                  ·gc.alloc.rate:            355.290 MB/sec
[info]                  ·gc.alloc.rate.norm:       2185.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4141.266 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 253149.770 ops/s
[info]                  ·gc.alloc.rate:      351.236 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 255160.951 ops/s
[info]                  ·gc.alloc.rate:            356.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       2199.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4153.875 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 258983.484 ops/s
[info]                  ·gc.alloc.rate:      359.345 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 256835.638 ops/s
[info]                  ·gc.alloc.rate:            356.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       2184.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4122.515 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   256015.332 ±(99.9%) 8265.202 ops/s [Average]
[info]   (min, avg, max) = (253149.770, 256015.332, 258983.484), stdev = 2146.447
[info]   CI (99.9%): [247750.131, 264280.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   355.753 ±(99.9%) 11.307 MB/sec [Average]
[info]   (min, avg, max) = (351.236, 355.753, 359.345), stdev = 2.936
[info]   CI (99.9%): [344.446, 367.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2187.273 ±(99.9%) 25.969 B/op [Average]
[info]   (min, avg, max) = (2184.002, 2187.273, 2199.310), stdev = 6.744
[info]   CI (99.9%): [2161.304, 2213.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.885 ±(99.9%) 1419.712 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.885, 673.372), stdev = 368.695
[info]   CI (99.9%): [≈ 0, 1823.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2483.531 ±(99.9%) 8730.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2483.531, 4153.875), stdev = 2267.171
[info]   CI (99.9%): [≈ 0, 11213.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.600, 10.000), stdev = 5.128
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:21:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 578438.400 ops/s
[info] # Warmup Iteration   2: 677190.250 ops/s
[info] # Warmup Iteration   3: 696285.606 ops/s
[info] # Warmup Iteration   4: 690969.026 ops/s
[info] # Warmup Iteration   5: 693196.592 ops/s
[info] Iteration   1: 628191.204 ops/s
[info]                  ·gc.alloc.rate:      408.656 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 697802.266 ops/s
[info]                  ·gc.alloc.rate:            453.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1520.505 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 695048.246 ops/s
[info]                  ·gc.alloc.rate:                   454.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              1028.767 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1526.500 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.508 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 698621.538 ops/s
[info]                  ·gc.alloc.rate:            454.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1520.193 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 666984.140 ops/s
[info]                  ·gc.alloc.rate:      442.064 MB/sec
[info]                  ·gc.alloc.rate.norm: 1043.250 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   677329.479 ±(99.9%) 117239.897 ops/s [Average]
[info]   (min, avg, max) = (628191.204, 677329.479, 698621.538), stdev = 30446.829
[info]   CI (99.9%): [560089.582, 794569.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   442.690 ±(99.9%) 76.029 MB/sec [Average]
[info]   (min, avg, max) = (408.656, 442.690, 454.507), stdev = 19.745
[info]   CI (99.9%): [366.661, 518.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1028.807 ±(99.9%) 32.089 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1028.807, 1043.250), stdev = 8.333
[info]   CI (99.9%): [996.718, 1060.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.570 ±(99.9%) 1422.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.570, 674.743), stdev = 369.320
[info]   CI (99.9%): [≈ 0, 1826.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   913.440 ±(99.9%) 3210.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 913.440, 1526.500), stdev = 833.856
[info]   CI (99.9%): [≈ 0, 4124.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.302 ±(99.9%) 2.598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 1.508), stdev = 0.675
[info]   CI (99.9%): [≈ 0, 2.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15534.406 ops/s
[info] # Warmup Iteration   2: 53415.356 ops/s
[info] # Warmup Iteration   3: 50383.377 ops/s
[info] # Warmup Iteration   4: 53494.729 ops/s
[info] # Warmup Iteration   5: 54508.196 ops/s
[info] Iteration   1: 54865.229 ops/s
[info]                  ·gc.alloc.rate:                   2187.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              62763.503 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2715.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77905.136 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 152.868 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 55055.263 ops/s
[info]                  ·gc.alloc.rate:                                  2194.567 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62713.380 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.119 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2045.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58441.474 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 55105.947 ops/s
[info]                  ·gc.alloc.rate:            2202.231 MB/sec
[info]                  ·gc.alloc.rate.norm:       62875.543 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2045.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58387.396 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 55584.527 ops/s
[info]                  ·gc.alloc.rate:                                  2215.054 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62712.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57885.379 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 55057.310 ops/s
[info]                  ·gc.alloc.rate:                                  2196.210 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62786.721 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77920.550 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   55133.655 ±(99.9%) 1033.379 ops/s [Average]
[info]   (min, avg, max) = (54865.229, 55133.655, 55584.527), stdev = 268.365
[info]   CI (99.9%): [54100.276, 56167.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2199.206 ±(99.9%) 39.322 MB/sec [Average]
[info]   (min, avg, max) = (2187.968, 2199.206, 2215.054), stdev = 10.212
[info]   CI (99.9%): [2159.884, 2238.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62770.231 ±(99.9%) 258.523 B/op [Average]
[info]   (min, avg, max) = (62712.007, 62770.231, 62875.543), stdev = 67.138
[info]   CI (99.9%): [62511.708, 63028.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.085 ±(99.9%) 0.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.221), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2315.214 ±(99.9%) 1425.380 MB/sec [Average]
[info]   (min, avg, max) = (2044.573, 2315.214, 2725.575), stdev = 370.167
[info]   CI (99.9%): [889.834, 3740.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66107.987 ±(99.9%) 41504.137 B/op [Average]
[info]   (min, avg, max) = (57885.379, 66107.987, 77920.550), stdev = 10778.492
[info]   CI (99.9%): [24603.850, 107612.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.329), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   30.574 ±(99.9%) 263.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.574, 152.868), stdev = 68.364
[info]   CI (99.9%): [≈ 0, 293.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 15.000), stdev = 4.658
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98491.769 ops/s
[info] # Warmup Iteration   2: 167787.987 ops/s
[info] # Warmup Iteration   3: 176142.047 ops/s
[info] # Warmup Iteration   4: 175795.025 ops/s
[info] # Warmup Iteration   5: 165892.687 ops/s
[info] Iteration   1: 175481.308 ops/s
[info]                  ·gc.alloc.rate:                   872.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              7826.503 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6040.171 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.974 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 170511.505 ops/s
[info]                  ·gc.alloc.rate:            852.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       7868.732 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.218 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6222.529 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 175905.836 ops/s
[info]                  ·gc.alloc.rate:            873.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       7816.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6031.540 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 174600.076 ops/s
[info]                  ·gc.alloc.rate:                   867.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              7816.953 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12141.356 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 175506.874 ops/s
[info]                  ·gc.alloc.rate:            872.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       7819.733 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6045.422 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   174401.120 ±(99.9%) 8571.978 ops/s [Average]
[info]   (min, avg, max) = (170511.505, 174401.120, 175905.836), stdev = 2226.115
[info]   CI (99.9%): [165829.142, 182973.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   867.557 ±(99.9%) 33.529 MB/sec [Average]
[info]   (min, avg, max) = (852.586, 867.557, 873.516), stdev = 8.707
[info]   CI (99.9%): [834.029, 901.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7829.585 ±(99.9%) 85.738 B/op [Average]
[info]   (min, avg, max) = (7816.003, 7829.585, 7868.732), stdev = 22.266
[info]   CI (99.9%): [7743.847, 7915.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.554 ±(99.9%) 1159.078 MB/sec [Average]
[info]   (min, avg, max) = (673.292, 808.554, 1347.015), stdev = 301.009
[info]   CI (99.9%): [≈ 0, 1967.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7296.203 ±(99.9%) 10434.060 B/op [Average]
[info]   (min, avg, max) = (6031.540, 7296.203, 12141.356), stdev = 2709.692
[info]   CI (99.9%): [≈ 0, 17730.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.396 ±(99.9%) 12.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.396, 6.005), stdev = 3.281
[info]   CI (99.9%): [≈ 0, 15.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.600, 16.000), stdev = 3.578
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.878 ops/s
[info] # Warmup Iteration   2: 596483.259 ops/s
[info] # Warmup Iteration   3: 612112.176 ops/s
[info] # Warmup Iteration   4: 625364.348 ops/s
[info] # Warmup Iteration   5: 607039.145 ops/s
[info] Iteration   1: 621905.344 ops/s
[info]                  ·gc.alloc.rate:      338.194 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 617662.132 ops/s
[info]                  ·gc.alloc.rate:            338.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       863.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.517 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1710.966 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 625531.012 ops/s
[info]                  ·gc.alloc.rate:      340.229 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 614870.562 ops/s
[info]                  ·gc.alloc.rate:            336.603 MB/sec
[info]                  ·gc.alloc.rate.norm:       861.622 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1717.032 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 623323.152 ops/s
[info]                  ·gc.alloc.rate:      339.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   620658.440 ±(99.9%) 16659.855 ops/s [Average]
[info]   (min, avg, max) = (614870.562, 620658.440, 625531.012), stdev = 4326.511
[info]   CI (99.9%): [603998.585, 637318.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   338.559 ±(99.9%) 5.095 MB/sec [Average]
[info]   (min, avg, max) = (336.603, 338.559, 340.229), stdev = 1.323
[info]   CI (99.9%): [333.464, 343.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   858.538 ±(99.9%) 13.525 B/op [Average]
[info]   (min, avg, max) = (856.001, 858.538, 863.068), stdev = 3.512
[info]   CI (99.9%): [845.014, 872.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   268.459 ±(99.9%) 1415.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.459, 671.517), stdev = 367.603
[info]   CI (99.9%): [≈ 0, 1683.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   685.600 ±(99.9%) 3614.978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 685.600, 1717.032), stdev = 938.798
[info]   CI (99.9%): [≈ 0, 4300.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 11.000), stdev = 5.762
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:20:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321119.676 ops/s
[info] # Warmup Iteration   2: 596344.836 ops/s
[info] # Warmup Iteration   3: 621709.351 ops/s
[info] # Warmup Iteration   4: 615095.915 ops/s
[info] # Warmup Iteration   5: 616904.297 ops/s
[info] Iteration   1: 620179.851 ops/s
[info]                  ·gc.alloc.rate:      460.362 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.433 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 615476.278 ops/s
[info]                  ·gc.alloc.rate:            458.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       1171.466 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1722.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 600589.588 ops/s
[info]                  ·gc.alloc.rate:            456.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       1195.442 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1764.868 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 621068.105 ops/s
[info]                  ·gc.alloc.rate:      460.858 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 613863.705 ops/s
[info]                  ·gc.alloc.rate:            457.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       1174.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1726.620 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   614235.506 ±(99.9%) 31630.906 ops/s [Average]
[info]   (min, avg, max) = (600589.588, 614235.506, 621068.105), stdev = 8214.446
[info]   CI (99.9%): [582604.599, 645866.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   458.706 ±(99.9%) 7.219 MB/sec [Average]
[info]   (min, avg, max) = (456.327, 458.706, 460.858), stdev = 1.875
[info]   CI (99.9%): [451.487, 465.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1175.472 ±(99.9%) 44.003 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1175.472, 1195.442), stdev = 11.427
[info]   CI (99.9%): [1131.470, 1219.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   404.098 ±(99.9%) 1420.461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.098, 673.690), stdev = 368.889
[info]   CI (99.9%): [≈ 0, 1824.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1042.702 ±(99.9%) 3665.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1042.702, 1764.868), stdev = 951.997
[info]   CI (99.9%): [≈ 0, 4708.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.400, 9.000), stdev = 4.930
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 768311.593 ops/s
[info] # Warmup Iteration   2: 932635.761 ops/s
[info] # Warmup Iteration   3: 971300.954 ops/s
[info] # Warmup Iteration   4: 964728.331 ops/s
[info] # Warmup Iteration   5: 975795.224 ops/s
[info] Iteration   1: 964683.619 ops/s
[info]                  ·gc.alloc.rate:            524.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1099.829 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 961737.207 ops/s
[info]                  ·gc.alloc.rate:            523.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.366 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1103.200 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 946302.725 ops/s
[info]                  ·gc.alloc.rate:            516.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       859.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1121.184 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 960829.875 ops/s
[info]                  ·gc.alloc.rate:            522.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1104.245 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 982569.996 ops/s
[info]                  ·gc.alloc.rate:      534.336 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   963224.684 ±(99.9%) 49860.634 ops/s [Average]
[info]   (min, avg, max) = (946302.725, 963224.684, 982569.996), stdev = 12948.648
[info]   CI (99.9%): [913364.050, 1013085.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   524.378 ±(99.9%) 24.326 MB/sec [Average]
[info]   (min, avg, max) = (516.932, 524.378, 534.336), stdev = 6.317
[info]   CI (99.9%): [500.053, 548.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.849 ±(99.9%) 6.427 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.849, 859.823), stdev = 1.669
[info]   CI (99.9%): [850.422, 863.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.300 ±(99.9%) 1160.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.300, 674.330), stdev = 301.478
[info]   CI (99.9%): [≈ 0, 1700.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   885.692 ±(99.9%) 1906.785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 885.692, 1121.184), stdev = 495.186
[info]   CI (99.9%): [≈ 0, 2792.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.000, 8.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 777342.485 ops/s
[info] # Warmup Iteration   2: 1055830.073 ops/s
[info] # Warmup Iteration   3: 1073351.725 ops/s
[info] # Warmup Iteration   4: 1077254.241 ops/s
[info] # Warmup Iteration   5: 1067643.170 ops/s
[info] Iteration   1: 1077743.731 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1076406.333 ops/s
[info]                  ·gc.alloc.rate:      0.495 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.724 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1077591.521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1078164.831 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1074426.793 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1076866.642 ±(99.9%) 5822.238 ops/s [Average]
[info]   (min, avg, max) = (1074426.793, 1076866.642, 1078164.831), stdev = 1512.017
[info]   CI (99.9%): [1071044.404, 1082688.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.099 ±(99.9%) 0.852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.099, 0.495), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 0.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.145 ±(99.9%) 1.246 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.145, 0.724), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13193.536 ops/s
[info] # Warmup Iteration   2: 29746.302 ops/s
[info] # Warmup Iteration   3: 30173.036 ops/s
[info] # Warmup Iteration   4: 29938.291 ops/s
[info] # Warmup Iteration   5: 29915.969 ops/s
[info] Iteration   1: 30351.703 ops/s
[info]                  ·gc.alloc.rate:            1534.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       79562.327 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69808.350 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 30154.110 ops/s
[info]                  ·gc.alloc.rate:                   1525.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              79609.962 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70403.395 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 243.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 30522.917 ops/s
[info]                  ·gc.alloc.rate:                   1542.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              79544.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2039.565 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        105173.602 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 206.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 30801.166 ops/s
[info]                  ·gc.alloc.rate:                                  1556.433 MB/sec
[info]                  ·gc.alloc.rate.norm:                             79544.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.396 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69639.579 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 30779.706 ops/s
[info]                  ·gc.alloc.rate:            1555.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       79544.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69689.345 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   30521.921 ±(99.9%) 1069.708 ops/s [Average]
[info]   (min, avg, max) = (30154.110, 30521.921, 30801.166), stdev = 277.800
[info]   CI (99.9%): [29452.212, 31591.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1542.743 ±(99.9%) 52.159 MB/sec [Average]
[info]   (min, avg, max) = (1525.090, 1542.743, 1556.433), stdev = 13.546
[info]   CI (99.9%): [1490.584, 1594.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79560.866 ±(99.9%) 110.007 B/op [Average]
[info]   (min, avg, max) = (79544.013, 79560.866, 79609.962), stdev = 28.568
[info]   CI (99.9%): [79450.859, 79670.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.079 ±(99.9%) 0.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.396), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 0.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1491.955 ±(99.9%) 1179.144 MB/sec [Average]
[info]   (min, avg, max) = (1346.103, 1491.955, 2039.565), stdev = 306.220
[info]   CI (99.9%): [312.811, 2671.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   76942.854 ±(99.9%) 60780.191 B/op [Average]
[info]   (min, avg, max) = (69639.579, 76942.854, 105173.602), stdev = 15784.423
[info]   CI (99.9%): [16162.663, 137723.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   89.892 ±(99.9%) 476.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 89.892, 243.370), stdev = 123.793
[info]   CI (99.9%): [≈ 0, 566.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.400, 18.000), stdev = 7.092
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49059.970 ops/s
[info] # Warmup Iteration   2: 113091.173 ops/s
[info] # Warmup Iteration   3: 115632.202 ops/s
[info] # Warmup Iteration   4: 118735.668 ops/s
[info] # Warmup Iteration   5: 119903.815 ops/s
[info] Iteration   1: 120015.346 ops/s
[info]                  ·gc.alloc.rate:            1323.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       17362.813 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17672.089 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 119866.156 ops/s
[info]                  ·gc.alloc.rate:                   1322.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              17364.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17685.897 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.747 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 119712.545 ops/s
[info]                  ·gc.alloc.rate:                   1320.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              17362.298 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17761.490 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 120385.056 ops/s
[info]                  ·gc.alloc.rate:                   1328.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              17361.849 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17766.423 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 119662.346 ops/s
[info]                  ·gc.alloc.rate:            1319.776 MB/sec
[info]                  ·gc.alloc.rate.norm:       17360.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17925.275 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   119928.290 ±(99.9%) 1118.257 ops/s [Average]
[info]   (min, avg, max) = (119662.346, 119928.290, 120385.056), stdev = 290.408
[info]   CI (99.9%): [118810.033, 121046.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1323.032 ±(99.9%) 12.473 MB/sec [Average]
[info]   (min, avg, max) = (1319.776, 1323.032, 1328.005), stdev = 3.239
[info]   CI (99.9%): [1310.559, 1335.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17362.255 ±(99.9%) 6.018 B/op [Average]
[info]   (min, avg, max) = (17360.003, 17362.255, 17364.310), stdev = 1.563
[info]   CI (99.9%): [17356.237, 17368.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1353.505 ±(99.9%) 26.909 MB/sec [Average]
[info]   (min, avg, max) = (1347.434, 1353.505, 1362.750), stdev = 6.988
[info]   CI (99.9%): [1326.596, 1380.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   17762.235 ±(99.9%) 387.721 B/op [Average]
[info]   (min, avg, max) = (17672.089, 17762.235, 17925.275), stdev = 100.690
[info]   CI (99.9%): [17374.514, 18149.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   20.968 ±(99.9%) 96.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.968, 52.549), stdev = 25.178
[info]   CI (99.9%): [≈ 0, 117.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.000, 17.000), stdev = 6.205
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54024.741 ops/s
[info] # Warmup Iteration   2: 134518.010 ops/s
[info] # Warmup Iteration   3: 138845.001 ops/s
[info] # Warmup Iteration   4: 142467.964 ops/s
[info] # Warmup Iteration   5: 140229.032 ops/s
[info] Iteration   1: 142178.299 ops/s
[info]                  ·gc.alloc.rate:            752.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       8328.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7447.430 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 134961.905 ops/s
[info]                  ·gc.alloc.rate:                   714.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7845.657 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.768 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 142570.017 ops/s
[info]                  ·gc.alloc.rate:            754.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       8331.897 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7434.779 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 142234.777 ops/s
[info]                  ·gc.alloc.rate:            752.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       8329.170 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7444.865 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 142288.899 ops/s
[info]                  ·gc.alloc.rate:                   752.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7442.092 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.368 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   140846.779 ±(99.9%) 12680.914 ops/s [Average]
[info]   (min, avg, max) = (134961.905, 140846.779, 142570.017), stdev = 3293.193
[info]   CI (99.9%): [128165.865, 153527.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   745.287 ±(99.9%) 67.292 MB/sec [Average]
[info]   (min, avg, max) = (714.067, 745.287, 754.574), stdev = 17.476
[info]   CI (99.9%): [677.995, 812.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8329.015 ±(99.9%) 6.502 B/op [Average]
[info]   (min, avg, max) = (8328.003, 8329.015, 8331.897), stdev = 1.688
[info]   CI (99.9%): [8322.514, 8335.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.858 ±(99.9%) 1.023 MB/sec [Average]
[info]   (min, avg, max) = (672.688, 672.858, 673.327), stdev = 0.266
[info]   CI (99.9%): [671.835, 673.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7522.965 ±(99.9%) 694.859 B/op [Average]
[info]   (min, avg, max) = (7434.779, 7522.965, 7845.657), stdev = 180.453
[info]   CI (99.9%): [6828.105, 8217.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.027 ±(99.9%) 15.971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.027, 7.768), stdev = 4.148
[info]   CI (99.9%): [≈ 0, 18.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125987.916 ops/s
[info] # Warmup Iteration   2: 180025.995 ops/s
[info] # Warmup Iteration   3: 186459.490 ops/s
[info] # Warmup Iteration   4: 183408.684 ops/s
[info] # Warmup Iteration   5: 187371.171 ops/s
[info] Iteration   1: 187251.706 ops/s
[info]                  ·gc.alloc.rate:            852.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       7168.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5666.102 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 186822.943 ops/s
[info]                  ·gc.alloc.rate:            850.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       7168.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5679.081 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 188484.368 ops/s
[info]                  ·gc.alloc.rate:            860.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       7183.467 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5628.833 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 188036.001 ops/s
[info]                  ·gc.alloc.rate:            856.650 MB/sec
[info]                  ·gc.alloc.rate.norm:       7170.679 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11284.543 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   5: 189149.398 ops/s
[info]                  ·gc.alloc.rate:            861.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       7168.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5609.226 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   187948.883 ±(99.9%) 3596.473 ops/s [Average]
[info]   (min, avg, max) = (186822.943, 187948.883, 189149.398), stdev = 933.993
[info]   CI (99.9%): [184352.410, 191545.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   856.289 ±(99.9%) 17.842 MB/sec [Average]
[info]   (min, avg, max) = (850.673, 856.289, 861.353), stdev = 4.634
[info]   CI (99.9%): [838.447, 874.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   7171.631 ±(99.9%) 25.866 B/op [Average]
[info]   (min, avg, max) = (7168.002, 7171.631, 7183.467), stdev = 6.717
[info]   CI (99.9%): [7145.764, 7197.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.820 ±(99.9%) 1160.875 MB/sec [Average]
[info]   (min, avg, max) = (673.962, 808.820, 1348.116), stdev = 301.476
[info]   CI (99.9%): [≈ 0, 1969.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6773.557 ±(99.9%) 9710.838 B/op [Average]
[info]   (min, avg, max) = (5609.226, 6773.557, 11284.543), stdev = 2521.874
[info]   CI (99.9%): [≈ 0, 16484.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 15.000), stdev = 3.271
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9441.672 ops/s
[info] # Warmup Iteration   2: 46682.035 ops/s
[info] # Warmup Iteration   3: 48351.026 ops/s
[info] # Warmup Iteration   4: 50172.033 ops/s
[info] # Warmup Iteration   5: 49878.847 ops/s
[info] Iteration   1: 51783.827 ops/s
[info]                  ·gc.alloc.rate:                   1981.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              60224.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40996.378 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 121.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 51583.005 ops/s
[info]                  ·gc.alloc.rate:                                  1978.170 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60362.665 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.136 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62190.227 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                142.265 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 52014.552 ops/s
[info]                  ·gc.alloc.rate:            1990.110 MB/sec
[info]                  ·gc.alloc.rate.norm:       60226.478 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61857.599 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 52560.322 ops/s
[info]                  ·gc.alloc.rate:            2011.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       60224.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61215.137 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 51326.343 ops/s
[info]                  ·gc.alloc.rate:                                  1964.217 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60236.198 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62687.830 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   51853.610 ±(99.9%) 1807.601 ops/s [Average]
[info]   (min, avg, max) = (51326.343, 51853.610, 52560.322), stdev = 469.428
[info]   CI (99.9%): [50046.008, 53661.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1984.973 ±(99.9%) 66.668 MB/sec [Average]
[info]   (min, avg, max) = (1964.217, 1984.973, 2011.087), stdev = 17.314
[info]   CI (99.9%): [1918.305, 2051.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   60254.672 ±(99.9%) 233.267 B/op [Average]
[info]   (min, avg, max) = (60224.008, 60254.672, 60362.665), stdev = 60.579
[info]   CI (99.9%): [60021.405, 60487.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.136), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.843 ±(99.9%) 7.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.843, 4.153), stdev = 1.851
[info]   CI (99.9%): [≈ 0, 7.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1903.827 ±(99.9%) 1194.949 MB/sec [Average]
[info]   (min, avg, max) = (1348.722, 1903.827, 2044.184), stdev = 310.324
[info]   CI (99.9%): [708.878, 3098.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57789.434 ±(99.9%) 36206.978 B/op [Average]
[info]   (min, avg, max) = (40996.378, 57789.434, 62687.830), stdev = 9402.837
[info]   CI (99.9%): [21582.456, 93996.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   52.747 ±(99.9%) 279.558 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.747, 142.265), stdev = 72.600
[info]   CI (99.9%): [≈ 0, 332.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 16.000), stdev = 5.099
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79604.441 ops/s
[info] # Warmup Iteration   2: 155483.690 ops/s
[info] # Warmup Iteration   3: 168464.975 ops/s
[info] # Warmup Iteration   4: 167997.026 ops/s
[info] # Warmup Iteration   5: 170000.675 ops/s
[info] Iteration   1: 165656.378 ops/s
[info]                  ·gc.alloc.rate:            575.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       5469.733 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6404.522 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 166445.950 ops/s
[info]                  ·gc.alloc.rate:            576.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       5451.699 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6374.131 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 164547.988 ops/s
[info]                  ·gc.alloc.rate:            583.529 MB/sec
[info]                  ·gc.alloc.rate.norm:       5580.814 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6447.678 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 164819.780 ops/s
[info]                  ·gc.alloc.rate:            571.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       5453.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6437.391 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 164137.308 ops/s
[info]                  ·gc.alloc.rate:            568.322 MB/sec
[info]                  ·gc.alloc.rate.norm:       5448.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6457.394 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   165121.481 ±(99.9%) 3565.148 ops/s [Average]
[info]   (min, avg, max) = (164137.308, 165121.481, 166445.950), stdev = 925.858
[info]   CI (99.9%): [161556.333, 168686.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   575.084 ±(99.9%) 22.326 MB/sec [Average]
[info]   (min, avg, max) = (568.322, 575.084, 583.529), stdev = 5.798
[info]   CI (99.9%): [552.757, 597.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5480.695 ±(99.9%) 217.894 B/op [Average]
[info]   (min, avg, max) = (5448.002, 5480.695, 5580.814), stdev = 56.586
[info]   CI (99.9%): [5262.801, 5698.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   674.081 ±(99.9%) 1.045 MB/sec [Average]
[info]   (min, avg, max) = (673.620, 674.081, 674.340), stdev = 0.272
[info]   CI (99.9%): [673.035, 675.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6424.223 ±(99.9%) 132.291 B/op [Average]
[info]   (min, avg, max) = (6374.131, 6424.223, 6457.394), stdev = 34.356
[info]   CI (99.9%): [6291.932, 6556.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 308236.280 ops/s
[info] # Warmup Iteration   2: 631191.580 ops/s
[info] # Warmup Iteration   3: 680048.738 ops/s
[info] # Warmup Iteration   4: 673449.579 ops/s
[info] # Warmup Iteration   5: 676099.368 ops/s
[info] Iteration   1: 671117.034 ops/s
[info]                  ·gc.alloc.rate:            690.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       1620.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1579.440 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 676949.715 ops/s
[info]                  ·gc.alloc.rate:            687.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       1598.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1565.820 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 678150.711 ops/s
[info]                  ·gc.alloc.rate:                   687.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              1594.615 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1561.485 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.546 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 679242.658 ops/s
[info]                  ·gc.alloc.rate:            687.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1560.500 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 683310.378 ops/s
[info]                  ·gc.alloc.rate:            691.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1551.252 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   677754.099 ±(99.9%) 16997.770 ops/s [Average]
[info]   (min, avg, max) = (671117.034, 677754.099, 683310.378), stdev = 4414.267
[info]   CI (99.9%): [660756.330, 694751.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   688.678 ±(99.9%) 7.992 MB/sec [Average]
[info]   (min, avg, max) = (687.011, 688.678, 691.113), stdev = 2.076
[info]   CI (99.9%): [680.686, 696.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1599.466 ±(99.9%) 45.721 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1599.466, 1620.157), stdev = 11.874
[info]   CI (99.9%): [1553.745, 1645.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   673.279 ±(99.9%) 1.161 MB/sec [Average]
[info]   (min, avg, max) = (672.740, 673.279, 673.424), stdev = 0.301
[info]   CI (99.9%): [672.119, 674.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1563.700 ±(99.9%) 39.566 B/op [Average]
[info]   (min, avg, max) = (1551.252, 1563.700, 1579.440), stdev = 10.275
[info]   CI (99.9%): [1524.134, 1603.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.309 ±(99.9%) 2.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.309, 1.546), stdev = 0.691
[info]   CI (99.9%): [≈ 0, 2.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 10.000), stdev = 0.707
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456074.265 ops/s
[info] # Warmup Iteration   2: 593866.031 ops/s
[info] # Warmup Iteration   3: 623495.810 ops/s
[info] # Warmup Iteration   4: 627420.358 ops/s
[info] # Warmup Iteration   5: 625139.879 ops/s
[info] Iteration   1: 621336.469 ops/s
[info]                  ·gc.alloc.rate:            476.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1707.592 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 611650.559 ops/s
[info]                  ·gc.alloc.rate:      469.526 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 627905.770 ops/s
[info]                  ·gc.alloc.rate:            482.123 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.560 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1689.665 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 623625.107 ops/s
[info]                  ·gc.alloc.rate:            480.532 MB/sec
[info]                  ·gc.alloc.rate.norm:       1212.880 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1701.309 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 625816.836 ops/s
[info]                  ·gc.alloc.rate:            480.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1695.226 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   622066.948 ±(99.9%) 24324.378 ops/s [Average]
[info]   (min, avg, max) = (611650.559, 622066.948, 627905.770), stdev = 6316.964
[info]   CI (99.9%): [597742.570, 646391.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   477.879 ±(99.9%) 19.410 MB/sec [Average]
[info]   (min, avg, max) = (469.526, 477.879, 482.123), stdev = 5.041
[info]   CI (99.9%): [458.469, 497.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1209.089 ±(99.9%) 8.215 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1209.089, 1212.880), stdev = 2.133
[info]   CI (99.9%): [1200.873, 1217.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.253 ±(99.9%) 1160.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.253, 674.148), stdev = 301.451
[info]   CI (99.9%): [≈ 0, 1700.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1358.758 ±(99.9%) 2924.943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1358.758, 1707.592), stdev = 759.599
[info]   CI (99.9%): [≈ 0, 4283.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 8.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:17:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 524396.547 ops/s
[info] # Warmup Iteration   2: 694398.323 ops/s
[info] # Warmup Iteration   3: 700293.161 ops/s
[info] # Warmup Iteration   4: 700343.897 ops/s
[info] # Warmup Iteration   5: 698597.191 ops/s
[info] Iteration   1: 698372.007 ops/s
[info]                  ·gc.alloc.rate:      0.005 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 697985.605 ops/s
[info]                  ·gc.alloc.rate:      0.261 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.589 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 697957.270 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 698804.413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 698561.397 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   698336.138 ±(99.9%) 1411.831 ops/s [Average]
[info]   (min, avg, max) = (697957.270, 698336.138, 698804.413), stdev = 366.648
[info]   CI (99.9%): [696924.307, 699747.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.053 ±(99.9%) 0.448 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.053, 0.261), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.121 ±(99.9%) 1.009 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.121, 0.589), stdev = 0.262
[info]   CI (99.9%): [≈ 0, 1.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106441.736 ops/s
[info] # Warmup Iteration   2: 274737.804 ops/s
[info] # Warmup Iteration   3: 277471.652 ops/s
[info] # Warmup Iteration   4: 274860.211 ops/s
[info] # Warmup Iteration   5: 277194.822 ops/s
[info] Iteration   1: 276567.092 ops/s
[info]                  ·gc.alloc.rate:            759.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       4321.966 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3828.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 277660.302 ops/s
[info]                  ·gc.alloc.rate:                   763.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              4329.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3813.649 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.776 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 278226.981 ops/s
[info]                  ·gc.alloc.rate:            763.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3809.619 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 271558.469 ops/s
[info]                  ·gc.alloc.rate:            750.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       4348.894 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3903.190 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 277713.441 ops/s
[info]                  ·gc.alloc.rate:            762.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3812.880 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   276345.257 ±(99.9%) 10563.809 ops/s [Average]
[info]   (min, avg, max) = (271558.469, 276345.257, 278226.981), stdev = 2743.388
[info]   CI (99.9%): [265781.447, 286909.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   759.801 ±(99.9%) 21.509 MB/sec [Average]
[info]   (min, avg, max) = (750.296, 759.801, 763.600), stdev = 5.586
[info]   CI (99.9%): [738.292, 781.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4328.024 ±(99.9%) 47.259 B/op [Average]
[info]   (min, avg, max) = (4320.001, 4328.024, 4348.894), stdev = 12.273
[info]   CI (99.9%): [4280.765, 4375.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   672.962 ±(99.9%) 1.443 MB/sec [Average]
[info]   (min, avg, max) = (672.656, 672.962, 673.400), stdev = 0.375
[info]   CI (99.9%): [671.520, 674.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   3833.600 ±(99.9%) 152.449 B/op [Average]
[info]   (min, avg, max) = (3809.619, 3833.600, 3903.190), stdev = 39.590
[info]   CI (99.9%): [3681.152, 3986.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.755 ±(99.9%) 6.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.755, 3.776), stdev = 1.689
[info]   CI (99.9%): [≈ 0, 7.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2507.154 ops/s
[info] # Warmup Iteration   2: 7359.712 ops/s
[info] # Warmup Iteration   3: 7489.849 ops/s
[info] # Warmup Iteration   4: 7567.551 ops/s
[info] # Warmup Iteration   5: 7454.076 ops/s
[info] Iteration   1: 7522.086 ops/s
[info]                  ·gc.alloc.rate:            1026.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       214771.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 140897.174 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 7482.568 ops/s
[info]                  ·gc.alloc.rate:            1019.862 MB/sec
[info]                  ·gc.alloc.rate.norm:       214536.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 283300.464 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 7562.460 ops/s
[info]                  ·gc.alloc.rate:                   1030.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              214536.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        140133.554 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 138.609 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7439.914 ops/s
[info]                  ·gc.alloc.rate:            1017.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       215244.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 285040.211 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   5: 7502.707 ops/s
[info]                  ·gc.alloc.rate:                   1023.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              214597.671 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        283168.605 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 977.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   7501.947 ±(99.9%) 175.317 ops/s [Average]
[info]   (min, avg, max) = (7439.914, 7501.947, 7562.460), stdev = 45.529
[info]   CI (99.9%): [7326.630, 7677.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1023.635 ±(99.9%) 19.843 MB/sec [Average]
[info]   (min, avg, max) = (1017.877, 1023.635, 1030.788), stdev = 5.153
[info]   CI (99.9%): [1003.792, 1043.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   214737.197 ±(99.9%) 1153.055 B/op [Average]
[info]   (min, avg, max) = (214536.054, 214737.197, 215244.224), stdev = 299.445
[info]   CI (99.9%): [213584.143, 215890.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1078.314 ±(99.9%) 1423.618 MB/sec [Average]
[info]   (min, avg, max) = (673.304, 1078.314, 1350.237), stdev = 369.709
[info]   CI (99.9%): [≈ 0, 2501.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   226508.002 ±(99.9%) 302291.406 B/op [Average]
[info]   (min, avg, max) = (140133.554, 226508.002, 285040.211), stdev = 78504.118
[info]   CI (99.9%): [≈ 0, 528799.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   223.299 ±(99.9%) 1640.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 223.299, 977.889), stdev = 426.077
[info]   CI (99.9%): [≈ 0, 1863.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.200, 16.000), stdev = 4.025
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2111.832 ops/s
[info] # Warmup Iteration   2: 7354.029 ops/s
[info] # Warmup Iteration   3: 7799.102 ops/s
[info] # Warmup Iteration   4: 7700.957 ops/s
[info] # Warmup Iteration   5: 7812.193 ops/s
[info] Iteration   1: 7722.530 ops/s
[info]                  ·gc.alloc.rate:            990.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       201854.441 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 274226.245 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 7782.807 ops/s
[info]                  ·gc.alloc.rate:            997.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       201776.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136038.762 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 7725.223 ops/s
[info]                  ·gc.alloc.rate:                   990.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              201819.703 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        274255.480 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 135.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 7821.223 ops/s
[info]                  ·gc.alloc.rate:            1002.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       201803.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135377.957 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 7811.475 ops/s
[info]                  ·gc.alloc.rate:                   1001.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              201864.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        135551.230 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 536.837 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   7772.652 ±(99.9%) 179.904 ops/s [Average]
[info]   (min, avg, max) = (7722.530, 7772.652, 7821.223), stdev = 46.720
[info]   CI (99.9%): [7592.748, 7952.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   996.671 ±(99.9%) 22.792 MB/sec [Average]
[info]   (min, avg, max) = (990.505, 996.671, 1002.746), stdev = 5.919
[info]   CI (99.9%): [973.879, 1019.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   201823.452 ±(99.9%) 139.996 B/op [Average]
[info]   (min, avg, max) = (201776.057, 201823.452, 201864.052), stdev = 36.357
[info]   CI (99.9%): [201683.455, 201963.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   941.959 ±(99.9%) 1419.759 MB/sec [Average]
[info]   (min, avg, max) = (672.661, 941.959, 1346.011), stdev = 368.707
[info]   CI (99.9%): [≈ 0, 2361.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   191089.935 ±(99.9%) 292288.719 B/op [Average]
[info]   (min, avg, max) = (135377.957, 191089.935, 274255.480), stdev = 75906.452
[info]   CI (99.9%): [≈ 0, 483378.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 4.442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.664), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   134.508 ±(99.9%) 895.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 134.508, 536.837), stdev = 232.458
[info]   CI (99.9%): [≈ 0, 1029.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.200, 19.000), stdev = 5.310
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192406.741 ops/s
[info] # Warmup Iteration   2: 237424.032 ops/s
[info] # Warmup Iteration   3: 241868.861 ops/s
[info] # Warmup Iteration   4: 237273.298 ops/s
[info] # Warmup Iteration   5: 238273.621 ops/s
[info] Iteration   1: 241374.789 ops/s
[info]                  ·gc.alloc.rate:                   1570.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8791.378 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 241513.063 ops/s
[info]                  ·gc.alloc.rate:                   1571.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              10241.841 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8812.256 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 242713.896 ops/s
[info]                  ·gc.alloc.rate:                   1579.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.380 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2041.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13239.214 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 243973.551 ops/s
[info]                  ·gc.alloc.rate:            1587.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       10242.538 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8792.099 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 248009.440 ops/s
[info]                  ·gc.alloc.rate:            1615.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       10249.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8648.660 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   243516.948 ±(99.9%) 10482.005 ops/s [Average]
[info]   (min, avg, max) = (241374.789, 243516.948, 248009.440), stdev = 2722.144
[info]   CI (99.9%): [233034.942, 253998.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1584.687 ±(99.9%) 70.758 MB/sec [Average]
[info]   (min, avg, max) = (1570.263, 1584.687, 1615.128), stdev = 18.376
[info]   CI (99.9%): [1513.929, 1655.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10242.754 ±(99.9%) 14.032 B/op [Average]
[info]   (min, avg, max) = (10240.007, 10242.754, 10249.003), stdev = 3.644
[info]   CI (99.9%): [10228.722, 10256.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1493.467 ±(99.9%) 1179.762 MB/sec [Average]
[info]   (min, avg, max) = (1348.121, 1493.467, 2041.413), stdev = 306.381
[info]   CI (99.9%): [313.705, 2673.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9656.721 ±(99.9%) 7715.704 B/op [Average]
[info]   (min, avg, max) = (8648.660, 9656.721, 13239.214), stdev = 2003.744
[info]   CI (99.9%): [1941.018, 17372.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 8.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.534 ±(99.9%) 44.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.534, 26.046), stdev = 11.633
[info]   CI (99.9%): [≈ 0, 54.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 16.000), stdev = 5.958
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1348.858 ops/s
[info] # Warmup Iteration   2: 5666.205 ops/s
[info] # Warmup Iteration   3: 5984.831 ops/s
[info] # Warmup Iteration   4: 6082.396 ops/s
[info] # Warmup Iteration   5: 6019.295 ops/s
[info] Iteration   1: 6000.788 ops/s
[info]                  ·gc.alloc.rate:            1169.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       306744.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 352844.165 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 5964.374 ops/s
[info]                  ·gc.alloc.rate:            1158.982 MB/sec
[info]                  ·gc.alloc.rate.norm:       305707.165 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 355032.437 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 6090.164 ops/s
[info]                  ·gc.alloc.rate:            1181.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       305280.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 173873.216 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 6055.826 ops/s
[info]                  ·gc.alloc.rate:                   1174.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              305280.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        350564.042 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1211.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 6062.141 ops/s
[info]                  ·gc.alloc.rate:                   1175.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              305316.728 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.246 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        352407.303 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1037.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   6034.659 ±(99.9%) 196.074 ops/s [Average]
[info]   (min, avg, max) = (5964.374, 6034.659, 6090.164), stdev = 50.920
[info]   CI (99.9%): [5838.585, 6230.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1172.196 ±(99.9%) 32.759 MB/sec [Average]
[info]   (min, avg, max) = (1158.982, 1172.196, 1181.656), stdev = 8.507
[info]   CI (99.9%): [1139.437, 1204.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   305665.644 ±(99.9%) 2423.196 B/op [Average]
[info]   (min, avg, max) = (305280.067, 305665.644, 306744.187), stdev = 629.296
[info]   CI (99.9%): [303242.448, 308088.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1214.150 ±(99.9%) 1164.972 MB/sec [Average]
[info]   (min, avg, max) = (673.016, 1214.150, 1357.246), stdev = 302.540
[info]   CI (99.9%): [49.178, 2379.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   316944.233 ±(99.9%) 308031.978 B/op [Average]
[info]   (min, avg, max) = (173873.216, 316944.233, 355032.437), stdev = 79994.927
[info]   CI (99.9%): [8912.254, 624976.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   449.867 ±(99.9%) 2383.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 449.867, 1211.826), stdev = 619.081
[info]   CI (99.9%): [≈ 0, 2833.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   76.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 15.200, 19.000), stdev = 4.266
[info]   CI (99.9%): [76.000, 76.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11378.739 ops/s
[info] # Warmup Iteration   2: 23879.499 ops/s
[info] # Warmup Iteration   3: 23918.965 ops/s
[info] # Warmup Iteration   4: 24302.685 ops/s
[info] # Warmup Iteration   5: 24464.312 ops/s
[info] Iteration   1: 24118.429 ops/s
[info]                  ·gc.alloc.rate:            967.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       63124.784 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87892.081 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 24409.710 ops/s
[info]                  ·gc.alloc.rate:            977.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       63001.844 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43422.231 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 24617.006 ops/s
[info]                  ·gc.alloc.rate:            985.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       63025.864 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43055.411 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 24415.718 ops/s
[info]                  ·gc.alloc.rate:            977.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       62984.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86823.123 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   5: 24564.892 ops/s
[info]                  ·gc.alloc.rate:                   983.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              62993.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        43146.534 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 213.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   24425.151 ±(99.9%) 747.515 ops/s [Average]
[info]   (min, avg, max) = (24118.429, 24425.151, 24617.006), stdev = 194.127
[info]   CI (99.9%): [23677.636, 25172.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   978.106 ±(99.9%) 27.357 MB/sec [Average]
[info]   (min, avg, max) = (967.243, 978.106, 985.668), stdev = 7.104
[info]   CI (99.9%): [950.749, 1005.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   63025.914 ±(99.9%) 221.114 B/op [Average]
[info]   (min, avg, max) = (62984.017, 63025.914, 63124.784), stdev = 57.423
[info]   CI (99.9%): [62804.800, 63247.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   942.845 ±(99.9%) 1420.729 MB/sec [Average]
[info]   (min, avg, max) = (673.348, 942.845, 1347.294), stdev = 368.959
[info]   CI (99.9%): [≈ 0, 2363.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   60867.876 ±(99.9%) 93127.944 B/op [Average]
[info]   (min, avg, max) = (43055.411, 60867.876, 87892.081), stdev = 24185.031
[info]   CI (99.9%): [≈ 0, 153995.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   42.677 ±(99.9%) 367.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.677, 213.385), stdev = 95.429
[info]   CI (99.9%): [≈ 0, 410.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.800, 17.000), stdev = 4.764
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9170.867 ops/s
[info] # Warmup Iteration   2: 26786.815 ops/s
[info] # Warmup Iteration   3: 27600.395 ops/s
[info] # Warmup Iteration   4: 27491.473 ops/s
[info] # Warmup Iteration   5: 27499.958 ops/s
[info] Iteration   1: 27482.359 ops/s
[info]                  ·gc.alloc.rate:            1057.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       60558.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38529.551 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 26598.927 ops/s
[info]                  ·gc.alloc.rate:            1023.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       60564.702 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79619.724 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 27469.464 ops/s
[info]                  ·gc.alloc.rate:            1056.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38547.782 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 27427.459 ops/s
[info]                  ·gc.alloc.rate:                   1055.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.636 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77213.602 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 191.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 27623.407 ops/s
[info]                  ·gc.alloc.rate:                   1067.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              60821.990 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        38522.681 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 75.907 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   27320.323 ±(99.9%) 1578.587 ops/s [Average]
[info]   (min, avg, max) = (26598.927, 27320.323, 27623.407), stdev = 409.954
[info]   CI (99.9%): [25741.736, 28898.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1052.088 ±(99.9%) 63.580 MB/sec [Average]
[info]   (min, avg, max) = (1023.851, 1052.088, 1067.412), stdev = 16.512
[info]   CI (99.9%): [988.508, 1115.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60609.882 ±(99.9%) 457.002 B/op [Average]
[info]   (min, avg, max) = (60552.015, 60609.882, 60821.990), stdev = 118.682
[info]   CI (99.9%): [60152.880, 61066.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.576 ±(99.9%) 1416.956 MB/sec [Average]
[info]   (min, avg, max) = (672.728, 942.576, 1345.978), stdev = 367.979
[info]   CI (99.9%): [≈ 0, 2359.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   54486.668 ±(99.9%) 84181.069 B/op [Average]
[info]   (min, avg, max) = (38522.681, 54486.668, 79619.724), stdev = 21861.556
[info]   CI (99.9%): [≈ 0, 138667.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   53.406 ±(99.9%) 322.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.406, 191.123), stdev = 83.709
[info]   CI (99.9%): [≈ 0, 375.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.200, 19.000), stdev = 5.891
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:15:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345808.754 ops/s
[info] # Warmup Iteration   2: 458752.712 ops/s
[info] # Warmup Iteration   3: 436504.007 ops/s
[info] # Warmup Iteration   4: 448944.982 ops/s
[info] # Warmup Iteration   5: 446308.815 ops/s
[info] Iteration   1: 442223.123 ops/s
[info]                  ·gc.alloc.rate:            799.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       2844.822 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4798.411 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 435583.172 ops/s
[info]                  ·gc.alloc.rate:            787.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       2846.347 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2435.817 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 449563.579 ops/s
[info]                  ·gc.alloc.rate:            811.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.597 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2360.040 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 449903.031 ops/s
[info]                  ·gc.alloc.rate:            811.791 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2358.120 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 450237.834 ops/s
[info]                  ·gc.alloc.rate:            812.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2356.471 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   445502.148 ±(99.9%) 24912.491 ops/s [Average]
[info]   (min, avg, max) = (435583.172, 445502.148, 450237.834), stdev = 6469.695
[info]   CI (99.9%): [420589.657, 470414.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   804.444 ±(99.9%) 41.941 MB/sec [Average]
[info]   (min, avg, max) = (787.617, 804.444, 812.344), stdev = 10.892
[info]   CI (99.9%): [762.503, 846.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2842.354 ±(99.9%) 11.584 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2842.354, 2846.347), stdev = 3.008
[info]   CI (99.9%): [2830.769, 2853.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.824 ±(99.9%) 1160.531 MB/sec [Average]
[info]   (min, avg, max) = (674.019, 808.824, 1347.960), stdev = 301.386
[info]   CI (99.9%): [≈ 0, 1969.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2861.772 ±(99.9%) 4170.772 B/op [Average]
[info]   (min, avg, max) = (2356.471, 2861.772, 4798.411), stdev = 1083.136
[info]   CI (99.9%): [≈ 0, 7032.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 15.000), stdev = 3.271
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 308829.896 ops/s
[info] # Warmup Iteration   2: 422899.114 ops/s
[info] # Warmup Iteration   3: 429326.881 ops/s
[info] # Warmup Iteration   4: 429048.027 ops/s
[info] # Warmup Iteration   5: 424743.785 ops/s
[info] Iteration   1: 430023.719 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 428760.924 ops/s
[info]                  ·gc.alloc.rate:      0.924 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.391 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 429295.854 ops/s
[info]                  ·gc.alloc.rate:      0.566 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.075 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 429794.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 430015.475 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   429578.018 ±(99.9%) 2094.956 ops/s [Average]
[info]   (min, avg, max) = (428760.924, 429578.018, 430023.719), stdev = 544.054
[info]   CI (99.9%): [427483.062, 431672.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.298 ±(99.9%) 1.644 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.298, 0.924), stdev = 0.427
[info]   CI (99.9%): [≈ 0, 1.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.094 ±(99.9%) 6.034 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.094, 3.391), stdev = 1.567
[info]   CI (99.9%): [≈ 0, 7.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10456.951 ops/s
[info] # Warmup Iteration   2: 26886.201 ops/s
[info] # Warmup Iteration   3: 27163.321 ops/s
[info] # Warmup Iteration   4: 26879.952 ops/s
[info] # Warmup Iteration   5: 26866.826 ops/s
[info] Iteration   1: 27068.820 ops/s
[info]                  ·gc.alloc.rate:                   1088.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78273.329 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 27122.666 ops/s
[info]                  ·gc.alloc.rate:                   1091.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              63321.994 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78120.400 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 27290.898 ops/s
[info]                  ·gc.alloc.rate:                   1097.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        38799.156 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.415 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 27021.918 ops/s
[info]                  ·gc.alloc.rate:                   1086.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              63318.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78412.347 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 193.994 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 27111.105 ops/s
[info]                  ·gc.alloc.rate:                   1095.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              63582.756 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78577.461 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 270.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   27123.081 ±(99.9%) 392.144 ops/s [Average]
[info]   (min, avg, max) = (27021.918, 27123.081, 27290.898), stdev = 101.838
[info]   CI (99.9%): [26730.938, 27515.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1091.990 ±(99.9%) 17.200 MB/sec [Average]
[info]   (min, avg, max) = (1086.975, 1091.990, 1097.789), stdev = 4.467
[info]   CI (99.9%): [1074.790, 1109.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   63369.389 ±(99.9%) 459.582 B/op [Average]
[info]   (min, avg, max) = (63312.015, 63369.389, 63582.756), stdev = 119.352
[info]   CI (99.9%): [62909.807, 63828.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1212.924 ±(99.9%) 1162.826 MB/sec [Average]
[info]   (min, avg, max) = (672.752, 1212.924, 1353.441), stdev = 301.982
[info]   CI (99.9%): [50.099, 2375.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70436.539 ±(99.9%) 68104.958 B/op [Average]
[info]   (min, avg, max) = (38799.156, 70436.539, 78577.461), stdev = 17686.641
[info]   CI (99.9%): [2331.580, 138541.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.998 ±(99.9%) 7.254 MB/sec [Average]
[info]   (min, avg, max) = (0.666, 1.998, 4.662), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 9.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   116.097 ±(99.9%) 421.749 B/op [Average]
[info]   (min, avg, max) = (38.415, 116.097, 270.690), stdev = 109.527
[info]   CI (99.9%): [≈ 0, 537.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   74.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 14.800, 19.000), stdev = 4.494
[info]   CI (99.9%): [74.000, 74.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9755.745 ops/s
[info] # Warmup Iteration   2: 26795.673 ops/s
[info] # Warmup Iteration   3: 26290.915 ops/s
[info] # Warmup Iteration   4: 26932.728 ops/s
[info] # Warmup Iteration   5: 26626.630 ops/s
[info] Iteration   1: 27195.328 ops/s
[info]                  ·gc.alloc.rate:            1440.562 MB/sec
[info]                  ·gc.alloc.rate.norm:       83376.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77952.155 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 27199.473 ops/s
[info]                  ·gc.alloc.rate:                   1440.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              83380.322 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77940.693 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 192.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 27200.371 ops/s
[info]                  ·gc.alloc.rate:                   1442.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              83485.712 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78400.367 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 231.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 27428.322 ops/s
[info]                  ·gc.alloc.rate:                                  1453.019 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83378.770 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.828 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       117272.936 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                38.225 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 27551.142 ops/s
[info]                  ·gc.alloc.rate:            1459.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       83376.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77855.512 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   27314.927 ±(99.9%) 636.850 ops/s [Average]
[info]   (min, avg, max) = (27195.328, 27314.927, 27551.142), stdev = 165.388
[info]   CI (99.9%): [26678.077, 27951.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1447.321 ±(99.9%) 32.712 MB/sec [Average]
[info]   (min, avg, max) = (1440.562, 1447.321, 1459.463), stdev = 8.495
[info]   CI (99.9%): [1414.609, 1480.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83399.368 ±(99.9%) 185.999 B/op [Average]
[info]   (min, avg, max) = (83376.016, 83399.368, 83485.712), stdev = 48.303
[info]   CI (99.9%): [83213.368, 83585.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.166 ±(99.9%) 1.426 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.166, 0.828), stdev = 0.370
[info]   CI (99.9%): [≈ 0, 1.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1491.009 ±(99.9%) 1189.947 MB/sec [Average]
[info]   (min, avg, max) = (1346.849, 1491.009, 2043.683), stdev = 309.025
[info]   CI (99.9%): [301.062, 2680.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   85884.333 ±(99.9%) 67571.311 B/op [Average]
[info]   (min, avg, max) = (77855.512, 85884.333, 117272.936), stdev = 17548.055
[info]   CI (99.9%): [18313.021, 153455.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   92.445 ±(99.9%) 427.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.445, 231.270), stdev = 111.087
[info]   CI (99.9%): [≈ 0, 520.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 16.000), stdev = 5.805
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7996.397 ops/s
[info] # Warmup Iteration   2: 23533.401 ops/s
[info] # Warmup Iteration   3: 25633.321 ops/s
[info] # Warmup Iteration   4: 25844.495 ops/s
[info] # Warmup Iteration   5: 25507.952 ops/s
[info] Iteration   1: 25695.145 ops/s
[info]                  ·gc.alloc.rate:            1178.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       72188.970 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82420.465 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 25562.504 ops/s
[info]                  ·gc.alloc.rate:            1166.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       71849.875 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82845.994 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 26184.128 ops/s
[info]                  ·gc.alloc.rate:            1194.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       71816.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40440.727 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 25354.922 ops/s
[info]                  ·gc.alloc.rate:                   1156.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              71816.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83690.911 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 289.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 25495.163 ops/s
[info]                  ·gc.alloc.rate:                   1164.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              71913.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83803.839 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 246.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   25658.372 ±(99.9%) 1226.298 ops/s [Average]
[info]   (min, avg, max) = (25354.922, 25658.372, 26184.128), stdev = 318.466
[info]   CI (99.9%): [24432.075, 26884.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1172.345 ±(99.9%) 56.826 MB/sec [Average]
[info]   (min, avg, max) = (1156.817, 1172.345, 1194.871), stdev = 14.758
[info]   CI (99.9%): [1115.519, 1229.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71916.886 ±(99.9%) 605.425 B/op [Average]
[info]   (min, avg, max) = (71816.016, 71916.886, 72188.970), stdev = 157.227
[info]   CI (99.9%): [71311.462, 72522.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1213.834 ±(99.9%) 1164.662 MB/sec [Average]
[info]   (min, avg, max) = (672.851, 1213.834, 1357.408), stdev = 302.459
[info]   CI (99.9%): [49.172, 2378.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   74640.387 ±(99.9%) 73651.031 B/op [Average]
[info]   (min, avg, max) = (40440.727, 74640.387, 83803.839), stdev = 19126.939
[info]   CI (99.9%): [989.356, 148291.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   107.234 ±(99.9%) 568.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 107.234, 289.445), stdev = 147.611
[info]   CI (99.9%): [≈ 0, 675.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 14.000, 19.000), stdev = 5.657
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293055.216 ops/s
[info] # Warmup Iteration   2: 365394.809 ops/s
[info] # Warmup Iteration   3: 354543.758 ops/s
[info] # Warmup Iteration   4: 395477.895 ops/s
[info] # Warmup Iteration   5: 384808.289 ops/s
[info] Iteration   1: 396095.507 ops/s
[info]                  ·gc.alloc.rate:            1031.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       4097.467 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2678.565 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 394465.169 ops/s
[info]                  ·gc.alloc.rate:            1030.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       4111.943 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5379.139 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 400950.910 ops/s
[info]                  ·gc.alloc.rate:                   1043.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.842 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2646.169 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.615 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 399951.240 ops/s
[info]                  ·gc.alloc.rate:            1040.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5308.058 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   5: 403075.050 ops/s
[info]                  ·gc.alloc.rate:                   1048.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2632.228 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   398907.575 ±(99.9%) 13651.470 ops/s [Average]
[info]   (min, avg, max) = (394465.169, 398907.575, 403075.050), stdev = 3545.243
[info]   CI (99.9%): [385256.105, 412559.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1039.009 ±(99.9%) 30.718 MB/sec [Average]
[info]   (min, avg, max) = (1030.674, 1039.009, 1048.906), stdev = 7.977
[info]   CI (99.9%): [1008.291, 1069.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4099.651 ±(99.9%) 26.567 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4099.651, 4111.943), stdev = 6.899
[info]   CI (99.9%): [4073.084, 4126.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.868 ±(99.9%) 1422.854 MB/sec [Average]
[info]   (min, avg, max) = (673.979, 943.868, 1348.991), stdev = 369.511
[info]   CI (99.9%): [≈ 0, 2366.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3728.832 ±(99.9%) 5677.326 B/op [Average]
[info]   (min, avg, max) = (2632.228, 3728.832, 5379.139), stdev = 1474.384
[info]   CI (99.9%): [≈ 0, 9406.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.124 ±(99.9%) 21.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.124, 13.005), stdev = 5.639
[info]   CI (99.9%): [≈ 0, 24.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.800, 15.000), stdev = 3.834
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1908.721 ops/s
[info] # Warmup Iteration   2: 12550.985 ops/s
[info] # Warmup Iteration   3: 13561.649 ops/s
[info] # Warmup Iteration   4: 14025.051 ops/s
[info] # Warmup Iteration   5: 14022.623 ops/s
[info] Iteration   1: 14093.164 ops/s
[info]                  ·gc.alloc.rate:            1427.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       159466.510 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150242.837 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 14099.298 ops/s
[info]                  ·gc.alloc.rate:                   1424.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              159058.497 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2018.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        225374.688 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 371.783 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   3: 14113.850 ops/s
[info]                  ·gc.alloc.rate:                   1425.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              158936.866 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        150942.649 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 445.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 14134.678 ops/s
[info]                  ·gc.alloc.rate:                   1438.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              160176.429 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1361.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        151587.053 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 148.324 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 14022.339 ops/s
[info]                  ·gc.alloc.rate:            1416.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       158912.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 152968.734 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   14092.666 ±(99.9%) 163.413 ops/s [Average]
[info]   (min, avg, max) = (14022.339, 14092.666, 14134.678), stdev = 42.438
[info]   CI (99.9%): [13929.252, 14256.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1426.433 ±(99.9%) 30.831 MB/sec [Average]
[info]   (min, avg, max) = (1416.073, 1426.433, 1438.373), stdev = 8.007
[info]   CI (99.9%): [1395.602, 1457.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   159310.066 ±(99.9%) 2052.125 B/op [Average]
[info]   (min, avg, max) = (158912.029, 159310.066, 160176.429), stdev = 532.930
[info]   CI (99.9%): [157257.941, 161362.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1488.364 ±(99.9%) 1142.026 MB/sec [Average]
[info]   (min, avg, max) = (1345.257, 1488.364, 2018.752), stdev = 296.580
[info]   CI (99.9%): [346.338, 2630.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   166223.192 ±(99.9%) 127386.836 B/op [Average]
[info]   (min, avg, max) = (150242.837, 166223.192, 225374.688), stdev = 33081.957
[info]   CI (99.9%): [38836.356, 293610.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.996), stdev = 1.860
[info]   CI (99.9%): [≈ 0, 8.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   193.161 ±(99.9%) 799.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 193.161, 445.697), stdev = 207.553
[info]   CI (99.9%): [≈ 0, 992.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 13.400, 28.000), stdev = 10.164
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28153.143 ops/s
[info] # Warmup Iteration   2: 52746.508 ops/s
[info] # Warmup Iteration   3: 50170.853 ops/s
[info] # Warmup Iteration   4: 51021.052 ops/s
[info] # Warmup Iteration   5: 49583.714 ops/s
[info] Iteration   1: 51335.108 ops/s
[info]                  ·gc.alloc.rate:            1145.430 MB/sec
[info]                  ·gc.alloc.rate.norm:       35111.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41293.615 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 51508.898 ops/s
[info]                  ·gc.alloc.rate:                   1148.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              35080.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        41150.955 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.352 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 51385.559 ops/s
[info]                  ·gc.alloc.rate:            1149.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       35210.445 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20647.927 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 52662.918 ops/s
[info]                  ·gc.alloc.rate:                   1174.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              35098.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40373.491 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 119.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 53208.957 ops/s
[info]                  ·gc.alloc.rate:                   1186.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              35086.594 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40191.933 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 98.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   52020.288 ±(99.9%) 3312.326 ops/s [Average]
[info]   (min, avg, max) = (51335.108, 52020.288, 53208.957), stdev = 860.201
[info]   CI (99.9%): [48707.962, 55332.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1160.928 ±(99.9%) 70.920 MB/sec [Average]
[info]   (min, avg, max) = (1145.430, 1160.928, 1186.602), stdev = 18.418
[info]   CI (99.9%): [1090.008, 1231.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   35117.277 ±(99.9%) 205.712 B/op [Average]
[info]   (min, avg, max) = (35080.009, 35117.277, 35210.445), stdev = 53.423
[info]   CI (99.9%): [34911.565, 35322.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1215.740 ±(99.9%) 1165.705 MB/sec [Average]
[info]   (min, avg, max) = (674.272, 1215.740, 1359.260), stdev = 302.730
[info]   CI (99.9%): [50.034, 2381.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   36731.584 ±(99.9%) 34669.938 B/op [Average]
[info]   (min, avg, max) = (20647.927, 36731.584, 41293.615), stdev = 9003.673
[info]   CI (99.9%): [2061.646, 71401.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   47.662 ±(99.9%) 219.756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.662, 119.448), stdev = 57.070
[info]   CI (99.9%): [≈ 0, 267.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.400, 17.000), stdev = 4.722
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52498.470 ops/s
[info] # Warmup Iteration   2: 125923.393 ops/s
[info] # Warmup Iteration   3: 128412.834 ops/s
[info] # Warmup Iteration   4: 129713.070 ops/s
[info] # Warmup Iteration   5: 129929.301 ops/s
[info] Iteration   1: 129580.502 ops/s
[info]                  ·gc.alloc.rate:            1350.759 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.439 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16351.637 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 128530.619 ops/s
[info]                  ·gc.alloc.rate:                   1342.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              16411.412 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2011.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24577.203 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.317 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.530 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   3: 129179.391 ops/s
[info]                  ·gc.alloc.rate:                   1347.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              16411.956 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8237.588 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.232 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 128584.446 ops/s
[info]                  ·gc.alloc.rate:                   1340.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              16409.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16624.522 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 131659.959 ops/s
[info]                  ·gc.alloc.rate:            1372.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       16409.691 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16291.930 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   129506.983 ±(99.9%) 4928.368 ops/s [Average]
[info]   (min, avg, max) = (128530.619, 129506.983, 131659.959), stdev = 1279.882
[info]   CI (99.9%): [124578.615, 134435.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1350.814 ±(99.9%) 49.176 MB/sec [Average]
[info]   (min, avg, max) = (1340.617, 1350.814, 1372.570), stdev = 12.771
[info]   CI (99.9%): [1301.638, 1399.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16410.100 ±(99.9%) 5.871 B/op [Average]
[info]   (min, avg, max) = (16408.439, 16410.100, 16411.956), stdev = 1.525
[info]   CI (99.9%): [16404.229, 16415.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1350.874 ±(99.9%) 1817.779 MB/sec [Average]
[info]   (min, avg, max) = (676.181, 1350.874, 2011.160), stdev = 472.072
[info]   CI (99.9%): [≈ 0, 3168.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16416.576 ±(99.9%) 22250.148 B/op [Average]
[info]   (min, avg, max) = (8237.588, 16416.576, 24577.203), stdev = 5778.293
[info]   CI (99.9%): [≈ 0, 38666.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.729 ±(99.9%) 7.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.729, 3.997), stdev = 1.857
[info]   CI (99.9%): [≈ 0, 8.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.136 ±(99.9%) 87.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.136, 48.920), stdev = 22.724
[info]   CI (99.9%): [≈ 0, 108.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.200, 27.000), stdev = 10.035
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 647519.303 ops/s
[info] # Warmup Iteration   2: 775468.458 ops/s
[info] # Warmup Iteration   3: 809488.378 ops/s
[info] # Warmup Iteration   4: 795546.049 ops/s
[info] # Warmup Iteration   5: 810553.086 ops/s
[info] Iteration   1: 811304.002 ops/s
[info]                  ·gc.alloc.rate:            869.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1307.793 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 805891.332 ops/s
[info]                  ·gc.alloc.rate:            865.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       1690.535 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1316.496 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 795332.972 ops/s
[info]                  ·gc.alloc.rate:            855.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       1693.280 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2668.032 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 811044.127 ops/s
[info]                  ·gc.alloc.rate:            873.287 MB/sec
[info]                  ·gc.alloc.rate.norm:       1694.374 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1308.172 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 812202.910 ops/s
[info]                  ·gc.alloc.rate:                   871.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1305.000 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.291 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   807155.069 ±(99.9%) 27172.161 ops/s [Average]
[info]   (min, avg, max) = (795332.972, 807155.069, 812202.910), stdev = 7056.524
[info]   CI (99.9%): [779982.908, 834327.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   867.133 ±(99.9%) 27.057 MB/sec [Average]
[info]   (min, avg, max) = (855.573, 867.133, 873.287), stdev = 7.027
[info]   CI (99.9%): [840.076, 894.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1690.838 ±(99.9%) 11.335 B/op [Average]
[info]   (min, avg, max) = (1688.001, 1690.838, 1694.374), stdev = 2.944
[info]   CI (99.9%): [1679.503, 1702.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.796 ±(99.9%) 1160.873 MB/sec [Average]
[info]   (min, avg, max) = (673.481, 808.796, 1348.091), stdev = 301.475
[info]   CI (99.9%): [≈ 0, 1969.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1581.099 ±(99.9%) 2339.764 B/op [Average]
[info]   (min, avg, max) = (1305.000, 1581.099, 2668.032), stdev = 607.629
[info]   CI (99.9%): [≈ 0, 3920.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.258 ±(99.9%) 2.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.291), stdev = 0.577
[info]   CI (99.9%): [≈ 0, 2.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 15.000), stdev = 3.130
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 733667.340 ops/s
[info] # Warmup Iteration   2: 933386.159 ops/s
[info] # Warmup Iteration   3: 954909.849 ops/s
[info] # Warmup Iteration   4: 955903.421 ops/s
[info] # Warmup Iteration   5: 955533.606 ops/s
[info] Iteration   1: 955885.563 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 937421.658 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 952451.525 ops/s
[info]                  ·gc.alloc.rate:      0.495 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.818 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 953326.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 944654.423 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   948747.964 ±(99.9%) 29241.346 ops/s [Average]
[info]   (min, avg, max) = (937421.658, 948747.964, 955885.563), stdev = 7593.885
[info]   CI (99.9%): [919506.618, 977989.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.099 ±(99.9%) 0.852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.099, 0.495), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 0.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.164 ±(99.9%) 1.408 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.164, 0.818), stdev = 0.366
[info]   CI (99.9%): [≈ 0, 1.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:12:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29054.475 ops/s
[info] # Warmup Iteration   2: 61119.317 ops/s
[info] # Warmup Iteration   3: 59990.789 ops/s
[info] # Warmup Iteration   4: 61539.036 ops/s
[info] # Warmup Iteration   5: 61550.689 ops/s
[info] Iteration   1: 61939.972 ops/s
[info]                  ·gc.alloc.rate:            1317.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       33490.686 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34225.261 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 61896.031 ops/s
[info]                  ·gc.alloc.rate:            1317.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       33494.314 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34214.052 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 62021.376 ops/s
[info]                  ·gc.alloc.rate:                   1319.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              33496.968 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34230.178 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 118.327 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 61259.532 ops/s
[info]                  ·gc.alloc.rate:                   1308.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              33631.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34895.487 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 102.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 62748.995 ops/s
[info]                  ·gc.alloc.rate:            1335.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       33490.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34184.523 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   61973.181 ±(99.9%) 2038.078 ops/s [Average]
[info]   (min, avg, max) = (61259.532, 61973.181, 62748.995), stdev = 529.282
[info]   CI (99.9%): [59935.103, 64011.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1319.875 ±(99.9%) 37.550 MB/sec [Average]
[info]   (min, avg, max) = (1308.895, 1319.875, 1335.627), stdev = 9.752
[info]   CI (99.9%): [1282.324, 1357.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33520.637 ±(99.9%) 238.167 B/op [Average]
[info]   (min, avg, max) = (33490.052, 33520.637, 33631.166), stdev = 61.851
[info]   CI (99.9%): [33282.470, 33758.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1352.475 ±(99.9%) 30.170 MB/sec [Average]
[info]   (min, avg, max) = (1345.381, 1352.475, 1363.324), stdev = 7.835
[info]   CI (99.9%): [1322.305, 1382.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   34349.900 ±(99.9%) 1176.397 B/op [Average]
[info]   (min, avg, max) = (34184.523, 34349.900, 34895.487), stdev = 305.507
[info]   CI (99.9%): [33173.503, 35526.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   44.202 ±(99.9%) 234.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.202, 118.327), stdev = 60.778
[info]   CI (99.9%): [≈ 0, 278.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 13.400, 18.000), stdev = 4.722
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5720.892 ops/s
[info] # Warmup Iteration   2: 12629.844 ops/s
[info] # Warmup Iteration   3: 13068.290 ops/s
[info] # Warmup Iteration   4: 13232.990 ops/s
[info] # Warmup Iteration   5: 13224.434 ops/s
[info] Iteration   1: 13118.698 ops/s
[info]                  ·gc.alloc.rate:            1282.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       153870.293 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 161737.374 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 13222.821 ops/s
[info]                  ·gc.alloc.rate:            1292.439 MB/sec
[info]                  ·gc.alloc.rate.norm:       153792.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160465.585 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 13196.229 ops/s
[info]                  ·gc.alloc.rate:                   1289.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              153804.606 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        160690.042 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 397.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 13047.524 ops/s
[info]                  ·gc.alloc.rate:                   1287.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              155293.559 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        163433.225 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 482.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 13404.242 ops/s
[info]                  ·gc.alloc.rate:                                  1309.539 MB/sec
[info]                  ·gc.alloc.rate.norm:                             153775.189 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.790 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       159941.666 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                78.211 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   13197.903 ±(99.9%) 516.930 ops/s [Average]
[info]   (min, avg, max) = (13047.524, 13197.903, 13404.242), stdev = 134.245
[info]   CI (99.9%): [12680.973, 13714.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1292.331 ±(99.9%) 39.472 MB/sec [Average]
[info]   (min, avg, max) = (1282.758, 1292.331, 1309.539), stdev = 10.251
[info]   CI (99.9%): [1252.859, 1331.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   154107.136 ±(99.9%) 2557.634 B/op [Average]
[info]   (min, avg, max) = (153775.189, 154107.136, 155293.559), stdev = 664.210
[info]   CI (99.9%): [151549.502, 156664.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.134), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.158 ±(99.9%) 27.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.158, 15.790), stdev = 7.061
[info]   CI (99.9%): [≈ 0, 30.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1352.209 ±(99.9%) 24.046 MB/sec [Average]
[info]   (min, avg, max) = (1347.327, 1352.209, 1362.053), stdev = 6.245
[info]   CI (99.9%): [1328.163, 1376.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   161253.578 ±(99.9%) 5323.276 B/op [Average]
[info]   (min, avg, max) = (159941.666, 161253.578, 163433.225), stdev = 1382.438
[info]   CI (99.9%): [155930.303, 166576.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.996), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   191.495 ±(99.9%) 888.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 191.495, 482.104), stdev = 230.719
[info]   CI (99.9%): [≈ 0, 1079.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.200, 16.000), stdev = 5.762
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2977.866 ops/s
[info] # Warmup Iteration   2: 10967.857 ops/s
[info] # Warmup Iteration   3: 11602.705 ops/s
[info] # Warmup Iteration   4: 11297.650 ops/s
[info] # Warmup Iteration   5: 11440.962 ops/s
[info] Iteration   1: 11299.822 ops/s
[info]                  ·gc.alloc.rate:            1022.885 MB/sec
[info]                  ·gc.alloc.rate.norm:       142489.744 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187411.389 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 11285.299 ops/s
[info]                  ·gc.alloc.rate:            1028.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       143346.561 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93821.914 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 11297.791 ops/s
[info]                  ·gc.alloc.rate:                   1022.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              142493.850 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        187537.354 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 92.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 11687.897 ops/s
[info]                  ·gc.alloc.rate:            1057.981 MB/sec
[info]                  ·gc.alloc.rate.norm:       142472.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90587.782 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 11612.904 ops/s
[info]                  ·gc.alloc.rate:                   1062.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              143996.992 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        182812.432 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 631.944 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   11436.743 ±(99.9%) 758.247 ops/s [Average]
[info]   (min, avg, max) = (11285.299, 11436.743, 11687.897), stdev = 196.914
[info]   CI (99.9%): [10678.495, 12194.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1038.870 ±(99.9%) 76.003 MB/sec [Average]
[info]   (min, avg, max) = (1022.826, 1038.870, 1062.602), stdev = 19.738
[info]   CI (99.9%): [962.866, 1114.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   142959.837 ±(99.9%) 2654.799 B/op [Average]
[info]   (min, avg, max) = (142472.038, 142959.837, 143996.992), stdev = 689.443
[info]   CI (99.9%): [140305.038, 145614.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1077.223 ±(99.9%) 1421.670 MB/sec [Average]
[info]   (min, avg, max) = (672.694, 1077.223, 1349.034), stdev = 369.203
[info]   CI (99.9%): [≈ 0, 2498.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   148434.174 ±(99.9%) 197838.900 B/op [Average]
[info]   (min, avg, max) = (90587.782, 148434.174, 187537.354), stdev = 51378.134
[info]   CI (99.9%): [≈ 0, 346273.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   144.948 ±(99.9%) 1059.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 144.948, 631.944), stdev = 275.189
[info]   CI (99.9%): [≈ 0, 1204.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 14.000, 19.000), stdev = 4.796
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 398218.613 ops/s
[info] # Warmup Iteration   2: 501217.449 ops/s
[info] # Warmup Iteration   3: 500053.579 ops/s
[info] # Warmup Iteration   4: 521171.907 ops/s
[info] # Warmup Iteration   5: 521200.057 ops/s
[info] Iteration   1: 520509.187 ops/s
[info]                  ·gc.alloc.rate:            1355.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       4099.410 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4076.919 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 513728.466 ops/s
[info]                  ·gc.alloc.rate:            1350.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       4138.262 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4130.574 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 514702.946 ops/s
[info]                  ·gc.alloc.rate:                   1339.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.795 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4132.791 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 524307.138 ops/s
[info]                  ·gc.alloc.rate:                   1365.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              4098.948 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4078.957 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 514950.908 ops/s
[info]                  ·gc.alloc.rate:                                  1340.414 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.147 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4165.459 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   517639.729 ±(99.9%) 17629.113 ops/s [Average]
[info]   (min, avg, max) = (513728.466, 517639.729, 524307.138), stdev = 4578.225
[info]   CI (99.9%): [500010.616, 535268.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1350.451 ±(99.9%) 41.949 MB/sec [Average]
[info]   (min, avg, max) = (1339.653, 1350.451, 1365.589), stdev = 10.894
[info]   CI (99.9%): [1308.502, 1392.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4105.913 ±(99.9%) 69.839 B/op [Average]
[info]   (min, avg, max) = (4096.147, 4105.913, 4138.262), stdev = 18.137
[info]   CI (99.9%): [4036.074, 4175.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.034 ±(99.9%) 0.288 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.168), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1354.020 ±(99.9%) 25.690 MB/sec [Average]
[info]   (min, avg, max) = (1348.309, 1354.020, 1363.095), stdev = 6.672
[info]   CI (99.9%): [1328.330, 1379.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4116.940 ±(99.9%) 147.077 B/op [Average]
[info]   (min, avg, max) = (4076.919, 4116.940, 4165.459), stdev = 38.195
[info]   CI (99.9%): [3969.863, 4264.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.444 ±(99.9%) 23.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.444, 12.221), stdev = 6.135
[info]   CI (99.9%): [≈ 0, 28.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 15.000), stdev = 5.683
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2499.214 ops/s
[info] # Warmup Iteration   2: 7990.572 ops/s
[info] # Warmup Iteration   3: 8438.720 ops/s
[info] # Warmup Iteration   4: 8383.577 ops/s
[info] # Warmup Iteration   5: 8438.712 ops/s
[info] Iteration   1: 8221.116 ops/s
[info]                  ·gc.alloc.rate:            1230.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       235686.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 257712.769 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 8456.173 ops/s
[info]                  ·gc.alloc.rate:                   1266.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              235703.912 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        250552.388 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 123.974 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 8316.141 ops/s
[info]                  ·gc.alloc.rate:                   1259.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              238338.836 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        127321.683 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 630.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 8434.249 ops/s
[info]                  ·gc.alloc.rate:                   1266.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              236333.230 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.558 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        252543.135 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 745.698 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 8571.553 ops/s
[info]                  ·gc.alloc.rate:                   1283.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              235744.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1361.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        249975.431 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 244.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   8399.847 ±(99.9%) 519.447 ops/s [Average]
[info]   (min, avg, max) = (8221.116, 8399.847, 8571.553), stdev = 134.899
[info]   CI (99.9%): [7880.399, 8919.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1261.392 ±(99.9%) 74.411 MB/sec [Average]
[info]   (min, avg, max) = (1230.901, 1261.392, 1283.923), stdev = 19.324
[info]   CI (99.9%): [1186.981, 1335.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   236361.237 ±(99.9%) 4382.133 B/op [Average]
[info]   (min, avg, max) = (235686.148, 236361.237, 238338.836), stdev = 1138.026
[info]   CI (99.9%): [231979.104, 240743.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1215.925 ±(99.9%) 1169.649 MB/sec [Average]
[info]   (min, avg, max) = (672.673, 1215.925, 1361.431), stdev = 303.754
[info]   CI (99.9%): [46.276, 2385.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   227621.081 ±(99.9%) 216221.024 B/op [Average]
[info]   (min, avg, max) = (127321.683, 227621.081, 257712.769), stdev = 56151.913
[info]   CI (99.9%): [11400.057, 443842.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 6.639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 3.997), stdev = 1.724
[info]   CI (99.9%): [≈ 0, 8.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   348.914 ±(99.9%) 1247.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 348.914, 745.698), stdev = 323.975
[info]   CI (99.9%): [≈ 0, 1596.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.600, 19.000), stdev = 5.857
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18532.241 ops/s
[info] # Warmup Iteration   2: 40720.826 ops/s
[info] # Warmup Iteration   3: 41309.055 ops/s
[info] # Warmup Iteration   4: 39718.477 ops/s
[info] # Warmup Iteration   5: 41665.350 ops/s
[info] Iteration   1: 41596.294 ops/s
[info]                  ·gc.alloc.rate:            1293.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       48960.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50961.943 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 41728.932 ops/s
[info]                  ·gc.alloc.rate:            1297.889 MB/sec
[info]                  ·gc.alloc.rate.norm:       48952.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50798.329 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 41449.332 ops/s
[info]                  ·gc.alloc.rate:                   1289.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              48960.466 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        51267.875 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 177.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 40807.044 ops/s
[info]                  ·gc.alloc.rate:                   1277.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              49261.459 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        52410.816 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 128.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 41621.471 ops/s
[info]                  ·gc.alloc.rate:                                  1294.382 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48952.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.937 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       51537.102 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   41440.615 ±(99.9%) 1416.859 ops/s [Average]
[info]   (min, avg, max) = (40807.044, 41440.615, 41728.932), stdev = 367.954
[info]   CI (99.9%): [40023.755, 42857.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1290.552 ±(99.9%) 30.872 MB/sec [Average]
[info]   (min, avg, max) = (1277.277, 1290.552, 1297.889), stdev = 8.017
[info]   CI (99.9%): [1259.680, 1321.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   49017.213 ±(99.9%) 526.000 B/op [Average]
[info]   (min, avg, max) = (48952.010, 49017.213, 49261.459), stdev = 136.600
[info]   CI (99.9%): [48491.213, 49543.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.187 ±(99.9%) 1.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.937), stdev = 0.419
[info]   CI (99.9%): [≈ 0, 1.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1353.078 ±(99.9%) 28.242 MB/sec [Average]
[info]   (min, avg, max) = (1346.759, 1353.078, 1362.737), stdev = 7.334
[info]   CI (99.9%): [1324.836, 1381.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   51395.213 ±(99.9%) 2444.317 B/op [Average]
[info]   (min, avg, max) = (50798.329, 51395.213, 52410.816), stdev = 634.781
[info]   CI (99.9%): [48950.896, 53839.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.662), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   61.101 ±(99.9%) 328.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.101, 177.047), stdev = 85.412
[info]   CI (99.9%): [≈ 0, 389.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.800, 17.000), stdev = 6.301
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14469.289 ops/s
[info] # Warmup Iteration   2: 52790.209 ops/s
[info] # Warmup Iteration   3: 53783.452 ops/s
[info] # Warmup Iteration   4: 53340.868 ops/s
[info] # Warmup Iteration   5: 54266.480 ops/s
[info] Iteration   1: 53795.070 ops/s
[info]                  ·gc.alloc.rate:                   1427.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              41764.665 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39386.888 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 54037.293 ops/s
[info]                  ·gc.alloc.rate:                   1433.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              41762.545 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39191.125 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 97.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 53149.962 ops/s
[info]                  ·gc.alloc.rate:                   1410.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              41764.956 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40080.255 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 138.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 54883.642 ops/s
[info]                  ·gc.alloc.rate:                                  1458.966 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41842.198 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.977 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39062.536 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.101 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 55119.892 ops/s
[info]                  ·gc.alloc.rate:            1462.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38915.752 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   54197.172 ±(99.9%) 3108.396 ops/s [Average]
[info]   (min, avg, max) = (53149.962, 54197.172, 55119.892), stdev = 807.241
[info]   CI (99.9%): [51088.775, 57305.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1438.560 ±(99.9%) 84.251 MB/sec [Average]
[info]   (min, avg, max) = (1410.316, 1438.560, 1462.177), stdev = 21.880
[info]   CI (99.9%): [1354.309, 1522.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41777.274 ±(99.9%) 141.235 B/op [Average]
[info]   (min, avg, max) = (41752.007, 41777.274, 41842.198), stdev = 36.678
[info]   CI (99.9%): [41636.039, 41918.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.195 ±(99.9%) 1.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.195, 0.977), stdev = 0.437
[info]   CI (99.9%): [≈ 0, 1.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1354.022 ±(99.9%) 31.941 MB/sec [Average]
[info]   (min, avg, max) = (1345.434, 1354.022, 1362.850), stdev = 8.295
[info]   CI (99.9%): [1322.081, 1385.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   39327.311 ±(99.9%) 1752.474 B/op [Average]
[info]   (min, avg, max) = (38915.752, 39327.311, 40080.255), stdev = 455.112
[info]   CI (99.9%): [37574.837, 41079.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.662), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   54.734 ±(99.9%) 229.751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.734, 138.072), stdev = 59.666
[info]   CI (99.9%): [≈ 0, 284.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.800, 18.000), stdev = 7.259
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 726357.561 ops/s
[info] # Warmup Iteration   2: 986518.266 ops/s
[info] # Warmup Iteration   3: 1007123.479 ops/s
[info] # Warmup Iteration   4: 997608.305 ops/s
[info] # Warmup Iteration   5: 995091.637 ops/s
[info] Iteration   1: 1005952.466 ops/s
[info]                  ·gc.alloc.rate:            915.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1054.729 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 997807.161 ops/s
[info]                  ·gc.alloc.rate:            907.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2126.678 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 990605.386 ops/s
[info]                  ·gc.alloc.rate:            904.259 MB/sec
[info]                  ·gc.alloc.rate.norm:       1437.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1071.070 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1005885.666 ops/s
[info]                  ·gc.alloc.rate:            915.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1054.760 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 996999.958 ops/s
[info]                  ·gc.alloc.rate:            907.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.167 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2128.362 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   999450.127 ±(99.9%) 25149.502 ops/s [Average]
[info]   (min, avg, max) = (990605.386, 999450.127, 1005952.466), stdev = 6531.246
[info]   CI (99.9%): [974300.626, 1024599.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   909.881 ±(99.9%) 19.226 MB/sec [Average]
[info]   (min, avg, max) = (904.259, 909.881, 915.244), stdev = 4.993
[info]   CI (99.9%): [890.655, 929.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1433.037 ±(99.9%) 8.575 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1433.037, 1437.019), stdev = 2.227
[info]   CI (99.9%): [1424.462, 1441.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.647 ±(99.9%) 1421.583 MB/sec [Average]
[info]   (min, avg, max) = (673.982, 943.647, 1348.099), stdev = 369.181
[info]   CI (99.9%): [≈ 0, 2365.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1487.120 ±(99.9%) 2251.245 B/op [Average]
[info]   (min, avg, max) = (1054.729, 1487.120, 2128.362), stdev = 584.641
[info]   CI (99.9%): [≈ 0, 3738.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.000, 16.000), stdev = 4.123
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 790598.725 ops/s
[info] # Warmup Iteration   2: 1092443.208 ops/s
[info] # Warmup Iteration   3: 1112424.889 ops/s
[info] # Warmup Iteration   4: 1112384.633 ops/s
[info] # Warmup Iteration   5: 1111623.995 ops/s
[info] Iteration   1: 1112946.483 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1111009.397 ops/s
[info]                  ·gc.alloc.rate:      0.049 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.070 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1109473.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1106891.765 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1109189.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1109902.152 ±(99.9%) 8663.510 ops/s [Average]
[info]   (min, avg, max) = (1106891.765, 1109902.152, 1112946.483), stdev = 2249.886
[info]   CI (99.9%): [1101238.643, 1118565.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.010 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.014 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17361.218 ops/s
[info] # Warmup Iteration   2: 37628.590 ops/s
[info] # Warmup Iteration   3: 38670.339 ops/s
[info] # Warmup Iteration   4: 39283.586 ops/s
[info] # Warmup Iteration   5: 39188.144 ops/s
[info] Iteration   1: 39128.323 ops/s
[info]                  ·gc.alloc.rate:            1182.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       47588.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54151.686 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 39183.362 ops/s
[info]                  ·gc.alloc.rate:                   1191.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              47820.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54075.687 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 39556.503 ops/s
[info]                  ·gc.alloc.rate:            1195.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       47584.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26795.499 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 39224.301 ops/s
[info]                  ·gc.alloc.rate:                   1185.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              47589.674 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54151.436 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 160.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 39565.685 ops/s
[info]                  ·gc.alloc.rate:                   1196.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              47587.254 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54025.179 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 158.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   39331.635 ±(99.9%) 817.267 ops/s [Average]
[info]   (min, avg, max) = (39128.323, 39331.635, 39565.685), stdev = 212.242
[info]   CI (99.9%): [38514.368, 40148.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1190.397 ±(99.9%) 22.585 MB/sec [Average]
[info]   (min, avg, max) = (1182.987, 1190.397, 1196.093), stdev = 5.865
[info]   CI (99.9%): [1167.812, 1212.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47633.857 ±(99.9%) 400.959 B/op [Average]
[info]   (min, avg, max) = (47584.010, 47633.857, 47820.089), stdev = 104.128
[info]   CI (99.9%): [47232.898, 48034.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1214.766 ±(99.9%) 1165.404 MB/sec [Average]
[info]   (min, avg, max) = (673.431, 1214.766, 1357.908), stdev = 302.652
[info]   CI (99.9%): [49.362, 2380.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   48639.897 ±(99.9%) 47022.168 B/op [Average]
[info]   (min, avg, max) = (26795.499, 48639.897, 54151.686), stdev = 12211.508
[info]   CI (99.9%): [1617.730, 95662.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.997), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 9.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   69.220 ±(99.9%) 320.728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.220, 160.370), stdev = 83.292
[info]   CI (99.9%): [≈ 0, 389.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 13.000, 18.000), stdev = 5.244
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63025.644 ops/s
[info] # Warmup Iteration   2: 115607.385 ops/s
[info] # Warmup Iteration   3: 117082.314 ops/s
[info] # Warmup Iteration   4: 119966.120 ops/s
[info] # Warmup Iteration   5: 118717.780 ops/s
[info] Iteration   1: 121728.645 ops/s
[info]                  ·gc.alloc.rate:            1696.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       21948.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17432.198 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 120835.830 ops/s
[info]                  ·gc.alloc.rate:                   1686.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              21963.982 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2028.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26419.159 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 104.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 123810.892 ops/s
[info]                  ·gc.alloc.rate:                                  1726.979 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21948.401 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17324.417 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 122995.595 ops/s
[info]                  ·gc.alloc.rate:                                  1715.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21953.449 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26159.422 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 123510.638 ops/s
[info]                  ·gc.alloc.rate:            1722.151 MB/sec
[info]                  ·gc.alloc.rate.norm:       21944.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17366.067 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   122576.320 ±(99.9%) 4840.479 ops/s [Average]
[info]   (min, avg, max) = (120835.830, 122576.320, 123810.892), stdev = 1257.057
[info]   CI (99.9%): [117735.841, 127416.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1709.593 ±(99.9%) 66.338 MB/sec [Average]
[info]   (min, avg, max) = (1686.486, 1709.593, 1726.979), stdev = 17.228
[info]   CI (99.9%): [1643.256, 1775.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21951.739 ±(99.9%) 29.308 B/op [Average]
[info]   (min, avg, max) = (21944.042, 21951.739, 21963.982), stdev = 7.611
[info]   CI (99.9%): [21922.432, 21981.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.042 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.117), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1629.278 ±(99.9%) 1431.111 MB/sec [Average]
[info]   (min, avg, max) = (1347.759, 1629.278, 2044.037), stdev = 371.655
[info]   CI (99.9%): [198.167, 3060.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   20940.253 ±(99.9%) 18806.529 B/op [Average]
[info]   (min, avg, max) = (17324.417, 20940.253, 26419.159), stdev = 4883.996
[info]   CI (99.9%): [2133.723, 39746.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 13.767 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 7.994), stdev = 3.575
[info]   CI (99.9%): [≈ 0, 15.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   20.823 ±(99.9%) 179.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.823, 104.115), stdev = 46.562
[info]   CI (99.9%): [≈ 0, 200.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 18.000), stdev = 7.530
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.899 ops/s
[info] # Warmup Iteration   2: 330040.213 ops/s
[info] # Warmup Iteration   3: 342665.504 ops/s
[info] # Warmup Iteration   4: 342646.834 ops/s
[info] # Warmup Iteration   5: 341746.471 ops/s
[info] Iteration   1: 345672.325 ops/s
[info]                  ·gc.alloc.rate:            693.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       3158.170 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3054.190 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 343065.187 ops/s
[info]                  ·gc.alloc.rate:            687.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3077.333 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 347033.911 ops/s
[info]                  ·gc.alloc.rate:            695.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3042.197 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 345920.242 ops/s
[info]                  ·gc.alloc.rate:            692.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3052.001 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 347744.613 ops/s
[info]                  ·gc.alloc.rate:            696.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3035.978 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   345887.255 ±(99.9%) 6881.767 ops/s [Average]
[info]   (min, avg, max) = (343065.187, 345887.255, 347744.613), stdev = 1787.173
[info]   CI (99.9%): [339005.488, 352769.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   693.025 ±(99.9%) 14.099 MB/sec [Average]
[info]   (min, avg, max) = (687.022, 693.025, 696.648), stdev = 3.661
[info]   CI (99.9%): [678.926, 707.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3153.235 ±(99.9%) 10.623 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3153.235, 3158.170), stdev = 2.759
[info]   CI (99.9%): [3142.612, 3163.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   670.835 ±(99.9%) 0.380 MB/sec [Average]
[info]   (min, avg, max) = (670.747, 670.835, 671.005), stdev = 0.099
[info]   CI (99.9%): [670.455, 671.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3052.340 ±(99.9%) 60.848 B/op [Average]
[info]   (min, avg, max) = (3035.978, 3052.340, 3077.333), stdev = 15.802
[info]   CI (99.9%): [2991.492, 3113.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68141.794 ops/s
[info] # Warmup Iteration   2: 191053.058 ops/s
[info] # Warmup Iteration   3: 212521.511 ops/s
[info] # Warmup Iteration   4: 209429.101 ops/s
[info] # Warmup Iteration   5: 210452.569 ops/s
[info] Iteration   1: 212679.410 ops/s
[info]                  ·gc.alloc.rate:      461.542 MB/sec
[info]                  ·gc.alloc.rate.norm: 3416.123 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 210536.209 ops/s
[info]                  ·gc.alloc.rate:            458.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       3427.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5029.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 209595.744 ops/s
[info]                  ·gc.alloc.rate:                   457.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              3434.496 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5051.643 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 213047.557 ops/s
[info]                  ·gc.alloc.rate:      462.528 MB/sec
[info]                  ·gc.alloc.rate.norm: 3416.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 199572.549 ops/s
[info]                  ·gc.alloc.rate:            433.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       3416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5311.147 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   209086.294 ±(99.9%) 21220.090 ops/s [Average]
[info]   (min, avg, max) = (199572.549, 209086.294, 213047.557), stdev = 5510.790
[info]   CI (99.9%): [187866.204, 230306.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   454.579 ±(99.9%) 46.966 MB/sec [Average]
[info]   (min, avg, max) = (433.101, 454.579, 462.528), stdev = 12.197
[info]   CI (99.9%): [407.613, 501.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3421.991 ±(99.9%) 32.846 B/op [Average]
[info]   (min, avg, max) = (3416.002, 3421.991, 3434.496), stdev = 8.530
[info]   CI (99.9%): [3389.145, 3454.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.747 ±(99.9%) 1419.229 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.747, 673.379), stdev = 368.569
[info]   CI (99.9%): [≈ 0, 1822.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3078.472 ±(99.9%) 10829.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3078.472, 5311.147), stdev = 2812.428
[info]   CI (99.9%): [≈ 0, 13908.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.000 ±(99.9%) 8.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.000, 5.002), stdev = 2.237
[info]   CI (99.9%): [≈ 0, 9.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.600, 10.000), stdev = 5.128
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 395675.142 ops/s
[info] # Warmup Iteration   2: 426972.455 ops/s
[info] # Warmup Iteration   3: 470980.895 ops/s
[info] # Warmup Iteration   4: 470370.646 ops/s
[info] # Warmup Iteration   5: 458240.502 ops/s
[info] Iteration   1: 472968.871 ops/s
[info]                  ·gc.alloc.rate:            596.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2245.516 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 457962.520 ops/s
[info]                  ·gc.alloc.rate:            586.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       2014.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2316.804 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 475669.266 ops/s
[info]                  ·gc.alloc.rate:            602.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       1992.767 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2225.968 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 474576.267 ops/s
[info]                  ·gc.alloc.rate:      598.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 469843.846 ops/s
[info]                  ·gc.alloc.rate:            592.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2258.145 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   470204.154 ±(99.9%) 27674.713 ops/s [Average]
[info]   (min, avg, max) = (457962.520, 470204.154, 475669.266), stdev = 7187.035
[info]   CI (99.9%): [442529.441, 497878.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   595.071 ±(99.9%) 24.064 MB/sec [Average]
[info]   (min, avg, max) = (586.029, 595.071, 602.600), stdev = 6.249
[info]   CI (99.9%): [571.007, 619.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1991.832 ±(99.9%) 49.928 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1991.832, 2014.037), stdev = 12.966
[info]   CI (99.9%): [1941.904, 2041.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.218 ±(99.9%) 1160.708 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.218, 674.667), stdev = 301.432
[info]   CI (99.9%): [≈ 0, 1699.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1809.287 ±(99.9%) 3896.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1809.287, 2316.804), stdev = 1011.989
[info]   CI (99.9%): [≈ 0, 5706.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.800, 8.000), stdev = 3.271
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15690.970 ops/s
[info] # Warmup Iteration   2: 52483.730 ops/s
[info] # Warmup Iteration   3: 52444.922 ops/s
[info] # Warmup Iteration   4: 53679.358 ops/s
[info] # Warmup Iteration   5: 52579.048 ops/s
[info] Iteration   1: 54501.329 ops/s
[info]                  ·gc.alloc.rate:                   2110.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              60948.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2033.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        58727.643 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 153.888 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 54715.503 ops/s
[info]                  ·gc.alloc.rate:                                  2119.009 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60957.401 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58804.564 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 54788.207 ops/s
[info]                  ·gc.alloc.rate:            2121.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       60945.601 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58726.226 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 54701.006 ops/s
[info]                  ·gc.alloc.rate:            2118.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       60944.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58818.536 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 54700.219 ops/s
[info]                  ·gc.alloc.rate:                                  2118.185 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60955.340 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78427.582 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   54681.253 ±(99.9%) 411.742 ops/s [Average]
[info]   (min, avg, max) = (54501.329, 54681.253, 54788.207), stdev = 106.928
[info]   CI (99.9%): [54269.510, 55092.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2117.440 ±(99.9%) 16.231 MB/sec [Average]
[info]   (min, avg, max) = (2110.276, 2117.440, 2121.440), stdev = 4.215
[info]   CI (99.9%): [2101.210, 2133.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   60950.087 ±(99.9%) 22.958 B/op [Average]
[info]   (min, avg, max) = (60944.008, 60950.087, 60957.401), stdev = 5.962
[info]   CI (99.9%): [60927.129, 60973.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.224 ±(99.9%) 1.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.224, 1.092), stdev = 0.486
[info]   CI (99.9%): [≈ 0, 2.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2178.302 ±(99.9%) 1177.684 MB/sec [Average]
[info]   (min, avg, max) = (2033.395, 2178.302, 2725.342), stdev = 305.841
[info]   CI (99.9%): [1000.618, 3355.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   62700.910 ±(99.9%) 33853.244 B/op [Average]
[info]   (min, avg, max) = (58726.226, 62700.910, 78427.582), stdev = 8791.580
[info]   CI (99.9%): [28847.666, 96554.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   30.778 ±(99.9%) 265.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.778, 153.888), stdev = 68.821
[info]   CI (99.9%): [≈ 0, 295.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 13.000), stdev = 3.782
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:08:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61297.661 ops/s
[info] # Warmup Iteration   2: 113391.508 ops/s
[info] # Warmup Iteration   3: 114759.472 ops/s
[info] # Warmup Iteration   4: 116208.894 ops/s
[info] # Warmup Iteration   5: 118310.322 ops/s
[info] Iteration   1: 119424.573 ops/s
[info]                  ·gc.alloc.rate:            651.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       8585.856 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8884.005 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 118521.084 ops/s
[info]                  ·gc.alloc.rate:            648.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       8607.618 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8951.981 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 118952.148 ops/s
[info]                  ·gc.alloc.rate:            648.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       8585.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8910.587 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 119486.202 ops/s
[info]                  ·gc.alloc.rate:                   650.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              8572.657 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8870.845 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.774 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 119531.531 ops/s
[info]                  ·gc.alloc.rate:            650.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       8568.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8876.203 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   119183.108 ±(99.9%) 1681.974 ops/s [Average]
[info]   (min, avg, max) = (118521.084, 119183.108, 119531.531), stdev = 436.803
[info]   CI (99.9%): [117501.134, 120865.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   649.975 ±(99.9%) 5.494 MB/sec [Average]
[info]   (min, avg, max) = (648.124, 649.975, 651.457), stdev = 1.427
[info]   CI (99.9%): [644.481, 655.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8583.840 ±(99.9%) 59.243 B/op [Average]
[info]   (min, avg, max) = (8568.004, 8583.840, 8607.618), stdev = 15.385
[info]   CI (99.9%): [8524.597, 8643.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   673.814 ±(99.9%) 1.427 MB/sec [Average]
[info]   (min, avg, max) = (673.403, 673.814, 674.120), stdev = 0.371
[info]   CI (99.9%): [672.387, 675.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8898.724 ±(99.9%) 128.841 B/op [Average]
[info]   (min, avg, max) = (8870.845, 8898.724, 8951.981), stdev = 33.459
[info]   CI (99.9%): [8769.884, 9027.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.755 ±(99.9%) 15.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.755, 8.774), stdev = 3.924
[info]   CI (99.9%): [≈ 0, 16.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.757 ops/s
[info] # Warmup Iteration   2: 197916.406 ops/s
[info] # Warmup Iteration   3: 201119.504 ops/s
[info] # Warmup Iteration   4: 201746.593 ops/s
[info] # Warmup Iteration   5: 203726.169 ops/s
[info] Iteration   1: 206093.602 ops/s
[info]                  ·gc.alloc.rate:      161.305 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 206815.395 ops/s
[info]                  ·gc.alloc.rate:      161.901 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 200198.937 ops/s
[info]                  ·gc.alloc.rate:            156.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5273.647 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 206863.281 ops/s
[info]                  ·gc.alloc.rate:      161.937 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 206286.388 ops/s
[info]                  ·gc.alloc.rate:      161.459 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   205251.521 ±(99.9%) 10951.026 ops/s [Average]
[info]   (min, avg, max) = (200198.937, 205251.521, 206863.281), stdev = 2843.947
[info]   CI (99.9%): [194300.494, 216202.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   160.671 ±(99.9%) 8.496 MB/sec [Average]
[info]   (min, avg, max) = (156.755, 160.671, 161.937), stdev = 2.206
[info]   CI (99.9%): [152.175, 169.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1232.002, 1232.002), stdev = 0.001
[info]   CI (99.9%): [1232.002, 1232.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   134.200 ±(99.9%) 1155.499 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.200, 670.998), stdev = 300.079
[info]   CI (99.9%): [≈ 0, 1289.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1054.729 ±(99.9%) 9081.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1054.729, 5273.647), stdev = 2358.447
[info]   CI (99.9%): [≈ 0, 10136.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 10.000), stdev = 4.472
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173738.250 ops/s
[info] # Warmup Iteration   2: 391171.846 ops/s
[info] # Warmup Iteration   3: 400937.469 ops/s
[info] # Warmup Iteration   4: 395994.612 ops/s
[info] # Warmup Iteration   5: 398548.979 ops/s
[info] Iteration   1: 397269.236 ops/s
[info]                  ·gc.alloc.rate:            407.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2668.179 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 375852.625 ops/s
[info]                  ·gc.alloc.rate:            387.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       1622.696 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2817.343 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 401198.208 ops/s
[info]                  ·gc.alloc.rate:      411.915 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 395047.037 ops/s
[info]                  ·gc.alloc.rate:                   411.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              1640.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2680.484 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.654 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 398796.872 ops/s
[info]                  ·gc.alloc.rate:      409.456 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   393632.796 ±(99.9%) 39234.141 ops/s [Average]
[info]   (min, avg, max) = (375852.625, 393632.796, 401198.208), stdev = 10188.982
[info]   CI (99.9%): [354398.655, 432866.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   405.665 ±(99.9%) 39.661 MB/sec [Average]
[info]   (min, avg, max) = (387.482, 405.665, 411.915), stdev = 10.300
[info]   CI (99.9%): [366.004, 445.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1622.149 ±(99.9%) 40.109 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1622.149, 1640.046), stdev = 10.416
[info]   CI (99.9%): [1582.040, 1662.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.781 ±(99.9%) 1419.349 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.781, 673.396), stdev = 368.600
[info]   CI (99.9%): [≈ 0, 1823.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1633.201 ±(99.9%) 5745.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1633.201, 2817.343), stdev = 1492.051
[info]   CI (99.9%): [≈ 0, 7378.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.531 ±(99.9%) 4.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.531, 2.654), stdev = 1.187
[info]   CI (99.9%): [≈ 0, 5.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.400, 9.000), stdev = 4.930
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 339520.018 ops/s
[info] # Warmup Iteration   2: 424318.970 ops/s
[info] # Warmup Iteration   3: 436184.745 ops/s
[info] # Warmup Iteration   4: 431995.398 ops/s
[info] # Warmup Iteration   5: 433782.224 ops/s
[info] Iteration   1: 422227.805 ops/s
[info]                  ·gc.alloc.rate:            332.670 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2512.713 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 437732.458 ops/s
[info]                  ·gc.alloc.rate:      342.611 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 433963.161 ops/s
[info]                  ·gc.alloc.rate:            339.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.811 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2444.779 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 437731.610 ops/s
[info]                  ·gc.alloc.rate:      342.652 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 433562.527 ops/s
[info]                  ·gc.alloc.rate:            339.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2447.142 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   433043.512 ±(99.9%) 24509.820 ops/s [Average]
[info]   (min, avg, max) = (422227.805, 433043.512, 437732.458), stdev = 6365.122
[info]   CI (99.9%): [408533.692, 457553.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   339.463 ±(99.9%) 15.698 MB/sec [Average]
[info]   (min, avg, max) = (332.670, 339.463, 342.652), stdev = 4.077
[info]   CI (99.9%): [323.765, 355.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1233.807 ±(99.9%) 13.869 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1233.807, 1240.219), stdev = 3.602
[info]   CI (99.9%): [1219.938, 1247.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.474 ±(99.9%) 1421.784 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.474, 674.211), stdev = 369.233
[info]   CI (99.9%): [≈ 0, 1826.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1480.927 ±(99.9%) 5206.725 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1480.927, 2512.713), stdev = 1352.170
[info]   CI (99.9%): [≈ 0, 6687.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 8.000), stdev = 4.382
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 311728.969 ops/s
[info] # Warmup Iteration   2: 458447.854 ops/s
[info] # Warmup Iteration   3: 458968.195 ops/s
[info] # Warmup Iteration   4: 466838.670 ops/s
[info] # Warmup Iteration   5: 467968.281 ops/s
[info] Iteration   1: 467557.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 468485.807 ops/s
[info]                  ·gc.alloc.rate:      0.829 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.786 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 467784.489 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 467661.609 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 467815.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   467860.930 ±(99.9%) 1401.755 ops/s [Average]
[info]   (min, avg, max) = (467557.743, 467860.930, 468485.807), stdev = 364.031
[info]   CI (99.9%): [466459.176, 469262.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.166 ±(99.9%) 1.428 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.166, 0.829), stdev = 0.371
[info]   CI (99.9%): [≈ 0, 1.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.558 ±(99.9%) 4.796 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.558, 2.786), stdev = 1.246
[info]   CI (99.9%): [≈ 0, 5.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10105.419 ops/s
[info] # Warmup Iteration   2: 23896.494 ops/s
[info] # Warmup Iteration   3: 24536.204 ops/s
[info] # Warmup Iteration   4: 24431.499 ops/s
[info] # Warmup Iteration   5: 24660.285 ops/s
[info] Iteration   1: 24803.382 ops/s
[info]                  ·gc.alloc.rate:                   1226.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              77851.832 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        85426.375 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 24201.099 ops/s
[info]                  ·gc.alloc.rate:                   1196.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              77789.956 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        87551.006 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 24876.760 ops/s
[info]                  ·gc.alloc.rate:                   1230.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              77862.560 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        85214.448 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 168.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 25193.433 ops/s
[info]                  ·gc.alloc.rate:                   1245.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              77839.864 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        42237.663 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 83.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 25168.417 ops/s
[info]                  ·gc.alloc.rate:                   1243.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              77776.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        84934.114 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 249.929 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   24848.618 ±(99.9%) 1544.209 ops/s [Average]
[info]   (min, avg, max) = (24201.099, 24848.618, 25193.433), stdev = 401.026
[info]   CI (99.9%): [23304.409, 26392.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1228.588 ±(99.9%) 76.619 MB/sec [Average]
[info]   (min, avg, max) = (1196.097, 1228.588, 1245.803), stdev = 19.898
[info]   CI (99.9%): [1151.970, 1305.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   77824.046 ±(99.9%) 148.818 B/op [Average]
[info]   (min, avg, max) = (77776.016, 77824.046, 77862.560), stdev = 38.648
[info]   CI (99.9%): [77675.227, 77972.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1214.648 ±(99.9%) 1159.639 MB/sec [Average]
[info]   (min, avg, max) = (676.001, 1214.648, 1357.993), stdev = 301.155
[info]   CI (99.9%): [55.009, 2374.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77072.721 ±(99.9%) 75091.221 B/op [Average]
[info]   (min, avg, max) = (42237.663, 77072.721, 87551.006), stdev = 19500.952
[info]   CI (99.9%): [1981.500, 152163.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (0.666, 1.865, 3.996), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 7.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   117.464 ±(99.9%) 347.001 B/op [Average]
[info]   (min, avg, max) = (42.269, 117.464, 249.929), stdev = 90.115
[info]   CI (99.9%): [≈ 0, 464.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 13.200, 18.000), stdev = 6.140
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2029.751 ops/s
[info] # Warmup Iteration   2: 5861.999 ops/s
[info] # Warmup Iteration   3: 6306.602 ops/s
[info] # Warmup Iteration   4: 6286.667 ops/s
[info] # Warmup Iteration   5: 6334.958 ops/s
[info] Iteration   1: 6287.670 ops/s
[info]                  ·gc.alloc.rate:            1003.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       251081.865 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.536 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 337298.338 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 6350.261 ops/s
[info]                  ·gc.alloc.rate:                   1011.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              250656.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        166893.945 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 165.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6302.681 ops/s
[info]                  ·gc.alloc.rate:                   1003.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              250656.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        336495.756 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 166.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 6352.752 ops/s
[info]                  ·gc.alloc.rate:            1011.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       250656.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 167006.439 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 6171.598 ops/s
[info]                  ·gc.alloc.rate:                   983.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              250848.964 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        344316.143 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1189.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6292.993 ±(99.9%) 283.681 ops/s [Average]
[info]   (min, avg, max) = (6171.598, 6292.993, 6352.752), stdev = 73.671
[info]   CI (99.9%): [6009.311, 6576.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1002.684 ±(99.9%) 43.867 MB/sec [Average]
[info]   (min, avg, max) = (983.680, 1002.684, 1011.667), stdev = 11.392
[info]   CI (99.9%): [958.817, 1046.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   250779.804 ±(99.9%) 725.411 B/op [Average]
[info]   (min, avg, max) = (250656.064, 250779.804, 251081.865), stdev = 188.387
[info]   CI (99.9%): [250054.394, 251505.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1078.492 ±(99.9%) 1422.762 MB/sec [Average]
[info]   (min, avg, max) = (673.433, 1078.492, 1350.202), stdev = 369.487
[info]   CI (99.9%): [≈ 0, 2501.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   270402.124 ±(99.9%) 363836.772 B/op [Average]
[info]   (min, avg, max) = (166893.945, 270402.124, 344316.143), stdev = 94487.254
[info]   CI (99.9%): [≈ 0, 634238.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   304.093 ±(99.9%) 1931.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 304.093, 1189.054), stdev = 501.598
[info]   CI (99.9%): [≈ 0, 2235.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 12.200, 16.000), stdev = 4.382
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1035.233 ops/s
[info] # Warmup Iteration   2: 5036.949 ops/s
[info] # Warmup Iteration   3: 5193.826 ops/s
[info] # Warmup Iteration   4: 5395.315 ops/s
[info] # Warmup Iteration   5: 5254.381 ops/s
[info] Iteration   1: 5457.256 ops/s
[info]                  ·gc.alloc.rate:            835.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       241112.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.585 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 194002.887 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 5312.448 ops/s
[info]                  ·gc.alloc.rate:            814.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       241112.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 199296.530 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 5334.775 ops/s
[info]                  ·gc.alloc.rate:            817.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       241112.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1344.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 396207.168 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 5396.735 ops/s
[info]                  ·gc.alloc.rate:            826.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       241205.919 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 196195.213 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 5385.683 ops/s
[info]                  ·gc.alloc.rate:            825.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       241180.483 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 196595.834 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   5377.379 ±(99.9%) 218.294 ops/s [Average]
[info]   (min, avg, max) = (5312.448, 5377.379, 5457.256), stdev = 56.690
[info]   CI (99.9%): [5159.086, 5595.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   824.101 ±(99.9%) 32.550 MB/sec [Average]
[info]   (min, avg, max) = (814.179, 824.101, 835.907), stdev = 8.453
[info]   CI (99.9%): [791.551, 856.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   241144.532 ±(99.9%) 174.549 B/op [Average]
[info]   (min, avg, max) = (241112.077, 241144.532, 241205.919), stdev = 45.330
[info]   CI (99.9%): [240969.983, 241319.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.043 ±(99.9%) 1156.068 MB/sec [Average]
[info]   (min, avg, max) = (672.585, 807.043, 1344.105), stdev = 300.227
[info]   CI (99.9%): [≈ 0, 1963.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   236459.526 ±(99.9%) 343945.135 B/op [Average]
[info]   (min, avg, max) = (194002.887, 236459.526, 396207.168), stdev = 89321.459
[info]   CI (99.9%): [≈ 0, 580404.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.000, 18.000), stdev = 4.000
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111148.471 ops/s
[info] # Warmup Iteration   2: 158040.176 ops/s
[info] # Warmup Iteration   3: 165363.795 ops/s
[info] # Warmup Iteration   4: 166898.973 ops/s
[info] # Warmup Iteration   5: 165384.821 ops/s
[info] Iteration   1: 167036.897 ops/s
[info]                  ·gc.alloc.rate:            1618.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       15251.748 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12703.850 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 164117.393 ops/s
[info]                  ·gc.alloc.rate:                   1592.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              15272.506 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12961.629 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 44.717 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 161900.672 ops/s
[info]                  ·gc.alloc.rate:                   1574.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              15304.632 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2041.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19848.601 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.904 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 166849.902 ops/s
[info]                  ·gc.alloc.rate:                                  1617.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15261.383 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12856.095 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 168632.124 ops/s
[info]                  ·gc.alloc.rate:                                  1633.850 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19080.052 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   165707.397 ±(99.9%) 10304.733 ops/s [Average]
[info]   (min, avg, max) = (161900.672, 165707.397, 168632.124), stdev = 2676.106
[info]   CI (99.9%): [155402.664, 176012.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1607.326 ±(99.9%) 91.494 MB/sec [Average]
[info]   (min, avg, max) = (1574.143, 1607.326, 1633.850), stdev = 23.761
[info]   CI (99.9%): [1515.832, 1698.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15267.654 ±(99.9%) 87.584 B/op [Average]
[info]   (min, avg, max) = (15248.002, 15267.654, 15304.632), stdev = 22.745
[info]   CI (99.9%): [15180.070, 15355.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.022 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1629.663 ±(99.9%) 1453.042 MB/sec [Average]
[info]   (min, avg, max) = (1348.002, 1629.663, 2044.461), stdev = 377.350
[info]   CI (99.9%): [176.622, 3082.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   15490.045 ±(99.9%) 14013.729 B/op [Average]
[info]   (min, avg, max) = (12703.850, 15490.045, 19848.601), stdev = 3639.321
[info]   CI (99.9%): [1476.316, 29503.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.663), stdev = 2.127
[info]   CI (99.9%): [≈ 0, 9.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.124 ±(99.9%) 78.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.124, 44.717), stdev = 20.452
[info]   CI (99.9%): [≈ 0, 92.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 14.000), stdev = 5.310
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1063.315 ops/s
[info] # Warmup Iteration   2: 4869.618 ops/s
[info] # Warmup Iteration   3: 5303.038 ops/s
[info] # Warmup Iteration   4: 5343.852 ops/s
[info] # Warmup Iteration   5: 5444.492 ops/s
[info] Iteration   1: 5404.826 ops/s
[info]                  ·gc.alloc.rate:                   1035.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              301520.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        392003.717 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 193.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 5545.596 ops/s
[info]                  ·gc.alloc.rate:                   1062.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              301520.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        190925.142 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 189.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 5540.971 ops/s
[info]                  ·gc.alloc.rate:            1061.568 MB/sec
[info]                  ·gc.alloc.rate.norm:       301565.866 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 382383.994 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 5558.536 ops/s
[info]                  ·gc.alloc.rate:                   1065.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              301520.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1342.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        379728.132 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.323 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 939.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 5610.603 ops/s
[info]                  ·gc.alloc.rate:                   1075.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              301580.210 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        189648.011 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 373.691 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   5532.106 ±(99.9%) 294.020 ops/s [Average]
[info]   (min, avg, max) = (5404.826, 5532.106, 5610.603), stdev = 76.356
[info]   CI (99.9%): [5238.087, 5826.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1060.053 ±(99.9%) 57.143 MB/sec [Average]
[info]   (min, avg, max) = (1035.284, 1060.053, 1075.054), stdev = 14.840
[info]   CI (99.9%): [1002.910, 1117.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   301541.268 ±(99.9%) 113.371 B/op [Average]
[info]   (min, avg, max) = (301520.074, 301541.268, 301580.210), stdev = 29.442
[info]   CI (99.9%): [301427.897, 301654.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1076.642 ±(99.9%) 1413.968 MB/sec [Average]
[info]   (min, avg, max) = (672.748, 1076.642, 1346.062), stdev = 367.203
[info]   CI (99.9%): [≈ 0, 2490.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   306937.799 ±(99.9%) 410426.092 B/op [Average]
[info]   (min, avg, max) = (189648.011, 306937.799, 392003.717), stdev = 106586.353
[info]   CI (99.9%): [≈ 0, 717363.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.197 ±(99.9%) 4.921 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.197, 3.323), stdev = 1.278
[info]   CI (99.9%): [≈ 0, 6.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   339.322 ±(99.9%) 1389.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 339.322, 939.921), stdev = 360.817
[info]   CI (99.9%): [≈ 0, 1728.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   72.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 14.400, 19.000), stdev = 6.387
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9154.152 ops/s
[info] # Warmup Iteration   2: 18405.149 ops/s
[info] # Warmup Iteration   3: 18703.442 ops/s
[info] # Warmup Iteration   4: 18852.219 ops/s
[info] # Warmup Iteration   5: 18761.761 ops/s
[info] Iteration   1: 18864.207 ops/s
[info]                  ·gc.alloc.rate:            787.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       65760.206 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.248 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56185.623 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 18983.782 ops/s
[info]                  ·gc.alloc.rate:            792.129 MB/sec
[info]                  ·gc.alloc.rate.norm:       65669.591 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55830.542 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 19046.240 ops/s
[info]                  ·gc.alloc.rate:            792.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       65489.589 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55648.837 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 18940.894 ops/s
[info]                  ·gc.alloc.rate:            787.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       65456.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 111914.525 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   5: 19043.501 ops/s
[info]                  ·gc.alloc.rate:            792.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       65475.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55657.602 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18975.725 ±(99.9%) 293.764 ops/s [Average]
[info]   (min, avg, max) = (18864.207, 18975.725, 19046.240), stdev = 76.289
[info]   CI (99.9%): [18681.961, 19269.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   790.520 ±(99.9%) 9.420 MB/sec [Average]
[info]   (min, avg, max) = (787.713, 790.520, 792.436), stdev = 2.446
[info]   CI (99.9%): [781.100, 799.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   65570.096 ±(99.9%) 525.740 B/op [Average]
[info]   (min, avg, max) = (65456.022, 65570.096, 65760.206), stdev = 136.533
[info]   CI (99.9%): [65044.355, 66095.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.080 ±(99.9%) 1159.647 MB/sec [Average]
[info]   (min, avg, max) = (673.248, 808.080, 1346.805), stdev = 301.157
[info]   CI (99.9%): [≈ 0, 1967.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   67047.426 ±(99.9%) 96583.441 B/op [Average]
[info]   (min, avg, max) = (55648.837, 67047.426, 111914.525), stdev = 25082.413
[info]   CI (99.9%): [≈ 0, 163630.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.800, 16.000), stdev = 3.493
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10333.774 ops/s
[info] # Warmup Iteration   2: 22424.714 ops/s
[info] # Warmup Iteration   3: 22758.515 ops/s
[info] # Warmup Iteration   4: 22779.200 ops/s
[info] # Warmup Iteration   5: 22602.530 ops/s
[info] Iteration   1: 22844.279 ops/s
[info]                  ·gc.alloc.rate:            882.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       60820.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46350.464 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 23013.930 ops/s
[info]                  ·gc.alloc.rate:                   887.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              60720.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46010.156 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 45.555 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 22869.004 ops/s
[info]                  ·gc.alloc.rate:            882.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       60722.551 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46347.674 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 22471.465 ops/s
[info]                  ·gc.alloc.rate:                   866.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              60735.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        94239.345 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 46.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 22892.152 ops/s
[info]                  ·gc.alloc.rate:            883.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       60743.827 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46301.115 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   22818.166 ±(99.9%) 787.419 ops/s [Average]
[info]   (min, avg, max) = (22471.465, 22818.166, 23013.930), stdev = 204.490
[info]   CI (99.9%): [22030.747, 23605.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   880.785 ±(99.9%) 30.835 MB/sec [Average]
[info]   (min, avg, max) = (866.995, 880.785, 887.923), stdev = 8.008
[info]   CI (99.9%): [849.950, 911.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60748.303 ±(99.9%) 158.921 B/op [Average]
[info]   (min, avg, max) = (60720.018, 60748.303, 60820.092), stdev = 41.271
[info]   CI (99.9%): [60589.382, 60907.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.608 ±(99.9%) 1157.359 MB/sec [Average]
[info]   (min, avg, max) = (672.783, 807.608, 1345.270), stdev = 300.562
[info]   CI (99.9%): [≈ 0, 1964.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   55849.751 ±(99.9%) 82638.285 B/op [Average]
[info]   (min, avg, max) = (46010.156, 55849.751, 94239.345), stdev = 21460.900
[info]   CI (99.9%): [≈ 0, 138488.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.442 ±(99.9%) 97.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.442, 46.653), stdev = 25.255
[info]   CI (99.9%): [≈ 0, 115.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.000, 19.000), stdev = 4.472
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226050.757 ops/s
[info] # Warmup Iteration   2: 302712.247 ops/s
[info] # Warmup Iteration   3: 311769.788 ops/s
[info] # Warmup Iteration   4: 313342.349 ops/s
[info] # Warmup Iteration   5: 312618.319 ops/s
[info] Iteration   1: 312236.730 ops/s
[info]                  ·gc.alloc.rate:            709.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.942 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3398.014 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 312892.043 ops/s
[info]                  ·gc.alloc.rate:            709.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3390.761 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 313423.265 ops/s
[info]                  ·gc.alloc.rate:                   710.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3381.748 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.345 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 314519.229 ops/s
[info]                  ·gc.alloc.rate:            713.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       3569.509 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3373.374 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 313867.137 ops/s
[info]                  ·gc.alloc.rate:            711.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.621 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3380.359 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   313387.681 ±(99.9%) 3379.963 ops/s [Average]
[info]   (min, avg, max) = (312236.730, 313387.681, 314519.229), stdev = 877.766
[info]   CI (99.9%): [310007.718, 316767.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   710.802 ±(99.9%) 6.538 MB/sec [Average]
[info]   (min, avg, max) = (709.179, 710.802, 713.305), stdev = 1.698
[info]   CI (99.9%): [704.265, 717.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3570.215 ±(99.9%) 14.674 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3570.215, 3576.942), stdev = 3.811
[info]   CI (99.9%): [3555.541, 3584.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   673.895 ±(99.9%) 1.294 MB/sec [Average]
[info]   (min, avg, max) = (673.307, 673.895, 674.111), stdev = 0.336
[info]   CI (99.9%): [672.601, 675.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3384.851 ±(99.9%) 37.020 B/op [Average]
[info]   (min, avg, max) = (3373.374, 3384.851, 3398.014), stdev = 9.614
[info]   CI (99.9%): [3347.831, 3421.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.669 ±(99.9%) 5.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.669, 3.345), stdev = 1.496
[info]   CI (99.9%): [≈ 0, 6.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279895.728 ops/s
[info] # Warmup Iteration   2: 390428.261 ops/s
[info] # Warmup Iteration   3: 413617.450 ops/s
[info] # Warmup Iteration   4: 413163.263 ops/s
[info] # Warmup Iteration   5: 413624.639 ops/s
[info] Iteration   1: 410876.129 ops/s
[info]                  ·gc.alloc.rate:      11.785 MB/sec
[info]                  ·gc.alloc.rate.norm: 45.151 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 415238.044 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 415160.303 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 415455.932 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 414747.957 ops/s
[info]                  ·gc.alloc.rate:      1.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.927 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   414295.673 ±(99.9%) 7426.777 ops/s [Average]
[info]   (min, avg, max) = (410876.129, 414295.673, 415455.932), stdev = 1928.710
[info]   CI (99.9%): [406868.896, 421722.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.564 ±(99.9%) 19.924 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.564, 11.785), stdev = 5.174
[info]   CI (99.9%): [≈ 0, 22.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   9.816 ±(99.9%) 76.341 B/op [Average]
[info]   (min, avg, max) = (0.001, 9.816, 45.151), stdev = 19.826
[info]   CI (99.9%): [≈ 0, 86.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8110.231 ops/s
[info] # Warmup Iteration   2: 18951.051 ops/s
[info] # Warmup Iteration   3: 21026.810 ops/s
[info] # Warmup Iteration   4: 21189.914 ops/s
[info] # Warmup Iteration   5: 21234.465 ops/s
[info] Iteration   1: 20951.925 ops/s
[info]                  ·gc.alloc.rate:            889.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       66842.473 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 101174.875 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 21263.554 ops/s
[info]                  ·gc.alloc.rate:                   898.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              66543.824 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49796.020 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.303 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 20792.209 ops/s
[info]                  ·gc.alloc.rate:            879.168 MB/sec
[info]                  ·gc.alloc.rate.norm:       66554.812 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50976.646 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 20849.166 ops/s
[info]                  ·gc.alloc.rate:            881.695 MB/sec
[info]                  ·gc.alloc.rate.norm:       66552.194 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50784.586 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 20664.641 ops/s
[info]                  ·gc.alloc.rate:                   873.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              66536.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        102533.970 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.734 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   20904.299 ±(99.9%) 870.390 ops/s [Average]
[info]   (min, avg, max) = (20664.641, 20904.299, 21263.554), stdev = 226.038
[info]   CI (99.9%): [20033.909, 21774.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   884.615 ±(99.9%) 38.172 MB/sec [Average]
[info]   (min, avg, max) = (873.511, 884.615, 898.935), stdev = 9.913
[info]   CI (99.9%): [846.443, 922.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66605.865 ±(99.9%) 510.112 B/op [Average]
[info]   (min, avg, max) = (66536.020, 66605.865, 66842.473), stdev = 132.474
[info]   CI (99.9%): [66095.753, 67115.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   942.352 ±(99.9%) 1420.429 MB/sec [Average]
[info]   (min, avg, max) = (672.691, 942.352, 1346.775), stdev = 368.881
[info]   CI (99.9%): [≈ 0, 2362.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71053.220 ±(99.9%) 108300.115 B/op [Average]
[info]   (min, avg, max) = (49796.020, 71053.220, 102533.970), stdev = 28125.196
[info]   CI (99.9%): [≈ 0, 179353.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   20.007 ±(99.9%) 105.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.007, 50.734), stdev = 27.401
[info]   CI (99.9%): [≈ 0, 125.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.600, 18.000), stdev = 4.930
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3360.950 ops/s
[info] # Warmup Iteration   2: 9295.950 ops/s
[info] # Warmup Iteration   3: 9999.701 ops/s
[info] # Warmup Iteration   4: 9916.158 ops/s
[info] # Warmup Iteration   5: 9940.631 ops/s
[info] Iteration   1: 9987.650 ops/s
[info]                  ·gc.alloc.rate:            1083.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       170746.346 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 106117.151 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 9864.547 ops/s
[info]                  ·gc.alloc.rate:                   1072.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              171102.347 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        214901.751 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 106.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 9943.653 ops/s
[info]                  ·gc.alloc.rate:            1077.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       170600.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 213278.629 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 10028.206 ops/s
[info]                  ·gc.alloc.rate:                   1086.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              170600.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        105693.952 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 522.720 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 9986.309 ops/s
[info]                  ·gc.alloc.rate:                   1083.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              170714.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        213536.602 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 629.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   9962.073 ±(99.9%) 239.435 ops/s [Average]
[info]   (min, avg, max) = (9864.547, 9962.073, 10028.206), stdev = 62.181
[info]   CI (99.9%): [9722.638, 10201.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1080.697 ±(99.9%) 21.819 MB/sec [Average]
[info]   (min, avg, max) = (1072.436, 1080.697, 1086.901), stdev = 5.666
[info]   CI (99.9%): [1058.878, 1102.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   170752.603 ±(99.9%) 794.721 B/op [Average]
[info]   (min, avg, max) = (170600.041, 170752.603, 171102.347), stdev = 206.387
[info]   CI (99.9%): [169957.882, 171547.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1079.147 ±(99.9%) 1426.546 MB/sec [Average]
[info]   (min, avg, max) = (673.283, 1079.147, 1354.792), stdev = 370.469
[info]   CI (99.9%): [≈ 0, 2505.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   170705.617 ±(99.9%) 227794.471 B/op [Average]
[info]   (min, avg, max) = (105693.952, 170705.617, 214901.751), stdev = 59157.501
[info]   CI (99.9%): [≈ 0, 398500.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.996), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   251.781 ±(99.9%) 1162.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 251.781, 629.901), stdev = 301.803
[info]   CI (99.9%): [≈ 0, 1413.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.400, 16.000), stdev = 4.219
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2756.390 ops/s
[info] # Warmup Iteration   2: 8418.789 ops/s
[info] # Warmup Iteration   3: 8568.113 ops/s
[info] # Warmup Iteration   4: 8732.133 ops/s
[info] # Warmup Iteration   5: 8744.369 ops/s
[info] Iteration   1: 8650.037 ops/s
[info]                  ·gc.alloc.rate:            882.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       160564.632 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244934.362 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 8693.588 ops/s
[info]                  ·gc.alloc.rate:            887.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       160552.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 121787.231 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 8861.102 ops/s
[info]                  ·gc.alloc.rate:                   908.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              161312.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        119492.470 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 118.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8925.468 ops/s
[info]                  ·gc.alloc.rate:            910.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       160568.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 237362.466 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   5: 9000.267 ops/s
[info]                  ·gc.alloc.rate:            918.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       160616.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117647.385 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   8826.092 ±(99.9%) 577.567 ops/s [Average]
[info]   (min, avg, max) = (8650.037, 8826.092, 9000.267), stdev = 149.992
[info]   CI (99.9%): [8248.525, 9403.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   901.345 ±(99.9%) 60.574 MB/sec [Average]
[info]   (min, avg, max) = (882.341, 901.345, 918.336), stdev = 15.731
[info]   CI (99.9%): [840.771, 961.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   160722.675 ±(99.9%) 1272.821 B/op [Average]
[info]   (min, avg, max) = (160552.051, 160722.675, 161312.359), stdev = 330.548
[info]   CI (99.9%): [159449.854, 161995.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.093 ±(99.9%) 1419.768 MB/sec [Average]
[info]   (min, avg, max) = (672.658, 942.093, 1346.015), stdev = 368.709
[info]   CI (99.9%): [≈ 0, 2361.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   168244.783 ±(99.9%) 256535.944 B/op [Average]
[info]   (min, avg, max) = (117647.385, 168244.783, 244934.362), stdev = 66621.570
[info]   CI (99.9%): [≈ 0, 424780.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   23.662 ±(99.9%) 203.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.662, 118.309), stdev = 52.910
[info]   CI (99.9%): [≈ 0, 227.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.000, 18.000), stdev = 4.583
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146050.056 ops/s
[info] # Warmup Iteration   2: 256052.133 ops/s
[info] # Warmup Iteration   3: 256856.286 ops/s
[info] # Warmup Iteration   4: 258862.345 ops/s
[info] # Warmup Iteration   5: 259834.969 ops/s
[info] Iteration   1: 261111.910 ops/s
[info]                  ·gc.alloc.rate:            1510.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       9106.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8126.629 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 260051.343 ops/s
[info]                  ·gc.alloc.rate:                   1505.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              9113.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8159.779 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 259783.536 ops/s
[info]                  ·gc.alloc.rate:                                  1506.309 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9127.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12345.114 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.214 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 264117.140 ops/s
[info]                  ·gc.alloc.rate:            1528.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       9108.424 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8121.726 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 263378.671 ops/s
[info]                  ·gc.alloc.rate:            1524.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       9108.422 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8144.264 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   261688.520 ±(99.9%) 7554.674 ops/s [Average]
[info]   (min, avg, max) = (259783.536, 261688.520, 264117.140), stdev = 1961.925
[info]   CI (99.9%): [254133.846, 269243.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1515.084 ±(99.9%) 40.323 MB/sec [Average]
[info]   (min, avg, max) = (1505.842, 1515.084, 1528.433), stdev = 10.472
[info]   CI (99.9%): [1474.762, 1555.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9112.632 ±(99.9%) 32.465 B/op [Average]
[info]   (min, avg, max) = (9106.161, 9112.632, 9127.012), stdev = 8.431
[info]   CI (99.9%): [9080.166, 9145.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.196), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1491.918 ±(99.9%) 1174.565 MB/sec [Average]
[info]   (min, avg, max) = (1348.303, 1491.918, 2037.420), stdev = 305.031
[info]   CI (99.9%): [317.353, 2666.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   8979.503 ±(99.9%) 7244.965 B/op [Average]
[info]   (min, avg, max) = (8121.726, 8979.503, 12345.114), stdev = 1881.494
[info]   CI (99.9%): [1734.538, 16224.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.874 ±(99.9%) 47.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.874, 24.214), stdev = 12.236
[info]   CI (99.9%): [≈ 0, 55.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.400, 16.000), stdev = 6.580
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1056.284 ops/s
[info] # Warmup Iteration   2: 6218.010 ops/s
[info] # Warmup Iteration   3: 7494.404 ops/s
[info] # Warmup Iteration   4: 7919.809 ops/s
[info] # Warmup Iteration   5: 7924.251 ops/s
[info] Iteration   1: 8001.450 ops/s
[info]                  ·gc.alloc.rate:            1080.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       212480.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 264666.190 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 8064.844 ops/s
[info]                  ·gc.alloc.rate:            1095.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       213882.239 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131283.223 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 8019.701 ops/s
[info]                  ·gc.alloc.rate:            1082.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       212522.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 264039.332 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   4: 8009.882 ops/s
[info]                  ·gc.alloc.rate:                   1083.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              212881.242 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        264401.887 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 523.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 7975.292 ops/s
[info]                  ·gc.alloc.rate:                   1076.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              212480.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.517 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        133290.217 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 262.900 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   8014.234 ±(99.9%) 126.107 ops/s [Average]
[info]   (min, avg, max) = (7975.292, 8014.234, 8064.844), stdev = 32.750
[info]   CI (99.9%): [7888.127, 8140.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1083.792 ±(99.9%) 27.938 MB/sec [Average]
[info]   (min, avg, max) = (1076.853, 1083.792, 1095.931), stdev = 7.255
[info]   CI (99.9%): [1055.854, 1111.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   212849.136 ±(99.9%) 2316.584 B/op [Average]
[info]   (min, avg, max) = (212480.051, 212849.136, 213882.239), stdev = 601.609
[info]   CI (99.9%): [210532.552, 215165.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1076.863 ±(99.9%) 1415.753 MB/sec [Average]
[info]   (min, avg, max) = (672.694, 1076.863, 1345.413), stdev = 367.667
[info]   CI (99.9%): [≈ 0, 2492.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   211536.170 ±(99.9%) 278587.700 B/op [Average]
[info]   (min, avg, max) = (131283.223, 211536.170, 264666.190), stdev = 72348.341
[info]   CI (99.9%): [≈ 0, 490123.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   157.294 ±(99.9%) 902.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 157.294, 523.568), stdev = 234.272
[info]   CI (99.9%): [≈ 0, 1059.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   75.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 15.000, 20.000), stdev = 6.557
[info]   CI (99.9%): [75.000, 75.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13690.915 ops/s
[info] # Warmup Iteration   2: 29003.827 ops/s
[info] # Warmup Iteration   3: 29182.686 ops/s
[info] # Warmup Iteration   4: 29086.600 ops/s
[info] # Warmup Iteration   5: 29069.134 ops/s
[info] Iteration   1: 29398.112 ops/s
[info]                  ·gc.alloc.rate:                   959.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              51384.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36053.269 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.661 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 28917.556 ops/s
[info]                  ·gc.alloc.rate:            945.287 MB/sec
[info]                  ·gc.alloc.rate.norm:       51435.583 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73339.415 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 29452.932 ops/s
[info]                  ·gc.alloc.rate:            961.646 MB/sec
[info]                  ·gc.alloc.rate.norm:       51395.561 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35987.180 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 28947.622 ops/s
[info]                  ·gc.alloc.rate:            948.383 MB/sec
[info]                  ·gc.alloc.rate.norm:       51564.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73227.211 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   5: 29962.021 ops/s
[info]                  ·gc.alloc.rate:                   978.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              51386.291 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35375.925 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 139.964 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   29335.649 ±(99.9%) 1651.029 ops/s [Average]
[info]   (min, avg, max) = (28917.556, 29335.649, 29962.021), stdev = 428.767
[info]   CI (99.9%): [27684.619, 30986.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   958.643 ±(99.9%) 50.019 MB/sec [Average]
[info]   (min, avg, max) = (945.287, 958.643, 978.164), stdev = 12.990
[info]   CI (99.9%): [908.624, 1008.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   51433.201 ±(99.9%) 293.864 B/op [Average]
[info]   (min, avg, max) = (51384.014, 51433.201, 51564.555), stdev = 76.316
[info]   CI (99.9%): [51139.336, 51727.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   942.955 ±(99.9%) 1421.404 MB/sec [Average]
[info]   (min, avg, max) = (673.345, 942.955, 1347.837), stdev = 369.134
[info]   CI (99.9%): [≈ 0, 2364.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   50796.600 ±(99.9%) 79050.653 B/op [Average]
[info]   (min, avg, max) = (35375.925, 50796.600, 73339.415), stdev = 20529.204
[info]   CI (99.9%): [≈ 0, 129847.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 4.442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.664), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   35.125 ±(99.9%) 233.376 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.125, 139.964), stdev = 60.607
[info]   CI (99.9%): [≈ 0, 268.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.800, 17.000), stdev = 4.324
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34518.910 ops/s
[info] # Warmup Iteration   2: 69378.559 ops/s
[info] # Warmup Iteration   3: 71329.421 ops/s
[info] # Warmup Iteration   4: 70854.944 ops/s
[info] # Warmup Iteration   5: 71452.532 ops/s
[info] Iteration   1: 70776.821 ops/s
[info]                  ·gc.alloc.rate:            1541.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       34272.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29951.273 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 71191.724 ops/s
[info]                  ·gc.alloc.rate:                   1551.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              34292.845 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2026.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        44809.178 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.326 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 161.979 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 72592.426 ops/s
[info]                  ·gc.alloc.rate:                                  1580.528 MB/sec
[info]                  ·gc.alloc.rate.norm:                             34272.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29534.708 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                14.442 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 72594.997 ops/s
[info]                  ·gc.alloc.rate:                                  1580.694 MB/sec
[info]                  ·gc.alloc.rate.norm:                             34275.065 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29547.115 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 72669.073 ops/s
[info]                  ·gc.alloc.rate:            1582.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       34272.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44276.158 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   71965.008 ±(99.9%) 3495.401 ops/s [Average]
[info]   (min, avg, max) = (70776.821, 71965.008, 72669.073), stdev = 907.745
[info]   CI (99.9%): [68469.607, 75460.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1567.190 ±(99.9%) 75.561 MB/sec [Average]
[info]   (min, avg, max) = (1541.082, 1567.190, 1582.605), stdev = 19.623
[info]   CI (99.9%): [1491.629, 1642.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   34276.785 ±(99.9%) 34.943 B/op [Average]
[info]   (min, avg, max) = (34272.006, 34276.785, 34292.845), stdev = 9.075
[info]   CI (99.9%): [34241.842, 34311.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.058), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.333 ±(99.9%) 2.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 1.256), stdev = 0.546
[info]   CI (99.9%): [≈ 0, 2.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1628.553 ±(99.9%) 1431.355 MB/sec [Average]
[info]   (min, avg, max) = (1346.795, 1628.553, 2044.575), stdev = 371.718
[info]   CI (99.9%): [197.199, 3059.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   35623.687 ±(99.9%) 31366.513 B/op [Average]
[info]   (min, avg, max) = (29534.708, 35623.687, 44809.178), stdev = 8145.784
[info]   CI (99.9%): [4257.173, 66990.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 12.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 7.326), stdev = 3.215
[info]   CI (99.9%): [≈ 0, 13.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   35.284 ±(99.9%) 273.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.284, 161.979), stdev = 71.100
[info]   CI (99.9%): [≈ 0, 309.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.400, 19.000), stdev = 8.355
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 433040.795 ops/s
[info] # Warmup Iteration   2: 560872.480 ops/s
[info] # Warmup Iteration   3: 580586.184 ops/s
[info] # Warmup Iteration   4: 583089.364 ops/s
[info] # Warmup Iteration   5: 589260.530 ops/s
[info] Iteration   1: 581017.697 ops/s
[info]                  ·gc.alloc.rate:            800.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       2167.440 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3652.204 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 586272.458 ops/s
[info]                  ·gc.alloc.rate:            805.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       2162.229 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1809.740 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 585738.720 ops/s
[info]                  ·gc.alloc.rate:            803.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1811.405 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 582189.315 ops/s
[info]                  ·gc.alloc.rate:            798.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1822.430 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 585954.737 ops/s
[info]                  ·gc.alloc.rate:            804.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.447 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1810.681 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   584234.585 ±(99.9%) 9413.577 ops/s [Average]
[info]   (min, avg, max) = (581017.697, 584234.585, 586272.458), stdev = 2444.676
[info]   CI (99.9%): [574821.008, 593648.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   802.611 ±(99.9%) 10.838 MB/sec [Average]
[info]   (min, avg, max) = (798.933, 802.611, 805.586), stdev = 2.815
[info]   CI (99.9%): [791.773, 813.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2162.023 ±(99.9%) 12.185 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2162.023, 2167.440), stdev = 3.164
[info]   CI (99.9%): [2149.839, 2174.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   809.045 ±(99.9%) 1161.645 MB/sec [Average]
[info]   (min, avg, max) = (674.056, 809.045, 1348.699), stdev = 301.675
[info]   CI (99.9%): [≈ 0, 1970.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2181.292 ±(99.9%) 3166.312 B/op [Average]
[info]   (min, avg, max) = (1809.740, 2181.292, 3652.204), stdev = 822.281
[info]   CI (99.9%): [≈ 0, 5347.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 15.000), stdev = 3.130
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 501224.876 ops/s
[info] # Warmup Iteration   2: 647016.847 ops/s
[info] # Warmup Iteration   3: 656811.344 ops/s
[info] # Warmup Iteration   4: 652788.329 ops/s
[info] # Warmup Iteration   5: 629381.770 ops/s
[info] Iteration   1: 656950.035 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 654457.243 ops/s
[info]                  ·gc.alloc.rate:      1.536 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.696 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 656101.467 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 655890.239 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 648004.619 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   654280.721 ±(99.9%) 13943.840 ops/s [Average]
[info]   (min, avg, max) = (648004.619, 654280.721, 656950.035), stdev = 3621.171
[info]   CI (99.9%): [640336.881, 668224.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.308 ±(99.9%) 2.645 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.308, 1.536), stdev = 0.687
[info]   CI (99.9%): [≈ 0, 2.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.740 ±(99.9%) 6.363 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.740, 3.696), stdev = 1.652
[info]   CI (99.9%): [≈ 0, 7.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16520.822 ops/s
[info] # Warmup Iteration   2: 65107.011 ops/s
[info] # Warmup Iteration   3: 65790.301 ops/s
[info] # Warmup Iteration   4: 66837.458 ops/s
[info] # Warmup Iteration   5: 67430.091 ops/s
[info] Iteration   1: 67170.683 ops/s
[info]                  ·gc.alloc.rate:            1448.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       33933.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31529.548 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 66314.201 ops/s
[info]                  ·gc.alloc.rate:                   1432.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              33981.563 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31919.231 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 94.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 66581.217 ops/s
[info]                  ·gc.alloc.rate:                   1437.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              33976.984 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31995.952 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 94.476 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 66449.208 ops/s
[info]                  ·gc.alloc.rate:                                  1435.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33998.280 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.275 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.519 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32248.343 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                31.554 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 66958.340 ops/s
[info]                  ·gc.alloc.rate:            1449.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       34065.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32035.038 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   66694.730 ±(99.9%) 1380.324 ops/s [Average]
[info]   (min, avg, max) = (66314.201, 66694.730, 67170.683), stdev = 358.466
[info]   CI (99.9%): [65314.406, 68075.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1440.646 ±(99.9%) 30.566 MB/sec [Average]
[info]   (min, avg, max) = (1432.262, 1440.646, 1449.704), stdev = 7.938
[info]   CI (99.9%): [1410.081, 1471.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33990.990 ±(99.9%) 184.562 B/op [Average]
[info]   (min, avg, max) = (33933.029, 33990.990, 34065.094), stdev = 47.930
[info]   CI (99.9%): [33806.428, 34175.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.055 ±(99.9%) 0.474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.275), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.304 ±(99.9%) 11.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.304, 6.519), stdev = 2.915
[info]   CI (99.9%): [≈ 0, 12.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1353.926 ±(99.9%) 32.398 MB/sec [Average]
[info]   (min, avg, max) = (1345.338, 1353.926, 1363.311), stdev = 8.414
[info]   CI (99.9%): [1321.528, 1386.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   31945.622 ±(99.9%) 1011.448 B/op [Average]
[info]   (min, avg, max) = (31529.548, 31945.622, 32248.343), stdev = 262.670
[info]   CI (99.9%): [30934.174, 32957.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 7.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 3.998), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   44.177 ±(99.9%) 184.278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.177, 94.857), stdev = 47.857
[info]   CI (99.9%): [≈ 0, 228.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.600, 19.000), stdev = 7.266
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7012.230 ops/s
[info] # Warmup Iteration   2: 18948.576 ops/s
[info] # Warmup Iteration   3: 19101.003 ops/s
[info] # Warmup Iteration   4: 18801.089 ops/s
[info] # Warmup Iteration   5: 18637.683 ops/s
[info] Iteration   1: 19065.691 ops/s
[info]                  ·gc.alloc.rate:            671.882 MB/sec
[info]                  ·gc.alloc.rate.norm:       55471.211 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55648.378 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 18941.875 ops/s
[info]                  ·gc.alloc.rate:            665.616 MB/sec
[info]                  ·gc.alloc.rate.norm:       55300.560 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56012.611 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 19105.990 ops/s
[info]                  ·gc.alloc.rate:            665.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       54832.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55474.115 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 19101.152 ops/s
[info]                  ·gc.alloc.rate:                   665.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              54832.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        55488.633 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 54.885 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 18641.435 ops/s
[info]                  ·gc.alloc.rate:            649.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       54832.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56916.912 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   18971.228 ±(99.9%) 754.543 ops/s [Average]
[info]   (min, avg, max) = (18641.435, 18971.228, 19105.990), stdev = 195.952
[info]   CI (99.9%): [18216.686, 19725.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   663.579 ±(99.9%) 32.361 MB/sec [Average]
[info]   (min, avg, max) = (649.369, 663.579, 671.882), stdev = 8.404
[info]   CI (99.9%): [631.219, 695.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55053.568 ±(99.9%) 1191.022 B/op [Average]
[info]   (min, avg, max) = (54832.021, 55053.568, 55471.211), stdev = 309.305
[info]   CI (99.9%): [53862.546, 56244.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   673.813 ±(99.9%) 1.486 MB/sec [Average]
[info]   (min, avg, max) = (673.378, 673.813, 674.186), stdev = 0.386
[info]   CI (99.9%): [672.328, 675.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   55908.130 ±(99.9%) 2326.675 B/op [Average]
[info]   (min, avg, max) = (55474.115, 55908.130, 56916.912), stdev = 604.230
[info]   CI (99.9%): [53581.455, 58234.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.977 ±(99.9%) 94.515 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.977, 54.885), stdev = 24.545
[info]   CI (99.9%): [≈ 0, 105.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7294.935 ops/s
[info] # Warmup Iteration   2: 18698.575 ops/s
[info] # Warmup Iteration   3: 18859.362 ops/s
[info] # Warmup Iteration   4: 18768.680 ops/s
[info] # Warmup Iteration   5: 18469.188 ops/s
[info] Iteration   1: 18941.257 ops/s
[info]                  ·gc.alloc.rate:            529.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       44016.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55901.914 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 18357.817 ops/s
[info]                  ·gc.alloc.rate:                   541.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              46404.775 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        57679.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 57.109 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 18583.073 ops/s
[info]                  ·gc.alloc.rate:            519.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       44016.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57038.111 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 19202.990 ops/s
[info]                  ·gc.alloc.rate:      537.000 MB/sec
[info]                  ·gc.alloc.rate.norm: 44016.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18950.292 ops/s
[info]                  ·gc.alloc.rate:            529.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       44016.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55875.370 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18807.086 ±(99.9%) 1287.629 ops/s [Average]
[info]   (min, avg, max) = (18357.817, 18807.086, 19202.990), stdev = 334.393
[info]   CI (99.9%): [17519.457, 20094.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   531.533 ±(99.9%) 31.448 MB/sec [Average]
[info]   (min, avg, max) = (519.797, 531.533, 541.195), stdev = 8.167
[info]   CI (99.9%): [500.085, 562.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44493.773 ±(99.9%) 4113.577 B/op [Average]
[info]   (min, avg, max) = (44016.021, 44493.773, 46404.775), stdev = 1068.283
[info]   CI (99.9%): [40380.196, 48607.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.354 ±(99.9%) 1158.849 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.354, 673.578), stdev = 300.949
[info]   CI (99.9%): [≈ 0, 1697.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   45299.071 ±(99.9%) 97554.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45299.071, 57679.961), stdev = 25334.639
[info]   CI (99.9%): [≈ 0, 142853.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.422 ±(99.9%) 98.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.422, 57.109), stdev = 25.540
[info]   CI (99.9%): [≈ 0, 109.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.600, 10.000), stdev = 4.278
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97165.612 ops/s
[info] # Warmup Iteration   2: 112921.706 ops/s
[info] # Warmup Iteration   3: 105407.706 ops/s
[info] # Warmup Iteration   4: 114639.043 ops/s
[info] # Warmup Iteration   5: 113458.378 ops/s
[info] Iteration   1: 114828.824 ops/s
[info]                  ·gc.alloc.rate:      288.348 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 112438.238 ops/s
[info]                  ·gc.alloc.rate:            286.810 MB/sec
[info]                  ·gc.alloc.rate.norm:       4014.505 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9436.214 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 114580.268 ops/s
[info]                  ·gc.alloc.rate:      287.677 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 114747.264 ops/s
[info]                  ·gc.alloc.rate:      288.152 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 114023.507 ops/s
[info]                  ·gc.alloc.rate:            286.355 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9304.983 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   114123.620 ±(99.9%) 3824.228 ops/s [Average]
[info]   (min, avg, max) = (112438.238, 114123.620, 114828.824), stdev = 993.140
[info]   CI (99.9%): [110299.392, 117947.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   287.469 ±(99.9%) 3.311 MB/sec [Average]
[info]   (min, avg, max) = (286.355, 287.469, 288.348), stdev = 0.860
[info]   CI (99.9%): [284.158, 290.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3964.598 ±(99.9%) 107.431 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3964.598, 4014.505), stdev = 27.899
[info]   CI (99.9%): [3857.168, 4072.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.660 ±(99.9%) 1421.838 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.660, 674.156), stdev = 369.247
[info]   CI (99.9%): [≈ 0, 1691.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3748.240 ±(99.9%) 19764.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3748.240, 9436.214), stdev = 5132.698
[info]   CI (99.9%): [≈ 0, 23512.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4243.376 ops/s
[info] # Warmup Iteration   2: 14035.867 ops/s
[info] # Warmup Iteration   3: 15220.405 ops/s
[info] # Warmup Iteration   4: 15210.658 ops/s
[info] # Warmup Iteration   5: 14987.456 ops/s
[info] Iteration   1: 15149.387 ops/s
[info]                  ·gc.alloc.rate:            917.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       95283.830 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69891.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 15188.116 ops/s
[info]                  ·gc.alloc.rate:            920.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       95418.694 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69716.395 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 14899.906 ops/s
[info]                  ·gc.alloc.rate:            919.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       97085.151 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142127.325 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 14758.944 ops/s
[info]                  ·gc.alloc.rate:            898.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       95857.884 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71742.431 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 15237.076 ops/s
[info]                  ·gc.alloc.rate:                   922.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              95272.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        69492.241 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 68.804 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   15046.686 ±(99.9%) 796.483 ops/s [Average]
[info]   (min, avg, max) = (14758.944, 15046.686, 15237.076), stdev = 206.844
[info]   CI (99.9%): [14250.202, 15843.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   915.715 ±(99.9%) 36.900 MB/sec [Average]
[info]   (min, avg, max) = (898.976, 915.715, 922.664), stdev = 9.583
[info]   CI (99.9%): [878.815, 952.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   95783.517 ±(99.9%) 2947.810 B/op [Average]
[info]   (min, avg, max) = (95272.027, 95783.517, 97085.151), stdev = 765.537
[info]   CI (99.9%): [92835.707, 98731.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   807.351 ±(99.9%) 1158.474 MB/sec [Average]
[info]   (min, avg, max) = (672.666, 807.351, 1345.531), stdev = 300.852
[info]   CI (99.9%): [≈ 0, 1965.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84593.924 ±(99.9%) 123892.996 B/op [Average]
[info]   (min, avg, max) = (69492.241, 84593.924, 142127.325), stdev = 32174.618
[info]   CI (99.9%): [≈ 0, 208486.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   13.761 ±(99.9%) 118.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.761, 68.804), stdev = 30.770
[info]   CI (99.9%): [≈ 0, 132.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.200, 19.000), stdev = 4.382
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22858.746 ops/s
[info] # Warmup Iteration   2: 45028.029 ops/s
[info] # Warmup Iteration   3: 48049.235 ops/s
[info] # Warmup Iteration   4: 49494.326 ops/s
[info] # Warmup Iteration   5: 49220.738 ops/s
[info] Iteration   1: 47401.789 ops/s
[info]                  ·gc.alloc.rate:                   758.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              25178.332 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22360.480 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 49644.679 ops/s
[info]                  ·gc.alloc.rate:            792.425 MB/sec
[info]                  ·gc.alloc.rate.norm:       25122.571 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21371.496 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 49671.696 ops/s
[info]                  ·gc.alloc.rate:                   793.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              25135.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21338.775 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 49689.688 ops/s
[info]                  ·gc.alloc.rate:            793.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       25120.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21351.716 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 49144.990 ops/s
[info]                  ·gc.alloc.rate:            794.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       25451.805 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21588.894 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   49110.568 ±(99.9%) 3781.006 ops/s [Average]
[info]   (min, avg, max) = (47401.789, 49110.568, 49689.688), stdev = 981.915
[info]   CI (99.9%): [45329.562, 52891.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   786.350 ±(99.9%) 60.588 MB/sec [Average]
[info]   (min, avg, max) = (758.243, 786.350, 794.704), stdev = 15.734
[info]   CI (99.9%): [725.763, 846.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25201.551 ±(99.9%) 546.184 B/op [Average]
[info]   (min, avg, max) = (25120.008, 25201.551, 25451.805), stdev = 141.842
[info]   CI (99.9%): [24655.367, 25747.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   673.834 ±(99.9%) 1.425 MB/sec [Average]
[info]   (min, avg, max) = (673.384, 673.834, 674.115), stdev = 0.370
[info]   CI (99.9%): [672.409, 675.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21602.272 ±(99.9%) 1679.036 B/op [Average]
[info]   (min, avg, max) = (21338.775, 21602.272, 22360.480), stdev = 436.040
[info]   CI (99.9%): [19923.236, 23281.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.645 ±(99.9%) 45.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.645, 22.117), stdev = 11.843
[info]   CI (99.9%): [≈ 0, 54.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33848.298 ops/s
[info] # Warmup Iteration   2: 60058.725 ops/s
[info] # Warmup Iteration   3: 62126.096 ops/s
[info] # Warmup Iteration   4: 61722.302 ops/s
[info] # Warmup Iteration   5: 61900.931 ops/s
[info] Iteration   1: 62198.991 ops/s
[info]                  ·gc.alloc.rate:                   1005.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34064.814 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.855 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 62795.348 ops/s
[info]                  ·gc.alloc.rate:            1014.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       25440.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16877.782 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 62228.435 ops/s
[info]                  ·gc.alloc.rate:                   1006.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              25449.402 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34048.942 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.848 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 62907.098 ops/s
[info]                  ·gc.alloc.rate:            1017.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       25440.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16849.079 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 62516.287 ops/s
[info]                  ·gc.alloc.rate:                   1010.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33975.962 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 100.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   62529.232 ±(99.9%) 1237.768 ops/s [Average]
[info]   (min, avg, max) = (62198.991, 62529.232, 62907.098), stdev = 321.444
[info]   CI (99.9%): [61291.464, 63767.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1010.741 ±(99.9%) 20.307 MB/sec [Average]
[info]   (min, avg, max) = (1005.142, 1010.741, 1017.139), stdev = 5.274
[info]   CI (99.9%): [990.434, 1031.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25441.886 ±(99.9%) 16.180 B/op [Average]
[info]   (min, avg, max) = (25440.006, 25441.886, 25449.402), stdev = 4.202
[info]   CI (99.9%): [25425.706, 25458.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1077.679 ±(99.9%) 1420.769 MB/sec [Average]
[info]   (min, avg, max) = (673.335, 1077.679, 1349.394), stdev = 368.969
[info]   CI (99.9%): [≈ 0, 2498.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   27163.316 ±(99.9%) 36205.800 B/op [Average]
[info]   (min, avg, max) = (16849.079, 27163.316, 34064.814), stdev = 9402.531
[info]   CI (99.9%): [≈ 0, 63369.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   26.865 ±(99.9%) 162.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.865, 100.620), stdev = 42.083
[info]   CI (99.9%): [≈ 0, 188.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.800, 18.000), stdev = 4.550
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 01:00:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210640.218 ops/s
[info] # Warmup Iteration   2: 262175.984 ops/s
[info] # Warmup Iteration   3: 293867.801 ops/s
[info] # Warmup Iteration   4: 293261.682 ops/s
[info] # Warmup Iteration   5: 292548.012 ops/s
[info] Iteration   1: 296022.407 ops/s
[info]                  ·gc.alloc.rate:      567.466 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.907 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 293355.178 ops/s
[info]                  ·gc.alloc.rate:            563.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       3024.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3616.741 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 293167.222 ops/s
[info]                  ·gc.alloc.rate:            563.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       3026.812 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3619.109 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 293963.105 ops/s
[info]                  ·gc.alloc.rate:            564.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       3024.564 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3609.237 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 287554.519 ops/s
[info]                  ·gc.alloc.rate:            551.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.640 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3689.678 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   292812.486 ±(99.9%) 12130.153 ops/s [Average]
[info]   (min, avg, max) = (287554.519, 292812.486, 296022.407), stdev = 3150.162
[info]   CI (99.9%): [280682.333, 304942.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   562.182 ±(99.9%) 24.589 MB/sec [Average]
[info]   (min, avg, max) = (551.087, 562.182, 567.466), stdev = 6.386
[info]   CI (99.9%): [537.593, 586.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3021.818 ±(99.9%) 18.156 B/op [Average]
[info]   (min, avg, max) = (3016.640, 3021.818, 3026.812), stdev = 4.715
[info]   CI (99.9%): [3003.662, 3039.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.274 ±(99.9%) 1160.827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.274, 674.300), stdev = 301.463
[info]   CI (99.9%): [≈ 0, 1700.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2906.953 ±(99.9%) 6258.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2906.953, 3689.678), stdev = 1625.362
[info]   CI (99.9%): [≈ 0, 9165.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 8.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222323.334 ops/s
[info] # Warmup Iteration   2: 307321.869 ops/s
[info] # Warmup Iteration   3: 327760.709 ops/s
[info] # Warmup Iteration   4: 327607.876 ops/s
[info] # Warmup Iteration   5: 327598.622 ops/s
[info] Iteration   1: 327652.779 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 322062.598 ops/s
[info]                  ·gc.alloc.rate:      1.607 MB/sec
[info]                  ·gc.alloc.rate.norm: 7.851 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 327731.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 327703.165 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 328005.920 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   326631.282 ±(99.9%) 9848.611 ops/s [Average]
[info]   (min, avg, max) = (322062.598, 326631.282, 328005.920), stdev = 2557.653
[info]   CI (99.9%): [316782.670, 336479.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.322 ±(99.9%) 2.766 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.322, 1.607), stdev = 0.718
[info]   CI (99.9%): [≈ 0, 3.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.571 ±(99.9%) 13.517 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.571, 7.851), stdev = 3.510
[info]   CI (99.9%): [≈ 0, 15.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23375.513 ops/s
[info] # Warmup Iteration   2: 55108.105 ops/s
[info] # Warmup Iteration   3: 56675.111 ops/s
[info] # Warmup Iteration   4: 57640.680 ops/s
[info] # Warmup Iteration   5: 58205.088 ops/s
[info] Iteration   1: 57961.157 ops/s
[info]                  ·gc.alloc.rate:                   1037.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              28186.871 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36555.728 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 58119.708 ops/s
[info]                  ·gc.alloc.rate:            1040.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       28184.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18236.889 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 57328.239 ops/s
[info]                  ·gc.alloc.rate:                   1026.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              28189.889 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36959.296 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 58214.072 ops/s
[info]                  ·gc.alloc.rate:            1042.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       28191.492 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18189.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 57946.376 ops/s
[info]                  ·gc.alloc.rate:                   1038.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              28199.651 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36638.192 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 126.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   57913.910 ±(99.9%) 1332.159 ops/s [Average]
[info]   (min, avg, max) = (57328.239, 57913.910, 58214.072), stdev = 345.957
[info]   CI (99.9%): [56581.751, 59246.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1037.242 ±(99.9%) 23.935 MB/sec [Average]
[info]   (min, avg, max) = (1026.762, 1037.242, 1042.897), stdev = 6.216
[info]   CI (99.9%): [1013.307, 1061.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28190.382 ±(99.9%) 22.811 B/op [Average]
[info]   (min, avg, max) = (28184.007, 28190.382, 28199.651), stdev = 5.924
[info]   CI (99.9%): [28167.572, 28213.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1077.418 ±(99.9%) 1421.124 MB/sec [Average]
[info]   (min, avg, max) = (672.888, 1077.418, 1348.686), stdev = 369.061
[info]   CI (99.9%): [≈ 0, 2498.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   29315.908 ±(99.9%) 39032.086 B/op [Average]
[info]   (min, avg, max) = (18189.437, 29315.908, 36959.296), stdev = 10136.509
[info]   CI (99.9%): [≈ 0, 68347.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   32.605 ±(99.9%) 205.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.605, 126.651), stdev = 53.354
[info]   CI (99.9%): [≈ 0, 238.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.600, 18.000), stdev = 4.336
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71890.871 ops/s
[info] # Warmup Iteration   2: 137160.541 ops/s
[info] # Warmup Iteration   3: 146132.690 ops/s
[info] # Warmup Iteration   4: 146063.803 ops/s
[info] # Warmup Iteration   5: 144832.845 ops/s
[info] Iteration   1: 147573.457 ops/s
[info]                  ·gc.alloc.rate:                   1805.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              19260.335 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14379.139 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 146407.371 ops/s
[info]                  ·gc.alloc.rate:                   1798.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              19332.705 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2035.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21882.478 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 147061.512 ops/s
[info]                  ·gc.alloc.rate:                                  1798.918 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19256.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21879.643 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 147736.383 ops/s
[info]                  ·gc.alloc.rate:            1807.761 MB/sec
[info]                  ·gc.alloc.rate.norm:       19260.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14519.301 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 149089.852 ops/s
[info]                  ·gc.alloc.rate:                                  1826.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19284.853 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21581.339 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   147573.715 ±(99.9%) 3825.456 ops/s [Average]
[info]   (min, avg, max) = (146407.371, 147573.715, 149089.852), stdev = 993.459
[info]   CI (99.9%): [143748.259, 151399.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1807.418 ±(99.9%) 44.415 MB/sec [Average]
[info]   (min, avg, max) = (1798.266, 1807.418, 1826.708), stdev = 11.534
[info]   CI (99.9%): [1763.003, 1851.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19278.818 ±(99.9%) 124.019 B/op [Average]
[info]   (min, avg, max) = (19256.003, 19278.818, 19332.705), stdev = 32.207
[info]   CI (99.9%): [19154.798, 19402.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.035 ±(99.9%) 0.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.153), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1766.871 ±(99.9%) 1446.829 MB/sec [Average]
[info]   (min, avg, max) = (1347.881, 1766.871, 2044.237), stdev = 375.737
[info]   CI (99.9%): [320.042, 3213.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18848.380 ±(99.9%) 15472.020 B/op [Average]
[info]   (min, avg, max) = (14379.139, 18848.380, 21882.478), stdev = 4018.034
[info]   CI (99.9%): [3376.360, 34320.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.662), stdev = 2.127
[info]   CI (99.9%): [≈ 0, 9.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   15.708 ±(99.9%) 87.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.708, 50.123), stdev = 22.837
[info]   CI (99.9%): [≈ 0, 103.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 15.000), stdev = 5.413
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.738 ops/s
[info] # Warmup Iteration   2: 712610.604 ops/s
[info] # Warmup Iteration   3: 764263.351 ops/s
[info] # Warmup Iteration   4: 757927.191 ops/s
[info] # Warmup Iteration   5: 765035.881 ops/s
[info] Iteration   1: 758603.915 ops/s
[info]                  ·gc.alloc.rate:            420.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       873.336 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1391.742 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 758618.853 ops/s
[info]                  ·gc.alloc.rate:            420.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1391.711 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 768192.678 ops/s
[info]                  ·gc.alloc.rate:      425.574 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 758502.947 ops/s
[info]                  ·gc.alloc.rate:            421.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       874.811 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1391.911 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 758847.137 ops/s
[info]                  ·gc.alloc.rate:                   420.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1389.873 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.382 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   760553.106 ±(99.9%) 16451.899 ops/s [Average]
[info]   (min, avg, max) = (758502.947, 760553.106, 768192.678), stdev = 4272.506
[info]   CI (99.9%): [744101.207, 777005.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   421.753 ±(99.9%) 8.439 MB/sec [Average]
[info]   (min, avg, max) = (420.327, 421.753, 425.574), stdev = 2.192
[info]   CI (99.9%): [413.314, 430.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.831 ±(99.9%) 4.808 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.831, 874.811), stdev = 1.249
[info]   CI (99.9%): [868.023, 877.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   536.480 ±(99.9%) 1154.815 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.480, 670.840), stdev = 299.902
[info]   CI (99.9%): [≈ 0, 1691.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1113.047 ±(99.9%) 2395.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1113.047, 1391.911), stdev = 622.213
[info]   CI (99.9%): [≈ 0, 3508.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.276 ±(99.9%) 2.379 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.276, 1.382), stdev = 0.618
[info]   CI (99.9%): [≈ 0, 2.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 9.400, 12.000), stdev = 5.273
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134462.284 ops/s
[info] # Warmup Iteration   2: 292284.359 ops/s
[info] # Warmup Iteration   3: 285334.800 ops/s
[info] # Warmup Iteration   4: 299872.595 ops/s
[info] # Warmup Iteration   5: 296467.023 ops/s
[info] Iteration   1: 299772.512 ops/s
[info]                  ·gc.alloc.rate:      306.283 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 284823.653 ops/s
[info]                  ·gc.alloc.rate:            293.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       1621.775 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3721.435 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 299478.505 ops/s
[info]                  ·gc.alloc.rate:      306.127 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.897 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 296787.486 ops/s
[info]                  ·gc.alloc.rate:            303.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       1608.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3555.235 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 299721.309 ops/s
[info]                  ·gc.alloc.rate:      306.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   296116.693 ±(99.9%) 24779.333 ops/s [Average]
[info]   (min, avg, max) = (284823.653, 296116.693, 299772.512), stdev = 6435.114
[info]   CI (99.9%): [271337.360, 320896.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   303.130 ±(99.9%) 21.262 MB/sec [Average]
[info]   (min, avg, max) = (293.469, 303.130, 306.283), stdev = 5.522
[info]   CI (99.9%): [281.868, 324.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1610.935 ±(99.9%) 23.380 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1610.935, 1621.775), stdev = 6.072
[info]   CI (99.9%): [1587.555, 1634.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.914 ±(99.9%) 1417.911 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.914, 673.414), stdev = 368.227
[info]   CI (99.9%): [≈ 0, 1686.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1455.334 ±(99.9%) 7676.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1455.334, 3721.435), stdev = 1993.664
[info]   CI (99.9%): [≈ 0, 9132.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 9.000), stdev = 4.930
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 777822.018 ops/s
[info] # Warmup Iteration   2: 974645.981 ops/s
[info] # Warmup Iteration   3: 1038203.305 ops/s
[info] # Warmup Iteration   4: 1026331.632 ops/s
[info] # Warmup Iteration   5: 1035744.807 ops/s
[info] Iteration   1: 1022718.611 ops/s
[info]                  ·gc.alloc.rate:            354.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       545.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1037.447 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1035172.604 ops/s
[info]                  ·gc.alloc.rate:      370.398 MB/sec
[info]                  ·gc.alloc.rate.norm: 563.086 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1018095.402 ops/s
[info]                  ·gc.alloc.rate:            353.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       546.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1042.130 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1043621.942 ops/s
[info]                  ·gc.alloc.rate:      360.801 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.184 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1041784.642 ops/s
[info]                  ·gc.alloc.rate:            360.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1018.382 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1032278.640 ±(99.9%) 43902.744 ops/s [Average]
[info]   (min, avg, max) = (1018095.402, 1032278.640, 1043621.942), stdev = 11401.403
[info]   CI (99.9%): [988375.896, 1076181.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   359.727 ±(99.9%) 26.424 MB/sec [Average]
[info]   (min, avg, max) = (353.215, 359.727, 370.398), stdev = 6.862
[info]   CI (99.9%): [333.303, 386.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   548.517 ±(99.9%) 31.527 B/op [Average]
[info]   (min, avg, max) = (544.000, 548.517, 563.086), stdev = 8.188
[info]   CI (99.9%): [516.990, 580.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.397 ±(99.9%) 1421.513 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.397, 674.049), stdev = 369.163
[info]   CI (99.9%): [≈ 0, 1825.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   619.592 ±(99.9%) 2178.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 619.592, 1042.130), stdev = 565.677
[info]   CI (99.9%): [≈ 0, 2797.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:58:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13638.434 ops/s
[info] # Warmup Iteration   2: 52162.006 ops/s
[info] # Warmup Iteration   3: 55229.874 ops/s
[info] # Warmup Iteration   4: 56083.202 ops/s
[info] # Warmup Iteration   5: 56043.766 ops/s
[info] Iteration   1: 55097.287 ops/s
[info]                  ·gc.alloc.rate:                                  2169.181 MB/sec
[info]                  ·gc.alloc.rate.norm:                             61948.382 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.477 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2716.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77574.341 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                152.218 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 57308.682 ops/s
[info]                  ·gc.alloc.rate:            2232.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       61292.273 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56143.334 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 57385.814 ops/s
[info]                  ·gc.alloc.rate:                                  2234.858 MB/sec
[info]                  ·gc.alloc.rate.norm:                             61288.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56065.084 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 57412.118 ops/s
[info]                  ·gc.alloc.rate:                                  2237.398 MB/sec
[info]                  ·gc.alloc.rate.norm:                             61338.342 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56042.627 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 56877.957 ops/s
[info]                  ·gc.alloc.rate:                                  2216.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             61342.930 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.118 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75424.923 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   56816.372 ±(99.9%) 3792.735 ops/s [Average]
[info]   (min, avg, max) = (55097.287, 56816.372, 57412.118), stdev = 984.961
[info]   CI (99.9%): [53023.637, 60609.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2218.034 ±(99.9%) 109.635 MB/sec [Average]
[info]   (min, avg, max) = (2169.181, 2218.034, 2237.398), stdev = 28.472
[info]   CI (99.9%): [2108.399, 2327.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61441.987 ±(99.9%) 1094.413 B/op [Average]
[info]   (min, avg, max) = (61288.008, 61441.987, 61948.382), stdev = 284.216
[info]   CI (99.9%): [60347.574, 62536.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.017), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.197 ±(99.9%) 0.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.477), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2315.014 ±(99.9%) 1426.981 MB/sec [Average]
[info]   (min, avg, max) = (2044.230, 2315.014, 2725.563), stdev = 370.582
[info]   CI (99.9%): [888.033, 3741.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   64250.062 ±(99.9%) 43158.522 B/op [Average]
[info]   (min, avg, max) = (56042.627, 64250.062, 77574.341), stdev = 11208.131
[info]   CI (99.9%): [21091.540, 107408.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.330), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   30.444 ±(99.9%) 262.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.444, 152.218), stdev = 68.074
[info]   CI (99.9%): [≈ 0, 292.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 16.000), stdev = 5.070
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119491.724 ops/s
[info] # Warmup Iteration   2: 223956.001 ops/s
[info] # Warmup Iteration   3: 233607.667 ops/s
[info] # Warmup Iteration   4: 235415.847 ops/s
[info] # Warmup Iteration   5: 234511.001 ops/s
[info] Iteration   1: 236974.165 ops/s
[info]                  ·gc.alloc.rate:            1080.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       7176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4477.180 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 234333.053 ops/s
[info]                  ·gc.alloc.rate:                   1068.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              7176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9050.980 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.474 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 234613.977 ops/s
[info]                  ·gc.alloc.rate:                   1069.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              7176.709 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9040.257 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.469 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 238262.617 ops/s
[info]                  ·gc.alloc.rate:                   1089.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              7199.268 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4453.094 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.601 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 241322.394 ops/s
[info]                  ·gc.alloc.rate:                   1101.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              7183.625 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8836.095 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   237101.241 ±(99.9%) 11065.564 ops/s [Average]
[info]   (min, avg, max) = (234333.053, 237101.241, 241322.394), stdev = 2873.692
[info]   CI (99.9%): [226035.677, 248166.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1081.889 ±(99.9%) 54.017 MB/sec [Average]
[info]   (min, avg, max) = (1068.221, 1081.889, 1101.502), stdev = 14.028
[info]   CI (99.9%): [1027.871, 1135.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7182.321 ±(99.9%) 38.519 B/op [Average]
[info]   (min, avg, max) = (7176.002, 7182.321, 7199.268), stdev = 10.003
[info]   CI (99.9%): [7143.803, 7220.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1079.539 ±(99.9%) 1425.411 MB/sec [Average]
[info]   (min, avg, max) = (673.986, 1079.539, 1354.883), stdev = 370.175
[info]   CI (99.9%): [≈ 0, 2504.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7171.521 ±(99.9%) 9519.090 B/op [Average]
[info]   (min, avg, max) = (4453.094, 7171.521, 9050.980), stdev = 2472.077
[info]   CI (99.9%): [≈ 0, 16690.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 8.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.522 ±(99.9%) 41.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.522, 26.065), stdev = 10.905
[info]   CI (99.9%): [≈ 0, 52.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.400, 16.000), stdev = 4.219
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.857 ops/s
[info] # Warmup Iteration   2: 1079453.396 ops/s
[info] # Warmup Iteration   3: 1129319.043 ops/s
[info] # Warmup Iteration   4: 1154500.789 ops/s
[info] # Warmup Iteration   5: 1166847.302 ops/s
[info] Iteration   1: 1127505.147 ops/s
[info]                  ·gc.alloc.rate:            384.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 936.359 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1100346.210 ops/s
[info]                  ·gc.alloc.rate:      374.986 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.426 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1129564.723 ops/s
[info]                  ·gc.alloc.rate:                   386.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              537.887 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        934.633 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.928 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 1166174.550 ops/s
[info]                  ·gc.alloc.rate:      397.151 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1153833.650 ops/s
[info]                  ·gc.alloc.rate:            392.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.520 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 915.903 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1135484.856 ±(99.9%) 98398.527 ops/s [Average]
[info]   (min, avg, max) = (1100346.210, 1135484.856, 1166174.550), stdev = 25553.785
[info]   CI (99.9%): [1037086.329, 1233883.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   387.052 ±(99.9%) 32.948 MB/sec [Average]
[info]   (min, avg, max) = (374.986, 387.052, 397.151), stdev = 8.556
[info]   CI (99.9%): [354.104, 420.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.475 ±(99.9%) 3.116 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.475, 537.887), stdev = 0.809
[info]   CI (99.9%): [533.360, 539.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.660 ±(99.9%) 1415.407 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.660, 671.520), stdev = 367.577
[info]   CI (99.9%): [≈ 0, 1818.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   557.379 ±(99.9%) 1959.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 557.379, 936.359), stdev = 508.878
[info]   CI (99.9%): [≈ 0, 2516.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.186 ±(99.9%) 1.598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.186, 0.928), stdev = 0.415
[info]   CI (99.9%): [≈ 0, 1.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 11.000), stdev = 5.675
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 380762.241 ops/s
[info] # Warmup Iteration   2: 898152.233 ops/s
[info] # Warmup Iteration   3: 858223.480 ops/s
[info] # Warmup Iteration   4: 916116.131 ops/s
[info] # Warmup Iteration   5: 906860.480 ops/s
[info] Iteration   1: 905701.137 ops/s
[info]                  ·gc.alloc.rate:                   530.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              922.355 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1169.138 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 906418.764 ops/s
[info]                  ·gc.alloc.rate:            529.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1169.368 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 916036.998 ops/s
[info]                  ·gc.alloc.rate:      535.427 MB/sec
[info]                  ·gc.alloc.rate.norm: 920.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 900356.529 ops/s
[info]                  ·gc.alloc.rate:            527.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       922.804 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1177.203 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 908719.239 ops/s
[info]                  ·gc.alloc.rate:            531.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.295 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.512 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1166.432 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   907446.533 ±(99.9%) 21934.035 ops/s [Average]
[info]   (min, avg, max) = (900356.529, 907446.533, 916036.998), stdev = 5696.199
[info]   CI (99.9%): [885512.498, 929380.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   531.095 ±(99.9%) 10.654 MB/sec [Average]
[info]   (min, avg, max) = (527.879, 531.095, 535.427), stdev = 2.767
[info]   CI (99.9%): [520.442, 541.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   921.091 ±(99.9%) 5.289 B/op [Average]
[info]   (min, avg, max) = (920.000, 921.091, 922.804), stdev = 1.373
[info]   CI (99.9%): [915.803, 926.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.674 ±(99.9%) 1159.537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.674, 673.562), stdev = 301.128
[info]   CI (99.9%): [≈ 0, 1698.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   936.428 ±(99.9%) 2015.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 936.428, 1177.203), stdev = 523.495
[info]   CI (99.9%): [≈ 0, 2952.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.232 ±(99.9%) 1.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.232, 1.158), stdev = 0.518
[info]   CI (99.9%): [≈ 0, 2.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.200, 9.000), stdev = 4.025
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:57:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1350031.172 ops/s
[info] # Warmup Iteration   2: 1731633.843 ops/s
[info] # Warmup Iteration   3: 1858941.932 ops/s
[info] # Warmup Iteration   4: 1876587.969 ops/s
[info] # Warmup Iteration   5: 1868404.715 ops/s
[info] Iteration   1: 1871703.893 ops/s
[info]                  ·gc.alloc.rate:            637.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 566.884 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1870202.363 ops/s
[info]                  ·gc.alloc.rate:            638.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       537.670 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 567.329 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1871550.955 ops/s
[info]                  ·gc.alloc.rate:            637.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 566.930 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1874729.611 ops/s
[info]                  ·gc.alloc.rate:            638.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 565.957 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 1868980.041 ops/s
[info]                  ·gc.alloc.rate:            637.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       537.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 567.680 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1871433.373 ±(99.9%) 8278.082 ops/s [Average]
[info]   (min, avg, max) = (1868980.041, 1871433.373, 1874729.611), stdev = 2149.792
[info]   CI (99.9%): [1863155.291, 1879711.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   637.933 ±(99.9%) 2.615 MB/sec [Average]
[info]   (min, avg, max) = (637.320, 637.933, 638.891), stdev = 0.679
[info]   CI (99.9%): [635.319, 640.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.542 ±(99.9%) 2.982 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.542, 537.670), stdev = 0.774
[info]   CI (99.9%): [533.560, 539.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.095 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (674.056, 674.095, 674.134), stdev = 0.031
[info]   CI (99.9%): [673.978, 674.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   566.956 ±(99.9%) 2.486 B/op [Average]
[info]   (min, avg, max) = (565.957, 566.956, 567.680), stdev = 0.646
[info]   CI (99.9%): [564.470, 569.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1273985.951 ops/s
[info] # Warmup Iteration   2: 1934143.644 ops/s
[info] # Warmup Iteration   3: 1989012.943 ops/s
[info] # Warmup Iteration   4: 1985082.209 ops/s
[info] # Warmup Iteration   5: 1986601.199 ops/s
[info] Iteration   1: 1810930.957 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1982292.342 ops/s
[info]                  ·gc.alloc.rate:      0.872 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.692 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1990428.204 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1990013.481 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1987364.168 ops/s
[info]                  ·gc.alloc.rate:      0.294 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.232 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1952205.830 ±(99.9%) 304360.856 ops/s [Average]
[info]   (min, avg, max) = (1810930.957, 1952205.830, 1990428.204), stdev = 79041.548
[info]   CI (99.9%): [1647844.974, 2256566.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.233 ±(99.9%) 1.459 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.233, 0.872), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.185 ±(99.9%) 1.158 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.185, 0.692), stdev = 0.301
[info]   CI (99.9%): [≈ 0, 1.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13175.750 ops/s
[info] # Warmup Iteration   2: 36232.840 ops/s
[info] # Warmup Iteration   3: 38026.585 ops/s
[info] # Warmup Iteration   4: 38687.058 ops/s
[info] # Warmup Iteration   5: 38313.122 ops/s
[info] Iteration   1: 38371.750 ops/s
[info]                  ·gc.alloc.rate:                   1785.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              73240.819 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2022.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82980.048 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 191.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 39167.441 ops/s
[info]                  ·gc.alloc.rate:                   1822.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              73235.360 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54604.969 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 133.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 39248.356 ops/s
[info]                  ·gc.alloc.rate:                                  1826.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73237.671 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.671 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81978.850 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 39301.036 ops/s
[info]                  ·gc.alloc.rate:            1828.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       73232.179 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81864.150 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 39351.134 ops/s
[info]                  ·gc.alloc.rate:            1830.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       73235.532 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54508.156 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   39087.943 ±(99.9%) 1563.739 ops/s [Average]
[info]   (min, avg, max) = (38371.750, 39087.943, 39351.134), stdev = 406.098
[info]   CI (99.9%): [37524.204, 40651.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1818.769 ±(99.9%) 72.906 MB/sec [Average]
[info]   (min, avg, max) = (1785.328, 1818.769, 1830.875), stdev = 18.933
[info]   CI (99.9%): [1745.863, 1891.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   73236.312 ±(99.9%) 12.291 B/op [Average]
[info]   (min, avg, max) = (73232.179, 73236.312, 73240.819), stdev = 3.192
[info]   CI (99.9%): [73224.022, 73248.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.134 ±(99.9%) 1.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.671), stdev = 0.300
[info]   CI (99.9%): [≈ 0, 1.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1766.587 ±(99.9%) 1426.686 MB/sec [Average]
[info]   (min, avg, max) = (1358.975, 1766.587, 2044.629), stdev = 370.506
[info]   CI (99.9%): [339.901, 3193.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71187.234 ±(99.9%) 58483.193 B/op [Average]
[info]   (min, avg, max) = (54508.156, 71187.234, 82980.048), stdev = 15187.899
[info]   CI (99.9%): [12704.042, 129670.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.662), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   65.019 ±(99.9%) 351.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65.019, 191.261), stdev = 91.317
[info]   CI (99.9%): [≈ 0, 416.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 24.000), stdev = 8.758
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21585.825 ops/s
[info] # Warmup Iteration   2: 36132.288 ops/s
[info] # Warmup Iteration   3: 37225.586 ops/s
[info] # Warmup Iteration   4: 36645.195 ops/s
[info] # Warmup Iteration   5: 37755.786 ops/s
[info] Iteration   1: 38025.023 ops/s
[info]                  ·gc.alloc.rate:            710.302 MB/sec
[info]                  ·gc.alloc.rate.norm:       29405.517 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27874.167 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 38078.060 ops/s
[info]                  ·gc.alloc.rate:                   710.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              29384.937 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27835.377 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.533 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 38141.934 ops/s
[info]                  ·gc.alloc.rate:            710.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       29337.493 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27815.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 38093.948 ops/s
[info]                  ·gc.alloc.rate:                   710.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              29336.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27822.958 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.520 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 38289.462 ops/s
[info]                  ·gc.alloc.rate:            713.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       29336.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27709.393 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   38125.685 ±(99.9%) 387.441 ops/s [Average]
[info]   (min, avg, max) = (38025.023, 38125.685, 38289.462), stdev = 100.617
[info]   CI (99.9%): [37738.245, 38513.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   711.129 ±(99.9%) 5.568 MB/sec [Average]
[info]   (min, avg, max) = (710.008, 711.129, 713.630), stdev = 1.446
[info]   CI (99.9%): [705.562, 716.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29359.994 ±(99.9%) 127.002 B/op [Average]
[info]   (min, avg, max) = (29336.011, 29359.994, 29405.517), stdev = 32.982
[info]   CI (99.9%): [29232.992, 29486.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   673.620 ±(99.9%) 1.558 MB/sec [Average]
[info]   (min, avg, max) = (673.279, 673.620, 674.062), stdev = 0.405
[info]   CI (99.9%): [672.063, 675.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27811.466 ±(99.9%) 236.352 B/op [Average]
[info]   (min, avg, max) = (27709.393, 27811.466, 27874.167), stdev = 61.380
[info]   CI (99.9%): [27575.114, 28047.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   11.011 ±(99.9%) 58.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.011, 27.533), stdev = 15.077
[info]   CI (99.9%): [≈ 0, 69.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14358.496 ops/s
[info] # Warmup Iteration   2: 58070.432 ops/s
[info] # Warmup Iteration   3: 58265.134 ops/s
[info] # Warmup Iteration   4: 58529.333 ops/s
[info] # Warmup Iteration   5: 58596.351 ops/s
[info] Iteration   1: 58610.778 ops/s
[info]                  ·gc.alloc.rate:            615.151 MB/sec
[info]                  ·gc.alloc.rate.norm:       16520.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18085.065 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 59198.459 ops/s
[info]                  ·gc.alloc.rate:      621.647 MB/sec
[info]                  ·gc.alloc.rate.norm: 16528.989 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 58302.254 ops/s
[info]                  ·gc.alloc.rate:            611.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       16520.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18180.280 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 58563.370 ops/s
[info]                  ·gc.alloc.rate:            615.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       16531.570 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18099.268 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 58596.536 ops/s
[info]                  ·gc.alloc.rate:            616.150 MB/sec
[info]                  ·gc.alloc.rate.norm:       16550.272 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18071.493 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   58654.280 ±(99.9%) 1267.711 ops/s [Average]
[info]   (min, avg, max) = (58302.254, 58654.280, 59198.459), stdev = 329.221
[info]   CI (99.9%): [57386.568, 59921.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   615.994 ±(99.9%) 13.629 MB/sec [Average]
[info]   (min, avg, max) = (611.917, 615.994, 621.647), stdev = 3.539
[info]   CI (99.9%): [602.365, 629.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16530.194 ±(99.9%) 47.609 B/op [Average]
[info]   (min, avg, max) = (16520.009, 16530.194, 16550.272), stdev = 12.364
[info]   CI (99.9%): [16482.586, 16577.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.611 ±(99.9%) 1159.402 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.611, 673.434), stdev = 301.093
[info]   CI (99.9%): [≈ 0, 1698.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14487.221 ±(99.9%) 31185.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14487.221, 18180.280), stdev = 8098.713
[info]   CI (99.9%): [≈ 0, 45672.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.400, 10.000), stdev = 4.159
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140008.733 ops/s
[info] # Warmup Iteration   2: 189165.827 ops/s
[info] # Warmup Iteration   3: 190538.669 ops/s
[info] # Warmup Iteration   4: 193910.389 ops/s
[info] # Warmup Iteration   5: 194735.777 ops/s
[info] Iteration   1: 194232.115 ops/s
[info]                  ·gc.alloc.rate:            634.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       5141.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5462.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 194268.423 ops/s
[info]                  ·gc.alloc.rate:            632.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       5121.811 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5461.446 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 193177.733 ops/s
[info]                  ·gc.alloc.rate:            628.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       5122.462 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.248 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5492.029 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 190571.289 ops/s
[info]                  ·gc.alloc.rate:            619.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5567.057 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 191751.468 ops/s
[info]                  ·gc.alloc.rate:            623.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5533.123 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   192800.206 ±(99.9%) 6213.892 ops/s [Average]
[info]   (min, avg, max) = (190571.289, 192800.206, 194268.423), stdev = 1613.728
[info]   CI (99.9%): [186586.313, 199014.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   627.856 ±(99.9%) 23.021 MB/sec [Average]
[info]   (min, avg, max) = (619.895, 627.856, 634.446), stdev = 5.978
[info]   CI (99.9%): [604.835, 650.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5125.057 ±(99.9%) 34.593 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5125.057, 5141.009), stdev = 8.984
[info]   CI (99.9%): [5090.464, 5159.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.142 ±(99.9%) 0.321 MB/sec [Average]
[info]   (min, avg, max) = (674.021, 674.142, 674.248), stdev = 0.083
[info]   CI (99.9%): [673.820, 674.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5503.228 ±(99.9%) 177.494 B/op [Average]
[info]   (min, avg, max) = (5461.446, 5503.228, 5567.057), stdev = 46.095
[info]   CI (99.9%): [5325.734, 5680.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6400.533 ops/s
[info] # Warmup Iteration   2: 19660.820 ops/s
[info] # Warmup Iteration   3: 21360.909 ops/s
[info] # Warmup Iteration   4: 21007.302 ops/s
[info] # Warmup Iteration   5: 21383.599 ops/s
[info] Iteration   1: 20257.564 ops/s
[info]                  ·gc.alloc.rate:            1043.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       81038.435 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 104541.904 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 21253.491 ops/s
[info]                  ·gc.alloc.rate:            1053.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       78032.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99648.265 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 21128.728 ops/s
[info]                  ·gc.alloc.rate:            1047.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       78047.988 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50116.494 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 21280.200 ops/s
[info]                  ·gc.alloc.rate:                   1054.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              78032.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99521.849 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 246.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 21558.460 ops/s
[info]                  ·gc.alloc.rate:                   1068.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              78032.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49357.911 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 97.257 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   21095.689 ±(99.9%) 1902.709 ops/s [Average]
[info]   (min, avg, max) = (20257.564, 21095.689, 21558.460), stdev = 494.127
[info]   CI (99.9%): [19192.980, 22998.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1053.705 ±(99.9%) 37.201 MB/sec [Average]
[info]   (min, avg, max) = (1043.279, 1053.705, 1068.775), stdev = 9.661
[info]   CI (99.9%): [1016.504, 1090.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78636.497 ±(99.9%) 5170.421 B/op [Average]
[info]   (min, avg, max) = (78032.019, 78636.497, 81038.435), stdev = 1342.742
[info]   CI (99.9%): [73466.077, 83806.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1077.174 ±(99.9%) 1415.819 MB/sec [Average]
[info]   (min, avg, max) = (672.761, 1077.174, 1345.860), stdev = 367.684
[info]   CI (99.9%): [≈ 0, 2492.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80637.285 ±(99.9%) 108902.324 B/op [Average]
[info]   (min, avg, max) = (49357.911, 80637.285, 104541.904), stdev = 28281.588
[info]   CI (99.9%): [≈ 0, 189539.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   68.720 ±(99.9%) 415.312 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.720, 246.341), stdev = 107.855
[info]   CI (99.9%): [≈ 0, 484.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 14.000, 19.000), stdev = 6.442
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:55:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23943.131 ops/s
[info] # Warmup Iteration   2: 43681.146 ops/s
[info] # Warmup Iteration   3: 43858.617 ops/s
[info] # Warmup Iteration   4: 45288.574 ops/s
[info] # Warmup Iteration   5: 44883.380 ops/s
[info] Iteration   1: 44453.082 ops/s
[info]                  ·gc.alloc.rate:            658.126 MB/sec
[info]                  ·gc.alloc.rate.norm:       23304.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23867.185 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 45369.040 ops/s
[info]                  ·gc.alloc.rate:            671.776 MB/sec
[info]                  ·gc.alloc.rate.norm:       23304.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23384.876 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 45251.012 ops/s
[info]                  ·gc.alloc.rate:            671.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       23354.355 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23446.880 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 45221.638 ops/s
[info]                  ·gc.alloc.rate:            669.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       23307.679 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23461.395 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 45124.608 ops/s
[info]                  ·gc.alloc.rate:                   668.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              23304.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23488.586 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   45083.876 ±(99.9%) 1398.732 ops/s [Average]
[info]   (min, avg, max) = (44453.082, 45083.876, 45369.040), stdev = 363.246
[info]   CI (99.9%): [43685.144, 46482.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   667.914 ±(99.9%) 21.838 MB/sec [Average]
[info]   (min, avg, max) = (658.126, 667.914, 671.776), stdev = 5.671
[info]   CI (99.9%): [646.076, 689.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23314.812 ±(99.9%) 85.338 B/op [Average]
[info]   (min, avg, max) = (23304.009, 23314.812, 23354.355), stdev = 22.162
[info]   CI (99.9%): [23229.474, 23400.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   674.036 ±(99.9%) 1.266 MB/sec [Average]
[info]   (min, avg, max) = (673.496, 674.036, 674.382), stdev = 0.329
[info]   CI (99.9%): [672.770, 675.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   23529.785 ±(99.9%) 740.899 B/op [Average]
[info]   (min, avg, max) = (23384.876, 23529.785, 23867.185), stdev = 192.409
[info]   CI (99.9%): [22788.886, 24270.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.647 ±(99.9%) 40.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.647, 23.233), stdev = 10.390
[info]   CI (99.9%): [≈ 0, 44.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42721.039 ops/s
[info] # Warmup Iteration   2: 94428.958 ops/s
[info] # Warmup Iteration   3: 95409.645 ops/s
[info] # Warmup Iteration   4: 97475.504 ops/s
[info] # Warmup Iteration   5: 96684.418 ops/s
[info] Iteration   1: 94723.541 ops/s
[info]                  ·gc.alloc.rate:            1302.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       21649.312 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22380.070 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 96923.087 ops/s
[info]                  ·gc.alloc.rate:            1330.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       21613.265 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21849.840 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 97349.745 ops/s
[info]                  ·gc.alloc.rate:                   1334.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              21577.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21808.537 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 75.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 97946.410 ops/s
[info]                  ·gc.alloc.rate:                   1341.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21825.041 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 64.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 98181.250 ops/s
[info]                  ·gc.alloc.rate:                                  1344.820 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21559.984 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21846.891 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   97024.806 ±(99.9%) 5307.212 ops/s [Average]
[info]   (min, avg, max) = (94723.541, 97024.806, 98181.250), stdev = 1378.266
[info]   CI (99.9%): [91717.594, 102332.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1330.898 ±(99.9%) 64.419 MB/sec [Average]
[info]   (min, avg, max) = (1302.652, 1330.898, 1344.820), stdev = 16.729
[info]   CI (99.9%): [1266.479, 1395.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21591.975 ±(99.9%) 149.144 B/op [Average]
[info]   (min, avg, max) = (21559.984, 21591.975, 21649.312), stdev = 38.732
[info]   CI (99.9%): [21442.830, 21741.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1352.343 ±(99.9%) 29.410 MB/sec [Average]
[info]   (min, avg, max) = (1345.460, 1352.343, 1362.716), stdev = 7.638
[info]   CI (99.9%): [1322.933, 1381.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21942.076 ±(99.9%) 945.049 B/op [Average]
[info]   (min, avg, max) = (21808.537, 21942.076, 22380.070), stdev = 245.426
[info]   CI (99.9%): [20997.027, 22887.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   27.922 ±(99.9%) 148.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.922, 75.388), stdev = 38.437
[info]   CI (99.9%): [≈ 0, 175.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.800, 19.000), stdev = 6.834
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146354.036 ops/s
[info] # Warmup Iteration   2: 170091.250 ops/s
[info] # Warmup Iteration   3: 176685.912 ops/s
[info] # Warmup Iteration   4: 175705.840 ops/s
[info] # Warmup Iteration   5: 176875.669 ops/s
[info] Iteration   1: 176214.729 ops/s
[info]                  ·gc.alloc.rate:            565.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       5052.950 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6021.238 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 178645.400 ops/s
[info]                  ·gc.alloc.rate:      569.241 MB/sec
[info]                  ·gc.alloc.rate.norm: 5016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 175067.278 ops/s
[info]                  ·gc.alloc.rate:            564.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       5074.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6060.683 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 177802.518 ops/s
[info]                  ·gc.alloc.rate:            566.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5967.199 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 176885.436 ops/s
[info]                  ·gc.alloc.rate:            563.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5998.129 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   176923.072 ±(99.9%) 5338.032 ops/s [Average]
[info]   (min, avg, max) = (175067.278, 176923.072, 178645.400), stdev = 1386.270
[info]   CI (99.9%): [171585.041, 182261.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   565.978 ±(99.9%) 8.464 MB/sec [Average]
[info]   (min, avg, max) = (563.625, 565.978, 569.241), stdev = 2.198
[info]   CI (99.9%): [557.514, 574.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5035.034 ±(99.9%) 104.443 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5035.034, 5074.215), stdev = 27.124
[info]   CI (99.9%): [4930.591, 5139.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.328 ±(99.9%) 1160.944 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.328, 674.317), stdev = 301.493
[info]   CI (99.9%): [≈ 0, 1700.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4809.450 ±(99.9%) 10353.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4809.450, 6060.683), stdev = 2688.781
[info]   CI (99.9%): [≈ 0, 15162.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.400, 8.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143401.549 ops/s
[info] # Warmup Iteration   2: 184186.101 ops/s
[info] # Warmup Iteration   3: 191946.354 ops/s
[info] # Warmup Iteration   4: 191724.267 ops/s
[info] # Warmup Iteration   5: 191853.680 ops/s
[info] Iteration   1: 190064.349 ops/s
[info]                  ·gc.alloc.rate:      2.974 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.631 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 191839.724 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 191849.608 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 191938.335 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.398 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 191986.204 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   191535.644 ±(99.9%) 3175.854 ops/s [Average]
[info]   (min, avg, max) = (190064.349, 191535.644, 191986.204), stdev = 824.759
[info]   CI (99.9%): [188359.789, 194711.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.629 ±(99.9%) 5.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.629, 2.974), stdev = 1.313
[info]   CI (99.9%): [≈ 0, 5.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5.207 ±(99.9%) 41.876 B/op [Average]
[info]   (min, avg, max) = (0.002, 5.207, 24.631), stdev = 10.875
[info]   CI (99.9%): [≈ 0, 47.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:54:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40160.019 ops/s
[info] # Warmup Iteration   2: 62800.475 ops/s
[info] # Warmup Iteration   3: 66361.858 ops/s
[info] # Warmup Iteration   4: 65745.942 ops/s
[info] # Warmup Iteration   5: 65579.706 ops/s
[info] Iteration   1: 65667.679 ops/s
[info]                  ·gc.alloc.rate:            974.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       23351.455 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16140.781 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 66369.296 ops/s
[info]                  ·gc.alloc.rate:                   981.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              23279.976 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31924.377 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 66886.643 ops/s
[info]                  ·gc.alloc.rate:            989.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       23280.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15846.667 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 66259.284 ops/s
[info]                  ·gc.alloc.rate:                   981.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              23319.329 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31977.367 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   5: 67065.962 ops/s
[info]                  ·gc.alloc.rate:                   992.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              23280.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15804.143 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 78.161 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   66449.773 ±(99.9%) 2130.923 ops/s [Average]
[info]   (min, avg, max) = (65667.679, 66449.773, 67065.962), stdev = 553.394
[info]   CI (99.9%): [64318.850, 68580.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   983.751 ±(99.9%) 26.938 MB/sec [Average]
[info]   (min, avg, max) = (974.357, 983.751, 992.009), stdev = 6.996
[info]   CI (99.9%): [956.813, 1010.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23302.155 ±(99.9%) 124.752 B/op [Average]
[info]   (min, avg, max) = (23279.976, 23302.155, 23351.455), stdev = 32.398
[info]   CI (99.9%): [23177.403, 23426.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   942.479 ±(99.9%) 1418.606 MB/sec [Average]
[info]   (min, avg, max) = (673.362, 942.479, 1346.065), stdev = 368.408
[info]   CI (99.9%): [≈ 0, 2361.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   22338.667 ±(99.9%) 33792.019 B/op [Average]
[info]   (min, avg, max) = (15804.143, 22338.667, 31977.367), stdev = 8775.680
[info]   CI (99.9%): [≈ 0, 56130.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 5.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.331), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   21.956 ±(99.9%) 124.756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.956, 78.161), stdev = 32.399
[info]   CI (99.9%): [≈ 0, 146.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 12.200, 18.000), stdev = 4.868
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7912.798 ops/s
[info] # Warmup Iteration   2: 19717.584 ops/s
[info] # Warmup Iteration   3: 20298.052 ops/s
[info] # Warmup Iteration   4: 20378.023 ops/s
[info] # Warmup Iteration   5: 20243.696 ops/s
[info] Iteration   1: 20106.586 ops/s
[info]                  ·gc.alloc.rate:            1169.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       91504.405 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105431.162 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 19984.844 ops/s
[info]                  ·gc.alloc.rate:                   1152.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              90704.645 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        105778.321 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 20506.026 ops/s
[info]                  ·gc.alloc.rate:            1174.355 MB/sec
[info]                  ·gc.alloc.rate.norm:       90144.123 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51738.611 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 19989.967 ops/s
[info]                  ·gc.alloc.rate:                   1144.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              90147.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106357.514 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 314.667 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 20449.855 ops/s
[info]                  ·gc.alloc.rate:                   1174.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              90422.492 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        104580.769 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 256.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   20207.456 ±(99.9%) 972.113 ops/s [Average]
[info]   (min, avg, max) = (19984.844, 20207.456, 20506.026), stdev = 252.455
[info]   CI (99.9%): [19235.342, 21179.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1163.218 ±(99.9%) 52.180 MB/sec [Average]
[info]   (min, avg, max) = (1144.916, 1163.218, 1174.812), stdev = 13.551
[info]   CI (99.9%): [1111.038, 1215.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   90584.562 ±(99.9%) 2171.535 B/op [Average]
[info]   (min, avg, max) = (90144.123, 90584.562, 91504.405), stdev = 563.941
[info]   CI (99.9%): [88413.027, 92756.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1215.024 ±(99.9%) 1164.724 MB/sec [Average]
[info]   (min, avg, max) = (674.026, 1215.024, 1358.763), stdev = 302.475
[info]   CI (99.9%): [50.300, 2379.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   94777.275 ±(99.9%) 92677.115 B/op [Average]
[info]   (min, avg, max) = (51738.611, 94777.275, 106357.514), stdev = 24067.952
[info]   CI (99.9%): [2100.160, 187454.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 7.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 3.996), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   124.661 ±(99.9%) 576.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 124.661, 314.667), stdev = 149.794
[info]   CI (99.9%): [≈ 0, 701.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.200, 17.000), stdev = 4.919
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5782.107 ops/s
[info] # Warmup Iteration   2: 18840.974 ops/s
[info] # Warmup Iteration   3: 19506.606 ops/s
[info] # Warmup Iteration   4: 19634.264 ops/s
[info] # Warmup Iteration   5: 19751.791 ops/s
[info] Iteration   1: 19547.503 ops/s
[info]                  ·gc.alloc.rate:                   893.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              71913.847 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        108392.005 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 19745.802 ops/s
[info]                  ·gc.alloc.rate:            902.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       71940.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53676.473 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 19815.348 ops/s
[info]                  ·gc.alloc.rate:            903.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       71760.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53433.994 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 20101.490 ops/s
[info]                  ·gc.alloc.rate:                   917.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              71795.190 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        105353.072 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 20317.704 ops/s
[info]                  ·gc.alloc.rate:            926.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       71760.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52168.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   19905.569 ±(99.9%) 1171.312 ops/s [Average]
[info]   (min, avg, max) = (19547.503, 19905.569, 20317.704), stdev = 304.186
[info]   CI (99.9%): [18734.257, 21076.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   908.524 ±(99.9%) 50.904 MB/sec [Average]
[info]   (min, avg, max) = (893.010, 908.524, 926.560), stdev = 13.220
[info]   CI (99.9%): [857.620, 959.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71833.824 ±(99.9%) 333.833 B/op [Average]
[info]   (min, avg, max) = (71760.020, 71833.824, 71940.019), stdev = 86.695
[info]   CI (99.9%): [71499.991, 72167.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.278 ±(99.9%) 1418.485 MB/sec [Average]
[info]   (min, avg, max) = (672.669, 942.278, 1345.987), stdev = 368.376
[info]   CI (99.9%): [≈ 0, 2360.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   74604.752 ±(99.9%) 113522.666 B/op [Average]
[info]   (min, avg, max) = (52168.217, 74604.752, 108392.005), stdev = 29481.476
[info]   CI (99.9%): [≈ 0, 188127.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.158 ±(99.9%) 111.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.158, 53.633), stdev = 28.976
[info]   CI (99.9%): [≈ 0, 132.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.800, 19.000), stdev = 5.215
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366622.627 ops/s
[info] # Warmup Iteration   2: 462227.840 ops/s
[info] # Warmup Iteration   3: 462206.190 ops/s
[info] # Warmup Iteration   4: 473908.578 ops/s
[info] # Warmup Iteration   5: 483051.701 ops/s
[info] Iteration   1: 475411.080 ops/s
[info]                  ·gc.alloc.rate:            1245.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       4122.794 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4463.424 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 477401.126 ops/s
[info]                  ·gc.alloc.rate:            1242.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4444.840 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 476106.546 ops/s
[info]                  ·gc.alloc.rate:                   1239.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.352 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.191 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4456.928 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 480030.090 ops/s
[info]                  ·gc.alloc.rate:                   1249.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              4098.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4444.590 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 483775.824 ops/s
[info]                  ·gc.alloc.rate:                                  1259.211 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4431.815 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.167 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   478544.933 ±(99.9%) 13149.114 ops/s [Average]
[info]   (min, avg, max) = (475411.080, 478544.933, 483775.824), stdev = 3414.783
[info]   CI (99.9%): [465395.820, 491694.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1247.146 ±(99.9%) 29.993 MB/sec [Average]
[info]   (min, avg, max) = (1239.119, 1247.146, 1259.211), stdev = 7.789
[info]   CI (99.9%): [1217.152, 1277.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4101.882 ±(99.9%) 45.132 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4101.882, 4122.794), stdev = 11.721
[info]   CI (99.9%): [4056.750, 4147.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.102), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.331), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 0.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1352.469 ±(99.9%) 24.696 MB/sec [Average]
[info]   (min, avg, max) = (1347.994, 1352.469, 1362.448), stdev = 6.413
[info]   CI (99.9%): [1327.773, 1377.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4448.319 ±(99.9%) 47.187 B/op [Average]
[info]   (min, avg, max) = (4431.815, 4448.319, 4463.424), stdev = 12.254
[info]   CI (99.9%): [4401.132, 4495.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 6.639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.331), stdev = 1.724
[info]   CI (99.9%): [≈ 0, 8.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.820 ±(99.9%) 21.870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.820, 11.010), stdev = 5.680
[info]   CI (99.9%): [≈ 0, 26.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.400, 16.000), stdev = 5.413
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:53:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1727.863 ops/s
[info] # Warmup Iteration   2: 15641.267 ops/s
[info] # Warmup Iteration   3: 16685.488 ops/s
[info] # Warmup Iteration   4: 16320.091 ops/s
[info] # Warmup Iteration   5: 16814.142 ops/s
[info] Iteration   1: 16456.820 ops/s
[info]                  ·gc.alloc.rate:            1294.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       123742.323 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 128683.081 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 16381.428 ops/s
[info]                  ·gc.alloc.rate:            1287.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       123712.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129272.110 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   3: 16363.064 ops/s
[info]                  ·gc.alloc.rate:                   1299.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              125022.754 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        129678.469 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 384.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 16987.544 ops/s
[info]                  ·gc.alloc.rate:                   1336.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              123833.760 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        125710.630 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 431.995 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 17077.531 ops/s
[info]                  ·gc.alloc.rate:            1342.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       123712.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 125608.109 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   16653.278 ±(99.9%) 1345.587 ops/s [Average]
[info]   (min, avg, max) = (16363.064, 16653.278, 17077.531), stdev = 349.445
[info]   CI (99.9%): [15307.690, 17998.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1312.061 ±(99.9%) 97.815 MB/sec [Average]
[info]   (min, avg, max) = (1287.681, 1312.061, 1342.189), stdev = 25.402
[info]   CI (99.9%): [1214.246, 1409.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   124004.577 ±(99.9%) 2200.108 B/op [Average]
[info]   (min, avg, max) = (123712.024, 124004.577, 125022.754), stdev = 571.361
[info]   CI (99.9%): [121804.469, 126204.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1351.815 ±(99.9%) 29.508 MB/sec [Average]
[info]   (min, avg, max) = (1345.554, 1351.815, 1362.760), stdev = 7.663
[info]   CI (99.9%): [1322.307, 1381.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   127790.480 ±(99.9%) 7615.370 B/op [Average]
[info]   (min, avg, max) = (125608.109, 127790.480, 129678.469), stdev = 1977.687
[info]   CI (99.9%): [120175.110, 135405.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   163.284 ±(99.9%) 863.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 163.284, 431.995), stdev = 224.217
[info]   CI (99.9%): [≈ 0, 1026.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 14.000, 20.000), stdev = 6.519
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32111.103 ops/s
[info] # Warmup Iteration   2: 66549.241 ops/s
[info] # Warmup Iteration   3: 68244.535 ops/s
[info] # Warmup Iteration   4: 68729.261 ops/s
[info] # Warmup Iteration   5: 69422.361 ops/s
[info] Iteration   1: 69108.229 ops/s
[info]                  ·gc.alloc.rate:            1326.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       30217.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30674.489 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 68761.777 ops/s
[info]                  ·gc.alloc.rate:            1322.601 MB/sec
[info]                  ·gc.alloc.rate.norm:       30268.718 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30829.260 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 69670.380 ops/s
[info]                  ·gc.alloc.rate:                   1337.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              30219.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30503.208 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 105.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 70039.800 ops/s
[info]                  ·gc.alloc.rate:                   1344.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              30217.838 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30535.817 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 74.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 70227.404 ops/s
[info]                  ·gc.alloc.rate:                                  1348.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30216.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30544.092 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   69561.518 ±(99.9%) 2380.765 ops/s [Average]
[info]   (min, avg, max) = (68761.777, 69561.518, 70227.404), stdev = 618.277
[info]   CI (99.9%): [67180.754, 71942.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1335.936 ±(99.9%) 42.626 MB/sec [Average]
[info]   (min, avg, max) = (1322.601, 1335.936, 1348.128), stdev = 11.070
[info]   CI (99.9%): [1293.310, 1378.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   30227.777 ±(99.9%) 88.241 B/op [Average]
[info]   (min, avg, max) = (30216.006, 30227.777, 30268.718), stdev = 22.916
[info]   CI (99.9%): [30139.535, 30316.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1353.123 ±(99.9%) 27.927 MB/sec [Average]
[info]   (min, avg, max) = (1346.796, 1353.123, 1362.766), stdev = 7.253
[info]   CI (99.9%): [1325.196, 1381.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   30617.373 ±(99.9%) 520.953 B/op [Average]
[info]   (min, avg, max) = (30503.208, 30617.373, 30829.260), stdev = 135.290
[info]   CI (99.9%): [30096.421, 31138.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   36.036 ±(99.9%) 194.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.036, 105.339), stdev = 50.509
[info]   CI (99.9%): [≈ 0, 230.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.800, 16.000), stdev = 5.975
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74809.654 ops/s
[info] # Warmup Iteration   2: 143385.647 ops/s
[info] # Warmup Iteration   3: 147492.177 ops/s
[info] # Warmup Iteration   4: 150728.849 ops/s
[info] # Warmup Iteration   5: 154096.619 ops/s
[info] Iteration   1: 153661.882 ops/s
[info]                  ·gc.alloc.rate:                   1164.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              11929.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13788.883 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 153599.292 ops/s
[info]                  ·gc.alloc.rate:                   1164.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              11930.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13794.538 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 155316.702 ops/s
[info]                  ·gc.alloc.rate:            1176.982 MB/sec
[info]                  ·gc.alloc.rate.norm:       11928.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6824.320 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 151836.465 ops/s
[info]                  ·gc.alloc.rate:                   1159.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              12017.613 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13982.026 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 155750.965 ops/s
[info]                  ·gc.alloc.rate:                   1180.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              11931.736 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13724.341 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   154033.061 ±(99.9%) 6011.784 ops/s [Average]
[info]   (min, avg, max) = (151836.465, 154033.061, 155750.965), stdev = 1561.241
[info]   CI (99.9%): [148021.277, 160044.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1169.192 ±(99.9%) 35.066 MB/sec [Average]
[info]   (min, avg, max) = (1159.239, 1169.192, 1180.572), stdev = 9.107
[info]   CI (99.9%): [1134.126, 1204.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11947.327 ±(99.9%) 151.389 B/op [Average]
[info]   (min, avg, max) = (11928.003, 11947.327, 12017.613), stdev = 39.315
[info]   CI (99.9%): [11795.938, 12098.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1214.555 ±(99.9%) 1165.061 MB/sec [Average]
[info]   (min, avg, max) = (673.382, 1214.555, 1357.940), stdev = 302.563
[info]   CI (99.9%): [49.494, 2379.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   12422.822 ±(99.9%) 12056.885 B/op [Average]
[info]   (min, avg, max) = (6824.320, 12422.822, 13982.026), stdev = 3131.135
[info]   CI (99.9%): [365.936, 24479.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.998 ±(99.9%) 8.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.998, 4.662), stdev = 2.158
[info]   CI (99.9%): [≈ 0, 10.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   20.473 ±(99.9%) 85.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.473, 48.333), stdev = 22.161
[info]   CI (99.9%): [≈ 0, 105.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 13.400, 19.000), stdev = 5.683
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 764237.536 ops/s
[info] # Warmup Iteration   2: 1041939.362 ops/s
[info] # Warmup Iteration   3: 1062594.641 ops/s
[info] # Warmup Iteration   4: 1057752.129 ops/s
[info] # Warmup Iteration   5: 1069324.510 ops/s
[info] Iteration   1: 1067296.825 ops/s
[info]                  ·gc.alloc.rate:            885.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       1306.218 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 994.107 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1049025.952 ops/s
[info]                  ·gc.alloc.rate:            874.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       1312.622 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1011.408 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1054376.617 ops/s
[info]                  ·gc.alloc.rate:            873.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.254 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2012.427 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 1054000.564 ops/s
[info]                  ·gc.alloc.rate:            873.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.474 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1006.576 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1056953.009 ops/s
[info]                  ·gc.alloc.rate:            875.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1003.860 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1056330.593 ±(99.9%) 26063.091 ops/s [Average]
[info]   (min, avg, max) = (1049025.952, 1056330.593, 1067296.825), stdev = 6768.502
[info]   CI (99.9%): [1030267.503, 1082393.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   876.726 ±(99.9%) 19.639 MB/sec [Average]
[info]   (min, avg, max) = (873.691, 876.726, 885.730), stdev = 5.100
[info]   CI (99.9%): [857.087, 896.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1306.314 ±(99.9%) 13.988 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1306.314, 1312.622), stdev = 3.633
[info]   CI (99.9%): [1292.326, 1320.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.916 ±(99.9%) 1160.711 MB/sec [Average]
[info]   (min, avg, max) = (674.071, 808.916, 1348.135), stdev = 301.433
[info]   CI (99.9%): [≈ 0, 1969.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1205.676 ±(99.9%) 1736.764 B/op [Average]
[info]   (min, avg, max) = (994.107, 1205.676, 2012.427), stdev = 451.032
[info]   CI (99.9%): [≈ 0, 2942.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.400, 16.000), stdev = 3.715
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 883749.045 ops/s
[info] # Warmup Iteration   2: 1137476.352 ops/s
[info] # Warmup Iteration   3: 1165708.842 ops/s
[info] # Warmup Iteration   4: 1166056.841 ops/s
[info] # Warmup Iteration   5: 1166955.523 ops/s
[info] Iteration   1: 1166337.511 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.230 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1162388.392 ops/s
[info]                  ·gc.alloc.rate:      0.865 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.171 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1167067.910 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1166844.434 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1167246.886 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1165977.027 ±(99.9%) 7835.661 ops/s [Average]
[info]   (min, avg, max) = (1162388.392, 1165977.027, 1167246.886), stdev = 2034.896
[info]   CI (99.9%): [1158141.366, 1173812.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.207 ±(99.9%) 1.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.207, 0.865), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.280 ±(99.9%) 1.956 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.280, 1.171), stdev = 0.508
[info]   CI (99.9%): [≈ 0, 2.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32970.046 ops/s
[info] # Warmup Iteration   2: 111551.957 ops/s
[info] # Warmup Iteration   3: 114534.057 ops/s
[info] # Warmup Iteration   4: 113754.482 ops/s
[info] # Warmup Iteration   5: 114790.981 ops/s
[info] Iteration   1: 114936.823 ops/s
[info]                  ·gc.alloc.rate:            1294.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       17728.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18425.195 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 114955.297 ops/s
[info]                  ·gc.alloc.rate:            1294.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       17729.448 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.572 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18422.470 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 115113.966 ops/s
[info]                  ·gc.alloc.rate:                   1298.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              17748.869 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18441.605 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 116000.385 ops/s
[info]                  ·gc.alloc.rate:                   1306.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              17731.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18419.061 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 54.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 116959.222 ops/s
[info]                  ·gc.alloc.rate:                                  1317.380 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17728.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.369 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18340.556 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   115593.139 ±(99.9%) 3389.459 ops/s [Average]
[info]   (min, avg, max) = (114936.823, 115593.139, 116959.222), stdev = 880.232
[info]   CI (99.9%): [112203.679, 118982.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1302.355 ±(99.9%) 37.417 MB/sec [Average]
[info]   (min, avg, max) = (1294.662, 1302.355, 1317.380), stdev = 9.717
[info]   CI (99.9%): [1264.939, 1339.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17733.071 ±(99.9%) 34.346 B/op [Average]
[info]   (min, avg, max) = (17728.003, 17733.071, 17748.869), stdev = 8.919
[info]   CI (99.9%): [17698.725, 17767.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.074 ±(99.9%) 0.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.369), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 0.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1352.040 ±(99.9%) 29.953 MB/sec [Average]
[info]   (min, avg, max) = (1345.572, 1352.040, 1362.899), stdev = 7.779
[info]   CI (99.9%): [1322.087, 1381.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   18409.777 ±(99.9%) 152.692 B/op [Average]
[info]   (min, avg, max) = (18340.556, 18409.777, 18441.605), stdev = 39.654
[info]   CI (99.9%): [18257.085, 18562.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   23.595 ±(99.9%) 125.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.595, 63.749), stdev = 32.484
[info]   CI (99.9%): [≈ 0, 148.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 13.000, 19.000), stdev = 7.036
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9314.781 ops/s
[info] # Warmup Iteration   2: 26942.534 ops/s
[info] # Warmup Iteration   3: 26066.033 ops/s
[info] # Warmup Iteration   4: 26888.683 ops/s
[info] # Warmup Iteration   5: 26815.378 ops/s
[info] Iteration   1: 27327.397 ops/s
[info]                  ·gc.alloc.rate:                   1158.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              66716.353 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77537.305 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 27326.212 ops/s
[info]                  ·gc.alloc.rate:            1158.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       66719.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77498.940 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 27589.080 ops/s
[info]                  ·gc.alloc.rate:            1169.628 MB/sec
[info]                  ·gc.alloc.rate.norm:       66700.073 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38380.146 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 27169.096 ops/s
[info]                  ·gc.alloc.rate:                   1153.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              66795.216 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78133.883 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 270.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 27635.700 ops/s
[info]                  ·gc.alloc.rate:                   1171.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              66701.338 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77315.408 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 227.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   27409.497 ±(99.9%) 757.725 ops/s [Average]
[info]   (min, avg, max) = (27169.096, 27409.497, 27635.700), stdev = 196.779
[info]   CI (99.9%): [26651.772, 28167.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1162.138 ±(99.9%) 30.239 MB/sec [Average]
[info]   (min, avg, max) = (1153.005, 1162.138, 1171.096), stdev = 7.853
[info]   CI (99.9%): [1131.898, 1192.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   66726.414 ±(99.9%) 151.738 B/op [Average]
[info]   (min, avg, max) = (66700.073, 66726.414, 66795.216), stdev = 39.406
[info]   CI (99.9%): [66574.676, 66878.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1214.247 ±(99.9%) 1165.171 MB/sec [Average]
[info]   (min, avg, max) = (673.020, 1214.247, 1357.451), stdev = 302.591
[info]   CI (99.9%): [49.076, 2379.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   69773.137 ±(99.9%) 67586.154 B/op [Average]
[info]   (min, avg, max) = (38380.146, 69773.137, 78133.883), stdev = 17551.910
[info]   CI (99.9%): [2186.982, 137359.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 8.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.662), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 10.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   107.216 ±(99.9%) 504.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 107.216, 270.092), stdev = 131.108
[info]   CI (99.9%): [≈ 0, 612.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 13.800, 19.000), stdev = 5.450
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:51:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427300.689 ops/s
[info] # Warmup Iteration   2: 629491.322 ops/s
[info] # Warmup Iteration   3: 636836.440 ops/s
[info] # Warmup Iteration   4: 655937.198 ops/s
[info] # Warmup Iteration   5: 653789.235 ops/s
[info] Iteration   1: 651406.378 ops/s
[info]                  ·gc.alloc.rate:            1272.425 MB/sec
[info]                  ·gc.alloc.rate.norm:       3074.725 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3257.677 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 651405.871 ops/s
[info]                  ·gc.alloc.rate:            1277.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       3086.509 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3257.677 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 656123.165 ops/s
[info]                  ·gc.alloc.rate:                   1280.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.218 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3234.264 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.990 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 658491.623 ops/s
[info]                  ·gc.alloc.rate:                   1285.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              3073.728 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3240.007 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 661266.858 ops/s
[info]                  ·gc.alloc.rate:                                  1290.642 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3242.291 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.585 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   655738.779 ±(99.9%) 16765.714 ops/s [Average]
[info]   (min, avg, max) = (651405.871, 655738.779, 661266.858), stdev = 4354.003
[info]   CI (99.9%): [638973.065, 672504.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1281.459 ±(99.9%) 27.235 MB/sec [Average]
[info]   (min, avg, max) = (1272.425, 1281.459, 1290.642), stdev = 7.073
[info]   CI (99.9%): [1254.224, 1308.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3075.793 ±(99.9%) 23.502 B/op [Average]
[info]   (min, avg, max) = (3072.001, 3075.793, 3086.509), stdev = 6.103
[info]   CI (99.9%): [3052.291, 3099.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1352.523 ±(99.9%) 23.971 MB/sec [Average]
[info]   (min, avg, max) = (1348.137, 1352.523, 1362.187), stdev = 6.225
[info]   CI (99.9%): [1328.552, 1376.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3246.383 ±(99.9%) 41.265 B/op [Average]
[info]   (min, avg, max) = (3234.264, 3246.383, 3257.677), stdev = 10.716
[info]   CI (99.9%): [3205.118, 3287.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 6.639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.331), stdev = 1.724
[info]   CI (99.9%): [≈ 0, 8.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.507 ±(99.9%) 15.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.507, 7.990), stdev = 4.130
[info]   CI (99.9%): [≈ 0, 19.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.400, 15.000), stdev = 5.367
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 916.534 ops/s
[info] # Warmup Iteration   2: 18241.028 ops/s
[info] # Warmup Iteration   3: 20536.465 ops/s
[info] # Warmup Iteration   4: 20739.804 ops/s
[info] # Warmup Iteration   5: 20934.665 ops/s
[info] Iteration   1: 20666.544 ops/s
[info]                  ·gc.alloc.rate:            1572.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       119772.927 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102473.320 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 20694.340 ops/s
[info]                  ·gc.alloc.rate:                   1562.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              118868.903 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        153704.686 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 303.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   3: 21272.346 ops/s
[info]                  ·gc.alloc.rate:                   1602.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              118598.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        100378.275 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 344.943 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 21441.074 ops/s
[info]                  ·gc.alloc.rate:                                  1616.188 MB/sec
[info]                  ·gc.alloc.rate.norm:                             118614.897 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.352 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100041.338 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 21397.459 ops/s
[info]                  ·gc.alloc.rate:                                  1612.179 MB/sec
[info]                  ·gc.alloc.rate.norm:                             118592.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.445 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150370.531 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   21094.353 ±(99.9%) 1474.854 ops/s [Average]
[info]   (min, avg, max) = (20666.544, 21094.353, 21441.074), stdev = 383.015
[info]   CI (99.9%): [19619.499, 22569.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1593.258 ±(99.9%) 93.029 MB/sec [Average]
[info]   (min, avg, max) = (1562.821, 1593.258, 1616.188), stdev = 24.159
[info]   CI (99.9%): [1500.228, 1686.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118889.361 ±(99.9%) 1953.710 B/op [Average]
[info]   (min, avg, max) = (118592.021, 118889.361, 119772.927), stdev = 507.372
[info]   CI (99.9%): [116935.651, 120843.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.159 ±(99.9%) 0.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.445), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 1.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1625.979 ±(99.9%) 1429.560 MB/sec [Average]
[info]   (min, avg, max) = (1345.283, 1625.979, 2044.187), stdev = 371.252
[info]   CI (99.9%): [196.419, 3055.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   121393.630 ±(99.9%) 107873.176 B/op [Average]
[info]   (min, avg, max) = (100041.338, 121393.630, 153704.686), stdev = 28014.321
[info]   CI (99.9%): [13520.454, 229266.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.661), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   129.781 ±(99.9%) 686.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 129.781, 344.943), stdev = 178.300
[info]   CI (99.9%): [≈ 0, 816.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.400, 27.000), stdev = 10.139
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183172.437 ops/s
[info] # Warmup Iteration   2: 327567.893 ops/s
[info] # Warmup Iteration   3: 337607.888 ops/s
[info] # Warmup Iteration   4: 321877.597 ops/s
[info] # Warmup Iteration   5: 337253.262 ops/s
[info] Iteration   1: 335332.121 ops/s
[info]                  ·gc.alloc.rate:            939.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       4412.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3160.914 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 328178.507 ops/s
[info]                  ·gc.alloc.rate:            913.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       4382.604 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6459.617 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 331414.784 ops/s
[info]                  ·gc.alloc.rate:            922.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       4380.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3195.036 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 332220.413 ops/s
[info]                  ·gc.alloc.rate:                   923.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3187.199 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 328434.600 ops/s
[info]                  ·gc.alloc.rate:                   913.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6454.327 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.960 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   331116.085 ±(99.9%) 11374.637 ops/s [Average]
[info]   (min, avg, max) = (328178.507, 331116.085, 335332.121), stdev = 2953.957
[info]   CI (99.9%): [319741.448, 342490.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   922.495 ±(99.9%) 41.601 MB/sec [Average]
[info]   (min, avg, max) = (913.167, 922.495, 939.814), stdev = 10.804
[info]   CI (99.9%): [880.895, 964.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4385.437 ±(99.9%) 58.455 B/op [Average]
[info]   (min, avg, max) = (4376.001, 4385.437, 4412.103), stdev = 15.181
[info]   CI (99.9%): [4326.982, 4443.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.430 ±(99.9%) 1421.187 MB/sec [Average]
[info]   (min, avg, max) = (672.663, 942.430, 1346.864), stdev = 369.078
[info]   CI (99.9%): [≈ 0, 2363.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4491.419 ±(99.9%) 6909.372 B/op [Average]
[info]   (min, avg, max) = (3160.914, 4491.419, 6459.617), stdev = 1794.342
[info]   CI (99.9%): [≈ 0, 11400.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.823 ±(99.9%) 26.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.823, 15.960), stdev = 6.921
[info]   CI (99.9%): [≈ 0, 30.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.800, 19.000), stdev = 5.215
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1053583.363 ops/s
[info] # Warmup Iteration   2: 1379543.747 ops/s
[info] # Warmup Iteration   3: 1398008.788 ops/s
[info] # Warmup Iteration   4: 1384822.071 ops/s
[info] # Warmup Iteration   5: 1435979.242 ops/s
[info] Iteration   1: 1402395.630 ops/s
[info]                  ·gc.alloc.rate:            821.650 MB/sec
[info]                  ·gc.alloc.rate.norm:       922.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1513.185 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 1433318.220 ops/s
[info]                  ·gc.alloc.rate:            838.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.505 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 740.206 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1430432.228 ops/s
[info]                  ·gc.alloc.rate:                   837.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              921.807 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        741.757 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.733 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1435835.795 ops/s
[info]                  ·gc.alloc.rate:            839.241 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 739.675 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1418372.071 ops/s
[info]                  ·gc.alloc.rate:            829.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.373 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1496.137 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1424070.789 ±(99.9%) 53310.429 ops/s [Average]
[info]   (min, avg, max) = (1402395.630, 1424070.789, 1435835.795), stdev = 13844.549
[info]   CI (99.9%): [1370760.360, 1477381.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   833.321 ±(99.9%) 29.203 MB/sec [Average]
[info]   (min, avg, max) = (821.650, 833.321, 839.241), stdev = 7.584
[info]   CI (99.9%): [804.118, 862.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920.982 ±(99.9%) 3.749 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.982, 922.226), stdev = 0.974
[info]   CI (99.9%): [917.234, 924.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.952 ±(99.9%) 1421.602 MB/sec [Average]
[info]   (min, avg, max) = (674.101, 943.952, 1348.589), stdev = 369.186
[info]   CI (99.9%): [≈ 0, 2365.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1046.192 ±(99.9%) 1611.753 B/op [Average]
[info]   (min, avg, max) = (739.675, 1046.192, 1513.185), stdev = 418.567
[info]   CI (99.9%): [≈ 0, 2657.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.147 ±(99.9%) 1.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.147, 0.733), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 11.000, 17.000), stdev = 4.637
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1270742.751 ops/s
[info] # Warmup Iteration   2: 1574755.484 ops/s
[info] # Warmup Iteration   3: 1572412.415 ops/s
[info] # Warmup Iteration   4: 1623576.834 ops/s
[info] # Warmup Iteration   5: 1623081.954 ops/s
[info] Iteration   1: 1615704.081 ops/s
[info]                  ·gc.alloc.rate:      1.487 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.449 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1622750.003 ops/s
[info]                  ·gc.alloc.rate:      0.312 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.302 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1624236.619 ops/s
[info]                  ·gc.alloc.rate:      0.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.122 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1602712.734 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1615825.099 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1616245.707 ±(99.9%) 32774.170 ops/s [Average]
[info]   (min, avg, max) = (1602712.734, 1616245.707, 1624236.619), stdev = 8511.348
[info]   CI (99.9%): [1583471.537, 1649019.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.385 ±(99.9%) 2.423 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.385, 1.487), stdev = 0.629
[info]   CI (99.9%): [≈ 0, 2.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.375 ±(99.9%) 2.360 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.375, 1.449), stdev = 0.613
[info]   CI (99.9%): [≈ 0, 2.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90337.689 ops/s
[info] # Warmup Iteration   2: 202149.355 ops/s
[info] # Warmup Iteration   3: 206094.717 ops/s
[info] # Warmup Iteration   4: 203668.731 ops/s
[info] # Warmup Iteration   5: 204377.484 ops/s
[info] Iteration   1: 201975.351 ops/s
[info]                  ·gc.alloc.rate:                   1307.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              10188.837 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10484.774 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 203664.754 ops/s
[info]                  ·gc.alloc.rate:            1317.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       10179.821 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10408.852 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 203053.491 ops/s
[info]                  ·gc.alloc.rate:                   1315.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              10195.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10455.195 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 206061.583 ops/s
[info]                  ·gc.alloc.rate:                   1332.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              10176.625 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10368.994 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.527 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 207177.774 ops/s
[info]                  ·gc.alloc.rate:                                  1339.560 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10177.075 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10353.382 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   204386.591 ±(99.9%) 8327.676 ops/s [Average]
[info]   (min, avg, max) = (201975.351, 204386.591, 207177.774), stdev = 2162.671
[info]   CI (99.9%): [196058.914, 212714.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1322.392 ±(99.9%) 50.685 MB/sec [Average]
[info]   (min, avg, max) = (1307.656, 1322.392, 1339.560), stdev = 13.163
[info]   CI (99.9%): [1271.707, 1373.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10183.500 ±(99.9%) 31.409 B/op [Average]
[info]   (min, avg, max) = (10176.625, 10183.500, 10195.143), stdev = 8.157
[info]   CI (99.9%): [10152.091, 10214.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.138), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.210 ±(99.9%) 1.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.210, 1.049), stdev = 0.469
[info]   CI (99.9%): [≈ 0, 2.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1352.303 ±(99.9%) 28.948 MB/sec [Average]
[info]   (min, avg, max) = (1345.637, 1352.303, 1362.767), stdev = 7.518
[info]   CI (99.9%): [1323.354, 1381.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10414.239 ±(99.9%) 214.673 B/op [Average]
[info]   (min, avg, max) = (10353.382, 10414.239, 10484.774), stdev = 55.750
[info]   CI (99.9%): [10199.567, 10628.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 8.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.662), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 10.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   14.372 ±(99.9%) 67.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.372, 36.141), stdev = 17.552
[info]   CI (99.9%): [≈ 0, 81.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.800, 19.000), stdev = 6.834
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20662.035 ops/s
[info] # Warmup Iteration   2: 54740.332 ops/s
[info] # Warmup Iteration   3: 52655.599 ops/s
[info] # Warmup Iteration   4: 54230.230 ops/s
[info] # Warmup Iteration   5: 54056.518 ops/s
[info] Iteration   1: 54913.723 ops/s
[info]                  ·gc.alloc.rate:            977.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       28016.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38603.512 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 54810.829 ops/s
[info]                  ·gc.alloc.rate:            975.531 MB/sec
[info]                  ·gc.alloc.rate.norm:       28016.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19338.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 54037.642 ops/s
[info]                  ·gc.alloc.rate:                   961.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              28016.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39209.801 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.401 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 54755.383 ops/s
[info]                  ·gc.alloc.rate:            975.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       28016.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19357.089 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 53500.645 ops/s
[info]                  ·gc.alloc.rate:                   952.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              28019.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39621.406 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 97.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   54403.644 ±(99.9%) 2357.294 ops/s [Average]
[info]   (min, avg, max) = (53500.645, 54403.644, 54913.723), stdev = 612.182
[info]   CI (99.9%): [52046.350, 56760.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   968.407 ±(99.9%) 41.949 MB/sec [Average]
[info]   (min, avg, max) = (952.375, 968.407, 977.291), stdev = 10.894
[info]   CI (99.9%): [926.458, 1010.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   28016.628 ±(99.9%) 5.343 B/op [Average]
[info]   (min, avg, max) = (28016.007, 28016.628, 28019.110), stdev = 1.388
[info]   CI (99.9%): [28011.285, 28021.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1077.295 ±(99.9%) 1419.306 MB/sec [Average]
[info]   (min, avg, max) = (673.360, 1077.295, 1346.739), stdev = 368.589
[info]   CI (99.9%): [≈ 0, 2496.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31225.966 ±(99.9%) 41777.565 B/op [Average]
[info]   (min, avg, max) = (19338.021, 31225.966, 39621.406), stdev = 10849.501
[info]   CI (99.9%): [≈ 0, 73003.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   23.475 ±(99.9%) 163.598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.475, 97.976), stdev = 42.486
[info]   CI (99.9%): [≈ 0, 187.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   65.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 13.000, 17.000), stdev = 4.583
[info]   CI (99.9%): [65.000, 65.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17740.106 ops/s
[info] # Warmup Iteration   2: 55947.135 ops/s
[info] # Warmup Iteration   3: 56399.380 ops/s
[info] # Warmup Iteration   4: 56793.727 ops/s
[info] # Warmup Iteration   5: 57053.842 ops/s
[info] Iteration   1: 57271.460 ops/s
[info]                  ·gc.alloc.rate:            661.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       18184.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18488.561 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 56900.171 ops/s
[info]                  ·gc.alloc.rate:            659.547 MB/sec
[info]                  ·gc.alloc.rate.norm:       18246.724 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18609.414 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 57007.766 ops/s
[info]                  ·gc.alloc.rate:            658.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       18184.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18573.840 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 57000.156 ops/s
[info]                  ·gc.alloc.rate:                   658.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              18184.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18557.728 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.392 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 57269.323 ops/s
[info]                  ·gc.alloc.rate:            661.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       18186.908 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18489.529 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   57089.775 ±(99.9%) 655.610 ops/s [Average]
[info]   (min, avg, max) = (56900.171, 57089.775, 57271.460), stdev = 170.260
[info]   CI (99.9%): [56434.165, 57745.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   660.003 ±(99.9%) 6.033 MB/sec [Average]
[info]   (min, avg, max) = (658.525, 660.003, 661.727), stdev = 1.567
[info]   CI (99.9%): [653.971, 666.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18197.131 ±(99.9%) 106.863 B/op [Average]
[info]   (min, avg, max) = (18184.007, 18197.131, 18246.724), stdev = 27.752
[info]   CI (99.9%): [18090.268, 18303.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.574 ±(99.9%) 1.117 MB/sec [Average]
[info]   (min, avg, max) = (672.060, 672.574, 672.739), stdev = 0.290
[info]   CI (99.9%): [671.457, 673.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18543.814 ±(99.9%) 205.552 B/op [Average]
[info]   (min, avg, max) = (18488.561, 18543.814, 18609.414), stdev = 53.381
[info]   CI (99.9%): [18338.263, 18749.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.678 ±(99.9%) 31.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.678, 18.392), stdev = 8.225
[info]   CI (99.9%): [≈ 0, 35.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44203.031 ops/s
[info] # Warmup Iteration   2: 61076.162 ops/s
[info] # Warmup Iteration   3: 60657.153 ops/s
[info] # Warmup Iteration   4: 62402.076 ops/s
[info] # Warmup Iteration   5: 61394.702 ops/s
[info] Iteration   1: 62684.438 ops/s
[info]                  ·gc.alloc.rate:            681.717 MB/sec
[info]                  ·gc.alloc.rate.norm:       17119.749 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16908.200 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 62355.321 ops/s
[info]                  ·gc.alloc.rate:                   676.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              17085.769 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16998.755 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.814 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 62414.664 ops/s
[info]                  ·gc.alloc.rate:            678.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       17112.722 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16999.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 62091.973 ops/s
[info]                  ·gc.alloc.rate:            673.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       17080.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17070.745 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 62098.237 ops/s
[info]                  ·gc.alloc.rate:            673.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       17080.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17069.096 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   62328.927 ±(99.9%) 950.650 ops/s [Average]
[info]   (min, avg, max) = (62091.973, 62328.927, 62684.438), stdev = 246.881
[info]   CI (99.9%): [61378.277, 63279.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   676.921 ±(99.9%) 12.924 MB/sec [Average]
[info]   (min, avg, max) = (673.736, 676.921, 681.717), stdev = 3.356
[info]   CI (99.9%): [663.997, 689.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17095.651 ±(99.9%) 73.547 B/op [Average]
[info]   (min, avg, max) = (17080.007, 17095.651, 17119.749), stdev = 19.100
[info]   CI (99.9%): [17022.104, 17169.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   673.490 ±(99.9%) 1.115 MB/sec [Average]
[info]   (min, avg, max) = (673.293, 673.490, 674.002), stdev = 0.290
[info]   CI (99.9%): [672.374, 674.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   17009.256 ±(99.9%) 256.724 B/op [Average]
[info]   (min, avg, max) = (16908.200, 17009.256, 17070.745), stdev = 66.670
[info]   CI (99.9%): [16752.533, 17265.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.363 ±(99.9%) 28.954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.363, 16.814), stdev = 7.519
[info]   CI (99.9%): [≈ 0, 32.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7750.086 ops/s
[info] # Warmup Iteration   2: 27203.164 ops/s
[info] # Warmup Iteration   3: 28549.259 ops/s
[info] # Warmup Iteration   4: 29029.552 ops/s
[info] # Warmup Iteration   5: 28079.028 ops/s
[info] Iteration   1: 29038.838 ops/s
[info]                  ·gc.alloc.rate:            1285.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       69645.841 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72930.604 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 29081.692 ops/s
[info]                  ·gc.alloc.rate:            1286.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       69596.441 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72822.785 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 29158.186 ops/s
[info]                  ·gc.alloc.rate:                   1287.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              69472.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        72769.341 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 215.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 29570.262 ops/s
[info]                  ·gc.alloc.rate:                   1305.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              69479.525 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36020.869 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 212.722 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 29386.647 ops/s
[info]                  ·gc.alloc.rate:                   1297.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              69472.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        72954.034 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   29247.125 ±(99.9%) 866.492 ops/s [Average]
[info]   (min, avg, max) = (29038.838, 29247.125, 29570.262), stdev = 225.025
[info]   CI (99.9%): [28380.633, 30113.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1292.172 ±(99.9%) 33.395 MB/sec [Average]
[info]   (min, avg, max) = (1285.379, 1292.172, 1305.205), stdev = 8.673
[info]   CI (99.9%): [1258.777, 1325.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69533.167 ±(99.9%) 316.690 B/op [Average]
[info]   (min, avg, max) = (69472.014, 69533.167, 69645.841), stdev = 82.243
[info]   CI (99.9%): [69216.477, 69849.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1215.734 ±(99.9%) 1160.665 MB/sec [Average]
[info]   (min, avg, max) = (676.669, 1215.734, 1362.008), stdev = 301.421
[info]   CI (99.9%): [55.069, 2376.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65499.526 ±(99.9%) 63455.708 B/op [Average]
[info]   (min, avg, max) = (36020.869, 65499.526, 72954.034), stdev = 16479.246
[info]   CI (99.9%): [2043.819, 128955.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.996), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 9.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   92.823 ±(99.9%) 430.418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.823, 215.719), stdev = 111.778
[info]   CI (99.9%): [≈ 0, 523.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.800, 19.000), stdev = 7.225
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57622.974 ops/s
[info] # Warmup Iteration   2: 107324.692 ops/s
[info] # Warmup Iteration   3: 108182.789 ops/s
[info] # Warmup Iteration   4: 108202.867 ops/s
[info] # Warmup Iteration   5: 108599.561 ops/s
[info] Iteration   1: 109499.202 ops/s
[info]                  ·gc.alloc.rate:            482.562 MB/sec
[info]                  ·gc.alloc.rate.norm:       6936.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9679.870 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 109461.774 ops/s
[info]                  ·gc.alloc.rate:      482.477 MB/sec
[info]                  ·gc.alloc.rate.norm: 6938.452 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 108268.508 ops/s
[info]                  ·gc.alloc.rate:            479.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       6972.945 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9780.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 108460.820 ops/s
[info]                  ·gc.alloc.rate:                   477.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              6936.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9762.827 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.666 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 109572.036 ops/s
[info]                  ·gc.alloc.rate:      482.978 MB/sec
[info]                  ·gc.alloc.rate.norm: 6937.953 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   109052.468 ±(99.9%) 2436.650 ops/s [Average]
[info]   (min, avg, max) = (108268.508, 109052.468, 109572.036), stdev = 632.790
[info]   CI (99.9%): [106615.818, 111489.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   481.120 ±(99.9%) 8.540 MB/sec [Average]
[info]   (min, avg, max) = (477.938, 481.120, 482.978), stdev = 2.218
[info]   CI (99.9%): [472.580, 489.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6944.272 ±(99.9%) 61.871 B/op [Average]
[info]   (min, avg, max) = (6936.004, 6944.272, 6972.945), stdev = 16.068
[info]   CI (99.9%): [6882.401, 7006.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   403.786 ±(99.9%) 1419.365 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.786, 673.462), stdev = 368.605
[info]   CI (99.9%): [≈ 0, 1823.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5844.567 ±(99.9%) 20544.995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5844.567, 9780.138), stdev = 5335.470
[info]   CI (99.9%): [≈ 0, 26389.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.933 ±(99.9%) 16.646 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.933, 9.666), stdev = 4.323
[info]   CI (99.9%): [≈ 0, 18.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.200, 9.000), stdev = 4.764
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105095.443 ops/s
[info] # Warmup Iteration   2: 220855.437 ops/s
[info] # Warmup Iteration   3: 227251.961 ops/s
[info] # Warmup Iteration   4: 225683.982 ops/s
[info] # Warmup Iteration   5: 225863.941 ops/s
[info] Iteration   1: 226963.637 ops/s
[info]                  ·gc.alloc.rate:      337.429 MB/sec
[info]                  ·gc.alloc.rate.norm: 2340.366 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 220681.522 ops/s
[info]                  ·gc.alloc.rate:            327.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.236 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4798.257 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 229427.118 ops/s
[info]                  ·gc.alloc.rate:      340.520 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 227373.560 ops/s
[info]                  ·gc.alloc.rate:            338.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       2344.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4656.936 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 230620.302 ops/s
[info]                  ·gc.alloc.rate:      343.283 MB/sec
[info]                  ·gc.alloc.rate.norm: 2343.099 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   227013.228 ±(99.9%) 14796.277 ops/s [Average]
[info]   (min, avg, max) = (220681.522, 227013.228, 230620.302), stdev = 3842.546
[info]   CI (99.9%): [212216.951, 241809.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   337.491 ±(99.9%) 22.887 MB/sec [Average]
[info]   (min, avg, max) = (327.624, 337.491, 343.283), stdev = 5.944
[info]   CI (99.9%): [314.604, 360.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2339.950 ±(99.9%) 14.441 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2339.950, 2344.047), stdev = 3.750
[info]   CI (99.9%): [2325.509, 2354.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.116 ±(99.9%) 1418.972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.116, 672.888), stdev = 368.502
[info]   CI (99.9%): [≈ 0, 1688.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1891.039 ±(99.9%) 9972.757 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1891.039, 4798.257), stdev = 2589.893
[info]   CI (99.9%): [≈ 0, 11863.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 9.000), stdev = 4.930
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462661.447 ops/s
[info] # Warmup Iteration   2: 648895.699 ops/s
[info] # Warmup Iteration   3: 704350.714 ops/s
[info] # Warmup Iteration   4: 726779.414 ops/s
[info] # Warmup Iteration   5: 722976.441 ops/s
[info] Iteration   1: 730507.192 ops/s
[info]                  ·gc.alloc.rate:            906.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       1953.843 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1450.970 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 729379.991 ops/s
[info]                  ·gc.alloc.rate:                   904.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1453.203 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.437 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 713582.293 ops/s
[info]                  ·gc.alloc.rate:            885.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2973.733 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 731021.151 ops/s
[info]                  ·gc.alloc.rate:            906.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.919 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1451.356 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 736796.901 ops/s
[info]                  ·gc.alloc.rate:                   913.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1438.600 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   728257.506 ±(99.9%) 33471.927 ops/s [Average]
[info]   (min, avg, max) = (713582.293, 728257.506, 736796.901), stdev = 8692.553
[info]   CI (99.9%): [694785.579, 761729.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   903.417 ±(99.9%) 41.453 MB/sec [Average]
[info]   (min, avg, max) = (885.213, 903.417, 913.811), stdev = 10.765
[info]   CI (99.9%): [861.963, 944.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.606 ±(99.9%) 3.030 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.606, 1953.843), stdev = 0.787
[info]   CI (99.9%): [1949.576, 1955.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.519 ±(99.9%) 1162.477 MB/sec [Average]
[info]   (min, avg, max) = (673.316, 808.519, 1348.559), stdev = 301.892
[info]   CI (99.9%): [≈ 0, 1970.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1753.573 ±(99.9%) 2626.583 B/op [Average]
[info]   (min, avg, max) = (1438.600, 1753.573, 2973.733), stdev = 682.115
[info]   CI (99.9%): [≈ 0, 4380.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.572 ±(99.9%) 3.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.572, 1.437), stdev = 0.783
[info]   CI (99.9%): [≈ 0, 3.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 15.000), stdev = 3.271
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 629689.852 ops/s
[info] # Warmup Iteration   2: 794530.526 ops/s
[info] # Warmup Iteration   3: 802947.223 ops/s
[info] # Warmup Iteration   4: 803673.034 ops/s
[info] # Warmup Iteration   5: 803444.678 ops/s
[info] Iteration   1: 800507.430 ops/s
[info]                  ·gc.alloc.rate:      1.103 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.168 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 802666.217 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 803299.358 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 803628.319 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 803206.095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   802661.484 ±(99.9%) 4824.161 ops/s [Average]
[info]   (min, avg, max) = (800507.430, 802661.484, 803628.319), stdev = 1252.819
[info]   CI (99.9%): [797837.323, 807485.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.221 ±(99.9%) 1.898 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.221, 1.103), stdev = 0.493
[info]   CI (99.9%): [≈ 0, 2.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.434 ±(99.9%) 3.732 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.434, 2.168), stdev = 0.969
[info]   CI (99.9%): [≈ 0, 4.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115468.290 ops/s
[info] # Warmup Iteration   2: 178776.052 ops/s
[info] # Warmup Iteration   3: 189359.036 ops/s
[info] # Warmup Iteration   4: 190347.353 ops/s
[info] # Warmup Iteration   5: 189517.727 ops/s
[info] Iteration   1: 188791.641 ops/s
[info]                  ·gc.alloc.rate:            610.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       5089.464 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5608.932 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 189960.385 ops/s
[info]                  ·gc.alloc.rate:            613.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       5080.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5574.508 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 188114.742 ops/s
[info]                  ·gc.alloc.rate:            607.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       5080.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5629.205 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 189768.102 ops/s
[info]                  ·gc.alloc.rate:            613.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       5080.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5559.759 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 191197.008 ops/s
[info]                  ·gc.alloc.rate:      617.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 5080.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   189566.376 ±(99.9%) 4540.802 ops/s [Average]
[info]   (min, avg, max) = (188114.742, 189566.376, 191197.008), stdev = 1179.232
[info]   CI (99.9%): [185025.574, 194107.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   612.261 ±(99.9%) 14.171 MB/sec [Average]
[info]   (min, avg, max) = (607.210, 612.261, 617.170), stdev = 3.680
[info]   CI (99.9%): [598.090, 626.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5081.895 ±(99.9%) 16.294 B/op [Average]
[info]   (min, avg, max) = (5080.002, 5081.895, 5089.464), stdev = 4.231
[info]   CI (99.9%): [5065.601, 5098.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   537.939 ±(99.9%) 1157.958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.939, 672.892), stdev = 300.718
[info]   CI (99.9%): [≈ 0, 1695.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4474.481 ±(99.9%) 9632.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4474.481, 5629.205), stdev = 2501.461
[info]   CI (99.9%): [≈ 0, 14106.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.600, 10.000), stdev = 4.278
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:47:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51716.744 ops/s
[info] # Warmup Iteration   2: 110379.034 ops/s
[info] # Warmup Iteration   3: 110684.909 ops/s
[info] # Warmup Iteration   4: 112724.145 ops/s
[info] # Warmup Iteration   5: 112729.429 ops/s
[info] Iteration   1: 113334.033 ops/s
[info]                  ·gc.alloc.rate:                   1394.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              19372.409 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28066.126 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.251 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 113740.728 ops/s
[info]                  ·gc.alloc.rate:                   1400.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              19377.574 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18629.102 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 113332.317 ops/s
[info]                  ·gc.alloc.rate:                   1394.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              19371.914 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18815.922 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 114073.159 ops/s
[info]                  ·gc.alloc.rate:                   1403.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              19368.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18795.308 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 113811.105 ops/s
[info]                  ·gc.alloc.rate:                                  1401.724 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19386.137 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.178 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18847.782 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   113658.268 ±(99.9%) 1238.307 ops/s [Average]
[info]   (min, avg, max) = (113332.317, 113658.268, 114073.159), stdev = 321.584
[info]   CI (99.9%): [112419.962, 114896.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1399.023 ±(99.9%) 15.582 MB/sec [Average]
[info]   (min, avg, max) = (1394.731, 1399.023, 1403.600), stdev = 4.047
[info]   CI (99.9%): [1383.440, 1414.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19375.207 ±(99.9%) 26.928 B/op [Average]
[info]   (min, avg, max) = (19368.004, 19375.207, 19386.137), stdev = 6.993
[info]   CI (99.9%): [19348.279, 19402.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.178), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1489.296 ±(99.9%) 1144.058 MB/sec [Average]
[info]   (min, avg, max) = (1346.126, 1489.296, 2020.642), stdev = 297.108
[info]   CI (99.9%): [345.238, 2633.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   20630.848 ±(99.9%) 16008.312 B/op [Average]
[info]   (min, avg, max) = (18629.102, 20630.848, 28066.126), stdev = 4157.308
[info]   CI (99.9%): [4622.536, 36639.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 3.997), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 9.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   25.850 ±(99.9%) 104.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.850, 55.504), stdev = 27.241
[info]   CI (99.9%): [≈ 0, 130.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.400, 24.000), stdev = 9.127
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46991.102 ops/s
[info] # Warmup Iteration   2: 126433.487 ops/s
[info] # Warmup Iteration   3: 127500.308 ops/s
[info] # Warmup Iteration   4: 128839.777 ops/s
[info] # Warmup Iteration   5: 129462.603 ops/s
[info] Iteration   1: 126447.786 ops/s
[info]                  ·gc.alloc.rate:            669.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       8336.317 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8374.347 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 129299.706 ops/s
[info]                  ·gc.alloc.rate:            684.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       8331.973 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8189.403 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 126591.578 ops/s
[info]                  ·gc.alloc.rate:            670.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       8335.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8364.558 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 129286.594 ops/s
[info]                  ·gc.alloc.rate:            684.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       8328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8189.846 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 129324.800 ops/s
[info]                  ·gc.alloc.rate:                   684.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8187.757 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   128190.093 ±(99.9%) 5875.229 ops/s [Average]
[info]   (min, avg, max) = (126447.786, 128190.093, 129324.800), stdev = 1525.778
[info]   CI (99.9%): [122314.864, 134065.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   678.534 ±(99.9%) 30.057 MB/sec [Average]
[info]   (min, avg, max) = (669.647, 678.534, 684.378), stdev = 7.806
[info]   CI (99.9%): [648.477, 708.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8331.879 ±(99.9%) 14.926 B/op [Average]
[info]   (min, avg, max) = (8328.003, 8331.879, 8336.317), stdev = 3.876
[info]   CI (99.9%): [8316.953, 8346.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.702 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (672.667, 672.702, 672.774), stdev = 0.044
[info]   CI (99.9%): [672.535, 672.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8261.182 ±(99.9%) 380.830 B/op [Average]
[info]   (min, avg, max) = (8187.757, 8261.182, 8374.347), stdev = 98.900
[info]   CI (99.9%): [7880.352, 8642.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.621 ±(99.9%) 13.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.621, 8.107), stdev = 3.625
[info]   CI (99.9%): [≈ 0, 15.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281637.949 ops/s
[info] # Warmup Iteration   2: 395910.129 ops/s
[info] # Warmup Iteration   3: 406287.294 ops/s
[info] # Warmup Iteration   4: 404497.820 ops/s
[info] # Warmup Iteration   5: 406200.951 ops/s
[info] Iteration   1: 400779.787 ops/s
[info]                  ·gc.alloc.rate:                   788.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              3096.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2647.298 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 405245.388 ops/s
[info]                  ·gc.alloc.rate:            786.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.392 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2620.774 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 402387.500 ops/s
[info]                  ·gc.alloc.rate:            782.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       3060.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5273.586 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 407060.203 ops/s
[info]                  ·gc.alloc.rate:            790.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2606.476 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 399442.710 ops/s
[info]                  ·gc.alloc.rate:            775.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       3057.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2656.231 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   402983.118 ±(99.9%) 12098.072 ops/s [Average]
[info]   (min, avg, max) = (399442.710, 402983.118, 407060.203), stdev = 3141.831
[info]   CI (99.9%): [390885.045, 415081.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   784.752 ±(99.9%) 22.298 MB/sec [Average]
[info]   (min, avg, max) = (775.769, 784.752, 790.326), stdev = 5.791
[info]   CI (99.9%): [762.453, 807.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3065.267 ±(99.9%) 66.789 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3065.267, 3096.104), stdev = 17.345
[info]   CI (99.9%): [2998.478, 3132.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   809.012 ±(99.9%) 1160.578 MB/sec [Average]
[info]   (min, avg, max) = (674.063, 809.012, 1348.170), stdev = 301.399
[info]   CI (99.9%): [≈ 0, 1969.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3160.873 ±(99.9%) 4548.425 B/op [Average]
[info]   (min, avg, max) = (2606.476, 3160.873, 5273.586), stdev = 1181.212
[info]   CI (99.9%): [≈ 0, 7709.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.523 ±(99.9%) 4.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.523, 2.616), stdev = 1.170
[info]   CI (99.9%): [≈ 0, 5.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.000, 15.000), stdev = 3.391
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9555.289 ops/s
[info] # Warmup Iteration   2: 44635.469 ops/s
[info] # Warmup Iteration   3: 46354.107 ops/s
[info] # Warmup Iteration   4: 46975.491 ops/s
[info] # Warmup Iteration   5: 46663.766 ops/s
[info] Iteration   1: 47200.391 ops/s
[info]                  ·gc.alloc.rate:                   1805.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              60208.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2021.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        67415.756 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 133.277 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   2: 47287.079 ops/s
[info]                  ·gc.alloc.rate:                   1834.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              61066.357 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        45163.220 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 155.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 47696.731 ops/s
[info]                  ·gc.alloc.rate:                                  1825.345 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60222.829 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.940 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67457.913 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 47680.900 ops/s
[info]                  ·gc.alloc.rate:                                  1828.442 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60355.089 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.279 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67483.376 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 48162.454 ops/s
[info]                  ·gc.alloc.rate:            1842.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       60212.460 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44538.739 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   47605.511 ±(99.9%) 1478.506 ops/s [Average]
[info]   (min, avg, max) = (47200.391, 47605.511, 48162.454), stdev = 383.963
[info]   CI (99.9%): [46127.005, 49084.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1827.287 ±(99.9%) 52.913 MB/sec [Average]
[info]   (min, avg, max) = (1805.650, 1827.287, 1842.411), stdev = 13.741
[info]   CI (99.9%): [1774.374, 1880.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   60412.949 ±(99.9%) 1426.078 B/op [Average]
[info]   (min, avg, max) = (60208.011, 60412.949, 61066.357), stdev = 370.348
[info]   CI (99.9%): [58986.871, 61839.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.244 ±(99.9%) 1.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.244, 0.940), stdev = 0.408
[info]   CI (99.9%): [≈ 0, 1.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1766.096 ±(99.9%) 1428.592 MB/sec [Average]
[info]   (min, avg, max) = (1356.818, 1766.096, 2044.639), stdev = 371.001
[info]   CI (99.9%): [337.504, 3194.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   58411.801 ±(99.9%) 47675.870 B/op [Average]
[info]   (min, avg, max) = (44538.739, 58411.801, 67483.376), stdev = 12381.272
[info]   CI (99.9%): [10735.931, 106087.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   57.695 ±(99.9%) 305.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.695, 155.200), stdev = 79.382
[info]   CI (99.9%): [≈ 0, 363.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.400, 25.000), stdev = 8.204
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:46:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87199.185 ops/s
[info] # Warmup Iteration   2: 156191.193 ops/s
[info] # Warmup Iteration   3: 172168.863 ops/s
[info] # Warmup Iteration   4: 173552.619 ops/s
[info] # Warmup Iteration   5: 167832.698 ops/s
[info] Iteration   1: 169630.940 ops/s
[info]                  ·gc.alloc.rate:            578.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       5368.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6254.657 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 169540.714 ops/s
[info]                  ·gc.alloc.rate:            580.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       5385.848 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6257.866 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 169993.641 ops/s
[info]                  ·gc.alloc.rate:            581.057 MB/sec
[info]                  ·gc.alloc.rate.norm:       5379.444 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6241.157 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 169787.438 ops/s
[info]                  ·gc.alloc.rate:            579.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       5373.898 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6248.838 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 169711.198 ops/s
[info]                  ·gc.alloc.rate:            579.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       5379.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6251.562 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   169732.786 ±(99.9%) 663.504 ops/s [Average]
[info]   (min, avg, max) = (169540.714, 169732.786, 169993.641), stdev = 172.310
[info]   CI (99.9%): [169069.282, 170396.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   579.851 ±(99.9%) 3.580 MB/sec [Average]
[info]   (min, avg, max) = (578.470, 579.851, 581.057), stdev = 0.930
[info]   CI (99.9%): [576.271, 583.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5377.275 ±(99.9%) 25.776 B/op [Average]
[info]   (min, avg, max) = (5368.002, 5377.275, 5385.848), stdev = 6.694
[info]   CI (99.9%): [5351.499, 5403.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   674.048 ±(99.9%) 0.228 MB/sec [Average]
[info]   (min, avg, max) = (673.974, 674.048, 674.134), stdev = 0.059
[info]   CI (99.9%): [673.820, 674.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6250.816 ±(99.9%) 24.523 B/op [Average]
[info]   (min, avg, max) = (6241.157, 6250.816, 6257.866), stdev = 6.369
[info]   CI (99.9%): [6226.293, 6275.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212437.564 ops/s
[info] # Warmup Iteration   2: 428817.268 ops/s
[info] # Warmup Iteration   3: 435602.358 ops/s
[info] # Warmup Iteration   4: 409968.771 ops/s
[info] # Warmup Iteration   5: 435361.357 ops/s
[info] Iteration   1: 432904.475 ops/s
[info]                  ·gc.alloc.rate:            426.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2448.541 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 412250.724 ops/s
[info]                  ·gc.alloc.rate:                   406.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2568.612 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.543 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 434137.126 ops/s
[info]                  ·gc.alloc.rate:      428.063 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 431135.822 ops/s
[info]                  ·gc.alloc.rate:            428.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       1563.880 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2458.523 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 432077.197 ops/s
[info]                  ·gc.alloc.rate:            426.121 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2453.028 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   428501.069 ±(99.9%) 35237.045 ops/s [Average]
[info]   (min, avg, max) = (412250.724, 428501.069, 434137.126), stdev = 9150.949
[info]   CI (99.9%): [393264.024, 463738.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   423.234 ±(99.9%) 36.111 MB/sec [Average]
[info]   (min, avg, max) = (406.545, 423.234, 428.551), stdev = 9.378
[info]   CI (99.9%): [387.122, 459.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1554.431 ±(99.9%) 20.343 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1554.431, 1563.880), stdev = 5.283
[info]   CI (99.9%): [1534.087, 1574.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.687 ±(99.9%) 1159.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.687, 673.711), stdev = 301.135
[info]   CI (99.9%): [≈ 0, 1698.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1985.741 ±(99.9%) 4278.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1985.741, 2568.612), stdev = 1111.190
[info]   CI (99.9%): [≈ 0, 6264.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.509 ±(99.9%) 4.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.509, 2.543), stdev = 1.137
[info]   CI (99.9%): [≈ 0, 4.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.200, 9.000), stdev = 4.025
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 790015.477 ops/s
[info] # Warmup Iteration   2: 1013636.976 ops/s
[info] # Warmup Iteration   3: 1054531.480 ops/s
[info] # Warmup Iteration   4: 1052729.187 ops/s
[info] # Warmup Iteration   5: 1058124.045 ops/s
[info] Iteration   1: 1042311.973 ops/s
[info]                  ·gc.alloc.rate:            779.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       1177.814 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1017.934 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1047243.188 ops/s
[info]                  ·gc.alloc.rate:            777.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1013.119 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1045086.513 ops/s
[info]                  ·gc.alloc.rate:            776.733 MB/sec
[info]                  ·gc.alloc.rate.norm:       1170.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2030.468 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 1060735.024 ops/s
[info]                  ·gc.alloc.rate:            787.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.448 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1000.220 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1052628.105 ops/s
[info]                  ·gc.alloc.rate:            781.077 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1007.857 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1049600.961 ±(99.9%) 28046.308 ops/s [Average]
[info]   (min, avg, max) = (1042311.973, 1049600.961, 1060735.024), stdev = 7283.537
[info]   CI (99.9%): [1021554.653, 1077647.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   780.469 ±(99.9%) 16.424 MB/sec [Average]
[info]   (min, avg, max) = (776.733, 780.469, 787.364), stdev = 4.265
[info]   CI (99.9%): [764.045, 796.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1170.517 ±(99.9%) 16.013 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1170.517, 1177.814), stdev = 4.159
[info]   CI (99.9%): [1154.504, 1186.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.795 ±(99.9%) 1160.459 MB/sec [Average]
[info]   (min, avg, max) = (673.985, 808.795, 1347.897), stdev = 301.368
[info]   CI (99.9%): [≈ 0, 1969.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1213.920 ±(99.9%) 1757.863 B/op [Average]
[info]   (min, avg, max) = (1000.220, 1213.920, 2030.468), stdev = 456.511
[info]   CI (99.9%): [≈ 0, 2971.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.400, 16.000), stdev = 3.715
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 911681.986 ops/s
[info] # Warmup Iteration   2: 1101336.977 ops/s
[info] # Warmup Iteration   3: 1108314.492 ops/s
[info] # Warmup Iteration   4: 1155766.461 ops/s
[info] # Warmup Iteration   5: 1155682.345 ops/s
[info] Iteration   1: 1156245.576 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1115219.133 ops/s
[info]                  ·gc.alloc.rate:      1.578 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.228 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1150520.508 ops/s
[info]                  ·gc.alloc.rate:      1.266 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.733 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1156827.830 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.232 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1156315.201 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1147025.650 ±(99.9%) 69184.566 ops/s [Average]
[info]   (min, avg, max) = (1115219.133, 1147025.650, 1156827.830), stdev = 17967.012
[info]   CI (99.9%): [1077841.083, 1216210.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.603 ±(99.9%) 2.923 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.603, 1.578), stdev = 0.759
[info]   CI (99.9%): [≈ 0, 3.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.839 ±(99.9%) 4.085 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.839, 2.228), stdev = 1.061
[info]   CI (99.9%): [≈ 0, 4.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132194.610 ops/s
[info] # Warmup Iteration   2: 310619.506 ops/s
[info] # Warmup Iteration   3: 313257.827 ops/s
[info] # Warmup Iteration   4: 315242.885 ops/s
[info] # Warmup Iteration   5: 317511.924 ops/s
[info] Iteration   1: 313772.199 ops/s
[info]                  ·gc.alloc.rate:                   848.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6749.442 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 317294.693 ops/s
[info]                  ·gc.alloc.rate:            858.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       4258.527 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3340.582 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 317161.898 ops/s
[info]                  ·gc.alloc.rate:                   861.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              4275.386 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3338.446 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 317883.870 ops/s
[info]                  ·gc.alloc.rate:            859.707 MB/sec
[info]                  ·gc.alloc.rate.norm:       4256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3333.754 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 311784.948 ops/s
[info]                  ·gc.alloc.rate:            849.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       4286.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6795.812 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   315579.521 ±(99.9%) 10264.143 ops/s [Average]
[info]   (min, avg, max) = (311784.948, 315579.521, 317883.870), stdev = 2665.565
[info]   CI (99.9%): [305315.379, 325843.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   855.472 ±(99.9%) 24.137 MB/sec [Average]
[info]   (min, avg, max) = (848.248, 855.472, 861.528), stdev = 6.268
[info]   CI (99.9%): [831.335, 879.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4266.429 ±(99.9%) 52.808 B/op [Average]
[info]   (min, avg, max) = (4256.001, 4266.429, 4286.232), stdev = 13.714
[info]   CI (99.9%): [4213.622, 4319.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   942.262 ±(99.9%) 1418.407 MB/sec [Average]
[info]   (min, avg, max) = (672.726, 942.262, 1346.344), stdev = 368.356
[info]   CI (99.9%): [≈ 0, 2360.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4711.607 ±(99.9%) 7245.057 B/op [Average]
[info]   (min, avg, max) = (3333.754, 4711.607, 6795.812), stdev = 1881.518
[info]   CI (99.9%): [≈ 0, 11956.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.329 ±(99.9%) 7.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.329, 3.341), stdev = 1.820
[info]   CI (99.9%): [≈ 0, 8.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.800, 19.000), stdev = 5.215
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1396.887 ops/s
[info] # Warmup Iteration   2: 3819.135 ops/s
[info] # Warmup Iteration   3: 3900.241 ops/s
[info] # Warmup Iteration   4: 4003.673 ops/s
[info] # Warmup Iteration   5: 3985.013 ops/s
[info] Iteration   1: 3920.000 ops/s
[info]                  ·gc.alloc.rate:            805.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       323320.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 269496.330 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 3950.018 ops/s
[info]                  ·gc.alloc.rate:            811.532 MB/sec
[info]                  ·gc.alloc.rate.norm:       323320.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 267518.251 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 3866.609 ops/s
[info]                  ·gc.alloc.rate:            794.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       323320.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 546517.377 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   4: 3934.703 ops/s
[info]                  ·gc.alloc.rate:            808.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       323446.862 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 268537.756 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 3963.278 ops/s
[info]                  ·gc.alloc.rate:            815.134 MB/sec
[info]                  ·gc.alloc.rate.norm:       323731.479 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 266640.920 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   3926.922 ±(99.9%) 144.094 ops/s [Average]
[info]   (min, avg, max) = (3866.609, 3926.922, 3963.278), stdev = 37.421
[info]   CI (99.9%): [3782.827, 4071.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   806.920 ±(99.9%) 30.770 MB/sec [Average]
[info]   (min, avg, max) = (794.242, 806.920, 815.134), stdev = 7.991
[info]   CI (99.9%): [776.149, 837.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   323427.739 ±(99.9%) 687.129 B/op [Average]
[info]   (min, avg, max) = (323320.111, 323427.739, 323731.479), stdev = 178.445
[info]   CI (99.9%): [322740.610, 324114.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   805.556 ±(99.9%) 1155.880 MB/sec [Average]
[info]   (min, avg, max) = (671.090, 805.556, 1342.531), stdev = 300.178
[info]   CI (99.9%): [≈ 0, 1961.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   323742.127 ±(99.9%) 479558.294 B/op [Average]
[info]   (min, avg, max) = (266640.920, 323742.127, 546517.377), stdev = 124539.766
[info]   CI (99.9%): [≈ 0, 803300.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.400, 20.000), stdev = 4.827
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 570.592 ops/s
[info] # Warmup Iteration   2: 3459.647 ops/s
[info] # Warmup Iteration   3: 3380.643 ops/s
[info] # Warmup Iteration   4: 3501.725 ops/s
[info] # Warmup Iteration   5: 3638.252 ops/s
[info] Iteration   1: 3657.053 ops/s
[info]                  ·gc.alloc.rate:            724.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       311720.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 288659.385 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3600.000 ops/s
[info]                  ·gc.alloc.rate:            713.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       311831.349 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 293228.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 3601.890 ops/s
[info]                  ·gc.alloc.rate:            713.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       311720.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 293065.787 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 3572.077 ops/s
[info]                  ·gc.alloc.rate:            709.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       311720.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1335.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 586946.099 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   5: 3599.908 ops/s
[info]                  ·gc.alloc.rate:            712.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       311720.122 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 293228.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   3606.186 ±(99.9%) 119.417 ops/s [Average]
[info]   (min, avg, max) = (3572.077, 3606.186, 3657.053), stdev = 31.012
[info]   CI (99.9%): [3486.769, 3725.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   714.621 ±(99.9%) 21.781 MB/sec [Average]
[info]   (min, avg, max) = (709.160, 714.621, 724.225), stdev = 5.657
[info]   CI (99.9%): [692.840, 736.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   311742.369 ±(99.9%) 191.537 B/op [Average]
[info]   (min, avg, max) = (311720.113, 311742.369, 311831.349), stdev = 49.741
[info]   CI (99.9%): [311550.832, 311933.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   803.624 ±(99.9%) 1144.464 MB/sec [Average]
[info]   (min, avg, max) = (670.648, 803.624, 1335.296), stdev = 297.214
[info]   CI (99.9%): [≈ 0, 1948.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   351025.677 ±(99.9%) 507892.354 B/op [Average]
[info]   (min, avg, max) = (288659.385, 351025.677, 586946.099), stdev = 131898.032
[info]   CI (99.9%): [≈ 0, 858918.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 12.800, 22.000), stdev = 5.167
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20247.093 ops/s
[info] # Warmup Iteration   2: 31585.208 ops/s
[info] # Warmup Iteration   3: 33769.026 ops/s
[info] # Warmup Iteration   4: 33826.140 ops/s
[info] # Warmup Iteration   5: 34857.310 ops/s
[info] Iteration   1: 34842.539 ops/s
[info]                  ·gc.alloc.rate:      571.055 MB/sec
[info]                  ·gc.alloc.rate.norm: 25800.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34577.914 ops/s
[info]                  ·gc.alloc.rate:            566.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30588.140 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 34227.847 ops/s
[info]                  ·gc.alloc.rate:            562.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       25880.346 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30905.333 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 34609.509 ops/s
[info]                  ·gc.alloc.rate:            567.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30563.399 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 34828.745 ops/s
[info]                  ·gc.alloc.rate:            572.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       25857.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30371.259 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   34617.311 ±(99.9%) 960.208 ops/s [Average]
[info]   (min, avg, max) = (34227.847, 34617.311, 34842.539), stdev = 249.363
[info]   CI (99.9%): [33657.103, 35577.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   568.026 ±(99.9%) 14.329 MB/sec [Average]
[info]   (min, avg, max) = (562.821, 568.026, 572.161), stdev = 3.721
[info]   CI (99.9%): [553.697, 582.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25827.534 ±(99.9%) 148.467 B/op [Average]
[info]   (min, avg, max) = (25800.013, 25827.534, 25880.346), stdev = 38.556
[info]   CI (99.9%): [25679.068, 25976.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   537.633 ±(99.9%) 1157.295 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.633, 672.099), stdev = 300.546
[info]   CI (99.9%): [≈ 0, 1694.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   24485.626 ±(99.9%) 52712.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24485.626, 30905.333), stdev = 13689.222
[info]   CI (99.9%): [≈ 0, 77197.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.000, 9.000), stdev = 3.937
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 678.573 ops/s
[info] # Warmup Iteration   2: 2992.863 ops/s
[info] # Warmup Iteration   3: 3007.444 ops/s
[info] # Warmup Iteration   4: 3190.065 ops/s
[info] # Warmup Iteration   5: 3154.190 ops/s
[info] Iteration   1: 3225.425 ops/s
[info]                  ·gc.alloc.rate:            847.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       413421.299 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 327314.331 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 3200.786 ops/s
[info]                  ·gc.alloc.rate:            840.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       413451.968 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 659535.310 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  21.000 ms
[info] Iteration   3: 3232.095 ops/s
[info]                  ·gc.alloc.rate:            848.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       413400.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 326605.639 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 3241.064 ops/s
[info]                  ·gc.alloc.rate:            851.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       413504.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 325698.961 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 3240.842 ops/s
[info]                  ·gc.alloc.rate:            851.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       413400.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 325698.961 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3228.042 ±(99.9%) 63.844 ops/s [Average]
[info]   (min, avg, max) = (3200.786, 3228.042, 3241.064), stdev = 16.580
[info]   CI (99.9%): [3164.199, 3291.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   847.919 ±(99.9%) 16.806 MB/sec [Average]
[info]   (min, avg, max) = (840.832, 847.919, 851.566), stdev = 4.364
[info]   CI (99.9%): [831.113, 864.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   413435.538 ±(99.9%) 168.807 B/op [Average]
[info]   (min, avg, max) = (413400.136, 413435.538, 413504.153), stdev = 43.839
[info]   CI (99.9%): [413266.731, 413604.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   804.797 ±(99.9%) 1154.837 MB/sec [Average]
[info]   (min, avg, max) = (670.646, 804.797, 1341.288), stdev = 299.908
[info]   CI (99.9%): [≈ 0, 1959.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   392970.641 ±(99.9%) 573806.497 B/op [Average]
[info]   (min, avg, max) = (325698.961, 392970.641, 659535.310), stdev = 149015.725
[info]   CI (99.9%): [≈ 0, 966777.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 12.200, 21.000), stdev = 4.919
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7532.855 ops/s
[info] # Warmup Iteration   2: 13351.342 ops/s
[info] # Warmup Iteration   3: 13970.210 ops/s
[info] # Warmup Iteration   4: 13984.883 ops/s
[info] # Warmup Iteration   5: 13942.254 ops/s
[info] Iteration   1: 13374.282 ops/s
[info]                  ·gc.alloc.rate:            694.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       81704.375 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.543 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79013.576 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 14073.358 ops/s
[info]                  ·gc.alloc.rate:            730.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       81672.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75084.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 13797.264 ops/s
[info]                  ·gc.alloc.rate:            721.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       82260.499 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76591.638 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 13858.774 ops/s
[info]                  ·gc.alloc.rate:            721.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       81961.795 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76243.570 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 13943.643 ops/s
[info]                  ·gc.alloc.rate:            723.695 MB/sec
[info]                  ·gc.alloc.rate.norm:       81672.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75778.937 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13809.464 ±(99.9%) 1018.071 ops/s [Average]
[info]   (min, avg, max) = (13374.282, 13809.464, 14073.358), stdev = 264.390
[info]   CI (99.9%): [12791.393, 14827.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   718.216 ±(99.9%) 53.045 MB/sec [Average]
[info]   (min, avg, max) = (694.412, 718.216, 730.116), stdev = 13.776
[info]   CI (99.9%): [665.171, 771.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81854.146 ±(99.9%) 992.007 B/op [Average]
[info]   (min, avg, max) = (81672.029, 81854.146, 82260.499), stdev = 257.621
[info]   CI (99.9%): [80862.139, 82846.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   671.411 ±(99.9%) 0.459 MB/sec [Average]
[info]   (min, avg, max) = (671.226, 671.411, 671.543), stdev = 0.119
[info]   CI (99.9%): [670.951, 671.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   76542.446 ±(99.9%) 5745.969 B/op [Average]
[info]   (min, avg, max) = (75084.507, 76542.446, 79013.576), stdev = 1492.210
[info]   CI (99.9%): [70796.476, 82288.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6510.069 ops/s
[info] # Warmup Iteration   2: 16389.676 ops/s
[info] # Warmup Iteration   3: 16843.107 ops/s
[info] # Warmup Iteration   4: 17041.021 ops/s
[info] # Warmup Iteration   5: 17054.089 ops/s
[info] Iteration   1: 17056.135 ops/s
[info]                  ·gc.alloc.rate:            819.180 MB/sec
[info]                  ·gc.alloc.rate.norm:       75601.713 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61894.257 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 17069.562 ops/s
[info]                  ·gc.alloc.rate:            820.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       75680.577 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61847.129 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 16885.337 ops/s
[info]                  ·gc.alloc.rate:            812.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       75775.808 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 125034.462 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   4: 17142.433 ops/s
[info]                  ·gc.alloc.rate:            822.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       75559.916 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61583.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 17140.528 ops/s
[info]                  ·gc.alloc.rate:            822.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       75560.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61590.996 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   17058.799 ±(99.9%) 403.336 ops/s [Average]
[info]   (min, avg, max) = (16885.337, 17058.799, 17142.433), stdev = 104.745
[info]   CI (99.9%): [16655.462, 17462.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   819.712 ±(99.9%) 15.804 MB/sec [Average]
[info]   (min, avg, max) = (812.927, 819.712, 822.954), stdev = 4.104
[info]   CI (99.9%): [803.908, 835.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   75635.630 ±(99.9%) 356.326 B/op [Average]
[info]   (min, avg, max) = (75559.916, 75635.630, 75775.808), stdev = 92.537
[info]   CI (99.9%): [75279.305, 75991.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   804.827 ±(99.9%) 1154.963 MB/sec [Average]
[info]   (min, avg, max) = (670.653, 804.827, 1341.377), stdev = 299.940
[info]   CI (99.9%): [≈ 0, 1959.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   74390.131 ±(99.9%) 109017.124 B/op [Average]
[info]   (min, avg, max) = (61583.812, 74390.131, 125034.462), stdev = 28311.401
[info]   CI (99.9%): [≈ 0, 183407.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 12.200, 20.000), stdev = 4.382
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:43:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189067.650 ops/s
[info] # Warmup Iteration   2: 229398.804 ops/s
[info] # Warmup Iteration   3: 229422.050 ops/s
[info] # Warmup Iteration   4: 230696.128 ops/s
[info] # Warmup Iteration   5: 234009.110 ops/s
[info] Iteration   1: 237163.350 ops/s
[info]                  ·gc.alloc.rate:            836.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4460.351 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 233878.229 ops/s
[info]                  ·gc.alloc.rate:            831.513 MB/sec
[info]                  ·gc.alloc.rate.norm:       5595.675 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4522.932 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 236137.603 ops/s
[info]                  ·gc.alloc.rate:            833.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4479.747 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 234971.100 ops/s
[info]                  ·gc.alloc.rate:            828.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1344.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9004.061 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   5: 238268.100 ops/s
[info]                  ·gc.alloc.rate:            840.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4439.595 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   236083.676 ±(99.9%) 6681.210 ops/s [Average]
[info]   (min, avg, max) = (233878.229, 236083.676, 238268.100), stdev = 1735.089
[info]   CI (99.9%): [229402.466, 242764.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   834.080 ±(99.9%) 17.259 MB/sec [Average]
[info]   (min, avg, max) = (828.867, 834.080, 840.335), stdev = 4.482
[info]   CI (99.9%): [816.821, 851.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5560.736 ±(99.9%) 75.208 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5560.736, 5595.675), stdev = 19.531
[info]   CI (99.9%): [5485.529, 5635.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   806.519 ±(99.9%) 1157.463 MB/sec [Average]
[info]   (min, avg, max) = (671.965, 806.519, 1344.230), stdev = 300.589
[info]   CI (99.9%): [≈ 0, 1963.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5381.337 ±(99.9%) 7799.086 B/op [Average]
[info]   (min, avg, max) = (4439.595, 5381.337, 9004.061), stdev = 2025.398
[info]   CI (99.9%): [≈ 0, 13180.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.600, 18.000), stdev = 4.159
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199883.844 ops/s
[info] # Warmup Iteration   2: 259975.262 ops/s
[info] # Warmup Iteration   3: 261898.309 ops/s
[info] # Warmup Iteration   4: 262273.956 ops/s
[info] # Warmup Iteration   5: 261659.841 ops/s
[info] Iteration   1: 262846.838 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 260798.208 ops/s
[info]                  ·gc.alloc.rate:      0.839 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 263241.496 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 263217.420 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 263296.928 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   262680.178 ±(99.9%) 4108.509 ops/s [Average]
[info]   (min, avg, max) = (260798.208, 262680.178, 263296.928), stdev = 1066.967
[info]   CI (99.9%): [258571.669, 266788.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.168 ±(99.9%) 1.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.168, 0.839), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.014 ±(99.9%) 8.715 B/op [Average]
[info]   (min, avg, max) = (0.002, 1.014, 5.063), stdev = 2.263
[info]   CI (99.9%): [≈ 0, 9.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8169.904 ops/s
[info] # Warmup Iteration   2: 15507.233 ops/s
[info] # Warmup Iteration   3: 16089.228 ops/s
[info] # Warmup Iteration   4: 15983.303 ops/s
[info] # Warmup Iteration   5: 16007.351 ops/s
[info] Iteration   1: 15879.172 ops/s
[info]                  ·gc.alloc.rate:                   821.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              81424.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1340.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        132904.136 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 66.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 15906.184 ops/s
[info]                  ·gc.alloc.rate:            827.192 MB/sec
[info]                  ·gc.alloc.rate.norm:       81858.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66368.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 15868.180 ops/s
[info]                  ·gc.alloc.rate:            841.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       83448.955 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66531.159 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 16040.794 ops/s
[info]                  ·gc.alloc.rate:            829.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       81407.339 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65813.764 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 16091.047 ops/s
[info]                  ·gc.alloc.rate:            832.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       81452.630 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65609.297 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15957.075 ±(99.9%) 392.306 ops/s [Average]
[info]   (min, avg, max) = (15868.180, 15957.075, 16091.047), stdev = 101.881
[info]   CI (99.9%): [15564.769, 16349.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   830.431 ±(99.9%) 28.208 MB/sec [Average]
[info]   (min, avg, max) = (821.417, 830.431, 841.256), stdev = 7.325
[info]   CI (99.9%): [802.224, 858.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81918.194 ±(99.9%) 3372.762 B/op [Average]
[info]   (min, avg, max) = (81407.339, 81918.194, 83448.955), stdev = 875.896
[info]   CI (99.9%): [78545.431, 85290.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   804.708 ±(99.9%) 1153.883 MB/sec [Average]
[info]   (min, avg, max) = (670.663, 804.708, 1340.756), stdev = 299.660
[info]   CI (99.9%): [≈ 0, 1958.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79445.286 ±(99.9%) 115083.530 B/op [Average]
[info]   (min, avg, max) = (65609.297, 79445.286, 132904.136), stdev = 29886.827
[info]   CI (99.9%): [≈ 0, 194528.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   13.205 ±(99.9%) 113.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.205, 66.023), stdev = 29.526
[info]   CI (99.9%): [≈ 0, 126.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 12.600, 21.000), stdev = 4.722
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1030307.087 ops/s
[info] # Warmup Iteration   2: 1346200.956 ops/s
[info] # Warmup Iteration   3: 1353947.462 ops/s
[info] # Warmup Iteration   4: 1354636.416 ops/s
[info] # Warmup Iteration   5: 1354872.556 ops/s
[info] Iteration   1: 1353496.604 ops/s
[info]                  ·gc.alloc.rate:      55.052 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1354322.364 ops/s
[info]                  ·gc.alloc.rate:      55.062 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1355635.124 ops/s
[info]                  ·gc.alloc.rate:      55.130 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1341958.545 ops/s
[info]                  ·gc.alloc.rate:      55.503 MB/sec
[info]                  ·gc.alloc.rate.norm: 65.101 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1357855.031 ops/s
[info]                  ·gc.alloc.rate:      55.468 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.288 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1352653.534 ±(99.9%) 23878.960 ops/s [Average]
[info]   (min, avg, max) = (1341958.545, 1352653.534, 1357855.031), stdev = 6201.290
[info]   CI (99.9%): [1328774.573, 1376532.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   55.243 ±(99.9%) 0.861 MB/sec [Average]
[info]   (min, avg, max) = (55.052, 55.243, 55.503), stdev = 0.224
[info]   CI (99.9%): [54.382, 56.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.278 ±(99.9%) 1.836 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.278, 65.101), stdev = 0.477
[info]   CI (99.9%): [62.442, 66.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:42:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8187.075 ops/s
[info] # Warmup Iteration   2: 54315.550 ops/s
[info] # Warmup Iteration   3: 57874.522 ops/s
[info] # Warmup Iteration   4: 58318.406 ops/s
[info] # Warmup Iteration   5: 59167.114 ops/s
[info] Iteration   1: 60075.148 ops/s
[info]                  ·gc.alloc.rate:                                  2473.229 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64792.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2719.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71254.653 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                122.161 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 60170.813 ops/s
[info]                  ·gc.alloc.rate:            2478.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       64830.786 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71297.801 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 60671.552 ops/s
[info]                  ·gc.alloc.rate:            2497.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       64792.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53030.119 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 60655.382 ops/s
[info]                  ·gc.alloc.rate:                                  2497.436 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64802.225 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70727.805 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 60583.315 ops/s
[info]                  ·gc.alloc.rate:            2496.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       64859.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70810.677 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   60431.242 ±(99.9%) 1098.851 ops/s [Average]
[info]   (min, avg, max) = (60075.148, 60431.242, 60671.552), stdev = 285.368
[info]   CI (99.9%): [59332.391, 61530.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2488.613 ±(99.9%) 45.811 MB/sec [Average]
[info]   (min, avg, max) = (2473.229, 2488.613, 2497.436), stdev = 11.897
[info]   CI (99.9%): [2442.802, 2534.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64815.231 ±(99.9%) 112.547 B/op [Average]
[info]   (min, avg, max) = (64792.007, 64815.231, 64859.132), stdev = 29.228
[info]   CI (99.9%): [64702.684, 64927.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.043), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2588.219 ±(99.9%) 1171.523 MB/sec [Average]
[info]   (min, avg, max) = (2043.995, 2588.219, 2725.941), stdev = 304.241
[info]   CI (99.9%): [1416.696, 3759.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67424.211 ±(99.9%) 31000.001 B/op [Average]
[info]   (min, avg, max) = (53030.119, 67424.211, 71297.801), stdev = 8050.602
[info]   CI (99.9%): [36424.210, 98424.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   24.432 ±(99.9%) 210.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.432, 122.161), stdev = 54.632
[info]   CI (99.9%): [≈ 0, 234.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 11.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 701541.180 ops/s
[info] # Warmup Iteration   2: 1560564.862 ops/s
[info] # Warmup Iteration   3: 1600147.415 ops/s
[info] # Warmup Iteration   4: 1633122.168 ops/s
[info] # Warmup Iteration   5: 1637268.583 ops/s
[info] Iteration   1: 1624350.478 ops/s
[info]                  ·gc.alloc.rate:            850.427 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1304.483 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 1631453.084 ops/s
[info]                  ·gc.alloc.rate:            857.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       827.692 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 649.078 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1607610.213 ops/s
[info]                  ·gc.alloc.rate:            841.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 658.678 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1642379.049 ops/s
[info]                  ·gc.alloc.rate:            859.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 644.742 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1628358.505 ops/s
[info]                  ·gc.alloc.rate:            852.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1300.628 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1626830.266 ±(99.9%) 48746.416 ops/s [Average]
[info]   (min, avg, max) = (1607610.213, 1626830.266, 1642379.049), stdev = 12659.289
[info]   CI (99.9%): [1578083.850, 1675576.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   852.493 ±(99.9%) 27.606 MB/sec [Average]
[info]   (min, avg, max) = (841.584, 852.493, 859.783), stdev = 7.169
[info]   CI (99.9%): [824.888, 880.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   824.783 ±(99.9%) 6.271 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.783, 827.692), stdev = 1.629
[info]   CI (99.9%): [818.512, 831.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.050 ±(99.9%) 1419.980 MB/sec [Average]
[info]   (min, avg, max) = (672.734, 942.050, 1346.319), stdev = 368.764
[info]   CI (99.9%): [≈ 0, 2362.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   911.522 ±(99.9%) 1374.686 B/op [Average]
[info]   (min, avg, max) = (644.742, 911.522, 1304.483), stdev = 357.002
[info]   CI (99.9%): [≈ 0, 2286.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.600, 18.000), stdev = 4.930
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1255286.337 ops/s
[info] # Warmup Iteration   2: 1848709.421 ops/s
[info] # Warmup Iteration   3: 1955816.122 ops/s
[info] # Warmup Iteration   4: 1934365.038 ops/s
[info] # Warmup Iteration   5: 1971097.750 ops/s
[info] Iteration   1: 1860049.757 ops/s
[info]                  ·gc.alloc.rate:            520.017 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 570.329 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1894452.294 ops/s
[info]                  ·gc.alloc.rate:            531.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       441.971 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 560.056 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1947660.436 ops/s
[info]                  ·gc.alloc.rate:            547.791 MB/sec
[info]                  ·gc.alloc.rate.norm:       442.671 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 544.764 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1953094.640 ops/s
[info]                  ·gc.alloc.rate:            546.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 543.236 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1977053.010 ops/s
[info]                  ·gc.alloc.rate:      552.726 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   1926462.027 ±(99.9%) 184201.387 ops/s [Average]
[info]   (min, avg, max) = (1860049.757, 1926462.027, 1977053.010), stdev = 47836.515
[info]   CI (99.9%): [1742260.641, 2110663.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   539.733 ±(99.9%) 51.834 MB/sec [Average]
[info]   (min, avg, max) = (520.017, 539.733, 552.726), stdev = 13.461
[info]   CI (99.9%): [487.899, 591.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.954 ±(99.9%) 4.901 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.954, 442.671), stdev = 1.273
[info]   CI (99.9%): [436.053, 445.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.285 ±(99.9%) 1160.851 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.285, 674.184), stdev = 301.469
[info]   CI (99.9%): [≈ 0, 1700.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   443.677 ±(99.9%) 956.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 443.677, 570.329), stdev = 248.276
[info]   CI (99.9%): [≈ 0, 1399.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 8.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1302055.320 ops/s
[info] # Warmup Iteration   2: 2142068.063 ops/s
[info] # Warmup Iteration   3: 2191126.995 ops/s
[info] # Warmup Iteration   4: 2194693.603 ops/s
[info] # Warmup Iteration   5: 2193988.299 ops/s
[info] Iteration   1: 2187385.095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2194054.812 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2193870.538 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2193275.623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2195120.540 ops/s
[info]                  ·gc.alloc.rate:      0.256 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.183 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2192741.322 ±(99.9%) 11811.455 ops/s [Average]
[info]   (min, avg, max) = (2187385.095, 2192741.322, 2195120.540), stdev = 3067.397
[info]   CI (99.9%): [2180929.867, 2204552.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.051 ±(99.9%) 0.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.051, 0.256), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.037 ±(99.9%) 0.316 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.037, 0.183), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8178.302 ops/s
[info] # Warmup Iteration   2: 44583.657 ops/s
[info] # Warmup Iteration   3: 44039.996 ops/s
[info] # Warmup Iteration   4: 46292.490 ops/s
[info] # Warmup Iteration   5: 46056.303 ops/s
[info] Iteration   1: 46154.275 ops/s
[info]                  ·gc.alloc.rate:                   1855.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              63284.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2021.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68963.146 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 159.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   2: 47044.450 ops/s
[info]                  ·gc.alloc.rate:                                  1891.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             63274.741 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68194.992 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                133.716 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 47377.698 ops/s
[info]                  ·gc.alloc.rate:                                  1904.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             63276.817 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.874 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       45275.646 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 46392.405 ops/s
[info]                  ·gc.alloc.rate:            1869.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       63415.854 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69355.167 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 47295.716 ops/s
[info]                  ·gc.alloc.rate:                                  1901.563 MB/sec
[info]                  ·gc.alloc.rate.norm:                             63277.678 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68032.636 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   46852.909 ±(99.9%) 2116.386 ops/s [Average]
[info]   (min, avg, max) = (46154.275, 46852.909, 47377.698), stdev = 549.619
[info]   CI (99.9%): [44736.523, 48969.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1884.643 ±(99.9%) 82.315 MB/sec [Average]
[info]   (min, avg, max) = (1855.468, 1884.643, 1904.806), stdev = 21.377
[info]   CI (99.9%): [1802.328, 1966.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   63305.829 ±(99.9%) 237.215 B/op [Average]
[info]   (min, avg, max) = (63274.741, 63305.829, 63415.854), stdev = 61.604
[info]   CI (99.9%): [63068.614, 63543.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.478 ±(99.9%) 2.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.478, 1.476), stdev = 0.671
[info]   CI (99.9%): [≈ 0, 3.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1902.586 ±(99.9%) 1162.214 MB/sec [Average]
[info]   (min, avg, max) = (1362.921, 1902.586, 2044.537), stdev = 301.823
[info]   CI (99.9%): [740.372, 3064.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   63964.317 ±(99.9%) 40283.229 B/op [Average]
[info]   (min, avg, max) = (45275.646, 63964.317, 69355.167), stdev = 10461.427
[info]   CI (99.9%): [23681.088, 104247.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   58.544 ±(99.9%) 310.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.544, 159.006), stdev = 80.662
[info]   CI (99.9%): [≈ 0, 369.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 25.000), stdev = 9.311
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79767.713 ops/s
[info] # Warmup Iteration   2: 726282.979 ops/s
[info] # Warmup Iteration   3: 753394.911 ops/s
[info] # Warmup Iteration   4: 778632.177 ops/s
[info] # Warmup Iteration   5: 766637.811 ops/s
[info] Iteration   1: 785118.001 ops/s
[info]                  ·gc.alloc.rate:                                  2410.809 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4832.284 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.372 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.745 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2718.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5449.455 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                9.347 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 795753.582 ops/s
[info]                  ·gc.alloc.rate:            2443.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       4832.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4043.378 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 794318.813 ops/s
[info]                  ·gc.alloc.rate:            2438.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       4832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5400.860 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 786205.387 ops/s
[info]                  ·gc.alloc.rate:            2413.888 MB/sec
[info]                  ·gc.alloc.rate.norm:       4832.900 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4092.531 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 783422.994 ops/s
[info]                  ·gc.alloc.rate:            2414.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       4849.609 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2738.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5501.466 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   788963.756 ±(99.9%) 21772.049 ops/s [Average]
[info]   (min, avg, max) = (783422.994, 788963.756, 795753.582), stdev = 5654.132
[info]   CI (99.9%): [767191.706, 810735.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2424.224 ±(99.9%) 60.131 MB/sec [Average]
[info]   (min, avg, max) = (2410.809, 2424.224, 2443.925), stdev = 15.616
[info]   CI (99.9%): [2364.093, 2484.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4835.791 ±(99.9%) 29.773 B/op [Average]
[info]   (min, avg, max) = (4832.001, 4835.791, 4849.609), stdev = 7.732
[info]   CI (99.9%): [4806.018, 4865.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.074 ±(99.9%) 0.640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.372), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.149 ±(99.9%) 1.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.149, 0.745), stdev = 0.333
[info]   CI (99.9%): [≈ 0, 1.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2454.370 ±(99.9%) 1440.870 MB/sec [Average]
[info]   (min, avg, max) = (2044.096, 2454.370, 2738.657), stdev = 374.189
[info]   CI (99.9%): [1013.500, 3895.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4897.538 ±(99.9%) 2920.087 B/op [Average]
[info]   (min, avg, max) = (4043.378, 4897.538, 5501.466), stdev = 758.337
[info]   CI (99.9%): [1977.451, 7817.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.869 ±(99.9%) 16.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.869, 9.347), stdev = 4.180
[info]   CI (99.9%): [≈ 0, 17.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 13.000), stdev = 3.782
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.681 ops/s
[info] # Warmup Iteration   2: 4067148.887 ops/s
[info] # Warmup Iteration   3: 4214205.674 ops/s
[info] # Warmup Iteration   4: 4411500.409 ops/s
[info] # Warmup Iteration   5: 4355394.903 ops/s
[info] Iteration   1: 4398623.399 ops/s
[info]                  ·gc.alloc.rate:      268.986 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.215 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 4410767.290 ops/s
[info]                  ·gc.alloc.rate:      269.013 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4345599.633 ops/s
[info]                  ·gc.alloc.rate:            265.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.289 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 242.712 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 4410933.873 ops/s
[info]                  ·gc.alloc.rate:      269.027 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4372166.571 ops/s
[info]                  ·gc.alloc.rate:                   266.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        241.215 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   4387618.153 ±(99.9%) 108996.492 ops/s [Average]
[info]   (min, avg, max) = (4345599.633, 4387618.153, 4410933.873), stdev = 28306.043
[info]   CI (99.9%): [4278621.661, 4496614.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   267.914 ±(99.9%) 5.892 MB/sec [Average]
[info]   (min, avg, max) = (265.838, 267.914, 269.027), stdev = 1.530
[info]   CI (99.9%): [262.022, 273.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.101 ±(99.9%) 0.541 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.101, 96.289), stdev = 0.141
[info]   CI (99.9%): [95.560, 96.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   268.045 ±(99.9%) 1413.325 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.045, 670.141), stdev = 367.036
[info]   CI (99.9%): [≈ 0, 1681.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   96.786 ±(99.9%) 510.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 96.786, 242.712), stdev = 132.530
[info]   CI (99.9%): [≈ 0, 607.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.048 ±(99.9%) 0.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.240), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 11.000), stdev = 6.025
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:40:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37232.654 ops/s
[info] # Warmup Iteration   2: 671132.906 ops/s
[info] # Warmup Iteration   3: 729619.902 ops/s
[info] # Warmup Iteration   4: 753458.437 ops/s
[info] # Warmup Iteration   5: 769214.352 ops/s
[info] Iteration   1: 767238.903 ops/s
[info]                  ·gc.alloc.rate:            892.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1380.095 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 748423.285 ops/s
[info]                  ·gc.alloc.rate:            875.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       1841.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2829.537 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 767014.270 ops/s
[info]                  ·gc.alloc.rate:            892.732 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1380.533 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 768829.075 ops/s
[info]                  ·gc.alloc.rate:            894.823 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1377.197 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 758564.518 ops/s
[info]                  ·gc.alloc.rate:            882.941 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2791.909 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   762014.010 ±(99.9%) 33088.328 ops/s [Average]
[info]   (min, avg, max) = (748423.285, 762014.010, 768829.075), stdev = 8592.934
[info]   CI (99.9%): [728925.683, 795102.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   887.747 ±(99.9%) 32.200 MB/sec [Average]
[info]   (min, avg, max) = (875.305, 887.747, 894.823), stdev = 8.362
[info]   CI (99.9%): [855.547, 919.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1833.876 ±(99.9%) 15.442 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1833.876, 1841.048), stdev = 4.010
[info]   CI (99.9%): [1818.434, 1849.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   941.745 ±(99.9%) 1418.700 MB/sec [Average]
[info]   (min, avg, max) = (672.670, 941.745, 1345.412), stdev = 368.432
[info]   CI (99.9%): [≈ 0, 2360.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1951.854 ±(99.9%) 3019.483 B/op [Average]
[info]   (min, avg, max) = (1377.197, 1951.854, 2829.537), stdev = 784.150
[info]   CI (99.9%): [≈ 0, 4971.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.400, 19.000), stdev = 5.128
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5044793.913 ops/s
[info] # Warmup Iteration   2: 7734337.061 ops/s
[info] # Warmup Iteration   3: 8353289.903 ops/s
[info] # Warmup Iteration   4: 8276640.542 ops/s
[info] # Warmup Iteration   5: 8072602.951 ops/s
[info] Iteration   1: 8214291.407 ops/s
[info]                  ·gc.alloc.rate:            377.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.409 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129.291 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 8339456.929 ops/s
[info]                  ·gc.alloc.rate:      381.628 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8279060.368 ops/s
[info]                  ·gc.alloc.rate:            378.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 128.273 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 8340532.665 ops/s
[info]                  ·gc.alloc.rate:      381.534 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8195892.702 ops/s
[info]                  ·gc.alloc.rate:            375.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.182 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129.580 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8273846.814 ±(99.9%) 261181.553 ops/s [Average]
[info]   (min, avg, max) = (8195892.702, 8273846.814, 8340532.665), stdev = 67828.020
[info]   CI (99.9%): [8012665.262, 8535028.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   379.118 ±(99.9%) 9.556 MB/sec [Average]
[info]   (min, avg, max) = (375.835, 379.118, 381.628), stdev = 2.482
[info]   CI (99.9%): [369.561, 388.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.119 ±(99.9%) 0.695 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.119, 72.409), stdev = 0.180
[info]   CI (99.9%): [71.424, 72.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.823 ±(99.9%) 1423.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.823, 674.730), stdev = 369.551
[info]   CI (99.9%): [≈ 0, 1827.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   77.429 ±(99.9%) 272.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 77.429, 129.580), stdev = 70.684
[info]   CI (99.9%): [≈ 0, 349.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 7.000), stdev = 3.834
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257.825 ops/s
[info] # Warmup Iteration   2: 207724.791 ops/s
[info] # Warmup Iteration   3: 365921.966 ops/s
[info] # Warmup Iteration   4: 374226.205 ops/s
[info] # Warmup Iteration   5: 378618.424 ops/s
[info] Iteration   1: 380556.356 ops/s
[info]                  ·gc.alloc.rate:            1851.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       7657.490 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5564.754 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 375606.900 ops/s
[info]                  ·gc.alloc.rate:                   1827.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              7658.857 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2025.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8488.110 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.703 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   3: 386973.432 ops/s
[info]                  ·gc.alloc.rate:                                  1882.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7656.333 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8309.002 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.418 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 389786.418 ops/s
[info]                  ·gc.alloc.rate:            1895.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       7656.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8254.513 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 389322.566 ops/s
[info]                  ·gc.alloc.rate:            1893.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       7656.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5509.651 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   384449.134 ±(99.9%) 23732.890 ops/s [Average]
[info]   (min, avg, max) = (375606.900, 384449.134, 389786.418), stdev = 6163.356
[info]   CI (99.9%): [360716.244, 408182.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1870.197 ±(99.9%) 114.671 MB/sec [Average]
[info]   (min, avg, max) = (1827.642, 1870.197, 1895.921), stdev = 29.780
[info]   CI (99.9%): [1755.526, 1984.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7656.937 ±(99.9%) 4.759 B/op [Average]
[info]   (min, avg, max) = (7656.001, 7656.937, 7658.857), stdev = 1.236
[info]   CI (99.9%): [7652.178, 7661.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1764.138 ±(99.9%) 1441.823 MB/sec [Average]
[info]   (min, avg, max) = (1345.231, 1764.138, 2044.135), stdev = 374.437
[info]   CI (99.9%): [322.314, 3205.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   7225.206 ±(99.9%) 5943.367 B/op [Average]
[info]   (min, avg, max) = (5509.651, 7225.206, 8488.110), stdev = 1543.473
[info]   CI (99.9%): [1281.839, 13168.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 12.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.327), stdev = 3.180
[info]   CI (99.9%): [≈ 0, 13.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.224 ±(99.9%) 51.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.224, 30.703), stdev = 13.333
[info]   CI (99.9%): [≈ 0, 58.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.800, 22.000), stdev = 8.955
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1255.274 ops/s
[info] # Warmup Iteration   2: 3985.879 ops/s
[info] # Warmup Iteration   3: 4209.165 ops/s
[info] # Warmup Iteration   4: 4327.268 ops/s
[info] # Warmup Iteration   5: 4283.689 ops/s
[info] Iteration   1: 4273.773 ops/s
[info]                  ·gc.alloc.rate:                   1957.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              720842.178 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2025.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        746144.606 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.991 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2943.371 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 4328.424 ops/s
[info]                  ·gc.alloc.rate:                                  1983.384 MB/sec
[info]                  ·gc.alloc.rate.norm:                             721221.707 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.621 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       742963.318 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                242.165 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 4322.302 ops/s
[info]                  ·gc.alloc.rate:                                  1979.445 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720760.094 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.293 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 106.855 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       744236.759 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 4327.281 ops/s
[info]                  ·gc.alloc.rate:                                  1982.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720760.094 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 33.761 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       743377.164 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 4314.225 ops/s
[info]                  ·gc.alloc.rate:                                  1975.981 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720905.079 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.139 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 50.660 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       745616.252 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4313.201 ±(99.9%) 87.563 ops/s [Average]
[info]   (min, avg, max) = (4273.773, 4313.201, 4328.424), stdev = 22.740
[info]   CI (99.9%): [4225.638, 4400.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   1975.599 ±(99.9%) 41.503 MB/sec [Average]
[info]   (min, avg, max) = (1957.004, 1975.599, 1983.384), stdev = 10.778
[info]   CI (99.9%): [1934.096, 2017.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   720897.831 ±(99.9%) 735.635 B/op [Average]
[info]   (min, avg, max) = (720760.094, 720897.831, 721221.707), stdev = 191.042
[info]   CI (99.9%): [720162.195, 721633.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.112 ±(99.9%) 0.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.293), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   40.779 ±(99.9%) 160.723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.779, 106.855), stdev = 41.739
[info]   CI (99.9%): [≈ 0, 201.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2040.177 ±(99.9%) 31.215 MB/sec [Average]
[info]   (min, avg, max) = (2025.697, 2040.177, 2044.383), stdev = 8.106
[info]   CI (99.9%): [2008.962, 2071.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   744467.620 ±(99.9%) 5320.635 B/op [Average]
[info]   (min, avg, max) = (742963.318, 744467.620, 746144.606), stdev = 1381.752
[info]   CI (99.9%): [739146.985, 749788.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.731 ±(99.9%) 13.520 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.731, 7.991), stdev = 3.511
[info]   CI (99.9%): [≈ 0, 15.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   637.107 ±(99.9%) 4980.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 637.107, 2943.371), stdev = 1293.498
[info]   CI (99.9%): [≈ 0, 5617.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.000, 18.000), stdev = 5.050
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:39:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1002.424 ops/s
[info] # Warmup Iteration   2: 4559.363 ops/s
[info] # Warmup Iteration   3: 4821.089 ops/s
[info] # Warmup Iteration   4: 4873.032 ops/s
[info] # Warmup Iteration   5: 4874.484 ops/s
[info] Iteration   1: 4905.349 ops/s
[info]                  ·gc.alloc.rate:                   2027.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              650514.711 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2024.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        649403.396 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2350.588 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 4859.077 ops/s
[info]                  ·gc.alloc.rate:                   2008.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              650412.122 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2042.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        661509.057 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.999 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 647.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4882.786 ops/s
[info]                  ·gc.alloc.rate:                                  2018.290 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650343.533 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.370 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       658902.486 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4868.287 ops/s
[info]                  ·gc.alloc.rate:                                  2011.644 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650441.986 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.895 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       660796.662 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4822.273 ops/s
[info]                  ·gc.alloc.rate:                                  2000.425 MB/sec
[info]                  ·gc.alloc.rate.norm:                             652838.765 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.273 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       666959.532 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   4867.554 ±(99.9%) 118.423 ops/s [Average]
[info]   (min, avg, max) = (4822.273, 4867.554, 4905.349), stdev = 30.754
[info]   CI (99.9%): [4749.132, 4985.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2013.321 ±(99.9%) 39.873 MB/sec [Average]
[info]   (min, avg, max) = (2000.425, 2013.321, 2027.842), stdev = 10.355
[info]   CI (99.9%): [1973.448, 2053.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650910.223 ±(99.9%) 4158.067 B/op [Average]
[info]   (min, avg, max) = (650343.533, 650910.223, 652838.765), stdev = 1079.837
[info]   CI (99.9%): [646752.156, 655068.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.508 ±(99.9%) 9.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.508, 4.895), stdev = 2.363
[info]   CI (99.9%): [≈ 0, 11.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2039.852 ±(99.9%) 33.442 MB/sec [Average]
[info]   (min, avg, max) = (2024.378, 2039.852, 2044.852), stdev = 8.685
[info]   CI (99.9%): [2006.410, 2073.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   659514.227 ±(99.9%) 24630.557 B/op [Average]
[info]   (min, avg, max) = (649403.396, 659514.227, 666959.532), stdev = 6396.477
[info]   CI (99.9%): [634883.670, 684144.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 12.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 7.327), stdev = 3.174
[info]   CI (99.9%): [≈ 0, 14.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   599.571 ±(99.9%) 3920.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 599.571, 2350.588), stdev = 1018.184
[info]   CI (99.9%): [≈ 0, 4520.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.600, 22.000), stdev = 7.503
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34007.537 ops/s
[info] # Warmup Iteration   2: 41819.413 ops/s
[info] # Warmup Iteration   3: 42654.103 ops/s
[info] # Warmup Iteration   4: 43557.050 ops/s
[info] # Warmup Iteration   5: 43544.873 ops/s
[info] Iteration   1: 43334.779 ops/s
[info]                  ·gc.alloc.rate:            705.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       25611.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24480.562 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 43715.867 ops/s
[info]                  ·gc.alloc.rate:            704.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       25368.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24269.484 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 43663.501 ops/s
[info]                  ·gc.alloc.rate:            705.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       25436.711 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24297.825 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 43771.788 ops/s
[info]                  ·gc.alloc.rate:            705.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       25368.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24237.887 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 43714.987 ops/s
[info]                  ·gc.alloc.rate:            705.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       25411.635 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24270.039 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   43640.184 ±(99.9%) 673.749 ops/s [Average]
[info]   (min, avg, max) = (43334.779, 43640.184, 43771.788), stdev = 174.970
[info]   CI (99.9%): [42966.436, 44313.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   705.360 ±(99.9%) 2.074 MB/sec [Average]
[info]   (min, avg, max) = (704.502, 705.360, 705.829), stdev = 0.539
[info]   CI (99.9%): [703.287, 707.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25439.084 ±(99.9%) 387.160 B/op [Average]
[info]   (min, avg, max) = (25368.009, 25439.084, 25611.056), stdev = 100.544
[info]   CI (99.9%): [25051.924, 25826.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.086 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (673.995, 674.086, 674.164), stdev = 0.063
[info]   CI (99.9%): [673.843, 674.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   24311.159 ±(99.9%) 373.689 B/op [Average]
[info]   (min, avg, max) = (24237.887, 24311.159, 24480.562), stdev = 97.046
[info]   CI (99.9%): [23937.470, 24684.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1855.970 ops/s
[info] # Warmup Iteration   2: 3851.581 ops/s
[info] # Warmup Iteration   3: 4138.604 ops/s
[info] # Warmup Iteration   4: 4255.801 ops/s
[info] # Warmup Iteration   5: 4279.847 ops/s
[info] Iteration   1: 4276.640 ops/s
[info]                  ·gc.alloc.rate:            786.893 MB/sec
[info]                  ·gc.alloc.rate.norm:       289573.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247805.128 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 4225.370 ops/s
[info]                  ·gc.alloc.rate:                   777.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              289588.703 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        250546.903 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 248.066 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 4254.258 ops/s
[info]                  ·gc.alloc.rate:            785.982 MB/sec
[info]                  ·gc.alloc.rate.norm:       290684.635 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 249086.075 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 4204.942 ops/s
[info]                  ·gc.alloc.rate:                   773.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              289599.621 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.542 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        503845.006 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 249.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   5: 4258.310 ops/s
[info]                  ·gc.alloc.rate:            783.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       289560.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 248852.192 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4243.904 ±(99.9%) 109.725 ops/s [Average]
[info]   (min, avg, max) = (4204.942, 4243.904, 4276.640), stdev = 28.495
[info]   CI (99.9%): [4134.179, 4353.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   781.543 ±(99.9%) 21.603 MB/sec [Average]
[info]   (min, avg, max) = (773.964, 781.543, 786.893), stdev = 5.610
[info]   CI (99.9%): [759.940, 803.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289801.255 ±(99.9%) 1902.422 B/op [Average]
[info]   (min, avg, max) = (289560.096, 289801.255, 290684.635), stdev = 494.053
[info]   CI (99.9%): [287898.833, 291703.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   807.872 ±(99.9%) 1159.527 MB/sec [Average]
[info]   (min, avg, max) = (672.648, 807.872, 1346.542), stdev = 301.126
[info]   CI (99.9%): [≈ 0, 1967.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   300027.061 ±(99.9%) 438749.669 B/op [Average]
[info]   (min, avg, max) = (247805.128, 300027.061, 503845.006), stdev = 113941.896
[info]   CI (99.9%): [≈ 0, 738776.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   99.474 ±(99.9%) 524.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.474, 249.305), stdev = 136.211
[info]   CI (99.9%): [≈ 0, 623.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.200, 17.000), stdev = 3.834
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_87620646/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 592.577 ops/s
[info] # Warmup Iteration   2: 3672.677 ops/s
[info] # Warmup Iteration   3: 4162.450 ops/s
[info] # Warmup Iteration   4: 4365.602 ops/s
[info] # Warmup Iteration   5: 4398.053 ops/s
[info] Iteration   1: 4397.484 ops/s
[info]                  ·gc.alloc.rate:            538.077 MB/sec
[info]                  ·gc.alloc.rate.norm:       192579.829 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 240457.542 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 4333.409 ops/s
[info]                  ·gc.alloc.rate:            532.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       193381.254 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244063.018 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 4428.992 ops/s
[info]                  ·gc.alloc.rate:      542.594 MB/sec
[info]                  ·gc.alloc.rate.norm: 192770.213 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4392.207 ops/s
[info]                  ·gc.alloc.rate:            537.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       192580.797 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 240785.886 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 4405.002 ops/s
[info]                  ·gc.alloc.rate:                   539.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              192582.355 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        240130.092 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 237.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4391.419 ±(99.9%) 136.125 ops/s [Average]
[info]   (min, avg, max) = (4333.409, 4391.419, 4428.992), stdev = 35.351
[info]   CI (99.9%): [4255.294, 4527.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   537.893 ±(99.9%) 14.185 MB/sec [Average]
[info]   (min, avg, max) = (532.353, 537.893, 542.594), stdev = 3.684
[info]   CI (99.9%): [523.708, 552.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   192778.890 ±(99.9%) 1334.471 B/op [Average]
[info]   (min, avg, max) = (192579.829, 192778.890, 193381.254), stdev = 346.558
[info]   CI (99.9%): [191444.419, 194113.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.553 ±(99.9%) 1157.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.553, 672.086), stdev = 300.502
[info]   CI (99.9%): [≈ 0, 1694.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   193087.308 ±(99.9%) 415679.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 193087.308, 244063.018), stdev = 107950.624
[info]   CI (99.9%): [≈ 0, 608766.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   47.598 ±(99.9%) 409.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.598, 237.988), stdev = 106.432
[info]   CI (99.9%): [≈ 0, 457.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 8.200, 11.000), stdev = 4.604
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4419.437 ops/s
[info] # Warmup Iteration   2: 6026.870 ops/s
[info] # Warmup Iteration   3: 6260.913 ops/s
[info] # Warmup Iteration   4: 6339.979 ops/s
[info] # Warmup Iteration   5: 6272.230 ops/s
[info] Iteration   1: 6333.856 ops/s
[info]                  ·gc.alloc.rate:      274.817 MB/sec
[info]                  ·gc.alloc.rate.norm: 68298.423 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6326.377 ops/s
[info]                  ·gc.alloc.rate:      274.456 MB/sec
[info]                  ·gc.alloc.rate.norm: 68256.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6288.372 ops/s
[info]                  ·gc.alloc.rate:            273.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       68380.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 168705.709 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 6369.564 ops/s
[info]                  ·gc.alloc.rate:      276.622 MB/sec
[info]                  ·gc.alloc.rate.norm: 68341.683 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6262.741 ops/s
[info]                  ·gc.alloc.rate:            271.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       68312.239 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 169405.957 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6316.182 ±(99.9%) 159.875 ops/s [Average]
[info]   (min, avg, max) = (6262.741, 6316.182, 6369.564), stdev = 41.519
[info]   CI (99.9%): [6156.307, 6476.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   274.187 ±(99.9%) 6.931 MB/sec [Average]
[info]   (min, avg, max) = (271.811, 274.187, 276.622), stdev = 1.800
[info]   CI (99.9%): [267.256, 281.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   68317.725 ±(99.9%) 179.413 B/op [Average]
[info]   (min, avg, max) = (68256.064, 68317.725, 68380.215), stdev = 46.593
[info]   CI (99.9%): [68138.312, 68497.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.632 ±(99.9%) 1421.694 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.632, 674.104), stdev = 369.209
[info]   CI (99.9%): [≈ 0, 1691.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   67622.333 ±(99.9%) 356554.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67622.333, 169405.957), stdev = 92596.024
[info]   CI (99.9%): [≈ 0, 424176.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 11.000), stdev = 5.310
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4531.375 ops/s
[info] # Warmup Iteration   2: 6184.494 ops/s
[info] # Warmup Iteration   3: 6197.508 ops/s
[info] # Warmup Iteration   4: 6393.915 ops/s
[info] # Warmup Iteration   5: 6388.142 ops/s
[info] Iteration   1: 6326.109 ops/s
[info]                  ·gc.alloc.rate:            229.616 MB/sec
[info]                  ·gc.alloc.rate.norm:       57136.520 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 167692.622 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 6387.496 ops/s
[info]                  ·gc.alloc.rate:      230.728 MB/sec
[info]                  ·gc.alloc.rate.norm: 56856.431 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6393.380 ops/s
[info]                  ·gc.alloc.rate:      230.385 MB/sec
[info]                  ·gc.alloc.rate.norm: 56728.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6332.200 ops/s
[info]                  ·gc.alloc.rate:            228.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       56728.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 167533.772 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 6378.693 ops/s
[info]                  ·gc.alloc.rate:      229.865 MB/sec
[info]                  ·gc.alloc.rate.norm: 56728.069 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6363.575 ±(99.9%) 122.938 ops/s [Average]
[info]   (min, avg, max) = (6326.109, 6363.575, 6393.380), stdev = 31.927
[info]   CI (99.9%): [6240.638, 6486.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   229.760 ±(99.9%) 3.738 MB/sec [Average]
[info]   (min, avg, max) = (228.208, 229.760, 230.728), stdev = 0.971
[info]   CI (99.9%): [226.022, 233.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   56835.433 ±(99.9%) 682.537 B/op [Average]
[info]   (min, avg, max) = (56728.064, 56835.433, 57136.520), stdev = 177.253
[info]   CI (99.9%): [56152.896, 57517.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.574 ±(99.9%) 1421.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.574, 673.960), stdev = 369.130
[info]   CI (99.9%): [≈ 0, 1690.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   67045.279 ±(99.9%) 353510.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67045.279, 167692.622), stdev = 91805.546
[info]   CI (99.9%): [≈ 0, 420555.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 8.000), stdev = 4.382
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2415.501 ops/s
[info] # Warmup Iteration   2: 6688.703 ops/s
[info] # Warmup Iteration   3: 7148.079 ops/s
[info] # Warmup Iteration   4: 6957.519 ops/s
[info] # Warmup Iteration   5: 7127.761 ops/s
[info] Iteration   1: 7138.354 ops/s
[info]                  ·gc.alloc.rate:            1266.358 MB/sec
[info]                  ·gc.alloc.rate.norm:       279232.834 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 296949.674 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 7155.528 ops/s
[info]                  ·gc.alloc.rate:            1269.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       279154.725 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.910 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 296244.330 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 7155.620 ops/s
[info]                  ·gc.alloc.rate:                   1268.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              279080.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        296244.330 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 732.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 7198.514 ops/s
[info]                  ·gc.alloc.rate:                   1276.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              279165.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        296181.584 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 873.692 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 7134.758 ops/s
[info]                  ·gc.alloc.rate:                                  1268.044 MB/sec
[info]                  ·gc.alloc.rate.norm:                             279750.325 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.314 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       300495.785 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                146.942 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7156.555 ±(99.9%) 97.583 ops/s [Average]
[info]   (min, avg, max) = (7134.758, 7156.555, 7198.514), stdev = 25.342
[info]   CI (99.9%): [7058.972, 7254.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1269.809 ±(99.9%) 15.503 MB/sec [Average]
[info]   (min, avg, max) = (1266.358, 1269.809, 1276.751), stdev = 4.026
[info]   CI (99.9%): [1254.305, 1285.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   279276.636 ±(99.9%) 1040.768 B/op [Average]
[info]   (min, avg, max) = (279080.061, 279276.636, 279750.325), stdev = 270.284
[info]   CI (99.9%): [278235.868, 280317.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.063 ±(99.9%) 17.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.063, 10.314), stdev = 4.613
[info]   CI (99.9%): [≈ 0, 19.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1351.396 ±(99.9%) 26.421 MB/sec [Average]
[info]   (min, avg, max) = (1346.706, 1351.396, 1362.079), stdev = 6.861
[info]   CI (99.9%): [1324.975, 1377.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   297223.141 ±(99.9%) 7148.615 B/op [Average]
[info]   (min, avg, max) = (296181.584, 297223.141, 300495.785), stdev = 1856.473
[info]   CI (99.9%): [290074.525, 304371.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 7.388 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 3.996), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   350.637 ±(99.9%) 1618.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 350.637, 873.692), stdev = 420.366
[info]   CI (99.9%): [≈ 0, 1969.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 13.400, 18.000), stdev = 4.561
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.914 ops/s
[info] # Warmup Iteration   2: 14192.816 ops/s
[info] # Warmup Iteration   3: 15030.807 ops/s
[info] # Warmup Iteration   4: 15219.724 ops/s
[info] # Warmup Iteration   5: 14670.605 ops/s
[info] Iteration   1: 14829.082 ops/s
[info]                  ·gc.alloc.rate:      342.354 MB/sec
[info]                  ·gc.alloc.rate.norm: 36341.981 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14578.273 ops/s
[info]                  ·gc.alloc.rate:            341.577 MB/sec
[info]                  ·gc.alloc.rate.norm:       36880.565 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72417.258 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 14611.560 ops/s
[info]                  ·gc.alloc.rate:      340.433 MB/sec
[info]                  ·gc.alloc.rate.norm: 36673.072 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 15025.689 ops/s
[info]                  ·gc.alloc.rate:            348.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       36552.397 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70188.799 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 15136.821 ops/s
[info]                  ·gc.alloc.rate:            350.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       36420.835 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69674.204 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   14836.285 ±(99.9%) 949.710 ops/s [Average]
[info]   (min, avg, max) = (14578.273, 14836.285, 15136.821), stdev = 246.637
[info]   CI (99.9%): [13886.575, 15785.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   344.712 ±(99.9%) 17.467 MB/sec [Average]
[info]   (min, avg, max) = (340.433, 344.712, 350.258), stdev = 4.536
[info]   CI (99.9%): [327.245, 362.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36573.770 ±(99.9%) 820.368 B/op [Average]
[info]   (min, avg, max) = (36341.981, 36573.770, 36880.565), stdev = 213.047
[info]   CI (99.9%): [35753.402, 37394.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.160 ±(99.9%) 1413.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.160, 670.708), stdev = 367.121
[info]   CI (99.9%): [≈ 0, 1815.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   42456.052 ±(99.9%) 149291.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42456.052, 72417.258), stdev = 38770.606
[info]   CI (99.9%): [≈ 0, 191747.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 11.000), stdev = 5.675
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2410.676 ops/s
[info] # Warmup Iteration   2: 12423.661 ops/s
[info] # Warmup Iteration   3: 12872.255 ops/s
[info] # Warmup Iteration   4: 12998.503 ops/s
[info] # Warmup Iteration   5: 12759.077 ops/s
[info] Iteration   1: 12905.326 ops/s
[info]                  ·gc.alloc.rate:      331.121 MB/sec
[info]                  ·gc.alloc.rate.norm: 40384.563 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 12846.805 ops/s
[info]                  ·gc.alloc.rate:            321.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       39395.931 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82342.064 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 12983.097 ops/s
[info]                  ·gc.alloc.rate:      327.124 MB/sec
[info]                  ·gc.alloc.rate.norm: 39662.324 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 12773.610 ops/s
[info]                  ·gc.alloc.rate:            336.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       41474.472 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82812.554 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 13011.490 ops/s
[info]                  ·gc.alloc.rate:      326.029 MB/sec
[info]                  ·gc.alloc.rate.norm: 39430.379 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   12904.066 ±(99.9%) 375.734 ops/s [Average]
[info]   (min, avg, max) = (12773.610, 12904.066, 13011.490), stdev = 97.577
[info]   CI (99.9%): [12528.331, 13279.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   328.493 ±(99.9%) 21.903 MB/sec [Average]
[info]   (min, avg, max) = (321.551, 328.493, 336.639), stdev = 5.688
[info]   CI (99.9%): [306.590, 350.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   40069.534 ±(99.9%) 3390.522 B/op [Average]
[info]   (min, avg, max) = (39395.931, 40069.534, 41474.472), stdev = 880.508
[info]   CI (99.9%): [36679.012, 43460.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.850 ±(99.9%) 1417.568 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.850, 672.171), stdev = 368.138
[info]   CI (99.9%): [≈ 0, 1686.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   33030.924 ±(99.9%) 174163.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33030.924, 82812.554), stdev = 45229.761
[info]   CI (99.9%): [≈ 0, 207194.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 10.000), stdev = 5.477
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13785.410 ops/s
[info] # Warmup Iteration   2: 19299.928 ops/s
[info] # Warmup Iteration   3: 19813.628 ops/s
[info] # Warmup Iteration   4: 19885.759 ops/s
[info] # Warmup Iteration   5: 19871.953 ops/s
[info] Iteration   1: 19744.151 ops/s
[info]                  ·gc.alloc.rate:            337.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       26916.810 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53737.728 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 20147.805 ops/s
[info]                  ·gc.alloc.rate:      337.606 MB/sec
[info]                  ·gc.alloc.rate.norm: 26376.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19913.233 ops/s
[info]                  ·gc.alloc.rate:            333.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       26389.475 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53273.704 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 20150.342 ops/s
[info]                  ·gc.alloc.rate:      337.660 MB/sec
[info]                  ·gc.alloc.rate.norm: 26376.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19911.982 ops/s
[info]                  ·gc.alloc.rate:            333.801 MB/sec
[info]                  ·gc.alloc.rate.norm:       26378.846 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53281.729 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   19973.503 ±(99.9%) 671.584 ops/s [Average]
[info]   (min, avg, max) = (19744.151, 19973.503, 20150.342), stdev = 174.408
[info]   CI (99.9%): [19301.918, 20645.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   336.111 ±(99.9%) 8.035 MB/sec [Average]
[info]   (min, avg, max) = (333.801, 336.111, 337.660), stdev = 2.087
[info]   CI (99.9%): [328.075, 344.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26487.435 ±(99.9%) 924.509 B/op [Average]
[info]   (min, avg, max) = (26376.020, 26487.435, 26916.810), stdev = 240.092
[info]   CI (99.9%): [25562.925, 27411.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.452 ±(99.9%) 1421.706 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.452, 674.232), stdev = 369.212
[info]   CI (99.9%): [≈ 0, 1826.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   32058.632 ±(99.9%) 112692.930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32058.632, 53737.728), stdev = 29265.996
[info]   CI (99.9%): [≈ 0, 144751.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85.889 ops/s
[info] # Warmup Iteration   2: 3182.400 ops/s
[info] # Warmup Iteration   3: 3505.316 ops/s
[info] # Warmup Iteration   4: 3604.698 ops/s
[info] # Warmup Iteration   5: 3626.626 ops/s
[info] Iteration   1: 3679.174 ops/s
[info]                  ·gc.alloc.rate:                   2143.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              916644.387 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2024.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        865930.017 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3419.270 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 3784.828 ops/s
[info]                  ·gc.alloc.rate:                                  2199.630 MB/sec
[info]                  ·gc.alloc.rate.norm:                             914642.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.829 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2724.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1132772.277 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                553.923 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 3786.407 ops/s
[info]                  ·gc.alloc.rate:                                  2201.682 MB/sec
[info]                  ·gc.alloc.rate.norm:                             915180.879 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.957 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       849545.867 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 3802.915 ops/s
[info]                  ·gc.alloc.rate:                                  2209.912 MB/sec
[info]                  ·gc.alloc.rate.norm:                             914608.107 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 25.230 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       845972.593 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3800.911 ops/s
[info]                  ·gc.alloc.rate:            2208.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       914608.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 846417.608 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   3770.847 ±(99.9%) 199.841 ops/s [Average]
[info]   (min, avg, max) = (3679.174, 3770.847, 3802.915), stdev = 51.898
[info]   CI (99.9%): [3571.006, 3970.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2192.632 ±(99.9%) 107.456 MB/sec [Average]
[info]   (min, avg, max) = (2143.333, 2192.632, 2209.912), stdev = 27.906
[info]   CI (99.9%): [2085.177, 2300.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   915136.716 ±(99.9%) 3378.116 B/op [Average]
[info]   (min, avg, max) = (914608.107, 915136.716, 916644.387), stdev = 877.286
[info]   CI (99.9%): [911758.600, 918514.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.061), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   7.203 ±(99.9%) 40.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.203, 25.230), stdev = 10.490
[info]   CI (99.9%): [≈ 0, 47.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2176.151 ±(99.9%) 1180.177 MB/sec [Average]
[info]   (min, avg, max) = (2024.751, 2176.151, 2724.212), stdev = 306.488
[info]   CI (99.9%): [995.974, 3356.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   908127.672 ±(99.9%) 484588.868 B/op [Average]
[info]   (min, avg, max) = (845972.593, 908127.672, 1132772.277), stdev = 125846.190
[info]   CI (99.9%): [423538.804, 1392716.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 13.380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 7.995), stdev = 3.475
[info]   CI (99.9%): [≈ 0, 15.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   794.638 ±(99.9%) 5724.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 794.638, 3419.270), stdev = 1486.690
[info]   CI (99.9%): [≈ 0, 6519.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.000, 22.000), stdev = 7.416
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:36:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2599.316 ops/s
[info] # Warmup Iteration   2: 8190.583 ops/s
[info] # Warmup Iteration   3: 8973.680 ops/s
[info] # Warmup Iteration   4: 8938.380 ops/s
[info] # Warmup Iteration   5: 8977.287 ops/s
[info] Iteration   1: 9003.536 ops/s
[info]                  ·gc.alloc.rate:            1551.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       271255.422 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2020.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 353134.689 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  25.000 ms
[info] Iteration   2: 9125.341 ops/s
[info]                  ·gc.alloc.rate:                   1588.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              274048.582 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        232850.959 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 804.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 8853.963 ops/s
[info]                  ·gc.alloc.rate:                   1534.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              272728.550 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        241541.897 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 592.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 9220.848 ops/s
[info]                  ·gc.alloc.rate:                                  1589.264 MB/sec
[info]                  ·gc.alloc.rate.norm:                             271277.955 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.344 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       348918.979 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 9234.517 ops/s
[info]                  ·gc.alloc.rate:                                  1591.483 MB/sec
[info]                  ·gc.alloc.rate.norm:                             271281.491 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       232260.095 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   9087.641 ±(99.9%) 616.154 ops/s [Average]
[info]   (min, avg, max) = (8853.963, 9087.641, 9234.517), stdev = 160.013
[info]   CI (99.9%): [8471.487, 9703.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1571.101 ±(99.9%) 102.003 MB/sec [Average]
[info]   (min, avg, max) = (1534.143, 1571.101, 1591.483), stdev = 26.490
[info]   CI (99.9%): [1469.098, 1673.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   272118.400 ±(99.9%) 4813.067 B/op [Average]
[info]   (min, avg, max) = (271255.422, 272118.400, 274048.582), stdev = 1249.938
[info]   CI (99.9%): [267305.333, 276931.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.495 ±(99.9%) 3.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.495, 2.132), stdev = 0.927
[info]   CI (99.9%): [≈ 0, 4.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1627.105 ±(99.9%) 1424.050 MB/sec [Average]
[info]   (min, avg, max) = (1350.075, 1627.105, 2044.119), stdev = 369.821
[info]   CI (99.9%): [203.054, 3051.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   281741.324 ±(99.9%) 244026.517 B/op [Average]
[info]   (min, avg, max) = (232260.095, 281741.324, 353134.689), stdev = 63372.912
[info]   CI (99.9%): [37714.807, 525767.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.662), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   279.227 ±(99.9%) 1500.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 279.227, 804.123), stdev = 389.633
[info]   CI (99.9%): [≈ 0, 1779.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 25.000), stdev = 8.877
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.804 ops/s
[info] # Warmup Iteration   2: 46573.529 ops/s
[info] # Warmup Iteration   3: 52178.328 ops/s
[info] # Warmup Iteration   4: 50888.711 ops/s
[info] # Warmup Iteration   5: 51671.120 ops/s
[info] Iteration   1: 51701.171 ops/s
[info]                  ·gc.alloc.rate:            483.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20421.143 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 52323.677 ops/s
[info]                  ·gc.alloc.rate:      490.008 MB/sec
[info]                  ·gc.alloc.rate.norm: 14737.696 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 51588.783 ops/s
[info]                  ·gc.alloc.rate:            485.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       14824.323 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20444.753 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 51758.556 ops/s
[info]                  ·gc.alloc.rate:            483.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20377.612 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 52500.131 ops/s
[info]                  ·gc.alloc.rate:      490.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   51974.464 ±(99.9%) 1573.979 ops/s [Average]
[info]   (min, avg, max) = (51588.783, 51974.464, 52500.131), stdev = 408.757
[info]   CI (99.9%): [50400.484, 53548.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   486.734 ±(99.9%) 13.347 MB/sec [Average]
[info]   (min, avg, max) = (483.247, 486.734, 490.720), stdev = 3.466
[info]   CI (99.9%): [473.387, 500.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14739.609 ±(99.9%) 187.317 B/op [Average]
[info]   (min, avg, max) = (14712.008, 14739.609, 14824.323), stdev = 48.646
[info]   CI (99.9%): [14552.292, 14926.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.201 ±(99.9%) 1413.792 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.201, 670.775), stdev = 367.157
[info]   CI (99.9%): [≈ 0, 1815.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   12248.701 ±(99.9%) 43056.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12248.701, 20444.753), stdev = 11181.509
[info]   CI (99.9%): [≈ 0, 55304.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 11.000), stdev = 5.675
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_87620646/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 14343.569 ops/s
[info] # Warmup Iteration   2: 36345.503 ops/s
[info] # Warmup Iteration   3: 37169.266 ops/s
[info] # Warmup Iteration   4: 36478.562 ops/s
[info] # Warmup Iteration   5: 37405.837 ops/s
[info] Iteration   1: 37439.901 ops/s
[info]                  ·gc.alloc.rate:                   538.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              22652.944 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28253.617 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 37343.581 ops/s
[info]                  ·gc.alloc.rate:            539.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       22739.381 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28355.067 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 37560.379 ops/s
[info]                  ·gc.alloc.rate:            539.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       22599.854 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28191.279 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 37865.569 ops/s
[info]                  ·gc.alloc.rate:      544.513 MB/sec
[info]                  ·gc.alloc.rate.norm: 22627.773 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37470.369 ops/s
[info]                  ·gc.alloc.rate:            538.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       22599.738 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28258.225 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   37535.960 ±(99.9%) 769.593 ops/s [Average]
[info]   (min, avg, max) = (37343.581, 37535.960, 37865.569), stdev = 199.861
[info]   CI (99.9%): [36766.367, 38305.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   540.061 ±(99.9%) 9.839 MB/sec [Average]
[info]   (min, avg, max) = (538.021, 540.061, 544.513), stdev = 2.555
[info]   CI (99.9%): [530.222, 549.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22643.938 ±(99.9%) 222.447 B/op [Average]
[info]   (min, avg, max) = (22599.738, 22643.938, 22739.381), stdev = 57.769
[info]   CI (99.9%): [22421.491, 22866.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.084 ±(99.9%) 1158.266 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.084, 672.786), stdev = 300.798
[info]   CI (99.9%): [≈ 0, 1696.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22611.637 ±(99.9%) 48673.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22611.637, 28355.067), stdev = 12640.425
[info]   CI (99.9%): [≈ 0, 71285.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.600 ±(99.9%) 48.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.600, 28.002), stdev = 12.523
[info]   CI (99.9%): [≈ 0, 53.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.600, 10.000), stdev = 4.278
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54339.792 ops/s
[info] # Warmup Iteration   2: 81612.773 ops/s
[info] # Warmup Iteration   3: 83521.744 ops/s
[info] # Warmup Iteration   4: 82901.830 ops/s
[info] # Warmup Iteration   5: 85221.488 ops/s
[info] Iteration   1: 85133.849 ops/s
[info]                  ·gc.alloc.rate:            641.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       11857.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.250 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12462.669 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 85259.400 ops/s
[info]                  ·gc.alloc.rate:            640.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12443.817 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 85340.272 ops/s
[info]                  ·gc.alloc.rate:            641.606 MB/sec
[info]                  ·gc.alloc.rate.norm:       11833.952 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12432.008 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 85000.928 ops/s
[info]                  ·gc.alloc.rate:            640.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       11852.875 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12481.286 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 84835.904 ops/s
[info]                  ·gc.alloc.rate:            637.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12505.113 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   85114.071 ±(99.9%) 776.973 ops/s [Average]
[info]   (min, avg, max) = (84835.904, 85114.071, 85340.272), stdev = 201.777
[info]   CI (99.9%): [84337.097, 85891.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   640.369 ±(99.9%) 6.152 MB/sec [Average]
[info]   (min, avg, max) = (637.716, 640.369, 641.606), stdev = 1.598
[info]   CI (99.9%): [634.217, 646.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11841.576 ±(99.9%) 47.485 B/op [Average]
[info]   (min, avg, max) = (11832.005, 11841.576, 11857.044), stdev = 12.332
[info]   CI (99.9%): [11794.091, 11889.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.078 ±(99.9%) 0.387 MB/sec [Average]
[info]   (min, avg, max) = (673.995, 674.078, 674.250), stdev = 0.101
[info]   CI (99.9%): [673.691, 674.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   12464.979 ±(99.9%) 112.544 B/op [Average]
[info]   (min, avg, max) = (12432.008, 12464.979, 12505.113), stdev = 29.227
[info]   CI (99.9%): [12352.435, 12577.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:35:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68728.966 ops/s
[info] # Warmup Iteration   2: 89978.575 ops/s
[info] # Warmup Iteration   3: 93738.281 ops/s
[info] # Warmup Iteration   4: 93779.517 ops/s
[info] # Warmup Iteration   5: 93796.863 ops/s
[info] Iteration   1: 93605.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 93836.265 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 93905.874 ops/s
[info]                  ·gc.alloc.rate:      0.104 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.735 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 93890.172 ops/s
[info]                  ·gc.alloc.rate:      0.171 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.858 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 93798.295 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   93807.210 ±(99.9%) 464.681 ops/s [Average]
[info]   (min, avg, max) = (93605.443, 93807.210, 93905.874), stdev = 120.676
[info]   CI (99.9%): [93342.529, 94271.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.055 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.055, 0.171), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.921 ±(99.9%) 5.070 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.921, 2.858), stdev = 1.317
[info]   CI (99.9%): [≈ 0, 5.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 866.486 ops/s
[info] # Warmup Iteration   2: 5505.093 ops/s
[info] # Warmup Iteration   3: 6393.969 ops/s
[info] # Warmup Iteration   4: 6398.739 ops/s
[info] # Warmup Iteration   5: 6347.220 ops/s
[info] Iteration   1: 6502.844 ops/s
[info]                  ·gc.alloc.rate:                   1969.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              476645.604 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2024.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        490109.323 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1773.422 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 6622.949 ops/s
[info]                  ·gc.alloc.rate:                   2006.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              476898.847 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1361.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        323515.373 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 316.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6630.195 ops/s
[info]                  ·gc.alloc.rate:                                  2008.003 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476643.520 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       485235.185 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 6589.264 ops/s
[info]                  ·gc.alloc.rate:                                  1995.163 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476592.335 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.737 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       488253.640 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 6638.932 ops/s
[info]                  ·gc.alloc.rate:                                  2010.263 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476591.253 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.444 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       484577.585 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   6596.837 ±(99.9%) 214.901 ops/s [Average]
[info]   (min, avg, max) = (6502.844, 6596.837, 6638.932), stdev = 55.809
[info]   CI (99.9%): [6381.935, 6811.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1997.864 ±(99.9%) 65.728 MB/sec [Average]
[info]   (min, avg, max) = (1969.172, 1997.864, 2010.263), stdev = 17.069
[info]   CI (99.9%): [1932.136, 2063.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   476674.312 ±(99.9%) 493.902 B/op [Average]
[info]   (min, avg, max) = (476591.253, 476674.312, 476898.847), stdev = 128.265
[info]   CI (99.9%): [476180.410, 477168.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.086), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   8.054 ±(99.9%) 32.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.054, 20.444), stdev = 8.518
[info]   CI (99.9%): [≈ 0, 40.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1903.646 ±(99.9%) 1167.873 MB/sec [Average]
[info]   (min, avg, max) = (1361.304, 1903.646, 2044.198), stdev = 303.293
[info]   CI (99.9%): [735.773, 3071.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   454338.221 ±(99.9%) 281739.058 B/op [Average]
[info]   (min, avg, max) = (323515.373, 454338.221, 490109.323), stdev = 73166.739
[info]   CI (99.9%): [172599.163, 736077.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 12.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.327), stdev = 3.180
[info]   CI (99.9%): [≈ 0, 13.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   417.995 ±(99.9%) 2965.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 417.995, 1773.422), stdev = 770.005
[info]   CI (99.9%): [≈ 0, 3383.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.400, 21.000), stdev = 7.266
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2838090.587 ops/s
[info] # Warmup Iteration   2: 7403103.508 ops/s
[info] # Warmup Iteration   3: 7975896.462 ops/s
[info] # Warmup Iteration   4: 8011626.690 ops/s
[info] # Warmup Iteration   5: 7987392.963 ops/s
[info] Iteration   1: 8051046.483 ops/s
[info]                  ·gc.alloc.rate:                                  4219.425 MB/sec
[info]                  ·gc.alloc.rate.norm:                             824.850 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4770.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       932.501 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 8039766.551 ops/s
[info]                  ·gc.alloc.rate:                                  4223.820 MB/sec
[info]                  ·gc.alloc.rate.norm:                             826.862 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4088.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       800.409 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 8070532.279 ops/s
[info]                  ·gc.alloc.rate:                                  4224.971 MB/sec
[info]                  ·gc.alloc.rate.norm:                             824.095 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4087.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       797.317 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 8015987.523 ops/s
[info]                  ·gc.alloc.rate:            4210.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       826.563 B/op
[info]                  ·gc.churn.G1_Old_Gen:      4089.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 802.772 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 8061607.114 ops/s
[info]                  ·gc.alloc.rate:                                  4221.118 MB/sec
[info]                  ·gc.alloc.rate.norm:                             824.231 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4087.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       798.214 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   8047787.990 ±(99.9%) 81559.643 ops/s [Average]
[info]   (min, avg, max) = (8015987.523, 8047787.990, 8070532.279), stdev = 21180.780
[info]   CI (99.9%): [7966228.347, 8129347.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4220.006 ±(99.9%) 21.734 MB/sec [Average]
[info]   (min, avg, max) = (4210.697, 4220.006, 4224.971), stdev = 5.644
[info]   CI (99.9%): [4198.272, 4241.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   825.320 ±(99.9%) 5.033 B/op [Average]
[info]   (min, avg, max) = (824.095, 825.320, 826.862), stdev = 1.307
[info]   CI (99.9%): [820.287, 830.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   4224.773 ±(99.9%) 1173.867 MB/sec [Average]
[info]   (min, avg, max) = (4087.689, 4224.773, 4770.103), stdev = 304.849
[info]   CI (99.9%): [3050.906, 5398.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   826.243 ±(99.9%) 228.873 B/op [Average]
[info]   (min, avg, max) = (797.317, 826.243, 932.501), stdev = 59.438
[info]   CI (99.9%): [597.370, 1055.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.666 ops/s
[info] # Warmup Iteration   2: 34071373.207 ops/s
[info] # Warmup Iteration   3: 34389466.049 ops/s
[info] # Warmup Iteration   4: 32485143.812 ops/s
[info] # Warmup Iteration   5: 32471642.672 ops/s
[info] Iteration   1: 32459527.174 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32499231.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 32492298.869 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 32508808.624 ops/s
[info]                  ·gc.alloc.rate:      0.166 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32459980.162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   32483969.361 ±(99.9%) 88065.733 ops/s [Average]
[info]   (min, avg, max) = (32459527.174, 32483969.361, 32508808.624), stdev = 22870.391
[info]   CI (99.9%): [32395903.627, 32572035.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   0.033 ±(99.9%) 0.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.033, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1323536.711 ops/s
[info] # Warmup Iteration   2: 8106551.064 ops/s
[info] # Warmup Iteration   3: 8097575.066 ops/s
[info] # Warmup Iteration   4: 8083980.107 ops/s
[info] # Warmup Iteration   5: 8426635.290 ops/s
[info] Iteration   1: 8466936.235 ops/s
[info]                  ·gc.alloc.rate:                                  3099.127 MB/sec
[info]                  ·gc.alloc.rate.norm:                             576.162 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       633.357 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 8457861.128 ops/s
[info]                  ·gc.alloc.rate:            3103.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       577.268 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 507.215 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 8458043.021 ops/s
[info]                  ·gc.alloc.rate:            3097.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       576.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 633.999 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 8484405.488 ops/s
[info]                  ·gc.alloc.rate:                                  3105.211 MB/sec
[info]                  ·gc.alloc.rate.norm:                             576.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       505.634 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 8450018.898 ops/s
[info]                  ·gc.alloc.rate:            3095.608 MB/sec
[info]                  ·gc.alloc.rate.norm:       576.580 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 634.624 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   8463452.954 ±(99.9%) 50652.863 ops/s [Average]
[info]   (min, avg, max) = (8450018.898, 8463452.954, 8484405.488), stdev = 13154.388
[info]   CI (99.9%): [8412800.091, 8514105.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3100.087 ±(99.9%) 15.518 MB/sec [Average]
[info]   (min, avg, max) = (3095.608, 3100.087, 3105.211), stdev = 4.030
[info]   CI (99.9%): [3084.569, 3115.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   576.485 ±(99.9%) 1.893 B/op [Average]
[info]   (min, avg, max) = (576.000, 576.485, 577.268), stdev = 0.492
[info]   CI (99.9%): [574.592, 578.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   3134.645 ±(99.9%) 1435.561 MB/sec [Average]
[info]   (min, avg, max) = (2725.870, 3134.645, 3407.244), stdev = 372.811
[info]   CI (99.9%): [1699.084, 4570.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   582.966 ±(99.9%) 269.068 B/op [Average]
[info]   (min, avg, max) = (505.634, 582.966, 634.624), stdev = 69.876
[info]   CI (99.9%): [313.898, 852.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 9.000), stdev = 1.414
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26070877.443 ops/s
[info] # Warmup Iteration   2: 36078820.176 ops/s
[info] # Warmup Iteration   3: 37266329.971 ops/s
[info] # Warmup Iteration   4: 37233332.843 ops/s
[info] # Warmup Iteration   5: 37248674.778 ops/s
[info] Iteration   1: 37127946.090 ops/s
[info]                  ·gc.alloc.rate:      0.269 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37263599.522 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 35677680.903 ops/s
[info]                  ·gc.alloc.rate:      0.076 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37251976.497 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37366308.603 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   36937502.323 ±(99.9%) 2731330.339 ops/s [Average]
[info]   (min, avg, max) = (35677680.903, 36937502.323, 37366308.603), stdev = 709317.815
[info]   CI (99.9%): [34206171.984, 39668832.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   0.069 ±(99.9%) 0.448 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.069, 0.269), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12648333.675 ops/s
[info] # Warmup Iteration   2: 21890625.506 ops/s
[info] # Warmup Iteration   3: 24666672.578 ops/s
[info] # Warmup Iteration   4: 25023870.312 ops/s
[info] # Warmup Iteration   5: 24813569.279 ops/s
[info] Iteration   1: 24809757.808 ops/s
[info]                  ·gc.alloc.rate:            885.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85.530 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 24164140.875 ops/s
[info]                  ·gc.alloc.rate:            859.761 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43.908 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 24653085.428 ops/s
[info]                  ·gc.alloc.rate:            877.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43.037 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 24193600.643 ops/s
[info]                  ·gc.alloc.rate:                   863.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.590 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        87.705 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 24649838.977 ops/s
[info]                  ·gc.alloc.rate:            877.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43.084 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   24494084.746 ±(99.9%) 1136337.573 ops/s [Average]
[info]   (min, avg, max) = (24164140.875, 24494084.746, 24809757.808), stdev = 295103.259
[info]   CI (99.9%): [23357747.173, 25630422.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   872.530 ±(99.9%) 41.043 MB/sec [Average]
[info]   (min, avg, max) = (859.761, 872.530, 885.308), stdev = 10.659
[info]   CI (99.9%): [831.487, 913.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.060 ±(99.9%) 0.316 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.060, 56.156), stdev = 0.082
[info]   CI (99.9%): [55.744, 56.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   944.006 ±(99.9%) 1421.816 MB/sec [Average]
[info]   (min, avg, max) = (674.031, 944.006, 1348.590), stdev = 369.241
[info]   CI (99.9%): [≈ 0, 2365.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   60.653 ±(99.9%) 91.327 B/op [Average]
[info]   (min, avg, max) = (43.037, 60.653, 87.705), stdev = 23.717
[info]   CI (99.9%): [≈ 0, 151.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.000, 15.000), stdev = 4.123
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1445603.578 ops/s
[info] # Warmup Iteration   2: 6817689.247 ops/s
[info] # Warmup Iteration   3: 7182043.125 ops/s
[info] # Warmup Iteration   4: 7020894.248 ops/s
[info] # Warmup Iteration   5: 7068453.003 ops/s
[info] Iteration   1: 7209466.623 ops/s
[info]                  ·gc.alloc.rate:                                  3114.801 MB/sec
[info]                  ·gc.alloc.rate.norm:                             680.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       595.063 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 7232200.975 ops/s
[info]                  ·gc.alloc.rate:            3124.526 MB/sec
[info]                  ·gc.alloc.rate.norm:       680.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 741.463 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 7170130.264 ops/s
[info]                  ·gc.alloc.rate:                                  3099.129 MB/sec
[info]                  ·gc.alloc.rate.norm:                             680.400 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       598.324 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 7065265.830 ops/s
[info]                  ·gc.alloc.rate:                                  3053.595 MB/sec
[info]                  ·gc.alloc.rate.norm:                             680.309 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       758.948 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 7104198.816 ops/s
[info]                  ·gc.alloc.rate:            3078.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       681.906 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 603.889 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   7156252.502 ±(99.9%) 270784.513 ops/s [Average]
[info]   (min, avg, max) = (7065265.830, 7156252.502, 7232200.975), stdev = 70321.878
[info]   CI (99.9%): [6885467.988, 7427037.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3094.198 ±(99.9%) 109.761 MB/sec [Average]
[info]   (min, avg, max) = (3053.595, 3094.198, 3124.526), stdev = 28.505
[info]   CI (99.9%): [2984.437, 3203.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   680.529 ±(99.9%) 3.037 B/op [Average]
[info]   (min, avg, max) = (680.016, 680.529, 681.906), stdev = 0.789
[info]   CI (99.9%): [677.492, 683.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2998.213 ±(99.9%) 1435.951 MB/sec [Average]
[info]   (min, avg, max) = (2725.283, 2998.213, 3406.861), stdev = 372.912
[info]   CI (99.9%): [1562.262, 4434.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   659.537 ±(99.9%) 319.830 B/op [Average]
[info]   (min, avg, max) = (595.063, 659.537, 758.948), stdev = 83.059
[info]   CI (99.9%): [339.707, 979.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6893349.504 ops/s
[info] # Warmup Iteration   2: 13850175.564 ops/s
[info] # Warmup Iteration   3: 14701177.743 ops/s
[info] # Warmup Iteration   4: 14907646.475 ops/s
[info] # Warmup Iteration   5: 14828643.263 ops/s
[info] Iteration   1: 14744556.618 ops/s
[info]                  ·gc.alloc.rate:            1201.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.302 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71.961 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 14926912.544 ops/s
[info]                  ·gc.alloc.rate:            1214.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142.159 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 14903637.508 ops/s
[info]                  ·gc.alloc.rate:            1213.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142.386 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 14943616.760 ops/s
[info]                  ·gc.alloc.rate:                   1215.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        142.349 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 15093128.236 ops/s
[info]                  ·gc.alloc.rate:                   1227.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        141.774 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   14922370.333 ±(99.9%) 477848.232 ops/s [Average]
[info]   (min, avg, max) = (14744556.618, 14922370.333, 15093128.236), stdev = 124095.668
[info]   CI (99.9%): [14444522.101, 15400218.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1214.578 ±(99.9%) 34.674 MB/sec [Average]
[info]   (min, avg, max) = (1201.995, 1214.578, 1227.366), stdev = 9.005
[info]   CI (99.9%): [1179.904, 1249.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   128.095 ±(99.9%) 0.470 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.095, 128.302), stdev = 0.122
[info]   CI (99.9%): [127.625, 128.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1216.467 ±(99.9%) 1167.465 MB/sec [Average]
[info]   (min, avg, max) = (674.167, 1216.467, 1359.442), stdev = 303.187
[info]   CI (99.9%): [49.002, 2383.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   128.126 ±(99.9%) 120.903 B/op [Average]
[info]   (min, avg, max) = (71.961, 128.126, 142.386), stdev = 31.398
[info]   CI (99.9%): [7.223, 249.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.996), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.154 ±(99.9%) 0.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.421), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 0.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 11.800, 16.000), stdev = 5.020
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.670 ops/s
[info] # Warmup Iteration   2: 40625246.596 ops/s
[info] # Warmup Iteration   3: 39542333.107 ops/s
[info] # Warmup Iteration   4: 41979830.611 ops/s
[info] # Warmup Iteration   5: 42314621.067 ops/s
[info] Iteration   1: 41445987.470 ops/s
[info]                  ·gc.alloc.rate:            842.513 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25.472 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 42423209.083 ops/s
[info]                  ·gc.alloc.rate:            863.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24.886 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 41985300.827 ops/s
[info]                  ·gc.alloc.rate:            853.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.292 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   4: 42469411.601 ops/s
[info]                  ·gc.alloc.rate:            863.401 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 42520244.167 ops/s
[info]                  ·gc.alloc.rate:            864.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24.830 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   42168830.630 ±(99.9%) 1759047.118 ops/s [Average]
[info]   (min, avg, max) = (41445987.470, 42168830.630, 42520244.167), stdev = 456818.951
[info]   CI (99.9%): [40409783.511, 43927877.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   857.576 ±(99.9%) 36.655 MB/sec [Average]
[info]   (min, avg, max) = (842.513, 857.576, 864.415), stdev = 9.519
[info]   CI (99.9%): [820.921, 894.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.010 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.010, 32.048), stdev = 0.021
[info]   CI (99.9%): [31.929, 32.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   804.885 ±(99.9%) 1155.081 MB/sec [Average]
[info]   (min, avg, max) = (670.651, 804.885, 1341.489), stdev = 299.971
[info]   CI (99.9%): [≈ 0, 1959.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   30.068 ±(99.9%) 43.546 B/op [Average]
[info]   (min, avg, max) = (24.830, 30.068, 50.292), stdev = 11.309
[info]   CI (99.9%): [≈ 0, 73.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 12.400, 20.000), stdev = 4.278
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1444850.416 ops/s
[info] # Warmup Iteration   2: 10716774.979 ops/s
[info] # Warmup Iteration   3: 10768303.491 ops/s
[info] # Warmup Iteration   4: 10628193.550 ops/s
[info] # Warmup Iteration   5: 10860863.631 ops/s
[info] Iteration   1: 11103028.306 ops/s
[info]                  ·gc.alloc.rate:                   2201.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        288.372 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 11519171.556 ops/s
[info]                  ·gc.alloc.rate:                                  2283.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       279.323 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 11473514.200 ops/s
[info]                  ·gc.alloc.rate:            2274.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       312.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 373.912 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 11489388.526 ops/s
[info]                  ·gc.alloc.rate:            2277.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       312.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 280.039 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 11474449.462 ops/s
[info]                  ·gc.alloc.rate:                                  2275.802 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.195 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       280.405 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11411910.410 ±(99.9%) 668677.723 ops/s [Average]
[info]   (min, avg, max) = (11103028.306, 11411910.410, 11519171.556), stdev = 173653.481
[info]   CI (99.9%): [10743232.687, 12080588.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2262.522 ±(99.9%) 132.843 MB/sec [Average]
[info]   (min, avg, max) = (2201.145, 2262.522, 2283.688), stdev = 34.499
[info]   CI (99.9%): [2129.678, 2395.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.059 ±(99.9%) 0.306 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.059, 312.195), stdev = 0.079
[info]   CI (99.9%): [311.753, 312.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2178.452 ±(99.9%) 1177.437 MB/sec [Average]
[info]   (min, avg, max) = (2034.215, 2178.452, 2725.387), stdev = 305.777
[info]   CI (99.9%): [1001.014, 3355.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   300.410 ±(99.9%) 158.851 B/op [Average]
[info]   (min, avg, max) = (279.323, 300.410, 373.912), stdev = 41.253
[info]   CI (99.9%): [141.559, 459.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.329), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.151 ±(99.9%) 1.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.151, 0.755), stdev = 0.338
[info]   CI (99.9%): [≈ 0, 1.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 18.000), stdev = 6.205
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:32:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22857451.605 ops/s
[info] # Warmup Iteration   2: 38104977.646 ops/s
[info] # Warmup Iteration   3: 40196521.013 ops/s
[info] # Warmup Iteration   4: 39965305.703 ops/s
[info] # Warmup Iteration   5: 40453146.694 ops/s
[info] Iteration   1: 40432867.798 ops/s
[info]                  ·gc.alloc.rate:            824.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26.240 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 40113533.654 ops/s
[info]                  ·gc.alloc.rate:            817.141 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52.899 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 40570027.532 ops/s
[info]                  ·gc.alloc.rate:            824.844 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26.152 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 41208724.634 ops/s
[info]                  ·gc.alloc.rate:            837.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25.746 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 42270293.248 ops/s
[info]                  ·gc.alloc.rate:            859.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25.100 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   40919089.373 ±(99.9%) 3288197.462 ops/s [Average]
[info]   (min, avg, max) = (40113533.654, 40919089.373, 42270293.248), stdev = 853934.439
[info]   CI (99.9%): [37630891.912, 44207286.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   832.778 ±(99.9%) 64.210 MB/sec [Average]
[info]   (min, avg, max) = (817.141, 832.778, 859.450), stdev = 16.675
[info]   CI (99.9%): [768.568, 896.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.033 ±(99.9%) 0.171 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.033, 32.098), stdev = 0.045
[info]   CI (99.9%): [31.862, 32.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.899 ±(99.9%) 1160.880 MB/sec [Average]
[info]   (min, avg, max) = (673.982, 808.899, 1348.197), stdev = 301.477
[info]   CI (99.9%): [≈ 0, 1969.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   31.227 ±(99.9%) 46.682 B/op [Average]
[info]   (min, avg, max) = (25.100, 31.227, 52.899), stdev = 12.123
[info]   CI (99.9%): [≈ 0, 77.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.000, 15.000), stdev = 3.391
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27116380.387 ops/s
[info] # Warmup Iteration   2: 43222464.701 ops/s
[info] # Warmup Iteration   3: 44500084.109 ops/s
[info] # Warmup Iteration   4: 46991783.708 ops/s
[info] # Warmup Iteration   5: 47041967.531 ops/s
[info] Iteration   1: 47051109.240 ops/s
[info]                  ·gc.alloc.rate:      1.319 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.044 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47033248.107 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 47064454.485 ops/s
[info]                  ·gc.alloc.rate:      0.493 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47017696.333 ops/s
[info]                  ·gc.alloc.rate:      0.004 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 46647929.894 ops/s
[info]                  ·gc.alloc.rate:      0.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   46962887.612 ±(99.9%) 681389.489 ops/s [Average]
[info]   (min, avg, max) = (46647929.894, 46962887.612, 47064454.485), stdev = 176954.687
[info]   CI (99.9%): [46281498.123, 47644277.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.549 ±(99.9%) 2.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.549, 1.319), stdev = 0.578
[info]   CI (99.9%): [≈ 0, 2.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.018 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.018, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13207073.112 ops/s
[info] # Warmup Iteration   2: 20158009.578 ops/s
[info] # Warmup Iteration   3: 22779178.210 ops/s
[info] # Warmup Iteration   4: 22769575.006 ops/s
[info] # Warmup Iteration   5: 22985173.113 ops/s
[info] Iteration   1: 23042105.763 ops/s
[info]                  ·gc.alloc.rate:                   936.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              64.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46.045 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 22540173.491 ops/s
[info]                  ·gc.alloc.rate:            918.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       64.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 94.190 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 23022109.667 ops/s
[info]                  ·gc.alloc.rate:                   936.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              64.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46.084 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 22987354.071 ops/s
[info]                  ·gc.alloc.rate:            935.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       64.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46.200 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 22779672.638 ops/s
[info]                  ·gc.alloc.rate:            929.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       64.198 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93.240 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   22874283.126 ±(99.9%) 824484.271 ops/s [Average]
[info]   (min, avg, max) = (22540173.491, 22874283.126, 23042105.763), stdev = 214115.947
[info]   CI (99.9%): [22049798.855, 23698767.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   931.224 ±(99.9%) 30.477 MB/sec [Average]
[info]   (min, avg, max) = (918.087, 931.224, 936.937), stdev = 7.915
[info]   CI (99.9%): [900.748, 961.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   64.071 ±(99.9%) 0.325 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.071, 64.198), stdev = 0.084
[info]   CI (99.9%): [63.747, 64.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   944.343 ±(99.9%) 1423.663 MB/sec [Average]
[info]   (min, avg, max) = (674.031, 944.343, 1349.963), stdev = 369.721
[info]   CI (99.9%): [≈ 0, 2368.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   65.152 ±(99.9%) 100.412 B/op [Average]
[info]   (min, avg, max) = (46.045, 65.152, 94.190), stdev = 26.077
[info]   CI (99.9%): [≈ 0, 165.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.046), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.000, 15.000), stdev = 4.123
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 532264.356 ops/s
[info] # Warmup Iteration   2: 2169923.244 ops/s
[info] # Warmup Iteration   3: 2242587.708 ops/s
[info] # Warmup Iteration   4: 2227669.146 ops/s
[info] # Warmup Iteration   5: 2250947.842 ops/s
[info] Iteration   1: 2244399.047 ops/s
[info]                  ·gc.alloc.rate:                   1659.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              1163.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1416.349 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   2: 2291615.436 ops/s
[info]                  ·gc.alloc.rate:                   1677.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.270 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        926.889 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 2285497.931 ops/s
[info]                  ·gc.alloc.rate:                   1672.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2040.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1405.127 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2290973.965 ops/s
[info]                  ·gc.alloc.rate:                                  1676.755 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       936.281 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2278992.855 ops/s
[info]                  ·gc.alloc.rate:            1667.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 941.193 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2278295.847 ±(99.9%) 75542.702 ops/s [Average]
[info]   (min, avg, max) = (2244399.047, 2278295.847, 2291615.436), stdev = 19618.200
[info]   CI (99.9%): [2202753.145, 2353838.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1670.892 ±(99.9%) 28.520 MB/sec [Average]
[info]   (min, avg, max) = (1659.549, 1670.892, 1677.474), stdev = 7.407
[info]   CI (99.9%): [1642.372, 1699.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1154.336 ±(99.9%) 19.533 B/op [Average]
[info]   (min, avg, max) = (1152.000, 1154.336, 1163.407), stdev = 5.073
[info]   CI (99.9%): [1134.803, 1173.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1627.109 ±(99.9%) 1417.986 MB/sec [Average]
[info]   (min, avg, max) = (1349.365, 1627.109, 2040.409), stdev = 368.246
[info]   CI (99.9%): [209.124, 3045.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1125.168 ±(99.9%) 1004.131 B/op [Average]
[info]   (min, avg, max) = (926.889, 1125.168, 1416.349), stdev = 260.770
[info]   CI (99.9%): [121.037, 2129.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.193 ±(99.9%) 5.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.193, 3.202), stdev = 1.468
[info]   CI (99.9%): [≈ 0, 6.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.000, 27.000), stdev = 9.434
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106203.334 ops/s
[info] # Warmup Iteration   2: 158464.061 ops/s
[info] # Warmup Iteration   3: 159027.486 ops/s
[info] # Warmup Iteration   4: 157136.731 ops/s
[info] # Warmup Iteration   5: 166157.612 ops/s
[info] Iteration   1: 166209.041 ops/s
[info]                  ·gc.alloc.rate:            3048.439 MB/sec
[info]                  ·gc.alloc.rate.norm:       28872.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25812.266 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 165835.861 ops/s
[info]                  ·gc.alloc.rate:                                  3041.922 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28873.618 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32337.505 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 165669.638 ops/s
[info]                  ·gc.alloc.rate:            3040.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       28885.994 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25894.203 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 161321.990 ops/s
[info]                  ·gc.alloc.rate:                                  2965.652 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28937.355 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.523 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33240.367 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 161640.730 ops/s
[info]                  ·gc.alloc.rate:            2967.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       28891.548 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26540.481 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   164135.452 ±(99.9%) 9369.832 ops/s [Average]
[info]   (min, avg, max) = (161321.990, 164135.452, 166209.041), stdev = 2433.316
[info]   CI (99.9%): [154765.620, 173505.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3012.715 ±(99.9%) 162.892 MB/sec [Average]
[info]   (min, avg, max) = (2965.652, 3012.715, 3048.439), stdev = 42.303
[info]   CI (99.9%): [2849.823, 3175.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28892.104 ±(99.9%) 102.442 B/op [Average]
[info]   (min, avg, max) = (28872.003, 28892.104, 28937.355), stdev = 26.604
[info]   CI (99.9%): [28789.662, 28994.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.110 ±(99.9%) 0.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.523), stdev = 0.232
[info]   CI (99.9%): [≈ 0, 1.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2998.018 ±(99.9%) 1436.752 MB/sec [Average]
[info]   (min, avg, max) = (2725.329, 2998.018, 3406.853), stdev = 373.120
[info]   CI (99.9%): [1561.266, 4434.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28764.964 ±(99.9%) 14239.615 B/op [Average]
[info]   (min, avg, max) = (25812.266, 28764.964, 33240.367), stdev = 3697.983
[info]   CI (99.9%): [14525.350, 43004.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2819.460 ops/s
[info] # Warmup Iteration   2: 22091.384 ops/s
[info] # Warmup Iteration   3: 25695.094 ops/s
[info] # Warmup Iteration   4: 25180.917 ops/s
[info] # Warmup Iteration   5: 25629.631 ops/s
[info] Iteration   1: 25302.073 ops/s
[info]                  ·gc.alloc.rate:                   1772.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              110257.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83700.447 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 207.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 26084.810 ops/s
[info]                  ·gc.alloc.rate:                   1808.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              109146.521 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        122657.390 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 321.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 26413.737 ops/s
[info]                  ·gc.alloc.rate:                                  1832.940 MB/sec
[info]                  ·gc.alloc.rate.norm:                             109227.803 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.178 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       121804.684 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 26514.968 ops/s
[info]                  ·gc.alloc.rate:            1838.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       109136.689 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80896.927 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 26671.351 ops/s
[info]                  ·gc.alloc.rate:            1848.966 MB/sec
[info]                  ·gc.alloc.rate.norm:       109120.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 120635.768 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   26197.388 ±(99.9%) 2097.248 ops/s [Average]
[info]   (min, avg, max) = (25302.073, 26197.388, 26671.351), stdev = 544.649
[info]   CI (99.9%): [24100.140, 28294.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1820.408 ±(99.9%) 118.168 MB/sec [Average]
[info]   (min, avg, max) = (1772.252, 1820.408, 1848.966), stdev = 30.688
[info]   CI (99.9%): [1702.240, 1938.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109377.626 ±(99.9%) 1899.877 B/op [Average]
[info]   (min, avg, max) = (109120.015, 109377.626, 110257.099), stdev = 493.392
[info]   CI (99.9%): [107477.749, 111277.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.636 ±(99.9%) 5.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.636, 3.178), stdev = 1.421
[info]   CI (99.9%): [≈ 0, 6.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1765.887 ±(99.9%) 1447.279 MB/sec [Average]
[info]   (min, avg, max) = (1345.385, 1765.887, 2044.092), stdev = 375.854
[info]   CI (99.9%): [318.608, 3213.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   105939.043 ±(99.9%) 83232.675 B/op [Average]
[info]   (min, avg, max) = (80896.927, 105939.043, 122657.390), stdev = 21615.261
[info]   CI (99.9%): [22706.368, 189171.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 5.329), stdev = 2.474
[info]   CI (99.9%): [≈ 0, 11.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   105.739 ±(99.9%) 578.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105.739, 321.513), stdev = 150.325
[info]   CI (99.9%): [≈ 0, 684.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 20.000), stdev = 7.530
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28898.474 ops/s
[info] # Warmup Iteration   2: 114831.650 ops/s
[info] # Warmup Iteration   3: 117010.202 ops/s
[info] # Warmup Iteration   4: 117518.311 ops/s
[info] # Warmup Iteration   5: 114411.889 ops/s
[info] Iteration   1: 118139.483 ops/s
[info]                  ·gc.alloc.rate:                   949.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              12648.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8962.947 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.874 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 117106.411 ops/s
[info]                  ·gc.alloc.rate:            941.065 MB/sec
[info]                  ·gc.alloc.rate.norm:       12648.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18093.097 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 118704.748 ops/s
[info]                  ·gc.alloc.rate:                   954.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              12650.261 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8910.785 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.831 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 118338.778 ops/s
[info]                  ·gc.alloc.rate:            950.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       12649.406 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8947.877 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 116973.950 ops/s
[info]                  ·gc.alloc.rate:                   940.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              12652.754 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18104.394 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   117852.674 ±(99.9%) 2966.278 ops/s [Average]
[info]   (min, avg, max) = (116973.950, 117852.674, 118704.748), stdev = 770.333
[info]   CI (99.9%): [114886.396, 120818.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   947.158 ±(99.9%) 23.795 MB/sec [Average]
[info]   (min, avg, max) = (940.276, 947.158, 954.157), stdev = 6.180
[info]   CI (99.9%): [923.362, 970.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12649.686 ±(99.9%) 7.575 B/op [Average]
[info]   (min, avg, max) = (12648.003, 12649.686, 12652.754), stdev = 1.967
[info]   CI (99.9%): [12642.111, 12657.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   941.828 ±(99.9%) 1420.042 MB/sec [Average]
[info]   (min, avg, max) = (672.104, 941.828, 1346.203), stdev = 368.780
[info]   CI (99.9%): [≈ 0, 2361.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   12603.820 ±(99.9%) 19315.582 B/op [Average]
[info]   (min, avg, max) = (8910.785, 12603.820, 18104.394), stdev = 5016.195
[info]   CI (99.9%): [≈ 0, 31919.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 4.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 2.664), stdev = 1.094
[info]   CI (99.9%): [≈ 0, 5.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.711 ±(99.9%) 56.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.711, 35.850), stdev = 14.734
[info]   CI (99.9%): [≈ 0, 67.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.200, 19.000), stdev = 5.310
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246214.298 ops/s
[info] # Warmup Iteration   2: 409377.076 ops/s
[info] # Warmup Iteration   3: 406907.353 ops/s
[info] # Warmup Iteration   4: 408405.161 ops/s
[info] # Warmup Iteration   5: 399892.497 ops/s
[info] Iteration   1: 414954.002 ops/s
[info]                  ·gc.alloc.rate:            1611.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       6112.451 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5113.772 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 409594.919 ops/s
[info]                  ·gc.alloc.rate:                   1600.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              6150.978 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5193.479 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 400989.789 ops/s
[info]                  ·gc.alloc.rate:                                  1561.009 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6127.906 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8011.143 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                13.073 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 410092.242 ops/s
[info]                  ·gc.alloc.rate:            1594.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       6119.724 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5230.698 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 404306.757 ops/s
[info]                  ·gc.alloc.rate:            1570.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       6113.348 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5305.556 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   407987.542 ±(99.9%) 20919.818 ops/s [Average]
[info]   (min, avg, max) = (400989.789, 407987.542, 414954.002), stdev = 5432.810
[info]   CI (99.9%): [387067.724, 428907.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1587.646 ±(99.9%) 81.144 MB/sec [Average]
[info]   (min, avg, max) = (1561.009, 1587.646, 1611.459), stdev = 21.073
[info]   CI (99.9%): [1506.502, 1668.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6124.881 ±(99.9%) 61.014 B/op [Average]
[info]   (min, avg, max) = (6112.451, 6124.881, 6150.978), stdev = 15.845
[info]   CI (99.9%): [6063.867, 6185.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.049 ±(99.9%) 0.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.247), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1493.268 ±(99.9%) 1178.758 MB/sec [Average]
[info]   (min, avg, max) = (1348.172, 1493.268, 2040.741), stdev = 306.120
[info]   CI (99.9%): [314.510, 2672.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5770.930 ±(99.9%) 4829.559 B/op [Average]
[info]   (min, avg, max) = (5113.772, 5770.930, 8011.143), stdev = 1254.221
[info]   CI (99.9%): [941.371, 10600.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.997), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.686 ±(99.9%) 30.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.686, 15.358), stdev = 7.828
[info]   CI (99.9%): [≈ 0, 35.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 16.000), stdev = 6.025
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 309320.106 ops/s
[info] # Warmup Iteration   2: 435173.103 ops/s
[info] # Warmup Iteration   3: 425610.665 ops/s
[info] # Warmup Iteration   4: 449120.844 ops/s
[info] # Warmup Iteration   5: 442975.561 ops/s
[info] Iteration   1: 447073.574 ops/s
[info]                  ·gc.alloc.rate:            1249.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       4398.465 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4746.311 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 449296.830 ops/s
[info]                  ·gc.alloc.rate:            1253.558 MB/sec
[info]                  ·gc.alloc.rate.norm:       4392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4722.863 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 440896.542 ops/s
[info]                  ·gc.alloc.rate:                   1230.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              4392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4812.872 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 439145.705 ops/s
[info]                  ·gc.alloc.rate:                   1228.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              4404.721 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4858.310 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.712 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 450606.007 ops/s
[info]                  ·gc.alloc.rate:            1260.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       4403.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:      681.517 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2380.177 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   445403.732 ±(99.9%) 19680.323 ops/s [Average]
[info]   (min, avg, max) = (439145.705, 445403.732, 450606.007), stdev = 5110.918
[info]   CI (99.9%): [425723.408, 465084.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1244.526 ±(99.9%) 55.082 MB/sec [Average]
[info]   (min, avg, max) = (1228.951, 1244.526, 1260.835), stdev = 14.305
[info]   CI (99.9%): [1189.443, 1299.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4398.123 ±(99.9%) 23.324 B/op [Average]
[info]   (min, avg, max) = (4392.001, 4398.123, 4404.721), stdev = 6.057
[info]   CI (99.9%): [4374.799, 4421.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1216.193 ±(99.9%) 1151.000 MB/sec [Average]
[info]   (min, avg, max) = (681.517, 1216.193, 1355.506), stdev = 298.911
[info]   CI (99.9%): [65.193, 2367.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   4304.107 ±(99.9%) 4146.552 B/op [Average]
[info]   (min, avg, max) = (2380.177, 4304.107, 4858.310), stdev = 1076.846
[info]   CI (99.9%): [157.555, 8450.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.663), stdev = 2.127
[info]   CI (99.9%): [≈ 0, 9.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   5.245 ±(99.9%) 29.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.245, 16.712), stdev = 7.619
[info]   CI (99.9%): [≈ 0, 34.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 11.200, 16.000), stdev = 6.058
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12232.836 ops/s
[info] # Warmup Iteration   2: 55373.689 ops/s
[info] # Warmup Iteration   3: 56985.776 ops/s
[info] # Warmup Iteration   4: 56445.023 ops/s
[info] # Warmup Iteration   5: 57227.188 ops/s
[info] Iteration   1: 56522.270 ops/s
[info]                  ·gc.alloc.rate:            1062.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       29584.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37466.366 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 56504.370 ops/s
[info]                  ·gc.alloc.rate:            1062.241 MB/sec
[info]                  ·gc.alloc.rate.norm:       29590.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37479.625 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 57035.111 ops/s
[info]                  ·gc.alloc.rate:            1071.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       29584.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18565.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 56466.824 ops/s
[info]                  ·gc.alloc.rate:                   1061.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              29584.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37504.179 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 92.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 57269.112 ops/s
[info]                  ·gc.alloc.rate:                   1076.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              29587.886 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18580.413 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.612 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   56759.537 ±(99.9%) 1418.342 ops/s [Average]
[info]   (min, avg, max) = (56466.824, 56759.537, 57269.112), stdev = 368.339
[info]   CI (99.9%): [55341.196, 58177.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1066.914 ±(99.9%) 26.390 MB/sec [Average]
[info]   (min, avg, max) = (1061.274, 1066.914, 1076.434), stdev = 6.853
[info]   CI (99.9%): [1040.524, 1093.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29585.985 ±(99.9%) 10.825 B/op [Average]
[info]   (min, avg, max) = (29584.007, 29585.985, 29590.018), stdev = 2.811
[info]   CI (99.9%): [29575.160, 29596.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1077.070 ±(99.9%) 1415.638 MB/sec [Average]
[info]   (min, avg, max) = (672.720, 1077.070, 1345.794), stdev = 367.637
[info]   CI (99.9%): [≈ 0, 2492.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   29919.256 ±(99.9%) 39883.532 B/op [Average]
[info]   (min, avg, max) = (18565.699, 29919.256, 37504.179), stdev = 10357.626
[info]   CI (99.9%): [≈ 0, 69802.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   25.889 ±(99.9%) 156.498 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.889, 92.832), stdev = 40.642
[info]   CI (99.9%): [≈ 0, 182.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   74.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 14.800, 20.000), stdev = 6.380
[info]   CI (99.9%): [74.000, 74.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102324.550 ops/s
[info] # Warmup Iteration   2: 212899.494 ops/s
[info] # Warmup Iteration   3: 221119.780 ops/s
[info] # Warmup Iteration   4: 219802.513 ops/s
[info] # Warmup Iteration   5: 220514.949 ops/s
[info] Iteration   1: 218821.573 ops/s
[info]                  ·gc.alloc.rate:            1487.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2022.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14545.523 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  24.000 ms
[info] Iteration   2: 221619.184 ops/s
[info]                  ·gc.alloc.rate:                   1505.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              10697.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9588.846 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 33.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 222218.850 ops/s
[info]                  ·gc.alloc.rate:                   1510.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              10697.242 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9624.118 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.589 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 224389.760 ops/s
[info]                  ·gc.alloc.rate:                                  1524.823 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.353 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9559.055 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 224182.237 ops/s
[info]                  ·gc.alloc.rate:            1523.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       10697.198 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9568.050 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   222246.321 ±(99.9%) 8709.833 ops/s [Average]
[info]   (min, avg, max) = (218821.573, 222246.321, 224389.760), stdev = 2261.916
[info]   CI (99.9%): [213536.487, 230956.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1510.340 ±(99.9%) 58.969 MB/sec [Average]
[info]   (min, avg, max) = (1487.212, 1510.340, 1524.823), stdev = 15.314
[info]   CI (99.9%): [1451.371, 1569.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10696.690 ±(99.9%) 2.441 B/op [Average]
[info]   (min, avg, max) = (10696.002, 10696.690, 10697.242), stdev = 0.634
[info]   CI (99.9%): [10694.248, 10699.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.353), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 0.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1491.309 ±(99.9%) 1143.529 MB/sec [Average]
[info]   (min, avg, max) = (1349.954, 1491.309, 2022.464), stdev = 296.971
[info]   CI (99.9%): [347.779, 2634.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10577.118 ±(99.9%) 8542.833 B/op [Average]
[info]   (min, avg, max) = (9559.055, 10577.118, 14545.523), stdev = 2218.547
[info]   CI (99.9%): [2034.285, 19119.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 8.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 4.662), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   11.340 ±(99.9%) 61.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.340, 33.114), stdev = 15.890
[info]   CI (99.9%): [≈ 0, 72.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.800, 24.000), stdev = 8.672
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:29:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88099.780 ops/s
[info] # Warmup Iteration   2: 325305.255 ops/s
[info] # Warmup Iteration   3: 346092.601 ops/s
[info] # Warmup Iteration   4: 362288.342 ops/s
[info] # Warmup Iteration   5: 362772.466 ops/s
[info] Iteration   1: 359135.935 ops/s
[info]                  ·gc.alloc.rate:            927.342 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.711 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5896.813 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 357764.104 ops/s
[info]                  ·gc.alloc.rate:            934.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       4110.895 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2959.803 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 356800.274 ops/s
[info]                  ·gc.alloc.rate:            925.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       4081.350 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5935.746 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 361763.441 ops/s
[info]                  ·gc.alloc.rate:            934.020 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2927.048 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 362111.375 ops/s
[info]                  ·gc.alloc.rate:            934.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       4064.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2924.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   359515.026 ±(99.9%) 9107.346 ops/s [Average]
[info]   (min, avg, max) = (356800.274, 359515.026, 362111.375), stdev = 2365.149
[info]   CI (99.9%): [350407.680, 368622.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   931.141 ±(99.9%) 17.698 MB/sec [Average]
[info]   (min, avg, max) = (925.055, 931.141, 934.949), stdev = 4.596
[info]   CI (99.9%): [913.443, 948.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4076.992 ±(99.9%) 78.366 B/op [Average]
[info]   (min, avg, max) = (4064.001, 4076.992, 4110.895), stdev = 20.351
[info]   CI (99.9%): [3998.625, 4155.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   941.775 ±(99.9%) 1418.600 MB/sec [Average]
[info]   (min, avg, max) = (672.715, 941.775, 1345.361), stdev = 368.406
[info]   CI (99.9%): [≈ 0, 2360.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4128.745 ±(99.9%) 6283.888 B/op [Average]
[info]   (min, avg, max) = (2924.317, 4128.745, 5935.746), stdev = 1631.906
[info]   CI (99.9%): [≈ 0, 10412.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.400, 19.000), stdev = 5.128
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 780487.337 ops/s
[info] # Warmup Iteration   2: 1121811.509 ops/s
[info] # Warmup Iteration   3: 1129348.309 ops/s
[info] # Warmup Iteration   4: 1095908.091 ops/s
[info] # Warmup Iteration   5: 1135059.118 ops/s
[info] Iteration   1: 1170797.487 ops/s
[info]                  ·gc.alloc.rate:                                  2285.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.529 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2744.659 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.582 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 1154638.899 ops/s
[info]                  ·gc.alloc.rate:            2263.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       3085.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3715.573 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1165707.652 ops/s
[info]                  ·gc.alloc.rate:                                  2277.064 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3074.799 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2760.241 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1143264.280 ops/s
[info]                  ·gc.alloc.rate:            2231.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2814.392 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1170113.798 ops/s
[info]                  ·gc.alloc.rate:                                  2284.221 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.749 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3666.415 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1160904.423 ±(99.9%) 45406.087 ops/s [Average]
[info]   (min, avg, max) = (1143264.280, 1160904.423, 1170797.487), stdev = 11791.817
[info]   CI (99.9%): [1115498.336, 1206310.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2268.200 ±(99.9%) 86.271 MB/sec [Average]
[info]   (min, avg, max) = (2231.333, 2268.200, 2285.183), stdev = 22.404
[info]   CI (99.9%): [2181.929, 2354.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3075.468 ±(99.9%) 21.116 B/op [Average]
[info]   (min, avg, max) = (3072.160, 3075.468, 3085.105), stdev = 5.484
[info]   CI (99.9%): [3054.353, 3096.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.140), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2316.161 ±(99.9%) 1439.322 MB/sec [Average]
[info]   (min, avg, max) = (2041.331, 2316.161, 2725.705), stdev = 373.787
[info]   CI (99.9%): [876.840, 3755.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3140.256 ±(99.9%) 1939.640 B/op [Average]
[info]   (min, avg, max) = (2744.659, 3140.256, 3715.573), stdev = 503.718
[info]   CI (99.9%): [1200.616, 5079.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.716 ±(99.9%) 6.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.582), stdev = 1.602
[info]   CI (99.9%): [≈ 0, 6.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.581
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24909.184 ops/s
[info] # Warmup Iteration   2: 73013.500 ops/s
[info] # Warmup Iteration   3: 74040.946 ops/s
[info] # Warmup Iteration   4: 74340.040 ops/s
[info] # Warmup Iteration   5: 74806.647 ops/s
[info] Iteration   1: 77252.046 ops/s
[info]                  ·gc.alloc.rate:                                  2493.265 MB/sec
[info]                  ·gc.alloc.rate.norm:                             50803.565 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.388 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55504.625 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.142 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 77476.762 ops/s
[info]                  ·gc.alloc.rate:            2500.329 MB/sec
[info]                  ·gc.alloc.rate.norm:       50800.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55370.528 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 77666.773 ops/s
[info]                  ·gc.alloc.rate:                                  2507.001 MB/sec
[info]                  ·gc.alloc.rate.norm:                             50801.106 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41428.458 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 77042.482 ops/s
[info]                  ·gc.alloc.rate:                                  2489.559 MB/sec
[info]                  ·gc.alloc.rate.norm:                             50865.263 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55684.550 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 76052.437 ops/s
[info]                  ·gc.alloc.rate:            2455.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       50812.506 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56411.519 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   77098.100 ±(99.9%) 2425.431 ops/s [Average]
[info]   (min, avg, max) = (76052.437, 77098.100, 77666.773), stdev = 629.877
[info]   CI (99.9%): [74672.669, 79523.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2489.061 ±(99.9%) 77.410 MB/sec [Average]
[info]   (min, avg, max) = (2455.152, 2489.061, 2507.001), stdev = 20.103
[info]   CI (99.9%): [2411.651, 2566.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50816.489 ±(99.9%) 106.679 B/op [Average]
[info]   (min, avg, max) = (50800.005, 50816.489, 50865.263), stdev = 27.704
[info]   CI (99.9%): [50709.810, 50923.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.085 ±(99.9%) 0.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.388), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2588.970 ±(99.9%) 1172.086 MB/sec [Average]
[info]   (min, avg, max) = (2044.467, 2588.970, 2725.684), stdev = 304.387
[info]   CI (99.9%): [1416.884, 3761.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   52879.936 ±(99.9%) 24698.687 B/op [Average]
[info]   (min, avg, max) = (41428.458, 52879.936, 56411.519), stdev = 6414.171
[info]   CI (99.9%): [28181.249, 77578.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.428 ±(99.9%) 46.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.428, 27.142), stdev = 12.138
[info]   CI (99.9%): [≈ 0, 52.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153096.638 ops/s
[info] # Warmup Iteration   2: 324224.137 ops/s
[info] # Warmup Iteration   3: 331965.792 ops/s
[info] # Warmup Iteration   4: 302737.358 ops/s
[info] # Warmup Iteration   5: 313711.719 ops/s
[info] Iteration   1: 331486.764 ops/s
[info]                  ·gc.alloc.rate:      513.916 MB/sec
[info]                  ·gc.alloc.rate.norm: 2440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 327216.387 ops/s
[info]                  ·gc.alloc.rate:            507.918 MB/sec
[info]                  ·gc.alloc.rate.norm:       2443.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3242.625 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 293534.604 ops/s
[info]                  ·gc.alloc.rate:            456.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.875 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3614.695 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 328072.549 ops/s
[info]                  ·gc.alloc.rate:            508.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       2440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3234.176 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 273326.009 ops/s
[info]                  ·gc.alloc.rate:      423.871 MB/sec
[info]                  ·gc.alloc.rate.norm: 2440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   310727.263 ±(99.9%) 100008.354 ops/s [Average]
[info]   (min, avg, max) = (273326.009, 310727.263, 331486.764), stdev = 25971.852
[info]   CI (99.9%): [210718.909, 410735.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   482.219 ±(99.9%) 154.216 MB/sec [Average]
[info]   (min, avg, max) = (423.871, 482.219, 513.916), stdev = 40.049
[info]   CI (99.9%): [328.003, 636.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2442.423 ±(99.9%) 14.899 B/op [Average]
[info]   (min, avg, max) = (2440.001, 2442.423, 2448.875), stdev = 3.869
[info]   CI (99.9%): [2427.524, 2457.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.498 ±(99.9%) 1421.866 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.498, 674.201), stdev = 369.254
[info]   CI (99.9%): [≈ 0, 1826.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2018.299 ±(99.9%) 7119.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2018.299, 3614.695), stdev = 1848.843
[info]   CI (99.9%): [≈ 0, 9137.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 8.000), stdev = 4.382
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356084.216 ops/s
[info] # Warmup Iteration   2: 761302.122 ops/s
[info] # Warmup Iteration   3: 781875.001 ops/s
[info] # Warmup Iteration   4: 782756.944 ops/s
[info] # Warmup Iteration   5: 792070.496 ops/s
[info] Iteration   1: 783547.073 ops/s
[info]                  ·gc.alloc.rate:                   565.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1136.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1351.447 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.338 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 780031.511 ops/s
[info]                  ·gc.alloc.rate:            575.914 MB/sec
[info]                  ·gc.alloc.rate.norm:       1161.813 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1358.902 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 800266.865 ops/s
[info]                  ·gc.alloc.rate:                   577.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              1136.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1323.184 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.310 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 793183.905 ops/s
[info]                  ·gc.alloc.rate:            572.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1336.363 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 804931.963 ops/s
[info]                  ·gc.alloc.rate:            582.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       1138.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1315.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   792392.263 ±(99.9%) 40883.327 ops/s [Average]
[info]   (min, avg, max) = (780031.511, 792392.263, 804931.963), stdev = 10617.270
[info]   CI (99.9%): [751508.937, 833275.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   574.757 ±(99.9%) 23.928 MB/sec [Average]
[info]   (min, avg, max) = (565.603, 574.757, 582.258), stdev = 6.214
[info]   CI (99.9%): [550.829, 598.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1141.643 ±(99.9%) 43.601 B/op [Average]
[info]   (min, avg, max) = (1136.001, 1141.643, 1161.813), stdev = 11.323
[info]   CI (99.9%): [1098.042, 1185.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   673.097 ±(99.9%) 1.525 MB/sec [Average]
[info]   (min, avg, max) = (672.715, 673.097, 673.611), stdev = 0.396
[info]   CI (99.9%): [671.572, 674.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1337.087 ±(99.9%) 70.484 B/op [Average]
[info]   (min, avg, max) = (1315.539, 1337.087, 1358.902), stdev = 18.305
[info]   CI (99.9%): [1266.603, 1407.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.530 ±(99.9%) 2.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.530, 1.338), stdev = 0.725
[info]   CI (99.9%): [≈ 0, 3.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1376070.149 ops/s
[info] # Warmup Iteration   2: 1888962.487 ops/s
[info] # Warmup Iteration   3: 1879692.813 ops/s
[info] # Warmup Iteration   4: 1936451.134 ops/s
[info] # Warmup Iteration   5: 1964632.887 ops/s
[info] Iteration   1: 1964812.304 ops/s
[info]                  ·gc.alloc.rate:            908.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 539.994 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1888868.555 ops/s
[info]                  ·gc.alloc.rate:            876.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       730.461 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1123.406 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 1962980.236 ops/s
[info]                  ·gc.alloc.rate:            908.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.242 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 540.482 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1965862.846 ops/s
[info]                  ·gc.alloc.rate:            909.192 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 539.698 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 1947086.615 ops/s
[info]                  ·gc.alloc.rate:            900.628 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1089.825 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   1945922.111 ±(99.9%) 126279.932 ops/s [Average]
[info]   (min, avg, max) = (1888868.555, 1945922.111, 1965862.846), stdev = 32794.497
[info]   CI (99.9%): [1819642.180, 2072202.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   900.668 ±(99.9%) 53.977 MB/sec [Average]
[info]   (min, avg, max) = (876.406, 900.668, 909.192), stdev = 14.018
[info]   CI (99.9%): [846.691, 954.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.597 ±(99.9%) 4.028 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.597, 730.461), stdev = 1.046
[info]   CI (99.9%): [724.570, 732.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.605 ±(99.9%) 1421.424 MB/sec [Average]
[info]   (min, avg, max) = (673.978, 943.605, 1348.092), stdev = 369.139
[info]   CI (99.9%): [≈ 0, 2365.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   766.681 ±(99.9%) 1195.791 B/op [Average]
[info]   (min, avg, max) = (539.698, 766.681, 1123.406), stdev = 310.543
[info]   CI (99.9%): [≈ 0, 1962.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.800, 16.000), stdev = 4.324
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1527245.928 ops/s
[info] # Warmup Iteration   2: 2060519.112 ops/s
[info] # Warmup Iteration   3: 2141807.267 ops/s
[info] # Warmup Iteration   4: 2147752.444 ops/s
[info] # Warmup Iteration   5: 2150338.723 ops/s
[info] Iteration   1: 2148453.628 ops/s
[info]                  ·gc.alloc.rate:      0.078 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2150107.922 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2146682.833 ops/s
[info]                  ·gc.alloc.rate:      0.715 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.525 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2150924.242 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2142218.260 ops/s
[info]                  ·gc.alloc.rate:      1.912 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.404 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2147677.377 ±(99.9%) 13317.235 ops/s [Average]
[info]   (min, avg, max) = (2142218.260, 2147677.377, 2150924.242), stdev = 3458.444
[info]   CI (99.9%): [2134360.142, 2160994.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.541 ±(99.9%) 3.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.541, 1.912), stdev = 0.823
[info]   CI (99.9%): [≈ 0, 3.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.397 ±(99.9%) 2.328 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.397, 1.404), stdev = 0.605
[info]   CI (99.9%): [≈ 0, 2.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198653.739 ops/s
[info] # Warmup Iteration   2: 384540.663 ops/s
[info] # Warmup Iteration   3: 411038.851 ops/s
[info] # Warmup Iteration   4: 414043.606 ops/s
[info] # Warmup Iteration   5: 410343.752 ops/s
[info] Iteration   1: 409885.056 ops/s
[info]                  ·gc.alloc.rate:            594.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       2283.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2585.988 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 408809.356 ops/s
[info]                  ·gc.alloc.rate:            591.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       2276.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2590.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 411088.698 ops/s
[info]                  ·gc.alloc.rate:                   593.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              2272.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2575.903 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.550 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 410248.344 ops/s
[info]                  ·gc.alloc.rate:            592.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       2272.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2583.618 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 412039.295 ops/s
[info]                  ·gc.alloc.rate:                   594.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              2272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2569.827 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   410414.150 ±(99.9%) 4707.760 ops/s [Average]
[info]   (min, avg, max) = (408809.356, 410414.150, 412039.295), stdev = 1222.590
[info]   CI (99.9%): [405706.390, 415121.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   593.167 ±(99.9%) 5.860 MB/sec [Average]
[info]   (min, avg, max) = (591.148, 593.167, 594.741), stdev = 1.522
[info]   CI (99.9%): [587.308, 599.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2275.085 ±(99.9%) 18.636 B/op [Average]
[info]   (min, avg, max) = (2272.001, 2275.085, 2283.064), stdev = 4.840
[info]   CI (99.9%): [2256.449, 2293.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   672.949 ±(99.9%) 1.391 MB/sec [Average]
[info]   (min, avg, max) = (672.646, 672.949, 673.366), stdev = 0.361
[info]   CI (99.9%): [671.559, 674.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2581.100 ±(99.9%) 31.431 B/op [Average]
[info]   (min, avg, max) = (2569.827, 2581.100, 2590.166), stdev = 8.163
[info]   CI (99.9%): [2549.669, 2612.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.019 ±(99.9%) 5.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.019, 2.550), stdev = 1.395
[info]   CI (99.9%): [≈ 0, 6.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14734.425 ops/s
[info] # Warmup Iteration   2: 42854.813 ops/s
[info] # Warmup Iteration   3: 43427.723 ops/s
[info] # Warmup Iteration   4: 44524.114 ops/s
[info] # Warmup Iteration   5: 44916.188 ops/s
[info] Iteration   1: 44596.304 ops/s
[info]                  ·gc.alloc.rate:                   1392.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              49123.200 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        47557.825 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 43924.268 ops/s
[info]                  ·gc.alloc.rate:                   1371.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              49112.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        48285.287 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.868 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 45046.825 ops/s
[info]                  ·gc.alloc.rate:                   1407.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              49162.760 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        47198.138 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 139.639 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 45450.930 ops/s
[info]                  ·gc.alloc.rate:                   1418.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              49112.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        47056.515 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 115.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 45623.427 ops/s
[info]                  ·gc.alloc.rate:            1423.671 MB/sec
[info]                  ·gc.alloc.rate.norm:       49114.822 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47014.957 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   44928.351 ±(99.9%) 2645.966 ops/s [Average]
[info]   (min, avg, max) = (43924.268, 44928.351, 45623.427), stdev = 687.149
[info]   CI (99.9%): [42282.385, 47574.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1402.483 ±(99.9%) 82.085 MB/sec [Average]
[info]   (min, avg, max) = (1371.115, 1402.483, 1423.671), stdev = 21.317
[info]   CI (99.9%): [1320.398, 1484.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   49124.960 ±(99.9%) 83.261 B/op [Average]
[info]   (min, avg, max) = (49112.009, 49124.960, 49162.760), stdev = 21.623
[info]   CI (99.9%): [49041.699, 49208.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1353.702 ±(99.9%) 26.363 MB/sec [Average]
[info]   (min, avg, max) = (1347.687, 1353.702, 1362.803), stdev = 6.846
[info]   CI (99.9%): [1327.339, 1380.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   47422.544 ±(99.9%) 2031.274 B/op [Average]
[info]   (min, avg, max) = (47014.957, 47422.544, 48285.287), stdev = 527.515
[info]   CI (99.9%): [45391.270, 49453.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 6.931 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 3.997), stdev = 1.800
[info]   CI (99.9%): [≈ 0, 8.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   60.470 ±(99.9%) 240.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.470, 139.639), stdev = 62.531
[info]   CI (99.9%): [≈ 0, 301.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.400, 16.000), stdev = 5.983
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18684.453 ops/s
[info] # Warmup Iteration   2: 57782.031 ops/s
[info] # Warmup Iteration   3: 59569.078 ops/s
[info] # Warmup Iteration   4: 59442.348 ops/s
[info] # Warmup Iteration   5: 59787.808 ops/s
[info] Iteration   1: 60166.830 ops/s
[info]                  ·gc.alloc.rate:            1081.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       28282.766 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17598.820 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 59204.465 ops/s
[info]                  ·gc.alloc.rate:            1065.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       28330.293 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35771.258 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 60302.990 ops/s
[info]                  ·gc.alloc.rate:            1083.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       28280.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17559.719 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 59915.974 ops/s
[info]                  ·gc.alloc.rate:                   1076.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              28280.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35345.062 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 87.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 58989.121 ops/s
[info]                  ·gc.alloc.rate:                   1060.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              28290.456 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36113.056 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 106.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   59715.876 ±(99.9%) 2259.951 ops/s [Average]
[info]   (min, avg, max) = (58989.121, 59715.876, 60302.990), stdev = 586.902
[info]   CI (99.9%): [57455.925, 61975.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1073.522 ±(99.9%) 38.483 MB/sec [Average]
[info]   (min, avg, max) = (1060.416, 1073.522, 1083.629), stdev = 9.994
[info]   CI (99.9%): [1035.040, 1112.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28292.706 ±(99.9%) 82.569 B/op [Average]
[info]   (min, avg, max) = (28280.007, 28292.706, 28330.293), stdev = 21.443
[info]   CI (99.9%): [28210.137, 28375.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1078.105 ±(99.9%) 1424.753 MB/sec [Average]
[info]   (min, avg, max) = (672.753, 1078.105, 1353.633), stdev = 370.004
[info]   CI (99.9%): [≈ 0, 2502.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   28477.583 ±(99.9%) 38323.468 B/op [Average]
[info]   (min, avg, max) = (17559.719, 28477.583, 36113.056), stdev = 9952.483
[info]   CI (99.9%): [≈ 0, 66801.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.997), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   38.824 ±(99.9%) 206.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.824, 106.633), stdev = 53.591
[info]   CI (99.9%): [≈ 0, 245.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.600, 19.000), stdev = 4.980
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57520.615 ops/s
[info] # Warmup Iteration   2: 92607.277 ops/s
[info] # Warmup Iteration   3: 92945.905 ops/s
[info] # Warmup Iteration   4: 92895.424 ops/s
[info] # Warmup Iteration   5: 91308.644 ops/s
[info] Iteration   1: 90797.456 ops/s
[info]                  ·gc.alloc.rate:            1401.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       24301.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2022.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35056.456 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   2: 93598.180 ops/s
[info]                  ·gc.alloc.rate:                   1434.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120.385 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22670.945 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 56.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 94096.834 ops/s
[info]                  ·gc.alloc.rate:                   1442.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              24123.730 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22673.781 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 66.851 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 91896.036 ops/s
[info]                  ·gc.alloc.rate:                                  1408.864 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24120.675 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.503 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23343.015 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 92352.162 ops/s
[info]                  ·gc.alloc.rate:            1415.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       24126.706 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23227.770 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   92548.134 ±(99.9%) 5104.674 ops/s [Average]
[info]   (min, avg, max) = (90797.456, 92548.134, 94096.834), stdev = 1325.668
[info]   CI (99.9%): [87443.459, 97652.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1420.610 ±(99.9%) 66.069 MB/sec [Average]
[info]   (min, avg, max) = (1401.915, 1420.610, 1442.538), stdev = 17.158
[info]   CI (99.9%): [1354.541, 1486.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24158.531 ±(99.9%) 307.177 B/op [Average]
[info]   (min, avg, max) = (24120.385, 24158.531, 24301.159), stdev = 79.773
[info]   CI (99.9%): [23851.354, 24465.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.101 ±(99.9%) 0.866 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.503), stdev = 0.225
[info]   CI (99.9%): [≈ 0, 0.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1490.493 ±(99.9%) 1145.179 MB/sec [Average]
[info]   (min, avg, max) = (1347.985, 1490.493, 2022.379), stdev = 297.399
[info]   CI (99.9%): [345.314, 2635.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   25394.393 ±(99.9%) 20832.372 B/op [Average]
[info]   (min, avg, max) = (22670.945, 25394.393, 35056.456), stdev = 5410.101
[info]   CI (99.9%): [4562.021, 46226.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.998), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   24.571 ±(99.9%) 130.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.571, 66.851), stdev = 33.864
[info]   CI (99.9%): [≈ 0, 154.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 10.600, 22.000), stdev = 8.019
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1838.762 ops/s
[info] # Warmup Iteration   2: 19448.302 ops/s
[info] # Warmup Iteration   3: 21669.660 ops/s
[info] # Warmup Iteration   4: 21743.340 ops/s
[info] # Warmup Iteration   5: 21765.936 ops/s
[info] Iteration   1: 21627.554 ops/s
[info]                  ·gc.alloc.rate:            1406.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       102333.392 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97911.687 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 21453.718 ops/s
[info]                  ·gc.alloc.rate:                   1397.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              102486.968 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2018.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        148065.303 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 195.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         30.000 ms
[info] Iteration   3: 21834.356 ops/s
[info]                  ·gc.alloc.rate:                   1416.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              102056.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        97511.807 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 336.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 22095.169 ops/s
[info]                  ·gc.alloc.rate:                                  1432.874 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102040.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96985.807 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                94.898 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 21715.363 ops/s
[info]                  ·gc.alloc.rate:                                  1407.832 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102040.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.932 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98774.701 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   21745.232 ±(99.9%) 923.593 ops/s [Average]
[info]   (min, avg, max) = (21453.718, 21745.232, 22095.169), stdev = 239.854
[info]   CI (99.9%): [20821.639, 22668.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1411.993 ±(99.9%) 51.894 MB/sec [Average]
[info]   (min, avg, max) = (1397.134, 1411.993, 1432.874), stdev = 13.477
[info]   CI (99.9%): [1360.099, 1463.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102191.297 ±(99.9%) 797.707 B/op [Average]
[info]   (min, avg, max) = (102040.019, 102191.297, 102486.968), stdev = 207.162
[info]   CI (99.9%): [101393.590, 102989.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.212 ±(99.9%) 1.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.212, 0.932), stdev = 0.406
[info]   CI (99.9%): [≈ 0, 1.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1488.295 ±(99.9%) 1141.579 MB/sec [Average]
[info]   (min, avg, max) = (1345.278, 1488.295, 2018.472), stdev = 296.464
[info]   CI (99.9%): [346.716, 2629.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   107849.861 ±(99.9%) 86603.342 B/op [Average]
[info]   (min, avg, max) = (96985.807, 107849.861, 148065.303), stdev = 22490.613
[info]   CI (99.9%): [21246.518, 194453.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.610 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 1.976
[info]   CI (99.9%): [≈ 0, 9.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   125.289 ±(99.9%) 550.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 125.289, 336.082), stdev = 142.896
[info]   CI (99.9%): [≈ 0, 675.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 13.600, 30.000), stdev = 11.082
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36849.711 ops/s
[info] # Warmup Iteration   2: 112374.210 ops/s
[info] # Warmup Iteration   3: 115793.972 ops/s
[info] # Warmup Iteration   4: 115150.201 ops/s
[info] # Warmup Iteration   5: 115097.607 ops/s
[info] Iteration   1: 116581.220 ops/s
[info]                  ·gc.alloc.rate:            1070.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       14456.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9082.785 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 115599.218 ops/s
[info]                  ·gc.alloc.rate:            1063.776 MB/sec
[info]                  ·gc.alloc.rate.norm:       14484.274 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18320.174 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 118680.568 ops/s
[info]                  ·gc.alloc.rate:            1092.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       14485.417 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8922.172 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 117223.768 ops/s
[info]                  ·gc.alloc.rate:                   1077.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              14469.914 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.520 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18066.560 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.775 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 118180.180 ops/s
[info]                  ·gc.alloc.rate:                   1086.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              14466.358 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18009.301 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 62.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   117252.991 ±(99.9%) 4749.247 ops/s [Average]
[info]   (min, avg, max) = (115599.218, 117252.991, 118680.568), stdev = 1233.364
[info]   CI (99.9%): [112503.744, 122002.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1078.163 ±(99.9%) 43.909 MB/sec [Average]
[info]   (min, avg, max) = (1063.776, 1078.163, 1092.218), stdev = 11.403
[info]   CI (99.9%): [1034.254, 1122.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14472.394 ±(99.9%) 48.015 B/op [Average]
[info]   (min, avg, max) = (14456.004, 14472.394, 14485.417), stdev = 12.469
[info]   CI (99.9%): [14424.379, 14520.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1077.770 ±(99.9%) 1423.464 MB/sec [Average]
[info]   (min, avg, max) = (672.743, 1077.770, 1352.174), stdev = 369.669
[info]   CI (99.9%): [≈ 0, 2501.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14480.198 ±(99.9%) 19261.468 B/op [Average]
[info]   (min, avg, max) = (8922.172, 14480.198, 18320.174), stdev = 5002.142
[info]   CI (99.9%): [≈ 0, 33741.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.663), stdev = 2.127
[info]   CI (99.9%): [≈ 0, 9.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   19.575 ±(99.9%) 109.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.575, 62.101), stdev = 28.375
[info]   CI (99.9%): [≈ 0, 128.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.600, 19.000), stdev = 4.980
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 301748.484 ops/s
[info] # Warmup Iteration   2: 383849.019 ops/s
[info] # Warmup Iteration   3: 424773.022 ops/s
[info] # Warmup Iteration   4: 419083.155 ops/s
[info] # Warmup Iteration   5: 413545.831 ops/s
[info] Iteration   1: 411859.690 ops/s
[info]                  ·gc.alloc.rate:            454.263 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2576.022 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 424091.547 ops/s
[info]                  ·gc.alloc.rate:      467.798 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.244 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 418911.775 ops/s
[info]                  ·gc.alloc.rate:            462.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2532.647 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 418580.224 ops/s
[info]                  ·gc.alloc.rate:            462.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       1741.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2534.650 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 428662.998 ops/s
[info]                  ·gc.alloc.rate:      472.894 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   420421.247 ±(99.9%) 24381.426 ops/s [Average]
[info]   (min, avg, max) = (411859.690, 420421.247, 428662.998), stdev = 6331.779
[info]   CI (99.9%): [396039.821, 444802.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   463.993 ±(99.9%) 26.767 MB/sec [Average]
[info]   (min, avg, max) = (454.263, 463.993, 472.894), stdev = 6.951
[info]   CI (99.9%): [437.227, 490.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1737.068 ±(99.9%) 8.672 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1737.068, 1741.092), stdev = 2.252
[info]   CI (99.9%): [1728.396, 1745.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.426 ±(99.9%) 1421.613 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.426, 674.073), stdev = 369.188
[info]   CI (99.9%): [≈ 0, 1826.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1528.664 ±(99.9%) 5373.882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1528.664, 2576.022), stdev = 1395.580
[info]   CI (99.9%): [≈ 0, 6902.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321442.771 ops/s
[info] # Warmup Iteration   2: 445120.300 ops/s
[info] # Warmup Iteration   3: 446602.192 ops/s
[info] # Warmup Iteration   4: 447496.732 ops/s
[info] # Warmup Iteration   5: 446794.383 ops/s
[info] Iteration   1: 448275.775 ops/s
[info]                  ·gc.alloc.rate:      4.557 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 447670.329 ops/s
[info]                  ·gc.alloc.rate:      4.590 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.140 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 448777.143 ops/s
[info]                  ·gc.alloc.rate:      4.619 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.196 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 448247.579 ops/s
[info]                  ·gc.alloc.rate:      4.557 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 448239.830 ops/s
[info]                  ·gc.alloc.rate:      4.557 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   448242.131 ±(99.9%) 1509.092 ops/s [Average]
[info]   (min, avg, max) = (447670.329, 448242.131, 448777.143), stdev = 391.906
[info]   CI (99.9%): [446733.039, 449751.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.576 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (4.557, 4.576, 4.619), stdev = 0.028
[info]   CI (99.9%): [4.468, 4.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.068 ±(99.9%) 0.360 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.068, 16.196), stdev = 0.094
[info]   CI (99.9%): [15.707, 16.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:25:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10094.349 ops/s
[info] # Warmup Iteration   2: 51211.872 ops/s
[info] # Warmup Iteration   3: 52114.566 ops/s
[info] # Warmup Iteration   4: 52018.409 ops/s
[info] # Warmup Iteration   5: 52759.504 ops/s
[info] Iteration   1: 53241.278 ops/s
[info]                  ·gc.alloc.rate:            1003.182 MB/sec
[info]                  ·gc.alloc.rate.norm:       29660.881 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19888.110 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 52993.513 ops/s
[info]                  ·gc.alloc.rate:            997.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       29632.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39960.825 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 53433.066 ops/s
[info]                  ·gc.alloc.rate:            1006.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       29643.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19815.918 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 53387.726 ops/s
[info]                  ·gc.alloc.rate:            1005.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       29632.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39665.977 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   5: 53513.356 ops/s
[info]                  ·gc.alloc.rate:                   1007.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              29632.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19787.410 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 97.957 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   53313.788 ±(99.9%) 787.632 ops/s [Average]
[info]   (min, avg, max) = (52993.513, 53313.788, 53513.356), stdev = 204.546
[info]   CI (99.9%): [52526.156, 54101.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1004.008 ±(99.9%) 15.122 MB/sec [Average]
[info]   (min, avg, max) = (997.618, 1004.008, 1007.392), stdev = 3.927
[info]   CI (99.9%): [988.886, 1019.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29640.006 ±(99.9%) 48.608 B/op [Average]
[info]   (min, avg, max) = (29632.008, 29640.006, 29660.881), stdev = 12.623
[info]   CI (99.9%): [29591.397, 29688.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   941.830 ±(99.9%) 1418.596 MB/sec [Average]
[info]   (min, avg, max) = (672.650, 941.830, 1345.437), stdev = 368.405
[info]   CI (99.9%): [≈ 0, 2360.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   27823.648 ±(99.9%) 42147.819 B/op [Average]
[info]   (min, avg, max) = (19787.410, 27823.648, 39960.825), stdev = 10945.655
[info]   CI (99.9%): [≈ 0, 69971.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   19.591 ±(99.9%) 168.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.591, 97.957), stdev = 43.808
[info]   CI (99.9%): [≈ 0, 188.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 13.800, 20.000), stdev = 5.215
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 457863.673 ops/s
[info] # Warmup Iteration   2: 2414414.289 ops/s
[info] # Warmup Iteration   3: 2537012.201 ops/s
[info] # Warmup Iteration   4: 2555965.865 ops/s
[info] # Warmup Iteration   5: 2549792.002 ops/s
[info] Iteration   1: 2584230.603 ops/s
[info]                  ·gc.alloc.rate:            3258.587 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.806 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1660.083 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 2589168.957 ops/s
[info]                  ·gc.alloc.rate:                                  3266.957 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1985.755 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2071.157 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 2571579.769 ops/s
[info]                  ·gc.alloc.rate:                                  3242.682 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1984.862 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.581 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2085.186 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 2585082.810 ops/s
[info]                  ·gc.alloc.rate:            3258.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.176 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2074.443 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2565650.305 ops/s
[info]                  ·gc.alloc.rate:                                  3234.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1984.457 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1672.113 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2579142.489 ±(99.9%) 38551.665 ops/s [Average]
[info]   (min, avg, max) = (2565650.305, 2579142.489, 2589168.957), stdev = 10011.745
[info]   CI (99.9%): [2540590.824, 2617694.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3252.318 ±(99.9%) 51.130 MB/sec [Average]
[info]   (min, avg, max) = (3234.531, 3252.318, 3266.957), stdev = 13.278
[info]   CI (99.9%): [3201.188, 3303.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1984.811 ±(99.9%) 2.296 B/op [Average]
[info]   (min, avg, max) = (1984.176, 1984.811, 1985.755), stdev = 0.596
[info]   CI (99.9%): [1982.515, 1987.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3134.406 ±(99.9%) 1437.538 MB/sec [Average]
[info]   (min, avg, max) = (2725.430, 3134.406, 3407.460), stdev = 373.324
[info]   CI (99.9%): [1696.867, 4571.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1912.596 ±(99.9%) 866.861 B/op [Average]
[info]   (min, avg, max) = (1660.083, 1912.596, 2085.186), stdev = 225.121
[info]   CI (99.9%): [1045.735, 2779.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 11.000), stdev = 2.168
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.688 ops/s
[info] # Warmup Iteration   2: 701864.285 ops/s
[info] # Warmup Iteration   3: 770471.159 ops/s
[info] # Warmup Iteration   4: 777575.937 ops/s
[info] # Warmup Iteration   5: 764282.913 ops/s
[info] Iteration   1: 784465.036 ops/s
[info]                  ·gc.alloc.rate:      482.469 MB/sec
[info]                  ·gc.alloc.rate.norm: 968.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 778971.974 ops/s
[info]                  ·gc.alloc.rate:                   480.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              970.738 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1353.977 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.346 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 757996.267 ops/s
[info]                  ·gc.alloc.rate:            466.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       968.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1392.809 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 758395.546 ops/s
[info]                  ·gc.alloc.rate:            467.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       969.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1392.092 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 774315.144 ops/s
[info]                  ·gc.alloc.rate:      476.200 MB/sec
[info]                  ·gc.alloc.rate.norm: 968.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   770828.793 ±(99.9%) 46514.461 ops/s [Average]
[info]   (min, avg, max) = (757996.267, 770828.793, 784465.036), stdev = 12079.658
[info]   CI (99.9%): [724314.333, 817343.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   474.501 ±(99.9%) 29.061 MB/sec [Average]
[info]   (min, avg, max) = (466.246, 474.501, 482.469), stdev = 7.547
[info]   CI (99.9%): [445.440, 503.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   968.790 ±(99.9%) 4.581 B/op [Average]
[info]   (min, avg, max) = (968.001, 968.790, 970.738), stdev = 1.190
[info]   CI (99.9%): [964.210, 973.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.388 ±(99.9%) 1414.452 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.388, 670.817), stdev = 367.329
[info]   CI (99.9%): [≈ 0, 1816.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   827.776 ±(99.9%) 2910.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 827.776, 1392.809), stdev = 755.816
[info]   CI (99.9%): [≈ 0, 3738.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.269 ±(99.9%) 2.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 1.346), stdev = 0.602
[info]   CI (99.9%): [≈ 0, 2.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 11.000), stdev = 5.675
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19364.015 ops/s
[info] # Warmup Iteration   2: 235089.722 ops/s
[info] # Warmup Iteration   3: 277769.422 ops/s
[info] # Warmup Iteration   4: 278335.354 ops/s
[info] # Warmup Iteration   5: 287501.930 ops/s
[info] Iteration   1: 291236.150 ops/s
[info]                  ·gc.alloc.rate:            550.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3635.739 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 289012.390 ops/s
[info]                  ·gc.alloc.rate:            548.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       2989.597 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3663.737 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 292356.202 ops/s
[info]                  ·gc.alloc.rate:      552.764 MB/sec
[info]                  ·gc.alloc.rate.norm: 2976.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 292150.057 ops/s
[info]                  ·gc.alloc.rate:            552.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3624.342 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 292923.055 ops/s
[info]                  ·gc.alloc.rate:            553.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3614.780 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   291535.571 ±(99.9%) 5913.038 ops/s [Average]
[info]   (min, avg, max) = (289012.390, 291535.571, 292923.055), stdev = 1535.597
[info]   CI (99.9%): [285622.533, 297448.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   551.714 ±(99.9%) 7.363 MB/sec [Average]
[info]   (min, avg, max) = (548.986, 551.714, 553.814), stdev = 1.912
[info]   CI (99.9%): [544.351, 559.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2978.721 ±(99.9%) 23.413 B/op [Average]
[info]   (min, avg, max) = (2976.001, 2978.721, 2989.597), stdev = 6.080
[info]   CI (99.9%): [2955.308, 3002.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.175 ±(99.9%) 1158.463 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.175, 672.780), stdev = 300.849
[info]   CI (99.9%): [≈ 0, 1696.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2907.720 ±(99.9%) 6259.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2907.720, 3663.737), stdev = 1625.568
[info]   CI (99.9%): [≈ 0, 9167.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.800, 10.000), stdev = 4.382
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 333756.875 ops/s
[info] # Warmup Iteration   2: 443609.857 ops/s
[info] # Warmup Iteration   3: 501537.812 ops/s
[info] # Warmup Iteration   4: 466479.011 ops/s
[info] # Warmup Iteration   5: 462440.393 ops/s
[info] Iteration   1: 455742.778 ops/s
[info]                  ·gc.alloc.rate:            344.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       1190.751 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2328.139 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 467377.527 ops/s
[info]                  ·gc.alloc.rate:      351.603 MB/sec
[info]                  ·gc.alloc.rate.norm: 1184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 459661.134 ops/s
[info]                  ·gc.alloc.rate:            345.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2308.297 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 460081.853 ops/s
[info]                  ·gc.alloc.rate:      346.149 MB/sec
[info]                  ·gc.alloc.rate.norm: 1184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 447719.136 ops/s
[info]                  ·gc.alloc.rate:            343.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       1206.460 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2369.594 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   458116.486 ±(99.9%) 27617.121 ops/s [Average]
[info]   (min, avg, max) = (447719.136, 458116.486, 467377.527), stdev = 7172.079
[info]   CI (99.9%): [430499.364, 485733.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   346.315 ±(99.9%) 12.217 MB/sec [Average]
[info]   (min, avg, max) = (343.213, 346.315, 351.603), stdev = 3.173
[info]   CI (99.9%): [334.097, 358.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1189.843 ±(99.9%) 37.499 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1189.843, 1206.460), stdev = 9.738
[info]   CI (99.9%): [1152.344, 1227.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.485 ±(99.9%) 1421.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.485, 674.270), stdev = 369.243
[info]   CI (99.9%): [≈ 0, 1826.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1401.206 ±(99.9%) 4926.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1401.206, 2369.594), stdev = 1279.312
[info]   CI (99.9%): [≈ 0, 6327.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 8.000), stdev = 4.037
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 603227.365 ops/s
[info] # Warmup Iteration   2: 1087209.651 ops/s
[info] # Warmup Iteration   3: 1362301.771 ops/s
[info] # Warmup Iteration   4: 1349935.454 ops/s
[info] # Warmup Iteration   5: 1360619.421 ops/s
[info] Iteration   1: 1324224.140 ops/s
[info]                  ·gc.alloc.rate:            424.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 801.240 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1351414.918 ops/s
[info]                  ·gc.alloc.rate:            432.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 785.131 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1363572.994 ops/s
[info]                  ·gc.alloc.rate:      436.633 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1350594.918 ops/s
[info]                  ·gc.alloc.rate:            434.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       506.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 785.593 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1351497.185 ops/s
[info]                  ·gc.alloc.rate:            433.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.575 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 785.051 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   1348260.831 ±(99.9%) 55737.825 ops/s [Average]
[info]   (min, avg, max) = (1324224.140, 1348260.831, 1363572.994), stdev = 14474.936
[info]   CI (99.9%): [1292523.007, 1403998.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   432.183 ±(99.9%) 18.490 MB/sec [Average]
[info]   (min, avg, max) = (424.004, 432.183, 436.633), stdev = 4.802
[info]   CI (99.9%): [413.693, 450.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.530 ±(99.9%) 3.388 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.530, 506.042), stdev = 0.880
[info]   CI (99.9%): [501.142, 507.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   539.285 ±(99.9%) 1160.851 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.285, 674.267), stdev = 301.469
[info]   CI (99.9%): [≈ 0, 1700.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   631.403 ±(99.9%) 1359.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 631.403, 801.240), stdev = 353.033
[info]   CI (99.9%): [≈ 0, 1990.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.000, 8.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1667422.949 ops/s
[info] # Warmup Iteration   2: 2832988.752 ops/s
[info] # Warmup Iteration   3: 3623829.549 ops/s
[info] # Warmup Iteration   4: 3688163.762 ops/s
[info] # Warmup Iteration   5: 3611784.028 ops/s
[info] Iteration   1: 3663362.251 ops/s
[info]                  ·gc.alloc.rate:      300.438 MB/sec
[info]                  ·gc.alloc.rate.norm: 129.072 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3666158.137 ops/s
[info]                  ·gc.alloc.rate:      298.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 128.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3651178.146 ops/s
[info]                  ·gc.alloc.rate:                   296.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        290.570 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3686678.257 ops/s
[info]                  ·gc.alloc.rate:      299.812 MB/sec
[info]                  ·gc.alloc.rate.norm: 128.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3610887.950 ops/s
[info]                  ·gc.alloc.rate:            293.638 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 294.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   3655652.948 ±(99.9%) 108166.278 ops/s [Average]
[info]   (min, avg, max) = (3610887.950, 3655652.948, 3686678.257), stdev = 28090.439
[info]   CI (99.9%): [3547486.670, 3763819.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   297.795 ±(99.9%) 10.412 MB/sec [Average]
[info]   (min, avg, max) = (293.638, 297.795, 300.438), stdev = 2.704
[info]   CI (99.9%): [287.384, 308.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.214 ±(99.9%) 1.845 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.214, 129.072), stdev = 0.479
[info]   CI (99.9%): [126.369, 130.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   269.750 ±(99.9%) 1422.313 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.750, 674.718), stdev = 369.370
[info]   CI (99.9%): [≈ 0, 1692.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   116.938 ±(99.9%) 616.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.938, 294.118), stdev = 160.128
[info]   CI (99.9%): [≈ 0, 733.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space.norm":
[info]   0.057 ±(99.9%) 0.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.287), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 8.000), stdev = 4.123
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 867.441 ops/s
[info] # Warmup Iteration   2: 69936.315 ops/s
[info] # Warmup Iteration   3: 206814.457 ops/s
[info] # Warmup Iteration   4: 221213.310 ops/s
[info] # Warmup Iteration   5: 217148.580 ops/s
[info] Iteration   1: 218924.767 ops/s
[info]                  ·gc.alloc.rate:            1472.425 MB/sec
[info]                  ·gc.alloc.rate.norm:       10585.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9673.696 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 219634.350 ops/s
[info]                  ·gc.alloc.rate:            1476.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       10576.758 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9642.693 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  21.000 ms
[info] Iteration   3: 220654.492 ops/s
[info]                  ·gc.alloc.rate:                   1482.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              10577.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9616.694 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 222634.674 ops/s
[info]                  ·gc.alloc.rate:                   1498.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              10590.348 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9592.745 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 32.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 225132.512 ops/s
[info]                  ·gc.alloc.rate:            1513.114 MB/sec
[info]                  ·gc.alloc.rate.norm:       10576.337 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14292.477 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   221396.159 ±(99.9%) 9675.786 ops/s [Average]
[info]   (min, avg, max) = (218924.767, 221396.159, 225132.512), stdev = 2512.771
[info]   CI (99.9%): [211720.373, 231071.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1488.485 ±(99.9%) 65.075 MB/sec [Average]
[info]   (min, avg, max) = (1472.425, 1488.485, 1513.114), stdev = 16.900
[info]   CI (99.9%): [1423.410, 1553.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10581.094 ±(99.9%) 24.288 B/op [Average]
[info]   (min, avg, max) = (10576.337, 10581.094, 10590.348), stdev = 6.307
[info]   CI (99.9%): [10556.806, 10605.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1488.242 ±(99.9%) 1198.092 MB/sec [Average]
[info]   (min, avg, max) = (1345.656, 1488.242, 2044.767), stdev = 311.141
[info]   CI (99.9%): [290.150, 2686.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10563.661 ±(99.9%) 8027.395 B/op [Average]
[info]   (min, avg, max) = (9592.745, 10563.661, 14292.477), stdev = 2084.689
[info]   CI (99.9%): [2536.266, 18591.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   12.295 ±(99.9%) 65.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.295, 32.965), stdev = 16.909
[info]   CI (99.9%): [≈ 0, 77.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 13.800, 21.000), stdev = 6.979
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1061890.753 ops/s
[info] # Warmup Iteration   2: 1363464.297 ops/s
[info] # Warmup Iteration   3: 1371403.517 ops/s
[info] # Warmup Iteration   4: 1346000.429 ops/s
[info] # Warmup Iteration   5: 1374497.596 ops/s
[info] Iteration   1: 1297112.207 ops/s
[info]                  ·gc.alloc.rate:      43.813 MB/sec
[info]                  ·gc.alloc.rate.norm: 53.152 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1376002.375 ops/s
[info]                  ·gc.alloc.rate:      41.958 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1373828.022 ops/s
[info]                  ·gc.alloc.rate:      42.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.195 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1374874.259 ops/s
[info]                  ·gc.alloc.rate:      41.934 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1375351.133 ops/s
[info]                  ·gc.alloc.rate:      41.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1359433.599 ±(99.9%) 134186.260 ops/s [Average]
[info]   (min, avg, max) = (1297112.207, 1359433.599, 1376002.375), stdev = 34847.745
[info]   CI (99.9%): [1225247.339, 1493619.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   42.345 ±(99.9%) 3.168 MB/sec [Average]
[info]   (min, avg, max) = (41.934, 42.345, 43.813), stdev = 0.823
[info]   CI (99.9%): [39.177, 45.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.070 ±(99.9%) 8.793 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.070, 53.152), stdev = 2.284
[info]   CI (99.9%): [40.276, 57.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5521.749 ops/s
[info] # Warmup Iteration   2: 52693.169 ops/s
[info] # Warmup Iteration   3: 56094.431 ops/s
[info] # Warmup Iteration   4: 56225.589 ops/s
[info] # Warmup Iteration   5: 57312.282 ops/s
[info] Iteration   1: 58356.419 ops/s
[info]                  ·gc.alloc.rate:                                  2480.821 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66912.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.273 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2720.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73372.473 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                107.795 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 58622.110 ops/s
[info]                  ·gc.alloc.rate:            2492.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       66912.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73183.916 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 58702.343 ops/s
[info]                  ·gc.alloc.rate:            2495.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       66921.279 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54811.278 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 58632.495 ops/s
[info]                  ·gc.alloc.rate:            2493.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       66951.332 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73170.188 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 58568.633 ops/s
[info]                  ·gc.alloc.rate:                                  2492.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66965.168 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73250.132 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   58576.400 ±(99.9%) 507.750 ops/s [Average]
[info]   (min, avg, max) = (58356.419, 58576.400, 58702.343), stdev = 131.861
[info]   CI (99.9%): [58068.650, 59084.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2491.071 ±(99.9%) 22.731 MB/sec [Average]
[info]   (min, avg, max) = (2480.821, 2491.071, 2495.859), stdev = 5.903
[info]   CI (99.9%): [2468.340, 2513.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66932.359 ±(99.9%) 94.075 B/op [Average]
[info]   (min, avg, max) = (66912.007, 66932.359, 66965.168), stdev = 24.431
[info]   CI (99.9%): [66838.284, 67026.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.078 ±(99.9%) 0.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.273), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2588.485 ±(99.9%) 1171.631 MB/sec [Average]
[info]   (min, avg, max) = (2044.211, 2588.485, 2726.804), stdev = 304.269
[info]   CI (99.9%): [1416.854, 3760.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69557.597 ±(99.9%) 31744.059 B/op [Average]
[info]   (min, avg, max) = (54811.278, 69557.597, 73372.473), stdev = 8243.831
[info]   CI (99.9%): [37813.538, 101301.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   21.559 ±(99.9%) 185.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.559, 107.795), stdev = 48.207
[info]   CI (99.9%): [≈ 0, 207.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 12.000), stdev = 3.130
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676169.719 ops/s
[info] # Warmup Iteration   2: 1424240.989 ops/s
[info] # Warmup Iteration   3: 1444564.697 ops/s
[info] # Warmup Iteration   4: 1432787.631 ops/s
[info] # Warmup Iteration   5: 1436592.807 ops/s
[info] Iteration   1: 1444107.847 ops/s
[info]                  ·gc.alloc.rate:            755.918 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 733.254 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1432271.006 ops/s
[info]                  ·gc.alloc.rate:            755.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       830.804 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 739.301 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1449615.672 ops/s
[info]                  ·gc.alloc.rate:            758.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 730.431 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1449992.877 ops/s
[info]                  ·gc.alloc.rate:            759.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 730.273 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1449138.456 ops/s
[info]                  ·gc.alloc.rate:            758.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 730.680 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1445025.172 ±(99.9%) 28955.467 ops/s [Average]
[info]   (min, avg, max) = (1432271.006, 1445025.172, 1449992.877), stdev = 7519.643
[info]   CI (99.9%): [1416069.705, 1473980.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   757.737 ±(99.9%) 6.300 MB/sec [Average]
[info]   (min, avg, max) = (755.918, 757.737, 759.009), stdev = 1.636
[info]   CI (99.9%): [751.437, 764.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   825.361 ±(99.9%) 11.716 B/op [Average]
[info]   (min, avg, max) = (824.000, 825.361, 830.804), stdev = 3.043
[info]   CI (99.9%): [813.645, 837.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.743 ±(99.9%) 0.473 MB/sec [Average]
[info]   (min, avg, max) = (672.669, 672.743, 672.961), stdev = 0.123
[info]   CI (99.9%): [672.270, 673.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   732.788 ±(99.9%) 14.784 B/op [Average]
[info]   (min, avg, max) = (730.273, 732.788, 739.301), stdev = 3.839
[info]   CI (99.9%): [718.004, 747.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1093992.397 ops/s
[info] # Warmup Iteration   2: 1690637.713 ops/s
[info] # Warmup Iteration   3: 1738587.468 ops/s
[info] # Warmup Iteration   4: 1755068.565 ops/s
[info] # Warmup Iteration   5: 1732011.342 ops/s
[info] Iteration   1: 1727581.038 ops/s
[info]                  ·gc.alloc.rate:            465.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 614.172 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1754523.626 ops/s
[info]                  ·gc.alloc.rate:      474.013 MB/sec
[info]                  ·gc.alloc.rate.norm: 425.134 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1738821.028 ops/s
[info]                  ·gc.alloc.rate:            470.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       425.654 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 610.178 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1740909.715 ops/s
[info]                  ·gc.alloc.rate:            468.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 609.423 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1754497.432 ops/s
[info]                  ·gc.alloc.rate:      472.618 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1743266.568 ±(99.9%) 44081.343 ops/s [Average]
[info]   (min, avg, max) = (1727581.038, 1743266.568, 1754523.626), stdev = 11447.785
[info]   CI (99.9%): [1699185.225, 1787347.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   470.278 ±(99.9%) 12.631 MB/sec [Average]
[info]   (min, avg, max) = (465.602, 470.278, 474.013), stdev = 3.280
[info]   CI (99.9%): [457.647, 482.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.564 ±(99.9%) 3.002 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.564, 425.654), stdev = 0.780
[info]   CI (99.9%): [421.562, 427.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.492 ±(99.9%) 1421.846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.492, 674.383), stdev = 369.249
[info]   CI (99.9%): [≈ 0, 1826.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   366.755 ±(99.9%) 1289.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 366.755, 614.172), stdev = 334.804
[info]   CI (99.9%): [≈ 0, 1655.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 728504.076 ops/s
[info] # Warmup Iteration   2: 975996.566 ops/s
[info] # Warmup Iteration   3: 982092.604 ops/s
[info] # Warmup Iteration   4: 982242.312 ops/s
[info] # Warmup Iteration   5: 980840.860 ops/s
[info] Iteration   1: 982218.620 ops/s
[info]                  ·gc.alloc.rate:      9.985 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 981832.197 ops/s
[info]                  ·gc.alloc.rate:      9.981 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 982318.713 ops/s
[info]                  ·gc.alloc.rate:      9.986 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 981778.875 ops/s
[info]                  ·gc.alloc.rate:      9.981 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 981329.734 ops/s
[info]                  ·gc.alloc.rate:      10.144 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.272 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   981895.628 ±(99.9%) 1517.485 ops/s [Average]
[info]   (min, avg, max) = (981329.734, 981895.628, 982318.713), stdev = 394.086
[info]   CI (99.9%): [980378.143, 983413.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10.015 ±(99.9%) 0.278 MB/sec [Average]
[info]   (min, avg, max) = (9.981, 10.015, 10.144), stdev = 0.072
[info]   CI (99.9%): [9.738, 10.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.055 ±(99.9%) 0.468 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.055, 16.272), stdev = 0.122
[info]   CI (99.9%): [15.587, 16.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8387.137 ops/s
[info] # Warmup Iteration   2: 45069.396 ops/s
[info] # Warmup Iteration   3: 44956.249 ops/s
[info] # Warmup Iteration   4: 46069.227 ops/s
[info] # Warmup Iteration   5: 46068.853 ops/s
[info] Iteration   1: 46745.925 ops/s
[info]                  ·gc.alloc.rate:                   1880.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              63317.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68045.078 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 156.993 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   2: 46614.246 ops/s
[info]                  ·gc.alloc.rate:                                  1885.154 MB/sec
[info]                  ·gc.alloc.rate.norm:                             63656.182 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.466 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68846.467 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                134.949 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 47088.252 ops/s
[info]                  ·gc.alloc.rate:                                  1892.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             63272.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68327.312 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 47213.970 ops/s
[info]                  ·gc.alloc.rate:            1897.826 MB/sec
[info]                  ·gc.alloc.rate.norm:       63272.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45432.890 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 46886.649 ops/s
[info]                  ·gc.alloc.rate:            1884.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       63272.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68624.552 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   46909.809 ±(99.9%) 941.456 ops/s [Average]
[info]   (min, avg, max) = (46614.246, 46909.809, 47213.970), stdev = 244.493
[info]   CI (99.9%): [45968.353, 47851.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1888.162 ±(99.9%) 26.952 MB/sec [Average]
[info]   (min, avg, max) = (1880.409, 1888.162, 1897.826), stdev = 6.999
[info]   CI (99.9%): [1861.210, 1915.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   63357.872 ±(99.9%) 646.517 B/op [Average]
[info]   (min, avg, max) = (63272.009, 63357.872, 63656.182), stdev = 167.899
[info]   CI (99.9%): [62711.355, 64004.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.302 ±(99.9%) 2.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 1.466), stdev = 0.651
[info]   CI (99.9%): [≈ 0, 2.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1902.102 ±(99.9%) 1161.584 MB/sec [Average]
[info]   (min, avg, max) = (1362.747, 1902.102, 2044.094), stdev = 301.660
[info]   CI (99.9%): [740.518, 3063.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   63855.260 ±(99.9%) 39672.652 B/op [Average]
[info]   (min, avg, max) = (45432.890, 63855.260, 68846.467), stdev = 10302.862
[info]   CI (99.9%): [24182.608, 103527.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   58.388 ±(99.9%) 309.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.388, 156.993), stdev = 80.330
[info]   CI (99.9%): [≈ 0, 367.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.200, 26.000), stdev = 9.257
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154728.009 ops/s
[info] # Warmup Iteration   2: 214447.105 ops/s
[info] # Warmup Iteration   3: 218879.516 ops/s
[info] # Warmup Iteration   4: 224448.961 ops/s
[info] # Warmup Iteration   5: 224218.177 ops/s
[info] Iteration   1: 227397.666 ops/s
[info]                  ·gc.alloc.rate:            890.514 MB/sec
[info]                  ·gc.alloc.rate.norm:       6164.207 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4665.870 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 225094.067 ops/s
[info]                  ·gc.alloc.rate:            884.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       6185.696 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4713.518 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 222352.227 ops/s
[info]                  ·gc.alloc.rate:            870.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.748 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9543.483 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 223704.101 ops/s
[info]                  ·gc.alloc.rate:            875.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4742.991 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 222946.497 ops/s
[info]                  ·gc.alloc.rate:            872.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4759.158 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   224298.912 ±(99.9%) 7750.935 ops/s [Average]
[info]   (min, avg, max) = (222352.227, 224298.912, 227397.666), stdev = 2012.893
[info]   CI (99.9%): [216547.976, 232049.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   878.716 ±(99.9%) 33.166 MB/sec [Average]
[info]   (min, avg, max) = (870.265, 878.716, 890.514), stdev = 8.613
[info]   CI (99.9%): [845.550, 911.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6166.131 ±(99.9%) 42.644 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6166.131, 6185.696), stdev = 11.075
[info]   CI (99.9%): [6123.487, 6208.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.915 ±(99.9%) 1160.654 MB/sec [Average]
[info]   (min, avg, max) = (674.041, 808.915, 1348.109), stdev = 301.418
[info]   CI (99.9%): [≈ 0, 1969.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5685.004 ±(99.9%) 8306.789 B/op [Average]
[info]   (min, avg, max) = (4665.870, 5685.004, 9543.483), stdev = 2157.247
[info]   CI (99.9%): [≈ 0, 13991.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 15.000), stdev = 3.271
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3894.904 ops/s
[info] # Warmup Iteration   2: 24336.020 ops/s
[info] # Warmup Iteration   3: 27851.956 ops/s
[info] # Warmup Iteration   4: 28016.663 ops/s
[info] # Warmup Iteration   5: 27879.697 ops/s
[info] Iteration   1: 28072.967 ops/s
[info]                  ·gc.alloc.rate:            1350.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       75741.929 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75439.809 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 28075.270 ops/s
[info]                  ·gc.alloc.rate:            1351.404 MB/sec
[info]                  ·gc.alloc.rate.norm:       75767.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75431.749 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 28313.752 ops/s
[info]                  ·gc.alloc.rate:                   1362.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              75736.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        74980.275 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 259.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 28410.778 ops/s
[info]                  ·gc.alloc.rate:                   1379.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              76413.864 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        75206.683 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 221.413 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 28785.342 ops/s
[info]                  ·gc.alloc.rate:                                  1385.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75740.473 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74515.873 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   28331.622 ±(99.9%) 1130.978 ops/s [Average]
[info]   (min, avg, max) = (28072.967, 28331.622, 28785.342), stdev = 293.711
[info]   CI (99.9%): [27200.644, 29462.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1365.812 ±(99.9%) 60.804 MB/sec [Average]
[info]   (min, avg, max) = (1350.822, 1365.812, 1385.157), stdev = 15.791
[info]   CI (99.9%): [1305.008, 1426.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75879.939 ±(99.9%) 1150.288 B/op [Average]
[info]   (min, avg, max) = (75736.014, 75879.939, 76413.864), stdev = 298.726
[info]   CI (99.9%): [74729.650, 77030.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1351.981 ±(99.9%) 29.921 MB/sec [Average]
[info]   (min, avg, max) = (1345.417, 1351.981, 1362.761), stdev = 7.770
[info]   CI (99.9%): [1322.060, 1381.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   75114.878 ±(99.9%) 1480.547 B/op [Average]
[info]   (min, avg, max) = (74515.873, 75114.878, 75439.809), stdev = 384.493
[info]   CI (99.9%): [73634.330, 76595.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   96.121 ±(99.9%) 509.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 96.121, 259.191), stdev = 132.295
[info]   CI (99.9%): [≈ 0, 605.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 13.400, 20.000), stdev = 7.369
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33658.128 ops/s
[info] # Warmup Iteration   2: 87890.530 ops/s
[info] # Warmup Iteration   3: 88212.579 ops/s
[info] # Warmup Iteration   4: 91068.356 ops/s
[info] # Warmup Iteration   5: 87841.017 ops/s
[info] Iteration   1: 90593.599 ops/s
[info]                  ·gc.alloc.rate:            1105.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       19192.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1343.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23311.177 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 91484.045 ops/s
[info]                  ·gc.alloc.rate:            1118.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       19237.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11574.698 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 90675.222 ops/s
[info]                  ·gc.alloc.rate:            1105.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       19192.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23355.388 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 91551.919 ops/s
[info]                  ·gc.alloc.rate:                   1116.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              19192.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11565.850 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 45.805 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 90973.199 ops/s
[info]                  ·gc.alloc.rate:                   1109.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              19203.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23392.596 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 80.664 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   91055.597 ±(99.9%) 1716.476 ops/s [Average]
[info]   (min, avg, max) = (90593.599, 91055.597, 91551.919), stdev = 445.763
[info]   CI (99.9%): [89339.121, 92772.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1111.224 ±(99.9%) 22.797 MB/sec [Average]
[info]   (min, avg, max) = (1105.598, 1111.224, 1118.095), stdev = 5.920
[info]   CI (99.9%): [1088.427, 1134.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19203.295 ±(99.9%) 75.270 B/op [Average]
[info]   (min, avg, max) = (19192.004, 19203.295, 19237.148), stdev = 19.547
[info]   CI (99.9%): [19128.024, 19278.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1077.267 ±(99.9%) 1421.606 MB/sec [Average]
[info]   (min, avg, max) = (672.741, 1077.267, 1352.042), stdev = 369.187
[info]   CI (99.9%): [≈ 0, 2498.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18639.942 ±(99.9%) 24851.129 B/op [Average]
[info]   (min, avg, max) = (11565.850, 18639.942, 23392.596), stdev = 6453.759
[info]   CI (99.9%): [≈ 0, 43491.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.662), stdev = 2.127
[info]   CI (99.9%): [≈ 0, 9.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   25.294 ±(99.9%) 141.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.294, 80.664), stdev = 36.762
[info]   CI (99.9%): [≈ 0, 166.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 13.800, 19.000), stdev = 4.764
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233899.086 ops/s
[info] # Warmup Iteration   2: 294178.883 ops/s
[info] # Warmup Iteration   3: 293497.294 ops/s
[info] # Warmup Iteration   4: 314585.102 ops/s
[info] # Warmup Iteration   5: 312623.640 ops/s
[info] Iteration   1: 315201.468 ops/s
[info]                  ·gc.alloc.rate:      424.578 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 307614.027 ops/s
[info]                  ·gc.alloc.rate:            414.325 MB/sec
[info]                  ·gc.alloc.rate.norm:       2120.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3449.230 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 313523.051 ops/s
[info]                  ·gc.alloc.rate:            422.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       2122.361 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3384.154 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 317406.185 ops/s
[info]                  ·gc.alloc.rate:      427.526 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 314395.621 ops/s
[info]                  ·gc.alloc.rate:            424.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       2126.781 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3374.737 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   313628.070 ±(99.9%) 14084.966 ops/s [Average]
[info]   (min, avg, max) = (307614.027, 313628.070, 317406.185), stdev = 3657.821
[info]   CI (99.9%): [299543.105, 327713.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   422.801 ±(99.9%) 19.387 MB/sec [Average]
[info]   (min, avg, max) = (414.325, 422.801, 427.526), stdev = 5.035
[info]   CI (99.9%): [403.413, 442.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2121.829 ±(99.9%) 11.361 B/op [Average]
[info]   (min, avg, max) = (2120.001, 2121.829, 2126.781), stdev = 2.950
[info]   CI (99.9%): [2110.468, 2133.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.459 ±(99.9%) 1421.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.459, 674.105), stdev = 369.218
[info]   CI (99.9%): [≈ 0, 1826.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2041.624 ±(99.9%) 7177.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2041.624, 3449.230), stdev = 1863.960
[info]   CI (99.9%): [≈ 0, 9219.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 8.000), stdev = 4.382
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228560.524 ops/s
[info] # Warmup Iteration   2: 332595.247 ops/s
[info] # Warmup Iteration   3: 341653.612 ops/s
[info] # Warmup Iteration   4: 341291.500 ops/s
[info] # Warmup Iteration   5: 338178.243 ops/s
[info] Iteration   1: 341069.493 ops/s
[info]                  ·gc.alloc.rate:      3.598 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.606 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 341716.464 ops/s
[info]                  ·gc.alloc.rate:      3.474 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 341587.660 ops/s
[info]                  ·gc.alloc.rate:      3.474 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 341038.622 ops/s
[info]                  ·gc.alloc.rate:      3.467 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 341497.768 ops/s
[info]                  ·gc.alloc.rate:      3.597 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.578 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   341382.001 ±(99.9%) 1191.732 ops/s [Average]
[info]   (min, avg, max) = (341038.622, 341382.001, 341716.464), stdev = 309.489
[info]   CI (99.9%): [340190.270, 342573.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.522 ±(99.9%) 0.266 MB/sec [Average]
[info]   (min, avg, max) = (3.467, 3.522, 3.598), stdev = 0.069
[info]   CI (99.9%): [3.256, 3.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.238 ±(99.9%) 1.248 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.238, 16.606), stdev = 0.324
[info]   CI (99.9%): [14.990, 17.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12759.499 ops/s
[info] # Warmup Iteration   2: 40719.905 ops/s
[info] # Warmup Iteration   3: 43348.793 ops/s
[info] # Warmup Iteration   4: 42714.114 ops/s
[info] # Warmup Iteration   5: 43230.332 ops/s
[info] Iteration   1: 43742.187 ops/s
[info]                  ·gc.alloc.rate:            1075.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       38704.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24206.573 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 43292.144 ops/s
[info]                  ·gc.alloc.rate:            1064.850 MB/sec
[info]                  ·gc.alloc.rate.norm:       38707.842 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48916.273 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   3: 43197.768 ops/s
[info]                  ·gc.alloc.rate:            1063.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       38764.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24511.914 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 42848.063 ops/s
[info]                  ·gc.alloc.rate:                   1054.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              38704.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49424.200 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 97.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   5: 43378.191 ops/s
[info]                  ·gc.alloc.rate:                   1066.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              38704.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24505.763 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   43291.671 ±(99.9%) 1241.880 ops/s [Average]
[info]   (min, avg, max) = (42848.063, 43291.671, 43742.187), stdev = 322.512
[info]   CI (99.9%): [42049.791, 44533.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1065.017 ±(99.9%) 29.582 MB/sec [Average]
[info]   (min, avg, max) = (1054.089, 1065.017, 1075.600), stdev = 7.682
[info]   CI (99.9%): [1035.435, 1094.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   38716.784 ±(99.9%) 101.941 B/op [Average]
[info]   (min, avg, max) = (38704.009, 38716.784, 38764.049), stdev = 26.474
[info]   CI (99.9%): [38614.843, 38818.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   942.508 ±(99.9%) 1417.866 MB/sec [Average]
[info]   (min, avg, max) = (672.663, 942.508, 1346.049), stdev = 368.215
[info]   CI (99.9%): [≈ 0, 2360.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   34312.945 ±(99.9%) 52232.214 B/op [Average]
[info]   (min, avg, max) = (24206.573, 34312.945, 49424.200), stdev = 13564.540
[info]   CI (99.9%): [≈ 0, 86545.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 4.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   29.241 ±(99.9%) 168.282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.241, 97.870), stdev = 43.702
[info]   CI (99.9%): [≈ 0, 197.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.600, 19.000), stdev = 6.025
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24595.593 ops/s
[info] # Warmup Iteration   2: 61577.679 ops/s
[info] # Warmup Iteration   3: 62336.288 ops/s
[info] # Warmup Iteration   4: 63425.251 ops/s
[info] # Warmup Iteration   5: 63478.630 ops/s
[info] Iteration   1: 63295.565 ops/s
[info]                  ·gc.alloc.rate:            1344.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       33421.335 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33525.809 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 63450.818 ops/s
[info]                  ·gc.alloc.rate:                   1347.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              33416.333 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33427.925 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.524 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 63638.324 ops/s
[info]                  ·gc.alloc.rate:                   1353.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              33464.845 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33408.935 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 98.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 64066.973 ops/s
[info]                  ·gc.alloc.rate:                   1360.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              33416.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33397.997 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 81.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 64397.463 ops/s
[info]                  ·gc.alloc.rate:                                  1367.144 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33416.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.301 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33309.317 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   63769.828 ±(99.9%) 1750.040 ops/s [Average]
[info]   (min, avg, max) = (63295.565, 63769.828, 64397.463), stdev = 454.480
[info]   CI (99.9%): [62019.789, 65519.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1354.413 ±(99.9%) 36.158 MB/sec [Average]
[info]   (min, avg, max) = (1344.049, 1354.413, 1367.144), stdev = 9.390
[info]   CI (99.9%): [1318.255, 1390.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   33426.905 ±(99.9%) 82.132 B/op [Average]
[info]   (min, avg, max) = (33416.006, 33426.905, 33464.845), stdev = 21.329
[info]   CI (99.9%): [33344.773, 33509.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.060 ±(99.9%) 0.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.301), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1353.875 ±(99.9%) 26.246 MB/sec [Average]
[info]   (min, avg, max) = (1347.903, 1353.875, 1362.779), stdev = 6.816
[info]   CI (99.9%): [1327.629, 1380.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   33413.997 ±(99.9%) 297.868 B/op [Average]
[info]   (min, avg, max) = (33309.317, 33413.997, 33525.809), stdev = 77.355
[info]   CI (99.9%): [33116.128, 33711.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   39.437 ±(99.9%) 182.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.437, 98.843), stdev = 47.331
[info]   CI (99.9%): [≈ 0, 221.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 16.000), stdev = 6.107
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35826.244 ops/s
[info] # Warmup Iteration   2: 98430.356 ops/s
[info] # Warmup Iteration   3: 103515.722 ops/s
[info] # Warmup Iteration   4: 108083.290 ops/s
[info] # Warmup Iteration   5: 104682.513 ops/s
[info] Iteration   1: 107452.369 ops/s
[info]                  ·gc.alloc.rate:            528.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       7734.749 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9854.487 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 107221.404 ops/s
[info]                  ·gc.alloc.rate:            527.167 MB/sec
[info]                  ·gc.alloc.rate.norm:       7739.519 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9875.899 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 108313.066 ops/s
[info]                  ·gc.alloc.rate:      531.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 7726.997 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 107099.842 ops/s
[info]                  ·gc.alloc.rate:            524.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       7712.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9886.686 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 107020.675 ops/s
[info]                  ·gc.alloc.rate:            524.355 MB/sec
[info]                  ·gc.alloc.rate.norm:       7712.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9893.890 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   107421.471 ±(99.9%) 2019.301 ops/s [Average]
[info]   (min, avg, max) = (107020.675, 107421.471, 108313.066), stdev = 524.406
[info]   CI (99.9%): [105402.170, 109440.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   527.214 ±(99.9%) 11.416 MB/sec [Average]
[info]   (min, avg, max) = (524.355, 527.214, 531.700), stdev = 2.965
[info]   CI (99.9%): [515.797, 538.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7725.055 ±(99.9%) 48.996 B/op [Average]
[info]   (min, avg, max) = (7712.004, 7725.055, 7739.519), stdev = 12.724
[info]   CI (99.9%): [7676.058, 7774.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.187 ±(99.9%) 1158.488 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.187, 672.824), stdev = 300.856
[info]   CI (99.9%): [≈ 0, 1696.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7902.192 ±(99.9%) 17010.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7902.192, 9893.890), stdev = 4417.485
[info]   CI (99.9%): [≈ 0, 24912.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.600, 10.000), stdev = 4.278
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126715.693 ops/s
[info] # Warmup Iteration   2: 235437.368 ops/s
[info] # Warmup Iteration   3: 243081.623 ops/s
[info] # Warmup Iteration   4: 240753.909 ops/s
[info] # Warmup Iteration   5: 241785.027 ops/s
[info] Iteration   1: 240859.758 ops/s
[info]                  ·gc.alloc.rate:            992.904 MB/sec
[info]                  ·gc.alloc.rate.norm:       6488.829 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8810.136 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 243642.990 ops/s
[info]                  ·gc.alloc.rate:            1006.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       6500.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4354.759 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 241967.037 ops/s
[info]                  ·gc.alloc.rate:            996.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8769.872 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 243845.688 ops/s
[info]                  ·gc.alloc.rate:            1004.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.311 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4350.831 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 247083.551 ops/s
[info]                  ·gc.alloc.rate:                   1017.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8588.103 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   243479.805 ±(99.9%) 9092.046 ops/s [Average]
[info]   (min, avg, max) = (240859.758, 243479.805, 247083.551), stdev = 2361.176
[info]   CI (99.9%): [234387.759, 252571.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1003.279 ±(99.9%) 36.672 MB/sec [Average]
[info]   (min, avg, max) = (992.904, 1003.279, 1017.219), stdev = 9.524
[info]   CI (99.9%): [966.607, 1039.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6485.860 ±(99.9%) 34.040 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6485.860, 6500.155), stdev = 8.840
[info]   CI (99.9%): [6451.820, 6519.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1078.496 ±(99.9%) 1421.530 MB/sec [Average]
[info]   (min, avg, max) = (674.047, 1078.496, 1348.145), stdev = 369.167
[info]   CI (99.9%): [≈ 0, 2500.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6974.740 ±(99.9%) 9222.136 B/op [Average]
[info]   (min, avg, max) = (4350.831, 6974.740, 8810.136), stdev = 2394.959
[info]   CI (99.9%): [≈ 0, 16196.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.243 ±(99.9%) 36.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.243, 21.216), stdev = 9.488
[info]   CI (99.9%): [≈ 0, 40.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 12.600, 17.000), stdev = 4.722
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1322.181 ops/s
[info] # Warmup Iteration   2: 16654.426 ops/s
[info] # Warmup Iteration   3: 20301.427 ops/s
[info] # Warmup Iteration   4: 20854.881 ops/s
[info] # Warmup Iteration   5: 20645.076 ops/s
[info] Iteration   1: 20814.870 ops/s
[info]                  ·gc.alloc.rate:            1028.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       77760.654 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50869.963 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 20556.024 ops/s
[info]                  ·gc.alloc.rate:                   1020.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              78137.564 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        102970.571 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 20951.462 ops/s
[info]                  ·gc.alloc.rate:            1031.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       77501.475 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50537.400 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 20739.840 ops/s
[info]                  ·gc.alloc.rate:            1024.601 MB/sec
[info]                  ·gc.alloc.rate.norm:       77760.992 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102107.767 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   5: 20768.670 ops/s
[info]                  ·gc.alloc.rate:                   1023.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              77525.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        102172.050 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 403.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   20766.173 ±(99.9%) 549.866 ops/s [Average]
[info]   (min, avg, max) = (20556.024, 20766.173, 20951.462), stdev = 142.799
[info]   CI (99.9%): [20216.307, 21316.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1025.728 ±(99.9%) 16.737 MB/sec [Average]
[info]   (min, avg, max) = (1020.722, 1025.728, 1031.515), stdev = 4.347
[info]   CI (99.9%): [1008.991, 1042.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77737.140 ±(99.9%) 985.486 B/op [Average]
[info]   (min, avg, max) = (77501.475, 77737.140, 78137.564), stdev = 255.928
[info]   CI (99.9%): [76751.654, 78722.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1076.897 ±(99.9%) 1420.472 MB/sec [Average]
[info]   (min, avg, max) = (672.633, 1076.897, 1348.368), stdev = 368.892
[info]   CI (99.9%): [≈ 0, 2497.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   81731.550 ±(99.9%) 109076.122 B/op [Average]
[info]   (min, avg, max) = (50537.400, 81731.550, 102970.571), stdev = 28326.722
[info]   CI (99.9%): [≈ 0, 190807.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 8.960 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.330), stdev = 2.327
[info]   CI (99.9%): [≈ 0, 10.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   90.969 ±(99.9%) 678.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 90.969, 403.842), stdev = 176.290
[info]   CI (99.9%): [≈ 0, 769.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   75.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 15.000, 20.000), stdev = 5.148
[info]   CI (99.9%): [75.000, 75.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54521.426 ops/s
[info] # Warmup Iteration   2: 125677.915 ops/s
[info] # Warmup Iteration   3: 132836.808 ops/s
[info] # Warmup Iteration   4: 129770.423 ops/s
[info] # Warmup Iteration   5: 134124.872 ops/s
[info] Iteration   1: 132995.949 ops/s
[info]                  ·gc.alloc.rate:            688.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       8145.397 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7961.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 132219.020 ops/s
[info]                  ·gc.alloc.rate:            691.194 MB/sec
[info]                  ·gc.alloc.rate.norm:       8227.752 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8008.755 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 134189.100 ops/s
[info]                  ·gc.alloc.rate:            692.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       8120.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7891.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 134073.076 ops/s
[info]                  ·gc.alloc.rate:            691.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       8120.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7897.788 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 134385.945 ops/s
[info]                  ·gc.alloc.rate:            693.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       8120.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7879.455 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   133572.618 ±(99.9%) 3579.640 ops/s [Average]
[info]   (min, avg, max) = (132219.020, 133572.618, 134385.945), stdev = 929.621
[info]   CI (99.9%): [129992.978, 137152.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   691.365 ±(99.9%) 7.167 MB/sec [Average]
[info]   (min, avg, max) = (688.371, 691.365, 693.378), stdev = 1.861
[info]   CI (99.9%): [684.198, 698.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8146.632 ±(99.9%) 179.678 B/op [Average]
[info]   (min, avg, max) = (8120.003, 8146.632, 8227.752), stdev = 46.662
[info]   CI (99.9%): [7966.953, 8326.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.790 ±(99.9%) 0.264 MB/sec [Average]
[info]   (min, avg, max) = (672.699, 672.790, 672.869), stdev = 0.069
[info]   CI (99.9%): [672.526, 673.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7927.822 ±(99.9%) 213.559 B/op [Average]
[info]   (min, avg, max) = (7879.455, 7927.822, 8008.755), stdev = 55.461
[info]   CI (99.9%): [7714.262, 8141.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 307346.008 ops/s
[info] # Warmup Iteration   2: 411923.257 ops/s
[info] # Warmup Iteration   3: 429155.147 ops/s
[info] # Warmup Iteration   4: 414995.383 ops/s
[info] # Warmup Iteration   5: 433366.423 ops/s
[info] Iteration   1: 425998.193 ops/s
[info]                  ·gc.alloc.rate:            1247.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       4608.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4981.172 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 427612.576 ops/s
[info]                  ·gc.alloc.rate:            1252.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       4609.434 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4962.513 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 416530.862 ops/s
[info]                  ·gc.alloc.rate:                   1228.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              4643.546 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5094.525 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 419458.589 ops/s
[info]                  ·gc.alloc.rate:                   1234.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              4629.923 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5083.599 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.996 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 430354.243 ops/s
[info]                  ·gc.alloc.rate:                                  1259.919 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4608.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4981.793 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.436 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   423990.893 ±(99.9%) 22273.230 ops/s [Average]
[info]   (min, avg, max) = (416530.862, 423990.893, 430354.243), stdev = 5784.287
[info]   CI (99.9%): [401717.663, 446264.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1244.506 ±(99.9%) 49.366 MB/sec [Average]
[info]   (min, avg, max) = (1228.855, 1244.506, 1259.919), stdev = 12.820
[info]   CI (99.9%): [1195.140, 1293.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4619.781 ±(99.9%) 62.453 B/op [Average]
[info]   (min, avg, max) = (4608.001, 4619.781, 4643.546), stdev = 16.219
[info]   CI (99.9%): [4557.327, 4682.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.193), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1352.389 ±(99.9%) 23.857 MB/sec [Average]
[info]   (min, avg, max) = (1348.144, 1352.389, 1362.121), stdev = 6.196
[info]   CI (99.9%): [1328.531, 1376.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5020.720 ±(99.9%) 242.532 B/op [Average]
[info]   (min, avg, max) = (4962.513, 5020.720, 5094.525), stdev = 62.985
[info]   CI (99.9%): [4778.188, 5263.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 8.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.500 ±(99.9%) 25.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.500, 14.996), stdev = 6.725
[info]   CI (99.9%): [≈ 0, 31.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.800, 16.000), stdev = 5.495
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305199.981 ops/s
[info] # Warmup Iteration   2: 450821.535 ops/s
[info] # Warmup Iteration   3: 464181.589 ops/s
[info] # Warmup Iteration   4: 467948.004 ops/s
[info] # Warmup Iteration   5: 472997.459 ops/s
[info] Iteration   1: 476082.419 ops/s
[info]                  ·gc.alloc.rate:            873.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       2888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2228.567 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 462812.311 ops/s
[info]                  ·gc.alloc.rate:            866.131 MB/sec
[info]                  ·gc.alloc.rate.norm:       2945.944 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2292.479 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 474461.654 ops/s
[info]                  ·gc.alloc.rate:            871.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       2890.974 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2236.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 471265.845 ops/s
[info]                  ·gc.alloc.rate:            865.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       2888.766 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4502.656 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   5: 476024.391 ops/s
[info]                  ·gc.alloc.rate:            873.535 MB/sec
[info]                  ·gc.alloc.rate.norm:       2888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2228.815 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   472129.324 ±(99.9%) 21421.367 ops/s [Average]
[info]   (min, avg, max) = (462812.311, 472129.324, 476082.419), stdev = 5563.061
[info]   CI (99.9%): [450707.957, 493550.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   870.022 ±(99.9%) 15.399 MB/sec [Average]
[info]   (min, avg, max) = (865.319, 870.022, 873.535), stdev = 3.999
[info]   CI (99.9%): [854.623, 885.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2900.337 ±(99.9%) 98.283 B/op [Average]
[info]   (min, avg, max) = (2888.001, 2900.337, 2945.944), stdev = 25.524
[info]   CI (99.9%): [2802.054, 2998.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   809.030 ±(99.9%) 1161.796 MB/sec [Average]
[info]   (min, avg, max) = (673.982, 809.030, 1348.753), stdev = 301.715
[info]   CI (99.9%): [≈ 0, 1970.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   2697.727 ±(99.9%) 3886.607 B/op [Average]
[info]   (min, avg, max) = (2228.567, 2697.727, 4502.656), stdev = 1009.340
[info]   CI (99.9%): [≈ 0, 6584.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 16.000), stdev = 3.834
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8660.528 ops/s
[info] # Warmup Iteration   2: 50011.014 ops/s
[info] # Warmup Iteration   3: 53547.439 ops/s
[info] # Warmup Iteration   4: 52642.165 ops/s
[info] # Warmup Iteration   5: 53338.582 ops/s
[info] Iteration   1: 53681.556 ops/s
[info]                  ·gc.alloc.rate:            1107.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       32488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19724.024 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 52795.689 ops/s
[info]                  ·gc.alloc.rate:            1095.543 MB/sec
[info]                  ·gc.alloc.rate.norm:       32655.662 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40112.177 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   3: 54044.078 ops/s
[info]                  ·gc.alloc.rate:            1115.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       32494.380 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39184.599 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 54536.553 ops/s
[info]                  ·gc.alloc.rate:                   1125.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              32491.579 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19415.582 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 76.893 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 54358.858 ops/s
[info]                  ·gc.alloc.rate:                   1122.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              32493.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39171.164 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 135.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   53883.347 ±(99.9%) 2655.510 ops/s [Average]
[info]   (min, avg, max) = (52795.689, 53883.347, 54536.553), stdev = 689.627
[info]   CI (99.9%): [51227.837, 56538.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1113.443 ±(99.9%) 46.643 MB/sec [Average]
[info]   (min, avg, max) = (1095.543, 1113.443, 1125.746), stdev = 12.113
[info]   CI (99.9%): [1066.801, 1160.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32524.542 ±(99.9%) 282.394 B/op [Average]
[info]   (min, avg, max) = (32488.008, 32524.542, 32655.662), stdev = 73.337
[info]   CI (99.9%): [32242.148, 32806.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1077.885 ±(99.9%) 1424.474 MB/sec [Average]
[info]   (min, avg, max) = (672.620, 1077.885, 1353.015), stdev = 369.931
[info]   CI (99.9%): [≈ 0, 2502.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   31521.509 ±(99.9%) 42039.698 B/op [Average]
[info]   (min, avg, max) = (19415.582, 31521.509, 40112.177), stdev = 10917.576
[info]   CI (99.9%): [≈ 0, 73561.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 8.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.663), stdev = 2.128
[info]   CI (99.9%): [≈ 0, 9.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.380 ±(99.9%) 237.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.380, 135.006), stdev = 61.561
[info]   CI (99.9%): [≈ 0, 279.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.800, 20.000), stdev = 5.263
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42431.511 ops/s
[info] # Warmup Iteration   2: 84016.664 ops/s
[info] # Warmup Iteration   3: 85675.296 ops/s
[info] # Warmup Iteration   4: 87275.015 ops/s
[info] # Warmup Iteration   5: 88149.013 ops/s
[info] Iteration   1: 88265.835 ops/s
[info]                  ·gc.alloc.rate:            1328.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       23688.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24040.210 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 88448.238 ops/s
[info]                  ·gc.alloc.rate:            1336.953 MB/sec
[info]                  ·gc.alloc.rate.norm:       23793.989 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23991.565 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 88507.600 ops/s
[info]                  ·gc.alloc.rate:                   1334.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              23730.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24022.143 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 71.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 89203.867 ops/s
[info]                  ·gc.alloc.rate:                   1343.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              23703.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23986.725 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 58.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 89794.120 ops/s
[info]                  ·gc.alloc.rate:            1351.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       23688.845 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23887.260 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   88843.932 ±(99.9%) 2462.831 ops/s [Average]
[info]   (min, avg, max) = (88265.835, 88843.932, 89794.120), stdev = 639.589
[info]   CI (99.9%): [86381.100, 91306.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1339.058 ±(99.9%) 34.008 MB/sec [Average]
[info]   (min, avg, max) = (1328.727, 1339.058, 1351.782), stdev = 8.832
[info]   CI (99.9%): [1305.050, 1373.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   23720.822 ±(99.9%) 170.667 B/op [Average]
[info]   (min, avg, max) = (23688.006, 23720.822, 23793.989), stdev = 44.322
[info]   CI (99.9%): [23550.156, 23891.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1353.993 ±(99.9%) 26.352 MB/sec [Average]
[info]   (min, avg, max) = (1348.055, 1353.993, 1363.104), stdev = 6.844
[info]   CI (99.9%): [1327.641, 1380.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   23985.581 ±(99.9%) 228.012 B/op [Average]
[info]   (min, avg, max) = (23887.260, 23985.581, 24040.210), stdev = 59.214
[info]   CI (99.9%): [23757.569, 24213.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 3.997), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   25.967 ±(99.9%) 137.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.967, 71.071), stdev = 35.822
[info]   CI (99.9%): [≈ 0, 163.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.200, 16.000), stdev = 5.357
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38228.964 ops/s
[info] # Warmup Iteration   2: 133922.206 ops/s
[info] # Warmup Iteration   3: 139687.781 ops/s
[info] # Warmup Iteration   4: 142469.762 ops/s
[info] # Warmup Iteration   5: 144274.894 ops/s
[info] Iteration   1: 142450.358 ops/s
[info]                  ·gc.alloc.rate:                   593.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              6558.972 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7426.113 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.360 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 142305.203 ops/s
[info]                  ·gc.alloc.rate:            593.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       6560.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7440.994 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 142516.679 ops/s
[info]                  ·gc.alloc.rate:            592.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       6544.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7429.510 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 142784.533 ops/s
[info]                  ·gc.alloc.rate:            594.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       6547.352 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7416.087 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 142503.007 ops/s
[info]                  ·gc.alloc.rate:            592.504 MB/sec
[info]                  ·gc.alloc.rate.norm:       6544.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7430.761 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   142511.956 ±(99.9%) 669.563 ops/s [Average]
[info]   (min, avg, max) = (142305.203, 142511.956, 142784.533), stdev = 173.883
[info]   CI (99.9%): [141842.394, 143181.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   593.168 ±(99.9%) 2.605 MB/sec [Average]
[info]   (min, avg, max) = (592.504, 593.168, 594.038), stdev = 0.677
[info]   CI (99.9%): [590.563, 595.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6550.897 ±(99.9%) 30.958 B/op [Average]
[info]   (min, avg, max) = (6544.003, 6550.897, 6560.155), stdev = 8.040
[info]   CI (99.9%): [6519.939, 6581.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.650 ±(99.9%) 1.171 MB/sec [Average]
[info]   (min, avg, max) = (672.115, 672.650, 672.858), stdev = 0.304
[info]   CI (99.9%): [671.479, 673.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7428.693 ±(99.9%) 34.539 B/op [Average]
[info]   (min, avg, max) = (7416.087, 7428.693, 7440.994), stdev = 8.970
[info]   CI (99.9%): [7394.154, 7463.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.472 ±(99.9%) 12.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.472, 7.360), stdev = 3.291
[info]   CI (99.9%): [≈ 0, 14.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170806.040 ops/s
[info] # Warmup Iteration   2: 215829.434 ops/s
[info] # Warmup Iteration   3: 223815.339 ops/s
[info] # Warmup Iteration   4: 224264.798 ops/s
[info] # Warmup Iteration   5: 225013.395 ops/s
[info] Iteration   1: 223846.413 ops/s
[info]                  ·gc.alloc.rate:            799.695 MB/sec
[info]                  ·gc.alloc.rate.norm:       5623.536 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4739.771 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 223096.366 ops/s
[info]                  ·gc.alloc.rate:                   795.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              5609.577 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9516.360 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 223313.963 ops/s
[info]                  ·gc.alloc.rate:            807.037 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.408 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4751.167 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 225191.178 ops/s
[info]                  ·gc.alloc.rate:            802.419 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4711.592 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 224687.948 ops/s
[info]                  ·gc.alloc.rate:            808.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       5661.755 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4722.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   224027.174 ±(99.9%) 3443.731 ops/s [Average]
[info]   (min, avg, max) = (223096.366, 224027.174, 225191.178), stdev = 894.326
[info]   CI (99.9%): [220583.443, 227470.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   802.492 ±(99.9%) 20.727 MB/sec [Average]
[info]   (min, avg, max) = (795.097, 802.492, 808.211), stdev = 5.383
[info]   CI (99.9%): [781.765, 823.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5638.256 ±(99.9%) 136.438 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5638.256, 5688.408), stdev = 35.433
[info]   CI (99.9%): [5501.817, 5774.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   809.033 ±(99.9%) 1161.978 MB/sec [Average]
[info]   (min, avg, max) = (674.019, 809.033, 1348.841), stdev = 301.762
[info]   CI (99.9%): [≈ 0, 1971.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5688.206 ±(99.9%) 8240.602 B/op [Average]
[info]   (min, avg, max) = (4711.592, 5688.206, 9516.360), stdev = 2140.058
[info]   CI (99.9%): [≈ 0, 13928.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.940 ±(99.9%) 8.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.940, 4.699), stdev = 2.102
[info]   CI (99.9%): [≈ 0, 9.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.000, 15.000), stdev = 3.391
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14572.104 ops/s
[info] # Warmup Iteration   2: 50830.537 ops/s
[info] # Warmup Iteration   3: 51151.836 ops/s
[info] # Warmup Iteration   4: 52046.355 ops/s
[info] # Warmup Iteration   5: 52201.549 ops/s
[info] Iteration   1: 52732.556 ops/s
[info]                  ·gc.alloc.rate:                   1993.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              59500.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2025.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        60476.418 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.326 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 218.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 53169.637 ops/s
[info]                  ·gc.alloc.rate:                                  2020.263 MB/sec
[info]                  ·gc.alloc.rate.norm:                             59809.646 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60476.947 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                39.437 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 52947.791 ops/s
[info]                  ·gc.alloc.rate:            2001.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       59496.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60770.083 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 53239.473 ops/s
[info]                  ·gc.alloc.rate:                                  2012.807 MB/sec
[info]                  ·gc.alloc.rate.norm:                             59496.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60434.557 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 53462.431 ops/s
[info]                  ·gc.alloc.rate:                                  2020.859 MB/sec
[info]                  ·gc.alloc.rate.norm:                             59497.419 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.241 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60185.897 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   53110.378 ±(99.9%) 1077.669 ops/s [Average]
[info]   (min, avg, max) = (52732.556, 53110.378, 53462.431), stdev = 279.867
[info]   CI (99.9%): [52032.708, 54188.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2009.809 ±(99.9%) 46.336 MB/sec [Average]
[info]   (min, avg, max) = (1993.161, 2009.809, 2020.859), stdev = 12.033
[info]   CI (99.9%): [1963.474, 2056.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   59559.861 ±(99.9%) 537.721 B/op [Average]
[info]   (min, avg, max) = (59496.008, 59559.861, 59809.646), stdev = 139.644
[info]   CI (99.9%): [59022.140, 60097.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.079 ±(99.9%) 0.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.241), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2040.459 ±(99.9%) 31.564 MB/sec [Average]
[info]   (min, avg, max) = (2025.862, 2040.459, 2044.827), stdev = 8.197
[info]   CI (99.9%): [2008.894, 2072.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   60468.780 ±(99.9%) 798.724 B/op [Average]
[info]   (min, avg, max) = (60185.897, 60468.780, 60770.083), stdev = 207.426
[info]   CI (99.9%): [59670.056, 61267.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 12.245 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 7.326), stdev = 3.180
[info]   CI (99.9%): [≈ 0, 13.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   51.624 ±(99.9%) 365.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.624, 218.685), stdev = 94.938
[info]   CI (99.9%): [≈ 0, 417.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 19.000), stdev = 6.427
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81479.956 ops/s
[info] # Warmup Iteration   2: 164656.944 ops/s
[info] # Warmup Iteration   3: 162635.824 ops/s
[info] # Warmup Iteration   4: 167521.586 ops/s
[info] # Warmup Iteration   5: 170673.262 ops/s
[info] Iteration   1: 171674.968 ops/s
[info]                  ·gc.alloc.rate:            808.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       7412.607 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6174.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 172124.055 ops/s
[info]                  ·gc.alloc.rate:                   811.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              7418.315 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6157.847 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 173245.115 ops/s
[info]                  ·gc.alloc.rate:            815.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6123.920 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 171001.526 ops/s
[info]                  ·gc.alloc.rate:            804.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12395.762 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   5: 173559.648 ops/s
[info]                  ·gc.alloc.rate:                   817.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              7416.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6106.978 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   172321.062 ±(99.9%) 4122.793 ops/s [Average]
[info]   (min, avg, max) = (171001.526, 172321.062, 173559.648), stdev = 1070.676
[info]   CI (99.9%): [168198.269, 176443.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   811.647 ±(99.9%) 20.174 MB/sec [Average]
[info]   (min, avg, max) = (804.917, 811.647, 817.808), stdev = 5.239
[info]   CI (99.9%): [791.474, 831.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7412.593 ±(99.9%) 17.932 B/op [Average]
[info]   (min, avg, max) = (7408.002, 7412.593, 7418.315), stdev = 4.657
[info]   CI (99.9%): [7394.660, 7430.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.298 ±(99.9%) 1159.303 MB/sec [Average]
[info]   (min, avg, max) = (673.366, 808.298, 1346.863), stdev = 301.067
[info]   CI (99.9%): [≈ 0, 1967.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7391.706 ±(99.9%) 10772.094 B/op [Average]
[info]   (min, avg, max) = (6106.978, 7391.706, 12395.762), stdev = 2797.479
[info]   CI (99.9%): [≈ 0, 18163.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.426 ±(99.9%) 12.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.426, 6.091), stdev = 3.322
[info]   CI (99.9%): [≈ 0, 15.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.400, 16.000), stdev = 3.715
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118885.698 ops/s
[info] # Warmup Iteration   2: 504308.597 ops/s
[info] # Warmup Iteration   3: 488719.572 ops/s
[info] # Warmup Iteration   4: 508975.514 ops/s
[info] # Warmup Iteration   5: 516986.484 ops/s
[info] Iteration   1: 511541.369 ops/s
[info]                  ·gc.alloc.rate:            403.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.790 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2069.996 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 518394.572 ops/s
[info]                  ·gc.alloc.rate:      408.550 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 509564.082 ops/s
[info]                  ·gc.alloc.rate:            401.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2077.912 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 509724.453 ops/s
[info]                  ·gc.alloc.rate:            404.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       1247.657 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2077.357 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 514087.622 ops/s
[info]                  ·gc.alloc.rate:      405.004 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   512662.420 ±(99.9%) 14197.454 ops/s [Average]
[info]   (min, avg, max) = (509564.082, 512662.420, 518394.572), stdev = 3687.034
[info]   CI (99.9%): [498464.965, 526859.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   404.437 ±(99.9%) 10.204 MB/sec [Average]
[info]   (min, avg, max) = (401.407, 404.437, 408.550), stdev = 2.650
[info]   CI (99.9%): [394.233, 414.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1241.690 ±(99.9%) 12.912 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1241.690, 1247.657), stdev = 3.353
[info]   CI (99.9%): [1228.778, 1254.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.602 ±(99.9%) 1418.718 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.602, 672.687), stdev = 368.437
[info]   CI (99.9%): [≈ 0, 1822.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1245.053 ±(99.9%) 4376.554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1245.053, 2077.912), stdev = 1136.577
[info]   CI (99.9%): [≈ 0, 5621.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.400, 9.000), stdev = 4.930
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 402027.022 ops/s
[info] # Warmup Iteration   2: 534291.697 ops/s
[info] # Warmup Iteration   3: 547063.259 ops/s
[info] # Warmup Iteration   4: 544781.996 ops/s
[info] # Warmup Iteration   5: 545089.663 ops/s
[info] Iteration   1: 554724.894 ops/s
[info]                  ·gc.alloc.rate:      298.828 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 543302.394 ops/s
[info]                  ·gc.alloc.rate:            292.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.494 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1952.871 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 556293.068 ops/s
[info]                  ·gc.alloc.rate:      299.692 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 529073.696 ops/s
[info]                  ·gc.alloc.rate:      285.020 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 549450.998 ops/s
[info]                  ·gc.alloc.rate:            296.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1930.963 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   546569.010 ±(99.9%) 42450.551 ops/s [Average]
[info]   (min, avg, max) = (529073.696, 546569.010, 556293.068), stdev = 11024.273
[info]   CI (99.9%): [504118.459, 589019.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   294.498 ±(99.9%) 22.843 MB/sec [Average]
[info]   (min, avg, max) = (285.020, 294.498, 299.692), stdev = 5.932
[info]   CI (99.9%): [271.656, 317.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.099 ±(99.9%) 0.849 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.099, 848.494), stdev = 0.220
[info]   CI (99.9%): [847.251, 848.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.653 ±(99.9%) 1421.800 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.653, 674.215), stdev = 369.237
[info]   CI (99.9%): [≈ 0, 1691.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   776.767 ±(99.9%) 4095.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 776.767, 1952.871), stdev = 1063.660
[info]   CI (99.9%): [≈ 0, 4872.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 8.000), stdev = 4.382
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 464021.797 ops/s
[info] # Warmup Iteration   2: 581679.986 ops/s
[info] # Warmup Iteration   3: 598896.017 ops/s
[info] # Warmup Iteration   4: 599031.486 ops/s
[info] # Warmup Iteration   5: 598208.734 ops/s
[info] Iteration   1: 598959.890 ops/s
[info]                  ·gc.alloc.rate:      6.089 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 596058.580 ops/s
[info]                  ·gc.alloc.rate:      6.723 MB/sec
[info]                  ·gc.alloc.rate.norm: 17.748 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 598957.525 ops/s
[info]                  ·gc.alloc.rate:      6.089 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 598252.661 ops/s
[info]                  ·gc.alloc.rate:      6.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 598574.213 ops/s
[info]                  ·gc.alloc.rate:      6.085 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   598160.574 ±(99.9%) 4665.477 ops/s [Average]
[info]   (min, avg, max) = (596058.580, 598160.574, 598959.890), stdev = 1211.609
[info]   CI (99.9%): [593495.097, 602826.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.213 ±(99.9%) 1.097 MB/sec [Average]
[info]   (min, avg, max) = (6.081, 6.213, 6.723), stdev = 0.285
[info]   CI (99.9%): [5.117, 7.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.350 ±(99.9%) 3.010 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.350, 17.748), stdev = 0.782
[info]   CI (99.9%): [13.341, 19.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13569.801 ops/s
[info] # Warmup Iteration   2: 31987.855 ops/s
[info] # Warmup Iteration   3: 31770.450 ops/s
[info] # Warmup Iteration   4: 32389.355 ops/s
[info] # Warmup Iteration   5: 32936.892 ops/s
[info] Iteration   1: 31925.246 ops/s
[info]                  ·gc.alloc.rate:            1539.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       75866.581 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2020.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99596.988 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  26.000 ms
[info] Iteration   2: 33106.288 ops/s
[info]                  ·gc.alloc.rate:                   1595.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              75857.854 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        64124.857 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 221.666 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 33279.753 ops/s
[info]                  ·gc.alloc.rate:                   1603.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              75862.687 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        64232.604 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 189.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 33308.328 ops/s
[info]                  ·gc.alloc.rate:                                  1605.243 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75859.956 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.998 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96595.520 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 33378.165 ops/s
[info]                  ·gc.alloc.rate:            1608.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       75856.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64265.839 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   32999.556 ±(99.9%) 2344.413 ops/s [Average]
[info]   (min, avg, max) = (31925.246, 32999.556, 33378.165), stdev = 608.837
[info]   CI (99.9%): [30655.143, 35343.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1590.529 ±(99.9%) 111.512 MB/sec [Average]
[info]   (min, avg, max) = (1539.452, 1590.529, 1608.586), stdev = 28.959
[info]   CI (99.9%): [1479.018, 1702.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75860.618 ±(99.9%) 16.008 B/op [Average]
[info]   (min, avg, max) = (75856.012, 75860.618, 75866.581), stdev = 4.157
[info]   CI (99.9%): [75844.610, 75876.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.400 ±(99.9%) 3.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.893
[info]   CI (99.9%): [≈ 0, 3.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1626.903 ±(99.9%) 1426.208 MB/sec [Average]
[info]   (min, avg, max) = (1348.693, 1626.903, 2044.020), stdev = 370.382
[info]   CI (99.9%): [200.695, 3053.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77763.162 ±(99.9%) 71590.677 B/op [Average]
[info]   (min, avg, max) = (64124.857, 77763.162, 99596.988), stdev = 18591.871
[info]   CI (99.9%): [6172.485, 149353.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   82.136 ±(99.9%) 435.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.136, 221.666), stdev = 113.060
[info]   CI (99.9%): [≈ 0, 517.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.200, 26.000), stdev = 8.643
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104925.181 ops/s
[info] # Warmup Iteration   2: 716257.247 ops/s
[info] # Warmup Iteration   3: 791079.409 ops/s
[info] # Warmup Iteration   4: 790196.581 ops/s
[info] # Warmup Iteration   5: 791414.507 ops/s
[info] Iteration   1: 785974.177 ops/s
[info]                  ·gc.alloc.rate:                   2006.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              4017.560 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2023.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4052.341 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 801395.222 ops/s
[info]                  ·gc.alloc.rate:                                  2045.668 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4017.615 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4007.047 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.541 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 791827.460 ops/s
[info]                  ·gc.alloc.rate:            2020.521 MB/sec
[info]                  ·gc.alloc.rate.norm:       4016.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4063.627 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 804997.797 ops/s
[info]                  ·gc.alloc.rate:            2054.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       4017.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3997.024 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 805659.075 ops/s
[info]                  ·gc.alloc.rate:                                  2055.877 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4016.676 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3993.789 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   797970.746 ±(99.9%) 33451.576 ops/s [Average]
[info]   (min, avg, max) = (785974.177, 797970.746, 805659.075), stdev = 8687.268
[info]   CI (99.9%): [764519.171, 831422.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2036.608 ±(99.9%) 84.971 MB/sec [Average]
[info]   (min, avg, max) = (2006.396, 2036.608, 2055.877), stdev = 22.067
[info]   CI (99.9%): [1951.636, 2121.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4017.017 ±(99.9%) 2.489 B/op [Average]
[info]   (min, avg, max) = (4016.077, 4017.017, 4017.615), stdev = 0.646
[info]   CI (99.9%): [4014.528, 4019.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.157), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2039.388 ±(99.9%) 34.287 MB/sec [Average]
[info]   (min, avg, max) = (2023.766, 2039.388, 2044.444), stdev = 8.904
[info]   CI (99.9%): [2005.101, 2073.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4022.766 ±(99.9%) 126.160 B/op [Average]
[info]   (min, avg, max) = (3993.789, 4022.766, 4063.627), stdev = 32.763
[info]   CI (99.9%): [3896.606, 4148.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.176 ±(99.9%) 17.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.176, 9.337), stdev = 4.459
[info]   CI (99.9%): [≈ 0, 20.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 22.000), stdev = 7.855
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16423.955 ops/s
[info] # Warmup Iteration   2: 1357026.005 ops/s
[info] # Warmup Iteration   3: 1493026.940 ops/s
[info] # Warmup Iteration   4: 1546445.053 ops/s
[info] # Warmup Iteration   5: 1518616.725 ops/s
[info] Iteration   1: 1537612.360 ops/s
[info]                  ·gc.alloc.rate:                   984.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              1008.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        687.949 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 1536878.715 ops/s
[info]                  ·gc.alloc.rate:            984.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       1008.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 688.967 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1526361.601 ops/s
[info]                  ·gc.alloc.rate:                   977.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              1008.213 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1386.776 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   4: 1538595.214 ops/s
[info]                  ·gc.alloc.rate:                   985.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              1008.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        687.525 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.681 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 1509696.595 ops/s
[info]                  ·gc.alloc.rate:                   966.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              1008.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1402.742 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.778 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1529828.897 ±(99.9%) 47335.608 ops/s [Average]
[info]   (min, avg, max) = (1509696.595, 1529828.897, 1538595.214), stdev = 12292.907
[info]   CI (99.9%): [1482493.289, 1577164.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   979.749 ±(99.9%) 29.950 MB/sec [Average]
[info]   (min, avg, max) = (966.951, 979.749, 985.288), stdev = 7.778
[info]   CI (99.9%): [949.799, 1009.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1008.043 ±(99.9%) 0.366 B/op [Average]
[info]   (min, avg, max) = (1008.000, 1008.043, 1008.213), stdev = 0.095
[info]   CI (99.9%): [1007.676, 1008.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   941.428 ±(99.9%) 1419.359 MB/sec [Average]
[info]   (min, avg, max) = (671.900, 941.428, 1345.617), stdev = 368.603
[info]   CI (99.9%): [≈ 0, 2360.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   970.792 ±(99.9%) 1490.465 B/op [Average]
[info]   (min, avg, max) = (687.525, 970.792, 1402.742), stdev = 387.069
[info]   CI (99.9%): [≈ 0, 2461.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 3.890 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 2.665), stdev = 1.010
[info]   CI (99.9%): [≈ 0, 4.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.966 ±(99.9%) 4.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.966, 2.778), stdev = 1.055
[info]   CI (99.9%): [≈ 0, 5.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 14.000, 20.000), stdev = 5.477
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3476019.461 ops/s
[info] # Warmup Iteration   2: 6953924.701 ops/s
[info] # Warmup Iteration   3: 7353589.630 ops/s
[info] # Warmup Iteration   4: 7315497.869 ops/s
[info] # Warmup Iteration   5: 7210125.645 ops/s
[info] Iteration   1: 7391284.225 ops/s
[info]                  ·gc.alloc.rate:      225.387 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7259609.478 ops/s
[info]                  ·gc.alloc.rate:            223.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.512 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 146.295 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 7388613.031 ops/s
[info]                  ·gc.alloc.rate:      225.309 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7405263.934 ops/s
[info]                  ·gc.alloc.rate:      225.833 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7244291.085 ops/s
[info]                  ·gc.alloc.rate:            221.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 146.457 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7337812.350 ±(99.9%) 303515.164 ops/s [Average]
[info]   (min, avg, max) = (7244291.085, 7337812.350, 7405263.934), stdev = 78821.924
[info]   CI (99.9%): [7034297.187, 7641327.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   224.296 ±(99.9%) 7.341 MB/sec [Average]
[info]   (min, avg, max) = (221.185, 224.296, 225.833), stdev = 1.906
[info]   CI (99.9%): [216.955, 231.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.114 ±(99.9%) 0.862 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.114, 48.512), stdev = 0.224
[info]   CI (99.9%): [47.253, 48.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.767 ±(99.9%) 1422.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.767, 674.803), stdev = 369.394
[info]   CI (99.9%): [≈ 0, 1692.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   58.551 ±(99.9%) 308.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.551, 146.457), stdev = 80.174
[info]   CI (99.9%): [≈ 0, 367.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 11.000), stdev = 5.310
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 846.526 ops/s
[info] # Warmup Iteration   2: 217587.040 ops/s
[info] # Warmup Iteration   3: 305495.306 ops/s
[info] # Warmup Iteration   4: 307274.570 ops/s
[info] # Warmup Iteration   5: 307831.949 ops/s
[info] Iteration   1: 313982.959 ops/s
[info]                  ·gc.alloc.rate:                   1941.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              9734.477 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6744.929 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 314270.082 ops/s
[info]                  ·gc.alloc.rate:                   1943.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              9735.647 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10178.082 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 318334.237 ops/s
[info]                  ·gc.alloc.rate:                                  1967.523 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9728.700 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10107.701 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 318313.159 ops/s
[info]                  ·gc.alloc.rate:            1967.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       9730.650 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10108.304 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 311564.546 ops/s
[info]                  ·gc.alloc.rate:            1948.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       9842.443 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10327.068 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   315292.997 ±(99.9%) 11395.959 ops/s [Average]
[info]   (min, avg, max) = (311564.546, 315292.997, 318334.237), stdev = 2959.494
[info]   CI (99.9%): [303897.038, 326688.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1953.794 ±(99.9%) 49.481 MB/sec [Average]
[info]   (min, avg, max) = (1941.660, 1953.794, 1967.715), stdev = 12.850
[info]   CI (99.9%): [1904.313, 2003.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9754.383 ±(99.9%) 189.863 B/op [Average]
[info]   (min, avg, max) = (9728.700, 9754.383, 9842.443), stdev = 49.307
[info]   CI (99.9%): [9564.520, 9944.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.150), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1901.990 ±(99.9%) 1198.362 MB/sec [Average]
[info]   (min, avg, max) = (1345.358, 1901.990, 2044.268), stdev = 311.211
[info]   CI (99.9%): [703.628, 3100.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   9493.217 ±(99.9%) 5925.914 B/op [Average]
[info]   (min, avg, max) = (6744.929, 9493.217, 10327.068), stdev = 1538.941
[info]   CI (99.9%): [3567.303, 15419.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 10.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 5.994), stdev = 2.647
[info]   CI (99.9%): [≈ 0, 11.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   8.676 ±(99.9%) 51.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.676, 30.024), stdev = 13.261
[info]   CI (99.9%): [≈ 0, 59.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.600, 20.000), stdev = 7.436
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65735.104 ops/s
[info] # Warmup Iteration   2: 880695.303 ops/s
[info] # Warmup Iteration   3: 925766.112 ops/s
[info] # Warmup Iteration   4: 945981.025 ops/s
[info] # Warmup Iteration   5: 955362.201 ops/s
[info] Iteration   1: 957062.686 ops/s
[info]                  ·gc.alloc.rate:            1420.355 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2215.063 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 955405.994 ops/s
[info]                  ·gc.alloc.rate:            1418.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.174 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2218.823 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 959207.361 ops/s
[info]                  ·gc.alloc.rate:                   1424.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.253 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2213.339 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 961377.723 ops/s
[info]                  ·gc.alloc.rate:                                  1426.932 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2336.134 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.222 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.363 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3339.272 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.543 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   5: 961643.974 ops/s
[info]                  ·gc.alloc.rate:            1427.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.194 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2230.704 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   958939.547 ±(99.9%) 10428.592 ops/s [Average]
[info]   (min, avg, max) = (955405.994, 958939.547, 961643.974), stdev = 2708.272
[info]   CI (99.9%): [948510.955, 969368.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1423.452 ±(99.9%) 15.485 MB/sec [Average]
[info]   (min, avg, max) = (1418.327, 1423.452, 1427.477), stdev = 4.021
[info]   CI (99.9%): [1407.967, 1438.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2336.147 ±(99.9%) 0.344 B/op [Average]
[info]   (min, avg, max) = (2336.000, 2336.147, 2336.232), stdev = 0.089
[info]   CI (99.9%): [2335.803, 2336.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.382 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.222), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.073 ±(99.9%) 0.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.363), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1489.167 ±(99.9%) 1185.255 MB/sec [Average]
[info]   (min, avg, max) = (1346.821, 1489.167, 2039.658), stdev = 307.807
[info]   CI (99.9%): [303.912, 2674.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2443.440 ±(99.9%) 1928.521 B/op [Average]
[info]   (min, avg, max) = (2213.339, 2443.440, 3339.272), stdev = 500.831
[info]   CI (99.9%): [514.919, 4371.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.664), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.839 ±(99.9%) 15.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.839, 7.651), stdev = 3.907
[info]   CI (99.9%): [≈ 0, 17.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.600, 17.000), stdev = 5.595
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_87620646/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 207639.088 ops/s
[info] # Warmup Iteration   2: 2059458.513 ops/s
[info] # Warmup Iteration   3: 2177524.049 ops/s
[info] # Warmup Iteration   4: 2210653.263 ops/s
[info] # Warmup Iteration   5: 2187247.533 ops/s
[info] Iteration   1: 2182676.195 ops/s
[info]                  ·gc.alloc.rate:                   1031.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        484.642 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.480 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2230074.107 ops/s
[info]                  ·gc.alloc.rate:            1055.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       745.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 949.642 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 2159770.408 ops/s
[info]                  ·gc.alloc.rate:            1030.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       750.770 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 980.580 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 2209907.192 ops/s
[info]                  ·gc.alloc.rate:            1044.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 479.123 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 2191552.648 ops/s
[info]                  ·gc.alloc.rate:                   1036.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.154 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        968.229 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2194796.110 ±(99.9%) 102911.910 ops/s [Average]
[info]   (min, avg, max) = (2159770.408, 2194796.110, 2230074.107), stdev = 26725.896
[info]   CI (99.9%): [2091884.200, 2297708.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1039.690 ±(99.9%) 40.637 MB/sec [Average]
[info]   (min, avg, max) = (1030.219, 1039.690, 1055.724), stdev = 10.553
[info]   CI (99.9%): [999.053, 1080.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   745.612 ±(99.9%) 11.226 B/op [Average]
[info]   (min, avg, max) = (744.000, 745.612, 750.770), stdev = 2.915
[info]   CI (99.9%): [734.385, 756.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1076.799 ±(99.9%) 1421.555 MB/sec [Average]
[info]   (min, avg, max) = (672.080, 1076.799, 1348.031), stdev = 369.173
[info]   CI (99.9%): [≈ 0, 2498.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   772.443 ±(99.9%) 1022.269 B/op [Average]
[info]   (min, avg, max) = (479.123, 772.443, 980.580), stdev = 265.480
[info]   CI (99.9%): [≈ 0, 1794.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.670 ±(99.9%) 4.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 2.870), stdev = 1.247
[info]   CI (99.9%): [≈ 0, 5.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   71.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 14.200, 19.000), stdev = 4.868
[info]   CI (99.9%): [71.000, 71.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2236481.151 ops/s
[info] # Warmup Iteration   2: 5455184.351 ops/s
[info] # Warmup Iteration   3: 5631279.323 ops/s
[info] # Warmup Iteration   4: 5603843.919 ops/s
[info] # Warmup Iteration   5: 5660085.044 ops/s
[info] Iteration   1: 5604652.581 ops/s
[info]                  ·gc.alloc.rate:            629.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.822 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 189.314 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 5649755.995 ops/s
[info]                  ·gc.alloc.rate:            631.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.798 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 5636635.037 ops/s
[info]                  ·gc.alloc.rate:            630.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.236 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 5667870.926 ops/s
[info]                  ·gc.alloc.rate:            633.862 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.188 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 5629927.099 ops/s
[info]                  ·gc.alloc.rate:            630.110 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.909 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5637768.328 ±(99.9%) 90496.123 ops/s [Average]
[info]   (min, avg, max) = (5604652.581, 5637768.328, 5667870.926), stdev = 23501.556
[info]   CI (99.9%): [5547272.205, 5728264.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   631.191 ±(99.9%) 6.645 MB/sec [Average]
[info]   (min, avg, max) = (629.613, 631.191, 633.862), stdev = 1.726
[info]   CI (99.9%): [624.546, 637.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.186 ±(99.9%) 1.371 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.186, 176.822), stdev = 0.356
[info]   CI (99.9%): [174.815, 177.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   673.827 ±(99.9%) 2.333 MB/sec [Average]
[info]   (min, avg, max) = (672.745, 673.827, 674.137), stdev = 0.606
[info]   CI (99.9%): [671.494, 676.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   188.089 ±(99.9%) 3.014 B/op [Average]
[info]   (min, avg, max) = (187.188, 188.089, 189.314), stdev = 0.783
[info]   CI (99.9%): [185.075, 191.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2180153.898 ops/s
[info] # Warmup Iteration   2: 5843265.075 ops/s
[info] # Warmup Iteration   3: 5818761.201 ops/s
[info] # Warmup Iteration   4: 5882482.357 ops/s
[info] # Warmup Iteration   5: 5825441.655 ops/s
[info] Iteration   1: 5822485.641 ops/s
[info]                  ·gc.alloc.rate:            355.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.169 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 182.223 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 5671213.803 ops/s
[info]                  ·gc.alloc.rate:      347.524 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.447 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5796971.357 ops/s
[info]                  ·gc.alloc.rate:            353.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.024 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 5904249.072 ops/s
[info]                  ·gc.alloc.rate:      360.141 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5838870.799 ops/s
[info]                  ·gc.alloc.rate:            358.503 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.631 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 181.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5806758.135 ±(99.9%) 329286.951 ops/s [Average]
[info]   (min, avg, max) = (5671213.803, 5806758.135, 5904249.072), stdev = 85514.776
[info]   CI (99.9%): [5477471.183, 6136045.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   355.099 ±(99.9%) 18.981 MB/sec [Average]
[info]   (min, avg, max) = (347.524, 355.099, 360.141), stdev = 4.929
[info]   CI (99.9%): [336.118, 374.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.249 ±(99.9%) 1.081 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.249, 96.631), stdev = 0.281
[info]   CI (99.9%): [95.168, 97.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   404.457 ±(99.9%) 1421.724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.457, 674.116), stdev = 369.217
[info]   CI (99.9%): [≈ 0, 1826.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   109.389 ±(99.9%) 384.523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 109.389, 183.024), stdev = 99.860
[info]   CI (99.9%): [≈ 0, 493.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15947.723 ops/s
[info] # Warmup Iteration   2: 309721.171 ops/s
[info] # Warmup Iteration   3: 347569.298 ops/s
[info] # Warmup Iteration   4: 345811.663 ops/s
[info] # Warmup Iteration   5: 346057.731 ops/s
[info] Iteration   1: 347083.704 ops/s
[info]                  ·gc.alloc.rate:                   1863.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              8450.190 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2020.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9161.707 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.145 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   2: 349748.935 ops/s
[info]                  ·gc.alloc.rate:                                  1877.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8451.368 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.430 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9169.663 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.983 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   3: 355286.709 ops/s
[info]                  ·gc.alloc.rate:                                  1906.852 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6037.050 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 360515.951 ops/s
[info]                  ·gc.alloc.rate:            1941.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       8479.562 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8924.806 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 361532.999 ops/s
[info]                  ·gc.alloc.rate:            1940.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       8448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8899.532 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   354833.660 ±(99.9%) 24602.802 ops/s [Average]
[info]   (min, avg, max) = (347083.704, 354833.660, 361532.999), stdev = 6389.269
[info]   CI (99.9%): [330230.858, 379436.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1906.039 ±(99.9%) 137.274 MB/sec [Average]
[info]   (min, avg, max) = (1863.310, 1906.039, 1941.993), stdev = 35.650
[info]   CI (99.9%): [1768.765, 2043.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8455.425 ±(99.9%) 52.257 B/op [Average]
[info]   (min, avg, max) = (8448.001, 8455.425, 8479.562), stdev = 13.571
[info]   CI (99.9%): [8403.168, 8507.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.096), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.089 ±(99.9%) 0.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.089, 0.430), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1901.634 ±(99.9%) 1160.783 MB/sec [Average]
[info]   (min, avg, max) = (1362.661, 1901.634, 2043.963), stdev = 301.452
[info]   CI (99.9%): [740.851, 3062.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8438.552 ±(99.9%) 5192.531 B/op [Average]
[info]   (min, avg, max) = (6037.050, 8438.552, 9169.663), stdev = 1348.484
[info]   CI (99.9%): [3246.021, 13631.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.865 ±(99.9%) 9.833 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.865, 4.663), stdev = 2.554
[info]   CI (99.9%): [≈ 0, 11.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   8.426 ±(99.9%) 44.426 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.426, 21.145), stdev = 11.537
[info]   CI (99.9%): [≈ 0, 52.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 10.600, 27.000), stdev = 10.455
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32119.254 ops/s
[info] # Warmup Iteration   2: 55131.547 ops/s
[info] # Warmup Iteration   3: 56711.519 ops/s
[info] # Warmup Iteration   4: 56491.045 ops/s
[info] # Warmup Iteration   5: 57166.902 ops/s
[info] Iteration   1: 56256.191 ops/s
[info]                  ·gc.alloc.rate:                   1475.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              41265.370 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37702.070 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 56845.724 ops/s
[info]                  ·gc.alloc.rate:                   1488.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              41199.683 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37329.918 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 73.775 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 57406.993 ops/s
[info]                  ·gc.alloc.rate:                   1502.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              41183.297 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37145.209 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 109.573 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 57388.670 ops/s
[info]                  ·gc.alloc.rate:                                  1501.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41176.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.511 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56049.745 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                18.269 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 57467.831 ops/s
[info]                  ·gc.alloc.rate:                                  1503.973 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41186.794 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37324.701 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   57073.082 ±(99.9%) 2006.330 ops/s [Average]
[info]   (min, avg, max) = (56256.191, 57073.082, 57467.831), stdev = 521.038
[info]   CI (99.9%): [55066.752, 59079.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1494.384 ±(99.9%) 47.876 MB/sec [Average]
[info]   (min, avg, max) = (1475.352, 1494.384, 1503.973), stdev = 12.433
[info]   CI (99.9%): [1446.508, 1542.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   41202.230 ±(99.9%) 139.867 B/op [Average]
[info]   (min, avg, max) = (41176.007, 41202.230, 41265.370), stdev = 36.323
[info]   CI (99.9%): [41062.363, 41342.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.105 ±(99.9%) 0.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.511), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 0.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1491.776 ±(99.9%) 1189.650 MB/sec [Average]
[info]   (min, avg, max) = (1347.954, 1491.776, 2044.331), stdev = 308.948
[info]   CI (99.9%): [302.126, 2681.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   41110.328 ±(99.9%) 32167.691 B/op [Average]
[info]   (min, avg, max) = (37145.209, 41110.328, 56049.745), stdev = 8353.847
[info]   CI (99.9%): [8942.638, 73278.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 6.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.998), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 8.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   44.051 ±(99.9%) 176.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.051, 109.573), stdev = 45.901
[info]   CI (99.9%): [≈ 0, 220.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.800, 16.000), stdev = 4.438
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17646.069 ops/s
[info] # Warmup Iteration   2: 72015.307 ops/s
[info] # Warmup Iteration   3: 72614.692 ops/s
[info] # Warmup Iteration   4: 73621.262 ops/s
[info] # Warmup Iteration   5: 73312.928 ops/s
[info] Iteration   1: 73692.684 ops/s
[info]                  ·gc.alloc.rate:            1129.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       24130.397 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28737.854 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 74453.569 ops/s
[info]                  ·gc.alloc.rate:            1141.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       24128.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14221.894 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 72960.705 ops/s
[info]                  ·gc.alloc.rate:            1127.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       24315.350 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29024.933 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   4: 73720.921 ops/s
[info]                  ·gc.alloc.rate:                   1130.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              24134.419 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28783.826 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 85.328 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 74467.674 ops/s
[info]                  ·gc.alloc.rate:                   1142.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              24130.990 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14304.075 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 70.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   73859.110 ±(99.9%) 2418.297 ops/s [Average]
[info]   (min, avg, max) = (72960.705, 73859.110, 74467.674), stdev = 628.024
[info]   CI (99.9%): [71440.814, 76277.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1134.200 ±(99.9%) 27.670 MB/sec [Average]
[info]   (min, avg, max) = (1127.112, 1134.200, 1142.123), stdev = 7.186
[info]   CI (99.9%): [1106.530, 1161.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24167.832 ±(99.9%) 317.665 B/op [Average]
[info]   (min, avg, max) = (24128.005, 24167.832, 24315.350), stdev = 82.497
[info]   CI (99.9%): [23850.168, 24485.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1077.772 ±(99.9%) 1415.767 MB/sec [Average]
[info]   (min, avg, max) = (673.015, 1077.772, 1348.083), stdev = 367.670
[info]   CI (99.9%): [≈ 0, 2493.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   23014.516 ±(99.9%) 30765.936 B/op [Average]
[info]   (min, avg, max) = (14221.894, 23014.516, 29024.933), stdev = 7989.816
[info]   CI (99.9%): [≈ 0, 53780.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.996), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   31.144 ±(99.9%) 165.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.144, 85.328), stdev = 42.972
[info]   CI (99.9%): [≈ 0, 196.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   67.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 13.400, 19.000), stdev = 6.656
[info]   CI (99.9%): [67.000, 67.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67623.506 ops/s
[info] # Warmup Iteration   2: 93485.142 ops/s
[info] # Warmup Iteration   3: 99013.776 ops/s
[info] # Warmup Iteration   4: 96957.276 ops/s
[info] # Warmup Iteration   5: 97568.544 ops/s
[info] Iteration   1: 99111.382 ops/s
[info]                  ·gc.alloc.rate:            1456.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       23129.826 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21409.872 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 98435.103 ops/s
[info]                  ·gc.alloc.rate:                   1446.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              23126.821 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21557.317 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 98832.623 ops/s
[info]                  ·gc.alloc.rate:                   1452.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              23134.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21596.285 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 98167.687 ops/s
[info]                  ·gc.alloc.rate:                                  1449.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23241.153 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.633 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21851.563 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 98539.271 ops/s
[info]                  ·gc.alloc.rate:            1450.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       23155.596 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21769.081 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   98617.213 ±(99.9%) 1404.188 ops/s [Average]
[info]   (min, avg, max) = (98167.687, 98617.213, 99111.382), stdev = 364.663
[info]   CI (99.9%): [97213.025, 100021.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1451.115 ±(99.9%) 14.074 MB/sec [Average]
[info]   (min, avg, max) = (1446.784, 1451.115, 1456.432), stdev = 3.655
[info]   CI (99.9%): [1437.041, 1465.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23157.635 ±(99.9%) 184.917 B/op [Average]
[info]   (min, avg, max) = (23126.821, 23157.635, 23241.153), stdev = 48.022
[info]   CI (99.9%): [22972.718, 23342.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.127 ±(99.9%) 1.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.633), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1355.796 ±(99.9%) 28.296 MB/sec [Average]
[info]   (min, avg, max) = (1348.130, 1355.796, 1363.274), stdev = 7.348
[info]   CI (99.9%): [1327.500, 1384.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   21636.824 ±(99.9%) 675.448 B/op [Average]
[info]   (min, avg, max) = (21409.872, 21636.824, 21851.563), stdev = 175.412
[info]   CI (99.9%): [20961.376, 22312.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.997), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   23.380 ±(99.9%) 124.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.380, 63.643), stdev = 32.224
[info]   CI (99.9%): [≈ 0, 147.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 15.000), stdev = 5.788
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7006.118 ops/s
[info] # Warmup Iteration   2: 36682.753 ops/s
[info] # Warmup Iteration   3: 38167.466 ops/s
[info] # Warmup Iteration   4: 38742.363 ops/s
[info] # Warmup Iteration   5: 39276.341 ops/s
[info] Iteration   1: 39658.204 ops/s
[info]                  ·gc.alloc.rate:                   1938.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              76960.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53533.844 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 185.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 39493.387 ops/s
[info]                  ·gc.alloc.rate:                                  1934.055 MB/sec
[info]                  ·gc.alloc.rate.norm:                             77064.723 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.888 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81258.003 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                159.277 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 39791.134 ops/s
[info]                  ·gc.alloc.rate:            1945.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       76960.357 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80860.338 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 40033.004 ops/s
[info]                  ·gc.alloc.rate:            1958.899 MB/sec
[info]                  ·gc.alloc.rate.norm:       77011.578 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80369.615 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 39990.309 ops/s
[info]                  ·gc.alloc.rate:            1983.760 MB/sec
[info]                  ·gc.alloc.rate.norm:       78059.304 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80458.028 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   39793.208 ±(99.9%) 870.607 ops/s [Average]
[info]   (min, avg, max) = (39493.387, 39793.208, 40033.004), stdev = 226.094
[info]   CI (99.9%): [38922.601, 40663.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1952.225 ±(99.9%) 76.823 MB/sec [Average]
[info]   (min, avg, max) = (1934.055, 1952.225, 1983.760), stdev = 19.951
[info]   CI (99.9%): [1875.403, 2029.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77211.195 ±(99.9%) 1833.208 B/op [Average]
[info]   (min, avg, max) = (76960.014, 77211.195, 78059.304), stdev = 476.078
[info]   CI (99.9%): [75377.988, 79044.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.178 ±(99.9%) 1.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.178, 0.888), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 1.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1904.230 ±(99.9%) 1195.863 MB/sec [Average]
[info]   (min, avg, max) = (1348.694, 1904.230, 2044.720), stdev = 310.562
[info]   CI (99.9%): [708.367, 3100.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   75295.966 ±(99.9%) 46864.364 B/op [Average]
[info]   (min, avg, max) = (53533.844, 75295.966, 81258.003), stdev = 12170.527
[info]   CI (99.9%): [28431.602, 122160.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   68.867 ±(99.9%) 364.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.867, 185.055), stdev = 94.739
[info]   CI (99.9%): [≈ 0, 433.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 15.000), stdev = 4.722
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73702.880 ops/s
[info] # Warmup Iteration   2: 149679.239 ops/s
[info] # Warmup Iteration   3: 156863.043 ops/s
[info] # Warmup Iteration   4: 156974.382 ops/s
[info] # Warmup Iteration   5: 156576.389 ops/s
[info] Iteration   1: 156922.632 ops/s
[info]                  ·gc.alloc.rate:            752.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       7545.605 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6760.610 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 156075.659 ops/s
[info]                  ·gc.alloc.rate:            746.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       7528.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13595.886 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 156864.132 ops/s
[info]                  ·gc.alloc.rate:            750.114 MB/sec
[info]                  ·gc.alloc.rate.norm:       7528.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6763.756 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 153911.131 ops/s
[info]                  ·gc.alloc.rate:            736.342 MB/sec
[info]                  ·gc.alloc.rate.norm:       7530.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6893.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 156397.786 ops/s
[info]                  ·gc.alloc.rate:                   748.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              7533.402 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6777.159 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.703 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   156034.268 ±(99.9%) 4762.764 ops/s [Average]
[info]   (min, avg, max) = (153911.131, 156034.268, 156922.632), stdev = 1236.875
[info]   CI (99.9%): [151271.504, 160797.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   746.737 ±(99.9%) 23.959 MB/sec [Average]
[info]   (min, avg, max) = (736.342, 746.737, 752.400), stdev = 6.222
[info]   CI (99.9%): [722.778, 770.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7533.081 ±(99.9%) 28.256 B/op [Average]
[info]   (min, avg, max) = (7528.003, 7533.081, 7545.605), stdev = 7.338
[info]   CI (99.9%): [7504.824, 7561.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.681 ±(99.9%) 1160.665 MB/sec [Average]
[info]   (min, avg, max) = (673.371, 808.681, 1347.879), stdev = 301.421
[info]   CI (99.9%): [≈ 0, 1969.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8158.184 ±(99.9%) 11706.984 B/op [Average]
[info]   (min, avg, max) = (6760.610, 8158.184, 13595.886), stdev = 3040.267
[info]   CI (99.9%): [≈ 0, 19865.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.341 ±(99.9%) 11.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.341, 6.703), stdev = 2.998
[info]   CI (99.9%): [≈ 0, 12.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.800, 16.000), stdev = 3.493
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137171.755 ops/s
[info] # Warmup Iteration   2: 379834.001 ops/s
[info] # Warmup Iteration   3: 380494.386 ops/s
[info] # Warmup Iteration   4: 390496.791 ops/s
[info] # Warmup Iteration   5: 379860.348 ops/s
[info] Iteration   1: 391442.123 ops/s
[info]                  ·gc.alloc.rate:      338.322 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 386727.002 ops/s
[info]                  ·gc.alloc.rate:            334.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       1360.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2738.044 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 390513.417 ops/s
[info]                  ·gc.alloc.rate:      337.398 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 374225.148 ops/s
[info]                  ·gc.alloc.rate:            323.626 MB/sec
[info]                  ·gc.alloc.rate.norm:       1360.718 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2829.514 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 391958.621 ops/s
[info]                  ·gc.alloc.rate:      338.678 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   386973.262 ±(99.9%) 28552.743 ops/s [Average]
[info]   (min, avg, max) = (374225.148, 386973.262, 391958.621), stdev = 7415.057
[info]   CI (99.9%): [358420.519, 415526.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   334.446 ±(99.9%) 24.261 MB/sec [Average]
[info]   (min, avg, max) = (323.626, 334.446, 338.678), stdev = 6.300
[info]   CI (99.9%): [310.186, 358.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1360.144 ±(99.9%) 1.234 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1360.144, 1360.718), stdev = 0.321
[info]   CI (99.9%): [1358.910, 1361.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.161 ±(99.9%) 1419.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.161, 672.956), stdev = 368.564
[info]   CI (99.9%): [≈ 0, 1688.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1113.512 ±(99.9%) 5872.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1113.512, 2829.514), stdev = 1525.082
[info]   CI (99.9%): [≈ 0, 6986.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 10.000), stdev = 5.215
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 455820.338 ops/s
[info] # Warmup Iteration   2: 592431.616 ops/s
[info] # Warmup Iteration   3: 605483.329 ops/s
[info] # Warmup Iteration   4: 622176.458 ops/s
[info] # Warmup Iteration   5: 628572.427 ops/s
[info] Iteration   1: 617115.850 ops/s
[info]                  ·gc.alloc.rate:            339.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       866.720 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1719.264 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 623049.635 ops/s
[info]                  ·gc.alloc.rate:      335.643 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 616283.659 ops/s
[info]                  ·gc.alloc.rate:            332.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.857 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1721.638 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 620547.042 ops/s
[info]                  ·gc.alloc.rate:      334.811 MB/sec
[info]                  ·gc.alloc.rate.norm: 849.135 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 615963.516 ops/s
[info]                  ·gc.alloc.rate:            332.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       849.442 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.246 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1722.538 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   618591.940 ±(99.9%) 11885.506 ops/s [Average]
[info]   (min, avg, max) = (615963.516, 618591.940, 623049.635), stdev = 3086.628
[info]   CI (99.9%): [606706.435, 630477.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   335.020 ±(99.9%) 11.676 MB/sec [Average]
[info]   (min, avg, max) = (332.353, 335.020, 339.800), stdev = 3.032
[info]   CI (99.9%): [323.345, 346.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   852.431 ±(99.9%) 30.828 B/op [Average]
[info]   (min, avg, max) = (848.001, 852.431, 866.720), stdev = 8.006
[info]   CI (99.9%): [821.603, 883.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.473 ±(99.9%) 1421.778 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.473, 674.246), stdev = 369.231
[info]   CI (99.9%): [≈ 0, 1826.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1032.688 ±(99.9%) 3630.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1032.688, 1722.538), stdev = 942.711
[info]   CI (99.9%): [≈ 0, 4662.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 8.000), stdev = 4.219
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 491866.666 ops/s
[info] # Warmup Iteration   2: 658895.373 ops/s
[info] # Warmup Iteration   3: 664258.446 ops/s
[info] # Warmup Iteration   4: 664546.784 ops/s
[info] # Warmup Iteration   5: 668029.777 ops/s
[info] Iteration   1: 632817.745 ops/s
[info]                  ·gc.alloc.rate:      6.433 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 666568.589 ops/s
[info]                  ·gc.alloc.rate:      6.777 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 664692.907 ops/s
[info]                  ·gc.alloc.rate:      7.327 MB/sec
[info]                  ·gc.alloc.rate.norm: 17.353 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 665794.200 ops/s
[info]                  ·gc.alloc.rate:      6.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 667428.933 ops/s
[info]                  ·gc.alloc.rate:      6.787 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   659460.475 ±(99.9%) 57481.457 ops/s [Average]
[info]   (min, avg, max) = (632817.745, 659460.475, 667428.933), stdev = 14927.752
[info]   CI (99.9%): [601979.018, 716941.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.819 ±(99.9%) 1.237 MB/sec [Average]
[info]   (min, avg, max) = (6.433, 6.819, 7.327), stdev = 0.321
[info]   CI (99.9%): [5.582, 8.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.271 ±(99.9%) 2.328 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.271, 17.353), stdev = 0.604
[info]   CI (99.9%): [13.944, 18.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14241.245 ops/s
[info] # Warmup Iteration   2: 30504.172 ops/s
[info] # Warmup Iteration   3: 30605.334 ops/s
[info] # Warmup Iteration   4: 29913.327 ops/s
[info] # Warmup Iteration   5: 30495.092 ops/s
[info] Iteration   1: 30615.863 ops/s
[info]                  ·gc.alloc.rate:            1476.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       75884.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69240.739 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 30705.358 ops/s
[info]                  ·gc.alloc.rate:                   1480.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              75856.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68967.294 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 170.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 30820.209 ops/s
[info]                  ·gc.alloc.rate:                   1485.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              75870.379 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        69120.432 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 238.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 31065.771 ops/s
[info]                  ·gc.alloc.rate:                                  1497.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75856.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.147 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.455 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103534.731 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                33.747 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 30279.873 ops/s
[info]                  ·gc.alloc.rate:                                  1462.961 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76025.452 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.409 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70839.904 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   30697.415 ±(99.9%) 1109.059 ops/s [Average]
[info]   (min, avg, max) = (30279.873, 30697.415, 31065.771), stdev = 288.019
[info]   CI (99.9%): [29588.356, 31806.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1480.524 ±(99.9%) 48.767 MB/sec [Average]
[info]   (min, avg, max) = (1462.961, 1480.524, 1497.532), stdev = 12.665
[info]   CI (99.9%): [1431.757, 1529.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75898.412 ±(99.9%) 277.153 B/op [Average]
[info]   (min, avg, max) = (75856.013, 75898.412, 76025.452), stdev = 71.976
[info]   CI (99.9%): [75621.259, 76175.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.147), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.573 ±(99.9%) 12.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.573, 7.455), stdev = 3.293
[info]   CI (99.9%): [≈ 0, 14.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1490.685 ±(99.9%) 1191.260 MB/sec [Average]
[info]   (min, avg, max) = (1345.710, 1490.685, 2043.959), stdev = 309.367
[info]   CI (99.9%): [299.424, 2681.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   76340.620 ±(99.9%) 58609.626 B/op [Average]
[info]   (min, avg, max) = (68967.294, 76340.620, 103534.731), stdev = 15220.734
[info]   CI (99.9%): [17730.994, 134950.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.663), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   88.514 ±(99.9%) 420.958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 88.514, 238.112), stdev = 109.322
[info]   CI (99.9%): [≈ 0, 509.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 10.800, 18.000), stdev = 7.155
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1659031.712 ops/s
[info] # Warmup Iteration   2: 3228599.045 ops/s
[info] # Warmup Iteration   3: 3339870.573 ops/s
[info] # Warmup Iteration   4: 3461559.636 ops/s
[info] # Warmup Iteration   5: 3496262.851 ops/s
[info] Iteration   1: 3453404.820 ops/s
[info]                  ·gc.alloc.rate:                                  2336.240 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1064.874 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1240.790 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.518 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 3482454.354 ops/s
[info]                  ·gc.alloc.rate:            2356.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       1065.283 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 923.971 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 3445546.723 ops/s
[info]                  ·gc.alloc.rate:            2330.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.829 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 933.838 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 3466511.010 ops/s
[info]                  ·gc.alloc.rate:            2347.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       1065.767 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1237.602 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3507302.717 ops/s
[info]                  ·gc.alloc.rate:            2371.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.552 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 917.407 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3471043.925 ±(99.9%) 94844.153 ops/s [Average]
[info]   (min, avg, max) = (3445546.723, 3471043.925, 3507302.717), stdev = 24630.725
[info]   CI (99.9%): [3376199.772, 3565888.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2348.662 ±(99.9%) 63.343 MB/sec [Average]
[info]   (min, avg, max) = (2330.837, 2348.662, 2371.967), stdev = 16.450
[info]   CI (99.9%): [2285.320, 2412.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1065.061 ±(99.9%) 1.823 B/op [Average]
[info]   (min, avg, max) = (1064.552, 1065.061, 1065.767), stdev = 0.474
[info]   CI (99.9%): [1063.238, 1066.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2316.104 ±(99.9%) 1434.105 MB/sec [Average]
[info]   (min, avg, max) = (2044.106, 2316.104, 2725.977), stdev = 372.433
[info]   CI (99.9%): [881.999, 3750.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1050.721 ±(99.9%) 662.911 B/op [Average]
[info]   (min, avg, max) = (917.407, 1050.721, 1240.790), stdev = 172.156
[info]   CI (99.9%): [387.810, 1713.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.304 ±(99.9%) 2.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.304, 1.518), stdev = 0.679
[info]   CI (99.9%): [≈ 0, 2.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.807 ops/s
[info] # Warmup Iteration   2: 3436314.999 ops/s
[info] # Warmup Iteration   3: 3457670.385 ops/s
[info] # Warmup Iteration   4: 3482997.546 ops/s
[info] # Warmup Iteration   5: 3467368.425 ops/s
[info] Iteration   1: 3516003.755 ops/s
[info]                  ·gc.alloc.rate:            375.290 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 300.261 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 3411857.576 ops/s
[info]                  ·gc.alloc.rate:      364.160 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3511249.510 ops/s
[info]                  ·gc.alloc.rate:            377.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       169.173 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 300.674 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 3555897.365 ops/s
[info]                  ·gc.alloc.rate:      379.555 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3517477.670 ops/s
[info]                  ·gc.alloc.rate:            376.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.606 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 300.136 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   3502497.175 ±(99.9%) 206921.182 ops/s [Average]
[info]   (min, avg, max) = (3411857.576, 3502497.175, 3555897.365), stdev = 53736.774
[info]   CI (99.9%): [3295575.993, 3709418.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   374.644 ±(99.9%) 23.328 MB/sec [Average]
[info]   (min, avg, max) = (364.160, 374.644, 379.555), stdev = 6.058
[info]   CI (99.9%): [351.316, 397.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.356 ±(99.9%) 2.029 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.356, 169.173), stdev = 0.527
[info]   CI (99.9%): [166.327, 170.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.453 ±(99.9%) 1414.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.453, 670.847), stdev = 367.388
[info]   CI (99.9%): [≈ 0, 1817.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   180.214 ±(99.9%) 633.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 180.214, 300.674), stdev = 164.512
[info]   CI (99.9%): [≈ 0, 813.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 11.000), stdev = 5.675
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 948714.965 ops/s
[info] # Warmup Iteration   2: 2436228.716 ops/s
[info] # Warmup Iteration   3: 2471938.953 ops/s
[info] # Warmup Iteration   4: 2492037.199 ops/s
[info] # Warmup Iteration   5: 2423608.218 ops/s
[info] Iteration   1: 2495223.381 ops/s
[info]                  ·gc.alloc.rate:            1188.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       749.462 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 848.735 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 2483582.493 ops/s
[info]                  ·gc.alloc.rate:            1174.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.244 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 852.689 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 2466757.508 ops/s
[info]                  ·gc.alloc.rate:                   1166.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        856.808 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 2513833.077 ops/s
[info]                  ·gc.alloc.rate:                   1188.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.197 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        423.313 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.834 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2490523.919 ops/s
[info]                  ·gc.alloc.rate:                   1177.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        858.268 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   2489984.076 ±(99.9%) 66052.024 ops/s [Average]
[info]   (min, avg, max) = (2466757.508, 2489984.076, 2513833.077), stdev = 17153.501
[info]   CI (99.9%): [2423932.052, 2556036.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1179.046 ±(99.9%) 36.004 MB/sec [Average]
[info]   (min, avg, max) = (1166.980, 1179.046, 1188.531), stdev = 9.350
[info]   CI (99.9%): [1143.042, 1215.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   745.198 ±(99.9%) 9.184 B/op [Average]
[info]   (min, avg, max) = (744.000, 745.198, 749.462), stdev = 2.385
[info]   CI (99.9%): [736.014, 754.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1213.767 ±(99.9%) 1157.659 MB/sec [Average]
[info]   (min, avg, max) = (676.058, 1213.767, 1357.817), stdev = 300.640
[info]   CI (99.9%): [56.108, 2371.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   767.963 ±(99.9%) 742.023 B/op [Average]
[info]   (min, avg, max) = (423.313, 767.963, 858.268), stdev = 192.701
[info]   CI (99.9%): [25.940, 1509.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.731 ±(99.9%) 7.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.731, 3.996), stdev = 1.859
[info]   CI (99.9%): [≈ 0, 8.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.096 ±(99.9%) 4.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.096, 2.526), stdev = 1.180
[info]   CI (99.9%): [≈ 0, 5.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 13.600, 19.000), stdev = 6.504
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3131787.496 ops/s
[info] # Warmup Iteration   2: 3556737.683 ops/s
[info] # Warmup Iteration   3: 3838808.228 ops/s
[info] # Warmup Iteration   4: 3873042.397 ops/s
[info] # Warmup Iteration   5: 3841158.497 ops/s
[info] Iteration   1: 3878604.351 ops/s
[info]                  ·gc.alloc.rate:      413.987 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3857998.750 ops/s
[info]                  ·gc.alloc.rate:            411.806 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 275.020 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 3909548.176 ops/s
[info]                  ·gc.alloc.rate:      417.298 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3854228.318 ops/s
[info]                  ·gc.alloc.rate:            416.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       170.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 275.279 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 3859671.318 ops/s
[info]                  ·gc.alloc.rate:            413.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.553 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 274.902 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   3872010.183 ±(99.9%) 88592.985 ops/s [Average]
[info]   (min, avg, max) = (3854228.318, 3872010.183, 3909548.176), stdev = 23007.317
[info]   CI (99.9%): [3783417.197, 3960603.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   414.546 ±(99.9%) 8.603 MB/sec [Average]
[info]   (min, avg, max) = (411.806, 414.546, 417.298), stdev = 2.234
[info]   CI (99.9%): [405.943, 423.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.519 ±(99.9%) 3.371 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.519, 170.026), stdev = 0.875
[info]   CI (99.9%): [165.148, 171.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.445 ±(99.9%) 1421.680 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.445, 674.127), stdev = 369.206
[info]   CI (99.9%): [≈ 0, 1826.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   165.040 ±(99.9%) 580.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 165.040, 275.279), stdev = 150.660
[info]   CI (99.9%): [≈ 0, 745.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 9.000), stdev = 4.278
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1270465.080 ops/s
[info] # Warmup Iteration   2: 2577666.333 ops/s
[info] # Warmup Iteration   3: 2503885.009 ops/s
[info] # Warmup Iteration   4: 2578461.784 ops/s
[info] # Warmup Iteration   5: 2623061.699 ops/s
[info] Iteration   1: 2614385.676 ops/s
[info]                  ·gc.alloc.rate:            1237.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.747 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 810.012 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 2624977.783 ops/s
[info]                  ·gc.alloc.rate:            1243.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.332 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 803.438 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 2620455.985 ops/s
[info]                  ·gc.alloc.rate:                   1238.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        404.080 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.000 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 2619035.719 ops/s
[info]                  ·gc.alloc.rate:                   1238.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        813.368 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 2643785.205 ops/s
[info]                  ·gc.alloc.rate:                   1249.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1362.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        810.952 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   2624528.074 ±(99.9%) 43931.757 ops/s [Average]
[info]   (min, avg, max) = (2614385.676, 2624528.074, 2643785.205), stdev = 11408.938
[info]   CI (99.9%): [2580596.317, 2668459.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1241.357 ±(99.9%) 20.426 MB/sec [Average]
[info]   (min, avg, max) = (1237.102, 1241.357, 1249.929), stdev = 5.304
[info]   CI (99.9%): [1220.932, 1261.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   744.233 ±(99.9%) 1.224 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.233, 744.747), stdev = 0.318
[info]   CI (99.9%): [743.009, 745.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1215.145 ±(99.9%) 1167.938 MB/sec [Average]
[info]   (min, avg, max) = (672.753, 1215.145, 1362.408), stdev = 303.310
[info]   CI (99.9%): [47.207, 2383.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   728.370 ±(99.9%) 698.203 B/op [Average]
[info]   (min, avg, max) = (404.080, 728.370, 813.368), stdev = 181.321
[info]   CI (99.9%): [30.167, 1426.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 8.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.662), stdev = 2.137
[info]   CI (99.9%): [≈ 0, 9.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.040 ±(99.9%) 4.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.040, 2.802), stdev = 1.285
[info]   CI (99.9%): [≈ 0, 5.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.000, 18.000), stdev = 6.042
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1313252.998 ops/s
[info] # Warmup Iteration   2: 2226549.665 ops/s
[info] # Warmup Iteration   3: 2230118.141 ops/s
[info] # Warmup Iteration   4: 2243627.985 ops/s
[info] # Warmup Iteration   5: 2230862.191 ops/s
[info] Iteration   1: 2229405.467 ops/s
[info]                  ·gc.alloc.rate:            532.588 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 475.906 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 2221598.402 ops/s
[info]                  ·gc.alloc.rate:            532.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       377.419 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 477.603 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2228425.142 ops/s
[info]                  ·gc.alloc.rate:            534.263 MB/sec
[info]                  ·gc.alloc.rate.norm:       377.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 476.136 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2222177.461 ops/s
[info]                  ·gc.alloc.rate:      542.934 MB/sec
[info]                  ·gc.alloc.rate.norm: 384.577 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2230988.966 ops/s
[info]                  ·gc.alloc.rate:            533.092 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 475.591 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2226519.088 ±(99.9%) 16674.545 ops/s [Average]
[info]   (min, avg, max) = (2221598.402, 2226519.088, 2230988.966), stdev = 4330.327
[info]   CI (99.9%): [2209844.542, 2243193.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   535.102 ±(99.9%) 17.057 MB/sec [Average]
[info]   (min, avg, max) = (532.588, 535.102, 542.934), stdev = 4.430
[info]   CI (99.9%): [518.045, 552.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   378.290 ±(99.9%) 13.780 B/op [Average]
[info]   (min, avg, max) = (376.000, 378.290, 384.577), stdev = 3.579
[info]   CI (99.9%): [364.510, 392.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.271 ±(99.9%) 1160.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.271, 674.125), stdev = 301.462
[info]   CI (99.9%): [≈ 0, 1700.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   381.047 ±(99.9%) 820.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 381.047, 477.603), stdev = 213.013
[info]   CI (99.9%): [≈ 0, 1201.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.400, 8.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.726 ops/s
[info] # Warmup Iteration   2: 5526232.406 ops/s
[info] # Warmup Iteration   3: 5683746.798 ops/s
[info] # Warmup Iteration   4: 5800138.146 ops/s
[info] # Warmup Iteration   5: 5747375.708 ops/s
[info] Iteration   1: 5747499.471 ops/s
[info]                  ·gc.alloc.rate:            555.114 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.689 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 5745811.642 ops/s
[info]                  ·gc.alloc.rate:                   554.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        183.559 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 5665717.397 ops/s
[info]                  ·gc.alloc.rate:            547.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.336 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 5690722.970 ops/s
[info]                  ·gc.alloc.rate:            549.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.522 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 5815480.758 ops/s
[info]                  ·gc.alloc.rate:      561.766 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.045 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5733046.448 ±(99.9%) 223633.695 ops/s [Average]
[info]   (min, avg, max) = (5665717.397, 5733046.448, 5815480.758), stdev = 58076.960
[info]   CI (99.9%): [5509412.753, 5956680.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   553.717 ±(99.9%) 21.720 MB/sec [Average]
[info]   (min, avg, max) = (547.277, 553.717, 561.766), stdev = 5.640
[info]   CI (99.9%): [531.998, 575.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.022 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.022, 152.045), stdev = 0.017
[info]   CI (99.9%): [151.957, 152.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   536.458 ±(99.9%) 1154.767 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.458, 670.774), stdev = 299.889
[info]   CI (99.9%): [≈ 0, 1691.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   147.821 ±(99.9%) 318.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 147.821, 186.336), stdev = 82.643
[info]   CI (99.9%): [≈ 0, 466.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.182), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 9.600, 12.000), stdev = 5.367
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1866511.907 ops/s
[info] # Warmup Iteration   2: 3301819.616 ops/s
[info] # Warmup Iteration   3: 3339339.330 ops/s
[info] # Warmup Iteration   4: 3386613.627 ops/s
[info] # Warmup Iteration   5: 3359826.567 ops/s
[info] Iteration   1: 3398087.072 ops/s
[info]                  ·gc.alloc.rate:            1053.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 311.918 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 3361541.686 ops/s
[info]                  ·gc.alloc.rate:            1047.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       490.603 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 630.015 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 3403556.087 ops/s
[info]                  ·gc.alloc.rate:            1056.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.713 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 311.111 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 3367074.238 ops/s
[info]                  ·gc.alloc.rate:                   1043.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        628.969 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 3370528.116 ops/s
[info]                  ·gc.alloc.rate:                   1049.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              490.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        632.031 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   3380157.440 ±(99.9%) 74053.818 ops/s [Average]
[info]   (min, avg, max) = (3361541.686, 3380157.440, 3403556.087), stdev = 19231.541
[info]   CI (99.9%): [3306103.622, 3454211.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1050.208 ±(99.9%) 19.100 MB/sec [Average]
[info]   (min, avg, max) = (1043.933, 1050.208, 1056.768), stdev = 4.960
[info]   CI (99.9%): [1031.108, 1069.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   489.078 ±(99.9%) 4.625 B/op [Average]
[info]   (min, avg, max) = (488.000, 489.078, 490.603), stdev = 1.201
[info]   CI (99.9%): [484.453, 493.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1078.051 ±(99.9%) 1424.032 MB/sec [Average]
[info]   (min, avg, max) = (672.729, 1078.051, 1353.506), stdev = 369.817
[info]   CI (99.9%): [≈ 0, 2502.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   502.809 ±(99.9%) 672.442 B/op [Average]
[info]   (min, avg, max) = (311.111, 502.809, 632.031), stdev = 174.631
[info]   CI (99.9%): [≈ 0, 1175.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 8.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.663), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 10.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.747 ±(99.9%) 4.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.747, 2.177), stdev = 1.046
[info]   CI (99.9%): [≈ 0, 4.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.200, 18.000), stdev = 4.438
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4671126.722 ops/s
[info] # Warmup Iteration   2: 5255805.580 ops/s
[info] # Warmup Iteration   3: 5785817.799 ops/s
[info] # Warmup Iteration   4: 5760809.358 ops/s
[info] # Warmup Iteration   5: 5758185.879 ops/s
[info] Iteration   1: 5852137.480 ops/s
[info]                  ·gc.alloc.rate:      565.169 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5788284.154 ops/s
[info]                  ·gc.alloc.rate:            560.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.287 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.297 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 5731410.842 ops/s
[info]                  ·gc.alloc.rate:            555.194 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.457 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.110 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 5794487.126 ops/s
[info]                  ·gc.alloc.rate:            560.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 5716129.172 ops/s
[info]                  ·gc.alloc.rate:            552.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.614 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   5776489.755 ±(99.9%) 209684.267 ops/s [Average]
[info]   (min, avg, max) = (5716129.172, 5776489.755, 5852137.480), stdev = 54454.338
[info]   CI (99.9%): [5566805.488, 5986174.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   558.503 ±(99.9%) 19.373 MB/sec [Average]
[info]   (min, avg, max) = (552.086, 558.503, 565.169), stdev = 5.031
[info]   CI (99.9%): [539.130, 577.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.181 ±(99.9%) 0.730 B/op [Average]
[info]   (min, avg, max) = (152.008, 152.181, 152.457), stdev = 0.190
[info]   CI (99.9%): [151.451, 152.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.256 ±(99.9%) 1160.789 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.256, 674.103), stdev = 301.453
[info]   CI (99.9%): [≈ 0, 1700.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   147.424 ±(99.9%) 317.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 147.424, 185.614), stdev = 82.420
[info]   CI (99.9%): [≈ 0, 464.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.600, 10.000), stdev = 3.847
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5057529.500 ops/s
[info] # Warmup Iteration   2: 6231344.609 ops/s
[info] # Warmup Iteration   3: 6293653.256 ops/s
[info] # Warmup Iteration   4: 6286866.642 ops/s
[info] # Warmup Iteration   5: 6351224.802 ops/s
[info] Iteration   1: 6346258.799 ops/s
[info]                  ·gc.alloc.rate:      0.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.230 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6359116.670 ops/s
[info]                  ·gc.alloc.rate:      1.278 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.316 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6359646.096 ops/s
[info]                  ·gc.alloc.rate:      0.084 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6364524.667 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6358864.148 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6357682.076 ±(99.9%) 26160.657 ops/s [Average]
[info]   (min, avg, max) = (6346258.799, 6357682.076, 6364524.667), stdev = 6793.840
[info]   CI (99.9%): [6331521.418, 6383842.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.458 ±(99.9%) 2.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.458, 1.278), stdev = 0.602
[info]   CI (99.9%): [≈ 0, 2.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.113 ±(99.9%) 0.574 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.113, 0.316), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2019529.509 ops/s
[info] # Warmup Iteration   2: 3376008.175 ops/s
[info] # Warmup Iteration   3: 3553843.353 ops/s
[info] # Warmup Iteration   4: 3581197.345 ops/s
[info] # Warmup Iteration   5: 3507333.606 ops/s
[info] Iteration   1: 3553840.846 ops/s
[info]                  ·gc.alloc.rate:            975.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 298.251 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 3550945.654 ops/s
[info]                  ·gc.alloc.rate:            974.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 596.990 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 3372217.519 ops/s
[info]                  ·gc.alloc.rate:            946.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       441.772 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 314.313 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 3466878.939 ops/s
[info]                  ·gc.alloc.rate:            952.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.389 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 611.147 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   5: 3528070.709 ops/s
[info]                  ·gc.alloc.rate:                   968.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        300.142 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.486 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3494390.733 ±(99.9%) 295462.024 ops/s [Average]
[info]   (min, avg, max) = (3372217.519, 3494390.733, 3553840.846), stdev = 76730.549
[info]   CI (99.9%): [3198928.709, 3789852.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   963.458 ±(99.9%) 51.410 MB/sec [Average]
[info]   (min, avg, max) = (946.353, 963.458, 975.553), stdev = 13.351
[info]   CI (99.9%): [912.048, 1014.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   434.057 ±(99.9%) 16.619 B/op [Average]
[info]   (min, avg, max) = (432.000, 434.057, 441.772), stdev = 4.316
[info]   CI (99.9%): [417.438, 450.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   942.486 ±(99.9%) 1420.172 MB/sec [Average]
[info]   (min, avg, max) = (672.713, 942.486, 1346.915), stdev = 368.814
[info]   CI (99.9%): [≈ 0, 2362.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   424.169 ±(99.9%) 633.118 B/op [Average]
[info]   (min, avg, max) = (298.251, 424.169, 611.147), stdev = 164.419
[info]   CI (99.9%): [≈ 0, 1057.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.297 ±(99.9%) 2.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.297, 1.486), stdev = 0.664
[info]   CI (99.9%): [≈ 0, 2.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.600, 18.000), stdev = 4.930
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 339377.161 ops/s
[info] # Warmup Iteration   2: 1021337.979 ops/s
[info] # Warmup Iteration   3: 1061360.425 ops/s
[info] # Warmup Iteration   4: 1040145.184 ops/s
[info] # Warmup Iteration   5: 1057315.983 ops/s
[info] Iteration   1: 1053778.324 ops/s
[info]                  ·gc.alloc.rate:            1670.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.405 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2021.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3020.583 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   2: 1070630.180 ops/s
[info]                  ·gc.alloc.rate:                   1698.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.208 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1985.893 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 1061206.805 ops/s
[info]                  ·gc.alloc.rate:                                  1683.632 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2496.436 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3027.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.940 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 1058542.674 ops/s
[info]                  ·gc.alloc.rate:            1684.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       2504.222 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2026.291 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1071686.500 ops/s
[info]                  ·gc.alloc.rate:            1699.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.578 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3002.282 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1063168.897 ±(99.9%) 29929.618 ops/s [Average]
[info]   (min, avg, max) = (1053778.324, 1063168.897, 1071686.500), stdev = 7772.627
[info]   CI (99.9%): [1033239.279, 1093098.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1687.392 ±(99.9%) 45.879 MB/sec [Average]
[info]   (min, avg, max) = (1670.995, 1687.392, 1699.736), stdev = 11.915
[info]   CI (99.9%): [1641.513, 1733.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2497.970 ±(99.9%) 13.468 B/op [Average]
[info]   (min, avg, max) = (2496.208, 2497.970, 2504.222), stdev = 3.498
[info]   CI (99.9%): [2484.502, 2511.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1764.265 ±(99.9%) 1432.144 MB/sec [Average]
[info]   (min, avg, max) = (1351.215, 1764.265, 2044.033), stdev = 371.923
[info]   CI (99.9%): [332.121, 3196.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2612.419 ±(99.9%) 2132.320 B/op [Average]
[info]   (min, avg, max) = (1985.893, 2612.419, 3027.046), stdev = 553.757
[info]   CI (99.9%): [480.098, 4744.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 3.998), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 9.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.163 ±(99.9%) 11.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.163, 5.875), stdev = 2.980
[info]   CI (99.9%): [≈ 0, 13.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 22.000), stdev = 7.855
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.704 ops/s
[info] # Warmup Iteration   2: 1664903.690 ops/s
[info] # Warmup Iteration   3: 1775713.455 ops/s
[info] # Warmup Iteration   4: 1733614.558 ops/s
[info] # Warmup Iteration   5: 1752580.715 ops/s
[info] Iteration   1: 1752625.216 ops/s
[info]                  ·gc.alloc.rate:            491.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       441.217 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 602.406 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1770065.233 ops/s
[info]                  ·gc.alloc.rate:      496.173 MB/sec
[info]                  ·gc.alloc.rate.norm: 441.197 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1749598.599 ops/s
[info]                  ·gc.alloc.rate:            491.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       442.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 603.451 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1755340.998 ops/s
[info]                  ·gc.alloc.rate:            490.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 601.480 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 1774020.171 ops/s
[info]                  ·gc.alloc.rate:      495.926 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   1760330.043 ±(99.9%) 42252.476 ops/s [Average]
[info]   (min, avg, max) = (1749598.599, 1760330.043, 1774020.171), stdev = 10972.834
[info]   CI (99.9%): [1718077.567, 1802582.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   493.108 ±(99.9%) 10.403 MB/sec [Average]
[info]   (min, avg, max) = (490.691, 493.108, 496.173), stdev = 2.702
[info]   CI (99.9%): [482.705, 503.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.912 ±(99.9%) 3.527 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.912, 442.144), stdev = 0.916
[info]   CI (99.9%): [437.385, 444.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   402.461 ±(99.9%) 1414.708 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.461, 670.776), stdev = 367.395
[info]   CI (99.9%): [≈ 0, 1817.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   361.467 ±(99.9%) 1270.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 361.467, 603.451), stdev = 329.974
[info]   CI (99.9%): [≈ 0, 1632.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.200, 11.000), stdev = 5.675
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120590.458 ops/s
[info] # Warmup Iteration   2: 1131076.450 ops/s
[info] # Warmup Iteration   3: 1168736.685 ops/s
[info] # Warmup Iteration   4: 1165095.759 ops/s
[info] # Warmup Iteration   5: 1180648.648 ops/s
[info] Iteration   1: 1178900.869 ops/s
[info]                  ·gc.alloc.rate:            845.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       1129.506 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 898.188 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1178418.538 ops/s
[info]                  ·gc.alloc.rate:            844.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       1128.227 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 898.549 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1165588.413 ops/s
[info]                  ·gc.alloc.rate:            835.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       1128.673 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1816.911 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 1165606.113 ops/s
[info]                  ·gc.alloc.rate:            838.529 MB/sec
[info]                  ·gc.alloc.rate.norm:       1132.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 908.405 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1179838.474 ops/s
[info]                  ·gc.alloc.rate:            845.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       1128.371 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 897.468 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1173670.481 ±(99.9%) 28446.525 ops/s [Average]
[info]   (min, avg, max) = (1165588.413, 1173670.481, 1179838.474), stdev = 7387.472
[info]   CI (99.9%): [1145223.957, 1202117.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   842.120 ±(99.9%) 17.907 MB/sec [Average]
[info]   (min, avg, max) = (835.800, 842.120, 845.842), stdev = 4.650
[info]   CI (99.9%): [824.213, 860.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1129.358 ±(99.9%) 6.024 B/op [Average]
[info]   (min, avg, max) = (1128.227, 1129.358, 1132.012), stdev = 1.564
[info]   CI (99.9%): [1123.334, 1135.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.273 ±(99.9%) 1158.467 MB/sec [Average]
[info]   (min, avg, max) = (672.617, 807.273, 1345.451), stdev = 300.850
[info]   CI (99.9%): [≈ 0, 1965.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1083.904 ±(99.9%) 1577.947 B/op [Average]
[info]   (min, avg, max) = (897.468, 1083.904, 1816.911), stdev = 409.788
[info]   CI (99.9%): [≈ 0, 2661.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 18.000), stdev = 4.025
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1030987.836 ops/s
[info] # Warmup Iteration   2: 1604022.185 ops/s
[info] # Warmup Iteration   3: 1694472.103 ops/s
[info] # Warmup Iteration   4: 1643241.777 ops/s
[info] # Warmup Iteration   5: 1680512.592 ops/s
[info] Iteration   1: 1681410.907 ops/s
[info]                  ·gc.alloc.rate:            470.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 631.652 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1687408.396 ops/s
[info]                  ·gc.alloc.rate:      472.792 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.904 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1676660.722 ops/s
[info]                  ·gc.alloc.rate:                   470.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.273 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        632.792 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.625 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1669708.802 ops/s
[info]                  ·gc.alloc.rate:            467.693 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.909 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 636.030 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 1692745.646 ops/s
[info]                  ·gc.alloc.rate:      473.153 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1681586.895 ±(99.9%) 34644.822 ops/s [Average]
[info]   (min, avg, max) = (1669708.802, 1681586.895, 1692745.646), stdev = 8997.150
[info]   CI (99.9%): [1646942.073, 1716231.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   470.793 ±(99.9%) 8.614 MB/sec [Average]
[info]   (min, avg, max) = (467.693, 470.793, 473.153), stdev = 2.237
[info]   CI (99.9%): [462.178, 479.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.659 ±(99.9%) 2.052 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.659, 441.273), stdev = 0.533
[info]   CI (99.9%): [438.607, 442.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.704 ±(99.9%) 1422.591 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.704, 674.850), stdev = 369.442
[info]   CI (99.9%): [≈ 0, 1827.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   380.095 ±(99.9%) 1336.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 380.095, 636.030), stdev = 346.981
[info]   CI (99.9%): [≈ 0, 1716.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.125 ±(99.9%) 1.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.625), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 7.000), stdev = 3.834
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248106.710 ops/s
[info] # Warmup Iteration   2: 1202183.593 ops/s
[info] # Warmup Iteration   3: 1216928.263 ops/s
[info] # Warmup Iteration   4: 1222195.766 ops/s
[info] # Warmup Iteration   5: 1206448.241 ops/s
[info] Iteration   1: 1223015.734 ops/s
[info]                  ·gc.alloc.rate:            789.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 866.661 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1223431.817 ops/s
[info]                  ·gc.alloc.rate:            789.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 866.375 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1222088.088 ops/s
[info]                  ·gc.alloc.rate:            789.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       1017.452 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 867.340 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1223665.672 ops/s
[info]                  ·gc.alloc.rate:            789.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 866.140 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1222286.648 ops/s
[info]                  ·gc.alloc.rate:                   788.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        866.301 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.858 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1222897.592 ±(99.9%) 2666.310 ops/s [Average]
[info]   (min, avg, max) = (1222088.088, 1222897.592, 1223665.672), stdev = 692.432
[info]   CI (99.9%): [1220231.282, 1225563.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   789.534 ±(99.9%) 1.509 MB/sec [Average]
[info]   (min, avg, max) = (788.917, 789.534, 789.895), stdev = 0.392
[info]   CI (99.9%): [788.024, 791.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1016.306 ±(99.9%) 2.468 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.306, 1017.452), stdev = 0.641
[info]   CI (99.9%): [1013.838, 1018.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   673.203 ±(99.9%) 1.174 MB/sec [Average]
[info]   (min, avg, max) = (672.661, 673.203, 673.360), stdev = 0.305
[info]   CI (99.9%): [672.030, 674.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   866.563 ±(99.9%) 1.822 B/op [Average]
[info]   (min, avg, max) = (866.140, 866.563, 867.340), stdev = 0.473
[info]   CI (99.9%): [864.741, 868.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.172 ±(99.9%) 1.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.172, 0.858), stdev = 0.384
[info]   CI (99.9%): [≈ 0, 1.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321105.993 ops/s
[info] # Warmup Iteration   2: 999724.445 ops/s
[info] # Warmup Iteration   3: 1046366.249 ops/s
[info] # Warmup Iteration   4: 1039502.371 ops/s
[info] # Warmup Iteration   5: 1035740.460 ops/s
[info] Iteration   1: 1047918.470 ops/s
[info]                  ·gc.alloc.rate:            878.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1012.488 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1024623.863 ops/s
[info]                  ·gc.alloc.rate:            865.429 MB/sec
[info]                  ·gc.alloc.rate.norm:       1329.348 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1035.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1032641.567 ops/s
[info]                  ·gc.alloc.rate:            867.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       1322.675 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2054.875 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 1047676.294 ops/s
[info]                  ·gc.alloc.rate:            878.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1012.695 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1048561.178 ops/s
[info]                  ·gc.alloc.rate:            879.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1011.840 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1040284.274 ±(99.9%) 42404.730 ops/s [Average]
[info]   (min, avg, max) = (1024623.863, 1040284.274, 1048561.178), stdev = 11012.374
[info]   CI (99.9%): [997879.544, 1082689.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   874.012 ±(99.9%) 26.309 MB/sec [Average]
[info]   (min, avg, max) = (865.429, 874.012, 879.553), stdev = 6.832
[info]   CI (99.9%): [847.704, 900.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1322.433 ±(99.9%) 15.517 B/op [Average]
[info]   (min, avg, max) = (1320.000, 1322.433, 1329.348), stdev = 4.030
[info]   CI (99.9%): [1306.916, 1337.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.890 ±(99.9%) 1160.750 MB/sec [Average]
[info]   (min, avg, max) = (673.960, 808.890, 1348.128), stdev = 301.443
[info]   CI (99.9%): [≈ 0, 1969.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1225.473 ±(99.9%) 1785.766 B/op [Average]
[info]   (min, avg, max) = (1011.840, 1225.473, 2054.875), stdev = 463.758
[info]   CI (99.9%): [≈ 0, 3011.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.400, 16.000), stdev = 3.715
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.630 ops/s
[info] # Warmup Iteration   2: 767125.371 ops/s
[info] # Warmup Iteration   3: 797134.459 ops/s
[info] # Warmup Iteration   4: 810166.176 ops/s
[info] # Warmup Iteration   5: 811599.354 ops/s
[info] Iteration   1: 811914.245 ops/s
[info]                  ·gc.alloc.rate:      210.756 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.537 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 801059.068 ops/s
[info]                  ·gc.alloc.rate:            210.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       412.717 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1317.921 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 811570.208 ops/s
[info]                  ·gc.alloc.rate:      210.371 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 812299.182 ops/s
[info]                  ·gc.alloc.rate:      210.546 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 793369.680 ops/s
[info]                  ·gc.alloc.rate:            206.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       409.277 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1330.724 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   806042.477 ±(99.9%) 32765.223 ops/s [Average]
[info]   (min, avg, max) = (793369.680, 806042.477, 812299.182), stdev = 8509.024
[info]   CI (99.9%): [773277.254, 838807.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   209.613 ±(99.9%) 7.100 MB/sec [Average]
[info]   (min, avg, max) = (206.348, 209.613, 210.756), stdev = 1.844
[info]   CI (99.9%): [202.513, 216.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   409.306 ±(99.9%) 7.614 B/op [Average]
[info]   (min, avg, max) = (408.001, 409.306, 412.717), stdev = 1.977
[info]   CI (99.9%): [401.693, 416.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   268.329 ±(99.9%) 1414.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.329, 670.919), stdev = 367.424
[info]   CI (99.9%): [≈ 0, 1683.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   529.729 ±(99.9%) 2793.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 529.729, 1330.724), stdev = 725.375
[info]   CI (99.9%): [≈ 0, 3322.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 10.000), stdev = 5.477
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 553433.470 ops/s
[info] # Warmup Iteration   2: 1929115.834 ops/s
[info] # Warmup Iteration   3: 1913231.884 ops/s
[info] # Warmup Iteration   4: 1940827.239 ops/s
[info] # Warmup Iteration   5: 1870319.643 ops/s
[info] Iteration   1: 1907277.117 ops/s
[info]                  ·gc.alloc.rate:            902.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       745.324 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1111.473 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 1884511.536 ops/s
[info]                  ·gc.alloc.rate:            900.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       752.217 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 562.458 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1938283.876 ops/s
[info]                  ·gc.alloc.rate:            916.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.591 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 546.808 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1922259.820 ops/s
[info]                  ·gc.alloc.rate:                   909.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.490 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1102.270 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   5: 1937835.388 ops/s
[info]                  ·gc.alloc.rate:            916.046 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 546.980 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   1918033.548 ±(99.9%) 87373.904 ops/s [Average]
[info]   (min, avg, max) = (1884511.536, 1918033.548, 1938283.876), stdev = 22690.725
[info]   CI (99.9%): [1830659.643, 2005407.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   909.112 ±(99.9%) 28.185 MB/sec [Average]
[info]   (min, avg, max) = (900.756, 909.112, 916.675), stdev = 7.320
[info]   CI (99.9%): [880.927, 937.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   746.047 ±(99.9%) 13.422 B/op [Average]
[info]   (min, avg, max) = (744.063, 746.047, 752.217), stdev = 3.486
[info]   CI (99.9%): [732.625, 759.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   942.619 ±(99.9%) 1418.944 MB/sec [Average]
[info]   (min, avg, max) = (673.408, 942.619, 1346.387), stdev = 368.495
[info]   CI (99.9%): [≈ 0, 2361.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   773.998 ±(99.9%) 1170.421 B/op [Average]
[info]   (min, avg, max) = (546.808, 773.998, 1111.473), stdev = 303.955
[info]   CI (99.9%): [≈ 0, 1944.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.109 ±(99.9%) 0.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.545), stdev = 0.244
[info]   CI (99.9%): [≈ 0, 1.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   61.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 12.200, 17.000), stdev = 4.382
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 895466.183 ops/s
[info] # Warmup Iteration   2: 2166596.934 ops/s
[info] # Warmup Iteration   3: 2089236.177 ops/s
[info] # Warmup Iteration   4: 2183102.909 ops/s
[info] # Warmup Iteration   5: 2202324.840 ops/s
[info] Iteration   1: 2176993.880 ops/s
[info]                  ·gc.alloc.rate:            564.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 487.385 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 2171677.744 ops/s
[info]                  ·gc.alloc.rate:            565.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       410.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 488.561 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2180541.583 ops/s
[info]                  ·gc.alloc.rate:            565.499 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.218 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 486.570 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2176014.908 ops/s
[info]                  ·gc.alloc.rate:            564.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 487.581 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 2155615.854 ops/s
[info]                  ·gc.alloc.rate:            559.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 492.186 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2172168.794 ±(99.9%) 37650.684 ops/s [Average]
[info]   (min, avg, max) = (2155615.854, 2172168.794, 2180541.583), stdev = 9777.763
[info]   CI (99.9%): [2134518.110, 2209819.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   563.922 ±(99.9%) 9.365 MB/sec [Average]
[info]   (min, avg, max) = (559.799, 563.922, 565.911), stdev = 2.432
[info]   CI (99.9%): [554.558, 573.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408.666 ±(99.9%) 3.580 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.666, 410.224), stdev = 0.930
[info]   CI (99.9%): [405.086, 412.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.017 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (673.947, 674.017, 674.078), stdev = 0.053
[info]   CI (99.9%): [673.812, 674.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   488.457 ±(99.9%) 8.479 B/op [Average]
[info]   (min, avg, max) = (486.570, 488.457, 492.186), stdev = 2.202
[info]   CI (99.9%): [479.978, 496.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1290057.384 ops/s
[info] # Warmup Iteration   2: 2267066.306 ops/s
[info] # Warmup Iteration   3: 2297732.099 ops/s
[info] # Warmup Iteration   4: 2301039.138 ops/s
[info] # Warmup Iteration   5: 2299105.516 ops/s
[info] Iteration   1: 2296537.130 ops/s
[info]                  ·gc.alloc.rate:      0.011 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2301240.148 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2299563.579 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2300386.179 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.117 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2296568.494 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2298859.106 ±(99.9%) 8422.282 ops/s [Average]
[info]   (min, avg, max) = (2296537.130, 2298859.106, 2301240.148), stdev = 2187.240
[info]   CI (99.9%): [2290436.824, 2307281.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.037 ±(99.9%) 0.289 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.037, 0.170), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.025 ±(99.9%) 0.198 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.025, 0.117), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1040930.857 ops/s
[info] # Warmup Iteration   2: 1851682.074 ops/s
[info] # Warmup Iteration   3: 2020397.973 ops/s
[info] # Warmup Iteration   4: 2029538.118 ops/s
[info] # Warmup Iteration   5: 2005945.154 ops/s
[info] Iteration   1: 2020601.888 ops/s
[info]                  ·gc.alloc.rate:            883.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 524.588 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1991994.507 ops/s
[info]                  ·gc.alloc.rate:            879.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       694.667 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 532.119 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2009699.274 ops/s
[info]                  ·gc.alloc.rate:            881.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       688.880 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1049.052 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   4: 2014982.927 ops/s
[info]                  ·gc.alloc.rate:            881.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       688.356 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 526.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1981949.886 ops/s
[info]                  ·gc.alloc.rate:            866.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 534.792 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2003845.696 ±(99.9%) 62652.871 ops/s [Average]
[info]   (min, avg, max) = (1981949.886, 2003845.696, 2020601.888), stdev = 16270.752
[info]   CI (99.9%): [1941192.825, 2066498.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   878.203 ±(99.9%) 26.055 MB/sec [Average]
[info]   (min, avg, max) = (866.381, 878.203, 883.184), stdev = 6.766
[info]   CI (99.9%): [852.148, 904.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   689.581 ±(99.9%) 11.036 B/op [Average]
[info]   (min, avg, max) = (688.000, 689.581, 694.667), stdev = 2.866
[info]   CI (99.9%): [678.545, 700.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   807.101 ±(99.9%) 1151.150 MB/sec [Average]
[info]   (min, avg, max) = (673.380, 807.101, 1341.879), stdev = 298.950
[info]   CI (99.9%): [≈ 0, 1958.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   633.315 ±(99.9%) 895.054 B/op [Average]
[info]   (min, avg, max) = (524.588, 633.315, 1049.052), stdev = 232.443
[info]   CI (99.9%): [≈ 0, 1528.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.200, 17.000), stdev = 3.834
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1315.258 ops/s
[info] # Warmup Iteration   2: 5644.342 ops/s
[info] # Warmup Iteration   3: 6881.356 ops/s
[info] # Warmup Iteration   4: 6478.502 ops/s
[info] # Warmup Iteration   5: 6986.580 ops/s
[info] Iteration   1: 6980.139 ops/s
[info]                  ·gc.alloc.rate:            835.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       188302.458 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 151834.766 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 6964.626 ops/s
[info]                  ·gc.alloc.rate:            834.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       188638.925 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 152161.667 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 6950.437 ops/s
[info]                  ·gc.alloc.rate:            831.862 MB/sec
[info]                  ·gc.alloc.rate.norm:       188313.292 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 304979.959 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   4: 6993.868 ops/s
[info]                  ·gc.alloc.rate:            836.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       188264.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 151530.923 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 6973.967 ops/s
[info]                  ·gc.alloc.rate:            836.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       188760.468 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 151965.358 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   6972.607 ±(99.9%) 62.855 ops/s [Average]
[info]   (min, avg, max) = (6950.437, 6972.607, 6993.868), stdev = 16.323
[info]   CI (99.9%): [6909.753, 7035.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   834.964 ±(99.9%) 7.321 MB/sec [Average]
[info]   (min, avg, max) = (831.862, 834.964, 836.645), stdev = 1.901
[info]   CI (99.9%): [827.643, 842.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   188455.840 ±(99.9%) 875.851 B/op [Average]
[info]   (min, avg, max) = (188264.058, 188455.840, 188760.468), stdev = 227.456
[info]   CI (99.9%): [187579.989, 189331.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   808.149 ±(99.9%) 1160.411 MB/sec [Average]
[info]   (min, avg, max) = (673.296, 808.149, 1347.230), stdev = 301.355
[info]   CI (99.9%): [≈ 0, 1968.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   182494.534 ±(99.9%) 263660.589 B/op [Average]
[info]   (min, avg, max) = (151530.923, 182494.534, 304979.959), stdev = 68471.818
[info]   CI (99.9%): [≈ 0, 446155.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.000, 17.000), stdev = 3.937
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 509.655 ops/s
[info] # Warmup Iteration   2: 12995.960 ops/s
[info] # Warmup Iteration   3: 16249.630 ops/s
[info] # Warmup Iteration   4: 16407.506 ops/s
[info] # Warmup Iteration   5: 16468.193 ops/s
[info] Iteration   1: 15713.521 ops/s
[info]                  ·gc.alloc.rate:            207.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       20796.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67316.484 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 16573.187 ops/s
[info]                  ·gc.alloc.rate:      218.254 MB/sec
[info]                  ·gc.alloc.rate.norm: 20728.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16178.300 ops/s
[info]                  ·gc.alloc.rate:      223.853 MB/sec
[info]                  ·gc.alloc.rate.norm: 21780.247 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 16372.295 ops/s
[info]                  ·gc.alloc.rate:            215.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       20712.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64607.547 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 16589.369 ops/s
[info]                  ·gc.alloc.rate:      218.458 MB/sec
[info]                  ·gc.alloc.rate.norm: 20728.114 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   16285.334 ±(99.9%) 1390.085 ops/s [Average]
[info]   (min, avg, max) = (15713.521, 16285.334, 16589.369), stdev = 361.001
[info]   CI (99.9%): [14895.250, 17675.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   216.731 ±(99.9%) 22.802 MB/sec [Average]
[info]   (min, avg, max) = (207.644, 216.731, 223.853), stdev = 5.922
[info]   CI (99.9%): [193.929, 239.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20948.887 ±(99.9%) 1793.911 B/op [Average]
[info]   (min, avg, max) = (20712.029, 20948.887, 21780.247), stdev = 465.873
[info]   CI (99.9%): [19154.975, 22742.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.836 ±(99.9%) 1417.496 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.836, 672.142), stdev = 368.119
[info]   CI (99.9%): [≈ 0, 1686.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   26384.806 ±(99.9%) 139168.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26384.806, 67316.484), stdev = 36141.576
[info]   CI (99.9%): [≈ 0, 165553.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 11.000), stdev = 5.762
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11248.497 ops/s
[info] # Warmup Iteration   2: 19687.822 ops/s
[info] # Warmup Iteration   3: 19749.811 ops/s
[info] # Warmup Iteration   4: 18010.413 ops/s
[info] # Warmup Iteration   5: 19824.051 ops/s
[info] Iteration   1: 19731.672 ops/s
[info]                  ·gc.alloc.rate:      188.356 MB/sec
[info]                  ·gc.alloc.rate.norm: 15025.412 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19588.556 ops/s
[info]                  ·gc.alloc.rate:            186.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       14981.561 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54216.389 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 19571.995 ops/s
[info]                  ·gc.alloc.rate:      198.478 MB/sec
[info]                  ·gc.alloc.rate.norm: 15962.084 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19833.723 ops/s
[info]                  ·gc.alloc.rate:      186.492 MB/sec
[info]                  ·gc.alloc.rate.norm: 14800.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19826.237 ops/s
[info]                  ·gc.alloc.rate:      186.432 MB/sec
[info]                  ·gc.alloc.rate.norm: 14800.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   19710.437 ±(99.9%) 483.564 ops/s [Average]
[info]   (min, avg, max) = (19571.995, 19710.437, 19833.723), stdev = 125.580
[info]   CI (99.9%): [19226.873, 20194.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   189.251 ±(99.9%) 20.109 MB/sec [Average]
[info]   (min, avg, max) = (186.432, 189.251, 198.478), stdev = 5.222
[info]   CI (99.9%): [169.142, 209.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15113.820 ±(99.9%) 1868.456 B/op [Average]
[info]   (min, avg, max) = (14800.021, 15113.820, 15962.084), stdev = 485.232
[info]   CI (99.9%): [13245.364, 16982.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   134.981 ±(99.9%) 1162.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.981, 674.903), stdev = 301.826
[info]   CI (99.9%): [≈ 0, 1297.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10843.278 ±(99.9%) 93363.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10843.278, 54216.389), stdev = 24246.306
[info]   CI (99.9%): [≈ 0, 104207.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 7.000), stdev = 3.130
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246.751 ops/s
[info] # Warmup Iteration   2: 2537.570 ops/s
[info] # Warmup Iteration   3: 4641.050 ops/s
[info] # Warmup Iteration   4: 5826.228 ops/s
[info] # Warmup Iteration   5: 5851.354 ops/s
[info] Iteration   1: 5774.321 ops/s
[info]                  ·gc.alloc.rate:                   1584.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              431905.325 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2017.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        549885.163 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 181.540 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         30.000 ms
[info] Iteration   2: 5859.884 ops/s
[info]                  ·gc.alloc.rate:                   1608.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              431921.810 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        361213.947 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 894.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   3: 5857.279 ops/s
[info]                  ·gc.alloc.rate:                   1606.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              431831.586 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2031.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        546032.664 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1610.716 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 5986.129 ops/s
[info]                  ·gc.alloc.rate:            1641.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       431757.524 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 358280.978 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 5948.313 ops/s
[info]                  ·gc.alloc.rate:                                  1631.591 MB/sec
[info]                  ·gc.alloc.rate.norm:                             431736.069 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.438 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       360569.159 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   5885.185 ±(99.9%) 321.503 ops/s [Average]
[info]   (min, avg, max) = (5774.321, 5885.185, 5986.129), stdev = 83.493
[info]   CI (99.9%): [5563.682, 6206.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1614.590 ±(99.9%) 87.201 MB/sec [Average]
[info]   (min, avg, max) = (1584.390, 1614.590, 1641.963), stdev = 22.646
[info]   CI (99.9%): [1527.389, 1701.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   431830.463 ±(99.9%) 323.203 B/op [Average]
[info]   (min, avg, max) = (431736.069, 431830.463, 431921.810), stdev = 83.935
[info]   CI (99.9%): [431507.260, 432153.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.688 ±(99.9%) 14.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.688, 8.438), stdev = 3.774
[info]   CI (99.9%): [≈ 0, 16.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1623.821 ±(99.9%) 1409.146 MB/sec [Average]
[info]   (min, avg, max) = (1344.771, 1623.821, 2031.976), stdev = 365.951
[info]   CI (99.9%): [214.675, 3032.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   435196.382 ±(99.9%) 396433.098 B/op [Average]
[info]   (min, avg, max) = (358280.978, 435196.382, 549885.163), stdev = 102952.417
[info]   CI (99.9%): [38763.284, 831629.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.998 ±(99.9%) 10.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.998, 5.994), stdev = 2.622
[info]   CI (99.9%): [≈ 0, 12.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   537.359 ±(99.9%) 2711.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 537.359, 1610.716), stdev = 704.235
[info]   CI (99.9%): [≈ 0, 3249.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   80.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 16.000, 30.000), stdev = 10.025
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_87620646/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 5701.052 ops/s
[info] # Warmup Iteration   2: 43590.899 ops/s
[info] # Warmup Iteration   3: 47494.610 ops/s
[info] # Warmup Iteration   4: 47558.518 ops/s
[info] # Warmup Iteration   5: 47669.202 ops/s
[info] Iteration   1: 47937.118 ops/s
[info]                  ·gc.alloc.rate:      601.962 MB/sec
[info]                  ·gc.alloc.rate.norm: 19764.075 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47541.386 ops/s
[info]                  ·gc.alloc.rate:            598.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       19818.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22250.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 47816.293 ops/s
[info]                  ·gc.alloc.rate:            600.520 MB/sec
[info]                  ·gc.alloc.rate.norm:       19765.852 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22122.597 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 47808.103 ops/s
[info]                  ·gc.alloc.rate:            600.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       19763.934 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22126.298 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 47845.959 ops/s
[info]                  ·gc.alloc.rate:            600.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       19764.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22109.190 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   47789.772 ±(99.9%) 569.852 ops/s [Average]
[info]   (min, avg, max) = (47541.386, 47789.772, 47937.118), stdev = 147.989
[info]   CI (99.9%): [47219.920, 48359.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   600.496 ±(99.9%) 4.573 MB/sec [Average]
[info]   (min, avg, max) = (598.681, 600.496, 601.962), stdev = 1.188
[info]   CI (99.9%): [595.923, 605.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19775.186 ±(99.9%) 92.270 B/op [Average]
[info]   (min, avg, max) = (19763.934, 19775.186, 19818.027), stdev = 23.962
[info]   CI (99.9%): [19682.916, 19867.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.731 ±(99.9%) 1157.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.731, 672.232), stdev = 300.601
[info]   CI (99.9%): [≈ 0, 1695.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17721.631 ±(99.9%) 38147.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17721.631, 22250.072), stdev = 9906.857
[info]   CI (99.9%): [≈ 0, 55869.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.800, 10.000), stdev = 4.382
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38009.933 ops/s
[info] # Warmup Iteration   2: 79737.589 ops/s
[info] # Warmup Iteration   3: 80806.098 ops/s
[info] # Warmup Iteration   4: 80941.165 ops/s
[info] # Warmup Iteration   5: 80945.651 ops/s
[info] Iteration   1: 81850.396 ops/s
[info]                  ·gc.alloc.rate:      547.307 MB/sec
[info]                  ·gc.alloc.rate.norm: 10523.277 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 81015.211 ops/s
[info]                  ·gc.alloc.rate:                   541.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              10520.171 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13082.936 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.941 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 80847.616 ops/s
[info]                  ·gc.alloc.rate:            541.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       10546.379 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13122.761 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 80956.102 ops/s
[info]                  ·gc.alloc.rate:            541.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       10520.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13092.146 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 80973.959 ops/s
[info]                  ·gc.alloc.rate:            541.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       10520.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13089.721 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   81128.657 ±(99.9%) 1571.785 ops/s [Average]
[info]   (min, avg, max) = (80847.616, 81128.657, 81850.396), stdev = 408.188
[info]   CI (99.9%): [79556.871, 82700.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   542.660 ±(99.9%) 10.033 MB/sec [Average]
[info]   (min, avg, max) = (541.283, 542.660, 547.307), stdev = 2.606
[info]   CI (99.9%): [532.627, 552.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10525.967 ±(99.9%) 44.263 B/op [Average]
[info]   (min, avg, max) = (10520.005, 10525.967, 10546.379), stdev = 11.495
[info]   CI (99.9%): [10481.704, 10570.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.971 ±(99.9%) 1160.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.971, 674.170), stdev = 301.294
[info]   CI (99.9%): [≈ 0, 1699.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10477.513 ±(99.9%) 22553.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10477.513, 13122.761), stdev = 5857.128
[info]   CI (99.9%): [≈ 0, 33031.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.588 ±(99.9%) 22.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.588, 12.941), stdev = 5.787
[info]   CI (99.9%): [≈ 0, 24.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.400, 8.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36547.228 ops/s
[info] # Warmup Iteration   2: 86105.351 ops/s
[info] # Warmup Iteration   3: 87381.779 ops/s
[info] # Warmup Iteration   4: 87276.944 ops/s
[info] # Warmup Iteration   5: 87778.878 ops/s
[info] Iteration   1: 87791.227 ops/s
[info]                  ·gc.alloc.rate:      23.652 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 87791.352 ops/s
[info]                  ·gc.alloc.rate:      23.647 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87847.405 ops/s
[info]                  ·gc.alloc.rate:      23.668 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 87851.151 ops/s
[info]                  ·gc.alloc.rate:      23.989 MB/sec
[info]                  ·gc.alloc.rate.norm: 429.744 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 87706.035 ops/s
[info]                  ·gc.alloc.rate:      24.592 MB/sec
[info]                  ·gc.alloc.rate.norm: 441.296 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   87797.434 ±(99.9%) 226.272 ops/s [Average]
[info]   (min, avg, max) = (87706.035, 87797.434, 87851.151), stdev = 58.762
[info]   CI (99.9%): [87571.162, 88023.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   23.910 ±(99.9%) 1.572 MB/sec [Average]
[info]   (min, avg, max) = (23.647, 23.910, 24.592), stdev = 0.408
[info]   CI (99.9%): [22.338, 25.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   428.611 ±(99.9%) 28.935 B/op [Average]
[info]   (min, avg, max) = (424.005, 428.611, 441.296), stdev = 7.514
[info]   CI (99.9%): [399.676, 457.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140397.502 ops/s
[info] # Warmup Iteration   2: 262525.328 ops/s
[info] # Warmup Iteration   3: 271137.693 ops/s
[info] # Warmup Iteration   4: 271412.806 ops/s
[info] # Warmup Iteration   5: 273608.661 ops/s
[info] Iteration   1: 270487.434 ops/s
[info]                  ·gc.alloc.rate:            1446.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       8417.846 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2022.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11767.555 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  25.000 ms
[info] Iteration   2: 269936.303 ops/s
[info]                  ·gc.alloc.rate:                   1443.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              8417.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7860.873 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.535 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 271657.847 ops/s
[info]                  ·gc.alloc.rate:                   1452.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              8417.633 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7849.992 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 275380.247 ops/s
[info]                  ·gc.alloc.rate:                                  1475.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8435.985 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7789.254 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 276942.517 ops/s
[info]                  ·gc.alloc.rate:            1481.431 MB/sec
[info]                  ·gc.alloc.rate.norm:       8417.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7745.413 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   272880.870 ±(99.9%) 11967.801 ops/s [Average]
[info]   (min, avg, max) = (269936.303, 272880.870, 276942.517), stdev = 3108.000
[info]   CI (99.9%): [260913.069, 284848.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1460.124 ±(99.9%) 66.619 MB/sec [Average]
[info]   (min, avg, max) = (1443.866, 1460.124, 1481.431), stdev = 17.301
[info]   CI (99.9%): [1393.505, 1526.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8421.264 ±(99.9%) 31.714 B/op [Average]
[info]   (min, avg, max) = (8417.032, 8421.264, 8435.985), stdev = 8.236
[info]   CI (99.9%): [8389.550, 8452.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.141), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1490.285 ±(99.9%) 1145.438 MB/sec [Average]
[info]   (min, avg, max) = (1348.461, 1490.285, 2022.300), stdev = 297.467
[info]   CI (99.9%): [344.847, 2635.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8602.618 ±(99.9%) 6815.156 B/op [Average]
[info]   (min, avg, max) = (7745.413, 8602.618, 11767.555), stdev = 1769.874
[info]   CI (99.9%): [1787.462, 15417.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 8.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 4.663), stdev = 2.128
[info]   CI (99.9%): [≈ 0, 9.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.510 ±(99.9%) 47.516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.510, 27.016), stdev = 12.340
[info]   CI (99.9%): [≈ 0, 56.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.400, 25.000), stdev = 9.182
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111922.366 ops/s
[info] # Warmup Iteration   2: 374675.131 ops/s
[info] # Warmup Iteration   3: 395253.341 ops/s
[info] # Warmup Iteration   4: 391372.642 ops/s
[info] # Warmup Iteration   5: 392588.007 ops/s
[info] Iteration   1: 397131.693 ops/s
[info]                  ·gc.alloc.rate:      446.031 MB/sec
[info]                  ·gc.alloc.rate.norm: 1768.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 386826.055 ops/s
[info]                  ·gc.alloc.rate:            437.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       1781.630 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2737.372 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 388749.426 ops/s
[info]                  ·gc.alloc.rate:            439.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       1778.601 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2723.840 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 395548.552 ops/s
[info]                  ·gc.alloc.rate:      444.279 MB/sec
[info]                  ·gc.alloc.rate.norm: 1768.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 389538.652 ops/s
[info]                  ·gc.alloc.rate:            442.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       1786.795 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2718.268 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   391558.876 ±(99.9%) 17365.049 ops/s [Average]
[info]   (min, avg, max) = (386826.055, 391558.876, 397131.693), stdev = 4509.648
[info]   CI (99.9%): [374193.826, 408923.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   441.934 ±(99.9%) 13.151 MB/sec [Average]
[info]   (min, avg, max) = (437.814, 441.934, 446.031), stdev = 3.415
[info]   CI (99.9%): [428.783, 455.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1776.606 ±(99.9%) 32.281 B/op [Average]
[info]   (min, avg, max) = (1768.001, 1776.606, 1786.795), stdev = 8.383
[info]   CI (99.9%): [1744.325, 1808.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.647 ±(99.9%) 1418.878 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.647, 672.888), stdev = 368.478
[info]   CI (99.9%): [≈ 0, 1822.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1635.896 ±(99.9%) 5750.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1635.896, 2737.372), stdev = 1493.378
[info]   CI (99.9%): [≈ 0, 7386.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.800, 10.000), stdev = 5.310
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 708920.214 ops/s
[info] # Warmup Iteration   2: 983078.243 ops/s
[info] # Warmup Iteration   3: 932115.347 ops/s
[info] # Warmup Iteration   4: 983951.838 ops/s
[info] # Warmup Iteration   5: 987657.759 ops/s
[info] Iteration   1: 976164.992 ops/s
[info]                  ·gc.alloc.rate:            510.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1086.893 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 992316.052 ops/s
[info]                  ·gc.alloc.rate:            520.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       826.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1069.207 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 994219.943 ops/s
[info]                  ·gc.alloc.rate:            520.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.494 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1067.182 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 987698.894 ops/s
[info]                  ·gc.alloc.rate:      517.456 MB/sec
[info]                  ·gc.alloc.rate.norm: 824.530 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 995910.513 ops/s
[info]                  ·gc.alloc.rate:            521.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1065.288 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   989262.079 ±(99.9%) 30568.758 ops/s [Average]
[info]   (min, avg, max) = (976164.992, 989262.079, 995910.513), stdev = 7938.609
[info]   CI (99.9%): [958693.321, 1019830.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   518.277 ±(99.9%) 16.774 MB/sec [Average]
[info]   (min, avg, max) = (510.993, 518.277, 521.412), stdev = 4.356
[info]   CI (99.9%): [501.503, 535.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.637 ±(99.9%) 3.425 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.637, 826.161), stdev = 0.889
[info]   CI (99.9%): [821.212, 828.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.226 ±(99.9%) 1160.724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.226, 674.094), stdev = 301.436
[info]   CI (99.9%): [≈ 0, 1699.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   857.714 ±(99.9%) 1846.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 857.714, 1086.893), stdev = 479.554
[info]   CI (99.9%): [≈ 0, 2704.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.000, 8.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17793.092 ops/s
[info] # Warmup Iteration   2: 68882.674 ops/s
[info] # Warmup Iteration   3: 67872.349 ops/s
[info] # Warmup Iteration   4: 72662.461 ops/s
[info] # Warmup Iteration   5: 71356.540 ops/s
[info] Iteration   1: 72281.695 ops/s
[info]                  ·gc.alloc.rate:                                  2231.853 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48607.729 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       44412.871 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                87.027 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 72441.172 ops/s
[info]                  ·gc.alloc.rate:            2235.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       48561.777 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44409.971 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 72691.374 ops/s
[info]                  ·gc.alloc.rate:            2242.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       48560.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44260.934 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 72154.063 ops/s
[info]                  ·gc.alloc.rate:            2228.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       48599.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59453.693 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 72575.878 ops/s
[info]                  ·gc.alloc.rate:                                  2240.097 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48584.941 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       44332.274 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   72428.836 ±(99.9%) 834.467 ops/s [Average]
[info]   (min, avg, max) = (72154.063, 72428.836, 72691.374), stdev = 216.708
[info]   CI (99.9%): [71594.369, 73263.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2235.639 ±(99.9%) 22.508 MB/sec [Average]
[info]   (min, avg, max) = (2228.463, 2235.639, 2242.752), stdev = 5.845
[info]   CI (99.9%): [2213.132, 2258.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   48582.735 ±(99.9%) 82.973 B/op [Average]
[info]   (min, avg, max) = (48560.006, 48582.735, 48607.729), stdev = 21.548
[info]   CI (99.9%): [48499.762, 48665.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.038 ±(99.9%) 0.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.177), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2179.518 ±(99.9%) 1176.762 MB/sec [Average]
[info]   (min, avg, max) = (2039.244, 2179.518, 2726.182), stdev = 305.601
[info]   CI (99.9%): [1002.756, 3356.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   47373.949 ±(99.9%) 26003.681 B/op [Average]
[info]   (min, avg, max) = (44260.934, 47373.949, 59453.693), stdev = 6753.073
[info]   CI (99.9%): [21370.268, 73377.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   17.405 ±(99.9%) 149.866 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.405, 87.027), stdev = 38.920
[info]   CI (99.9%): [≈ 0, 167.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153886.054 ops/s
[info] # Warmup Iteration   2: 285432.767 ops/s
[info] # Warmup Iteration   3: 296530.974 ops/s
[info] # Warmup Iteration   4: 283919.180 ops/s
[info] # Warmup Iteration   5: 295263.134 ops/s
[info] Iteration   1: 299072.646 ops/s
[info]                  ·gc.alloc.rate:      475.761 MB/sec
[info]                  ·gc.alloc.rate.norm: 2504.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 296537.546 ops/s
[info]                  ·gc.alloc.rate:            472.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       2505.830 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3577.985 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 293715.415 ops/s
[info]                  ·gc.alloc.rate:                   470.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              2521.268 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3608.677 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.569 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 287275.946 ops/s
[info]                  ·gc.alloc.rate:            460.365 MB/sec
[info]                  ·gc.alloc.rate.norm:       2522.397 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3693.287 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 275012.600 ops/s
[info]                  ·gc.alloc.rate:      437.559 MB/sec
[info]                  ·gc.alloc.rate.norm: 2504.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   290322.830 ±(99.9%) 37053.233 ops/s [Average]
[info]   (min, avg, max) = (275012.600, 290322.830, 299072.646), stdev = 9622.607
[info]   CI (99.9%): [253269.598, 327376.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   463.232 ±(99.9%) 59.459 MB/sec [Average]
[info]   (min, avg, max) = (437.559, 463.232, 475.761), stdev = 15.441
[info]   CI (99.9%): [403.773, 522.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2511.499 ±(99.9%) 36.467 B/op [Average]
[info]   (min, avg, max) = (2504.001, 2511.499, 2522.397), stdev = 9.470
[info]   CI (99.9%): [2475.032, 2547.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.281 ±(99.9%) 1421.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.281, 674.065), stdev = 369.057
[info]   CI (99.9%): [≈ 0, 1825.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2175.990 ±(99.9%) 7650.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2175.990, 3693.287), stdev = 1986.847
[info]   CI (99.9%): [≈ 0, 9826.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.714 ±(99.9%) 6.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.714, 3.569), stdev = 1.596
[info]   CI (99.9%): [≈ 0, 6.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 8.000), stdev = 4.382
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242655.843 ops/s
[info] # Warmup Iteration   2: 696447.066 ops/s
[info] # Warmup Iteration   3: 691350.190 ops/s
[info] # Warmup Iteration   4: 696930.059 ops/s
[info] # Warmup Iteration   5: 676724.783 ops/s
[info] Iteration   1: 708549.667 ops/s
[info]                  ·gc.alloc.rate:            541.856 MB/sec
[info]                  ·gc.alloc.rate.norm:       1203.814 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1494.440 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 709461.780 ops/s
[info]                  ·gc.alloc.rate:            541.123 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.593 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1492.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 706065.593 ops/s
[info]                  ·gc.alloc.rate:            539.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       1202.509 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1498.404 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 716191.938 ops/s
[info]                  ·gc.alloc.rate:      546.049 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 710632.708 ops/s
[info]                  ·gc.alloc.rate:            541.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1490.062 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   710180.337 ±(99.9%) 14465.629 ops/s [Average]
[info]   (min, avg, max) = (706065.593, 710180.337, 716191.938), stdev = 3756.678
[info]   CI (99.9%): [695714.708, 724645.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   542.085 ±(99.9%) 9.205 MB/sec [Average]
[info]   (min, avg, max) = (539.621, 542.085, 546.049), stdev = 2.390
[info]   CI (99.9%): [532.880, 551.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1201.383 ±(99.9%) 6.563 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1201.383, 1203.814), stdev = 1.705
[info]   CI (99.9%): [1194.820, 1207.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.098 ±(99.9%) 1158.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.098, 672.731), stdev = 300.806
[info]   CI (99.9%): [≈ 0, 1696.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1195.078 ±(99.9%) 2572.523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1195.078, 1498.404), stdev = 668.076
[info]   CI (99.9%): [≈ 0, 3767.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.400, 10.000), stdev = 4.159
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1040165.329 ops/s
[info] # Warmup Iteration   2: 1341827.190 ops/s
[info] # Warmup Iteration   3: 1357480.565 ops/s
[info] # Warmup Iteration   4: 1355263.246 ops/s
[info] # Warmup Iteration   5: 1366218.806 ops/s
[info] Iteration   1: 1363588.413 ops/s
[info]                  ·gc.alloc.rate:            632.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       729.821 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 778.081 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1298110.298 ops/s
[info]                  ·gc.alloc.rate:            615.941 MB/sec
[info]                  ·gc.alloc.rate.norm:       746.810 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 817.342 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1351371.402 ops/s
[info]                  ·gc.alloc.rate:            626.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       729.661 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 785.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1367207.805 ops/s
[info]                  ·gc.alloc.rate:            632.988 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.774 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 776.024 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 1367723.901 ops/s
[info]                  ·gc.alloc.rate:            632.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 775.734 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1349600.364 ±(99.9%) 113716.524 ops/s [Average]
[info]   (min, avg, max) = (1298110.298, 1349600.364, 1367723.901), stdev = 29531.820
[info]   CI (99.9%): [1235883.840, 1463316.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   628.032 ±(99.9%) 28.008 MB/sec [Average]
[info]   (min, avg, max) = (615.941, 628.032, 632.988), stdev = 7.274
[info]   CI (99.9%): [600.024, 656.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   732.613 ±(99.9%) 30.690 B/op [Average]
[info]   (min, avg, max) = (728.000, 732.613, 746.810), stdev = 7.970
[info]   CI (99.9%): [701.924, 763.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.053 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (674.028, 674.053, 674.113), stdev = 0.034
[info]   CI (99.9%): [673.922, 674.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   786.460 ±(99.9%) 68.061 B/op [Average]
[info]   (min, avg, max) = (775.734, 786.460, 817.342), stdev = 17.675
[info]   CI (99.9%): [718.399, 854.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1069607.589 ops/s
[info] # Warmup Iteration   2: 1411025.267 ops/s
[info] # Warmup Iteration   3: 1488202.917 ops/s
[info] # Warmup Iteration   4: 1487500.749 ops/s
[info] # Warmup Iteration   5: 1491277.443 ops/s
[info] Iteration   1: 1488153.673 ops/s
[info]                  ·gc.alloc.rate:      1.879 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.988 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1489331.881 ops/s
[info]                  ·gc.alloc.rate:      0.935 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.988 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1490985.286 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1491009.122 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1490965.537 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1490089.100 ±(99.9%) 4997.311 ops/s [Average]
[info]   (min, avg, max) = (1488153.673, 1490089.100, 1491009.122), stdev = 1297.786
[info]   CI (99.9%): [1485091.789, 1495086.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.563 ±(99.9%) 3.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.563, 1.879), stdev = 0.840
[info]   CI (99.9%): [≈ 0, 3.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.595 ±(99.9%) 3.420 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.595, 1.988), stdev = 0.888
[info]   CI (99.9%): [≈ 0, 4.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180250.888 ops/s
[info] # Warmup Iteration   2: 394393.924 ops/s
[info] # Warmup Iteration   3: 397532.083 ops/s
[info] # Warmup Iteration   4: 404577.723 ops/s
[info] # Warmup Iteration   5: 402247.293 ops/s
[info] Iteration   1: 402914.033 ops/s
[info]                  ·gc.alloc.rate:            598.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.618 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2630.716 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 386025.462 ops/s
[info]                  ·gc.alloc.rate:            577.646 MB/sec
[info]                  ·gc.alloc.rate.norm:       2354.468 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2745.674 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 397808.278 ops/s
[info]                  ·gc.alloc.rate:            590.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2664.518 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 393050.732 ops/s
[info]                  ·gc.alloc.rate:                   583.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2694.053 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.667 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 378702.127 ops/s
[info]                  ·gc.alloc.rate:            562.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.803 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2798.949 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   391700.126 ±(99.9%) 36835.346 ops/s [Average]
[info]   (min, avg, max) = (378702.127, 391700.126, 402914.033), stdev = 9566.022
[info]   CI (99.9%): [354864.780, 428535.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   582.349 ±(99.9%) 52.391 MB/sec [Average]
[info]   (min, avg, max) = (562.222, 582.349, 598.071), stdev = 13.606
[info]   CI (99.9%): [529.958, 634.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2340.005 ±(99.9%) 31.159 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2340.005, 2354.468), stdev = 8.092
[info]   CI (99.9%): [2308.847, 2371.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   673.320 ±(99.9%) 1.164 MB/sec [Average]
[info]   (min, avg, max) = (672.813, 673.320, 673.625), stdev = 0.302
[info]   CI (99.9%): [672.156, 674.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2706.782 ±(99.9%) 256.449 B/op [Average]
[info]   (min, avg, max) = (2630.716, 2706.782, 2798.949), stdev = 66.599
[info]   CI (99.9%): [2450.333, 2963.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.533 ±(99.9%) 4.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.667), stdev = 1.193
[info]   CI (99.9%): [≈ 0, 5.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:54:21
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                               (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                                     N/A  thrpt    5    684633.072 ±   40597.123   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                      N/A  thrpt    5      1891.186 ±     109.506  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                                 N/A  thrpt    5      4347.872 ±      26.442    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.008 ±       0.073  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5         0.020 ±       0.169    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      1901.567 ±    1160.378  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5      4369.085 ±    2595.948    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                         N/A  thrpt    5         1.598 ±       8.621  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                    N/A  thrpt    5         3.720 ±      20.076    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                           N/A  thrpt    5        14.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                            N/A  thrpt    5        47.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                              N/A  thrpt    5   1484074.730 ±   97748.625   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                               N/A  thrpt    5       989.871 ±      67.271  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5      1049.878 ±      16.167    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1076.242 ±    1418.401  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      1139.634 ±    1479.377    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.666 ±       4.442  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         0.700 ±       4.658    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                    N/A  thrpt    5         8.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                     N/A  thrpt    5        78.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                             N/A  thrpt    5   5423798.218 ±  171216.928   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                              N/A  thrpt    5       358.722 ±      10.592  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5       104.101 ±       0.868    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       404.438 ±    1421.655  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5       117.310 ±     412.370    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                   N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                    N/A  thrpt    5        22.000                    ms
[info] AdtBenchmark.readPlayJson                                                                                  N/A  thrpt    5    279400.084 ±    7980.669   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                   N/A  thrpt    5      2279.631 ±      63.661  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                              N/A  thrpt    5     12842.490 ±      11.889    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5      2176.609 ±    1182.932  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5     12260.045 ±    6566.948    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                      N/A  thrpt    5         1.732 ±      12.246  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                 N/A  thrpt    5         9.743 ±      69.019    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                        N/A  thrpt    5        16.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                         N/A  thrpt    5        51.000                    ms
[info] AdtBenchmark.writeCirce                                                                                    N/A  thrpt    5    744799.035 ±   19567.182   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      2018.456 ±      53.328  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4265.545 ±       5.051    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.075 ±       0.644  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.159 ±       1.365    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      2041.155 ±      26.788  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4313.627 ±      89.368    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.465 ±      12.616  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         3.120 ±      26.867    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                          N/A  thrpt    5        15.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                           N/A  thrpt    5        43.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                             N/A  thrpt    5   2326840.191 ±  153654.565   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5       969.787 ±      63.850  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5       656.062 ±       0.342    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       942.024 ±    1419.076  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5       638.825 ±     980.321    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.799 ±       5.560  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         0.548 ±       3.813    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                   N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                    N/A  thrpt    5        65.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                            N/A  thrpt    5  13199915.363 ±  901515.367   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       672.518 ±      38.191  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5        80.193 ±       1.228    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       673.989 ±       1.253  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5        80.385 ±       5.564    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5         0.016 ±       0.137    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                                  N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                   N/A  thrpt    5        39.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                                    N/A  thrpt    5  14637993.536 ±   21032.030   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                     N/A  thrpt    5         0.010 ±       0.087  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                N/A  thrpt    5         0.001 ±       0.009    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                          N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                                 N/A  thrpt    5    544169.955 ±   22495.565   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5      1641.745 ±      68.593  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5      4748.426 ±      29.192    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.001 ±       0.008  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.003 ±       0.022    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1626.244 ±    1430.389  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      4706.901 ±    4207.083    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         1.732 ±       9.178  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         5.022 ±      26.643    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                       N/A  thrpt    5        12.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                        N/A  thrpt    5        60.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                                 N/A  thrpt    5   1872330.326 ±   66114.586   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      2390.158 ±      82.197  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5      2009.229 ±       6.301    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.001 ±       0.006  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.001 ±       0.005    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      2316.329 ±    1438.458  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      1948.633 ±    1253.008    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.533 ±       4.588  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         0.447 ±       3.847    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        17.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        33.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                           N/A  thrpt    5   7917405.328 ±  655745.441   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       966.567 ±      78.111  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5       192.166 ±       0.920    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       938.217 ±    1412.756  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       187.289 ±     291.028    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5         0.132 ±       1.138    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         7.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        84.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                          N/A  thrpt    5   2632197.397 ±  190055.334   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5      1646.713 ±     118.285  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5       984.662 ±       4.685    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.037 ±       0.319  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         0.022 ±       0.189    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5      1626.124 ±    1414.932  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5       974.496 ±     891.889    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.732 ±       9.178  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         1.033 ±       5.468    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        60.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                         N/A  thrpt    5  11726079.195 ± 1342355.684   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5      1492.369 ±     165.863  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5       200.306 ±       0.955    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              N/A  thrpt    5         0.022 ±       0.187  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         N/A  thrpt    5         0.003 ±       0.026    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5      1492.009 ±    1148.550  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       199.729 ±     134.667    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         1.465 ±       8.189  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         0.192 ±       1.065    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        47.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                              N/A  thrpt    5   1042854.530 ±   20808.800   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      2518.549 ±      48.748  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5      3801.219 ±       4.665    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.011 ±       0.087  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5         0.016 ±       0.131    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      2585.465 ±    1165.924  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      3903.635 ±    1806.793    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         1.732 ±      14.911  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         2.628 ±      22.628    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        19.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        50.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                                N/A  thrpt    5   2146841.151 ±   48763.305   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                                 N/A  thrpt    5      1789.537 ±      40.521  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            N/A  thrpt    5      1312.033 ±       0.282    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.032 ±       0.273  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.023 ±       0.198    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1766.753 ±    1448.140  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      1295.579 ±    1066.717    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         1.599 ±       8.623  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         1.176 ±       6.341    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                      N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                       N/A  thrpt    5        39.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                          N/A  thrpt    5  18007382.780 ± 1216810.911   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           N/A  thrpt    5       549.562 ±      38.640  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      N/A  thrpt    5        48.035 ±       0.218    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       536.629 ±    1155.135  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5        46.903 ±     101.043    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                                N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                                 N/A  thrpt    5        47.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                         N/A  thrpt    5   5673824.732 ±  314960.998   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          N/A  thrpt    5      1558.123 ±      83.968  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5       432.253 ±       2.132    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              N/A  thrpt    5         0.003 ±       0.022  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         N/A  thrpt    5         0.001 ±       0.006    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5      1626.555 ±    1424.493  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       451.655 ±     403.946    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         1.865 ±       8.773  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         0.519 ±       2.439    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                               N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                                N/A  thrpt    5        59.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                        N/A  thrpt    5  19839216.226 ± 1265736.033   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         N/A  thrpt    5       605.496 ±      39.122  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5        48.042 ±       0.168    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       539.206 ±    1160.682  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5        42.819 ±      92.232    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                              N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                               N/A  thrpt    5        32.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                                N/A  thrpt    5  21783128.159 ±   15955.238   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                             N/A  thrpt    5   1455927.735 ±  101369.602   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                              N/A  thrpt    5      2187.487 ±     118.635  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         N/A  thrpt    5      2364.897 ±      38.381    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.024 ±       0.209  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5         0.026 ±       0.225    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      2178.341 ±    1178.359  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5      2354.598 ±    1247.909    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         1.066 ±       9.176  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         1.190 ±      10.250    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                   N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                    N/A  thrpt    5        33.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    250402.815 ±   12623.427   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1373.544 ±      69.672  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5      8634.235 ±       8.354    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.009 ±       0.075  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.055 ±       0.473    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1355.456 ±    1858.412  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      8501.564 ±   11523.945    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.932 ±       5.000  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         5.909 ±      31.600    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        50.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    397375.701 ±   21136.841   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       506.388 ±      41.872  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      2005.751 ±     105.343    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       538.187 ±    1158.488  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      2127.084 ±    4580.612    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        38.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5    965300.315 ±   63168.837   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       646.039 ±      30.509  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1053.568 ±      24.671    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       674.017 ±       0.097  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5      1099.373 ±      72.472    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        37.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5     80162.137 ±    1508.102   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2458.490 ±      47.045  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     48271.383 ±     183.353    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.001 ±       0.006  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.027 ±       0.114    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5      2452.814 ±    1438.982  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     48157.730 ±   28172.627    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.266 ±       2.294  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         5.268 ±      45.358    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        18.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    303112.429 ±   14889.171   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       470.302 ±      21.836  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      2441.989 ±      13.757    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             128  thrpt    5       404.328 ±    1421.271  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      2100.797 ±    7386.484    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.700 ±       6.029    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        23.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    848968.207 ±   15368.267   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       614.171 ±       8.337  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1138.677 ±      15.023    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       538.194 ±    1158.504  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5       999.686 ±    2151.924    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        38.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   2055877.782 ±   43419.705   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       950.924 ±      20.323  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       728.016 ±       0.140    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5       943.726 ±    1421.670  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5       723.396 ±    1100.730    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        56.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2315387.337 ±   11888.343   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.091 ±       0.776  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.062 ±       0.528    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    418602.049 ±   16253.020   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       604.818 ±      23.843  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2273.995 ±      10.716    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          128  thrpt    5       673.214 ±       1.483  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      2531.353 ±      97.121    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         1.007 ±       5.309    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        44.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                      128  thrpt    5     16517.811 ±     547.099   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1110.178 ±      32.795  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5    105785.643 ±    1253.225    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1079.188 ±    1417.896  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    102977.206 ±  136873.679    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.599 ±       7.822  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       151.399 ±     741.078    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        57.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                               128  thrpt    5     28020.083 ±     631.696   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       701.945 ±      10.716  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     39433.818 ±     293.357    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       672.684 ±       0.119  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     37790.665 ±     856.609    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        46.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                              128  thrpt    5     42716.516 ±    1016.445   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       574.154 ±      11.963  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     21157.701 ±     101.096    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       539.218 ±    1160.708  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     19918.918 ±   42877.886    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        31.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                   128  thrpt    5     24047.081 ±     673.613   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1180.760 ±      29.516  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     77285.297 ±     530.612    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1214.650 ±    1159.587  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     79581.758 ±   76885.078    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.865 ±       6.638  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5       121.900 ±     433.624    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        69.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                     128  thrpt    5     22482.634 ±    2067.980   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1282.988 ±      96.861  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     89810.253 ±    1636.797    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.020 ±       0.175  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.394 ±      12.003    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1352.246 ±      25.312  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     94689.003 ±    7951.039    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±       5.907  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       120.558 ±     407.315    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        64.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                              128  thrpt    5     21324.048 ±     603.736   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1171.826 ±      26.744  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     86492.586 ±     561.246    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1214.294 ±    1165.834  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     89696.673 ±   86923.642    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.865 ±       8.772  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5       137.420 ±     646.659    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        70.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                             128  thrpt    5     25643.400 ±     844.843   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1360.149 ±      45.035  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     83484.843 ±      18.615    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  128  thrpt    5         0.009 ±       0.081  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             128  thrpt    5         0.574 ±       4.940    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1353.439 ±      27.190  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     83074.969 ±    1131.186    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         1.732 ±       6.930  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5       106.242 ±     424.561    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        54.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5     25655.843 ±     719.500   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5      1278.288 ±      33.068  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5     78415.505 ±     282.759    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'          128  thrpt    5         0.008 ±       0.068  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     128  thrpt    5         0.477 ±       4.107    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                128  thrpt    5      1352.220 ±      25.517  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                           128  thrpt    5     82952.494 ±    1798.099    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                         128  thrpt    5         1.732 ±       8.232  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                    128  thrpt    5       106.813 ±     508.304    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                            128  thrpt    5        61.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                                  128  thrpt    5      7283.312 ±     242.667   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5       954.187 ±      32.254  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    206196.553 ±     310.807    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5       942.225 ±    1418.258  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    204121.770 ±  313532.360    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        57.803 ±     304.803    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        62.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                          128  thrpt    5     17322.574 ±     743.983   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                           128  thrpt    5      1340.835 ±      44.730  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                      128  thrpt    5    121827.379 ±    1986.495    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.020 ±       0.175  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         1.822 ±      15.686    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1353.631 ±      27.878  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    122993.195 ±    2840.821    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.732 ±       7.388  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5       157.451 ±     672.229    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                                128  thrpt    5        10.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                                 128  thrpt    5        55.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                   128  thrpt    5     34022.609 ±     543.945   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       837.838 ±      13.231  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     38757.352 ±      22.612    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       807.375 ±    1158.631  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     37394.392 ±   54483.783    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                          128  thrpt    5        55.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                                  128  thrpt    5     59537.720 ±    1300.373   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       770.003 ±      19.423  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5     20354.088 ±      82.024    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       809.110 ±    1160.815  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     21410.710 ±   31118.233    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         3.533 ±      30.422    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                        128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                         128  thrpt    5        44.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                       128  thrpt    5     24634.600 ±    1223.395   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                        128  thrpt    5      1519.997 ±      60.419  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     97116.380 ±    1884.178    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.003 ±       0.027  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.199 ±       1.717    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1490.083 ±    1144.451  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     95313.869 ±   76301.309    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.732 ±       9.177  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5       111.077 ±     589.271    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                             128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                              128  thrpt    5        59.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                                  128  thrpt    5     25686.340 ±     379.120   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   128  thrpt    5      1454.924 ±      22.264  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5     89153.229 ±      75.492    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.005 ±       0.028  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.316 ±       1.750    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1490.003 ±    1170.354  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     91281.571 ±   71045.747    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.732 ±       9.528  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       105.817 ±     582.191    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                        128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                         128  thrpt    5        56.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                                 128  thrpt    5     34672.718 ±    1675.125   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5      1366.993 ±      59.931  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     62055.228 ±     275.076    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1353.984 ±      26.641  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     61469.693 ±    2388.087    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.466 ±       8.193  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        67.163 ±     377.546    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                       128  thrpt    5        10.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                        128  thrpt    5        54.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                         128  thrpt    5     35034.069 ±    1771.612   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          128  thrpt    5      1319.966 ±      65.390  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     128  thrpt    5     59301.462 ±     140.968    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                    128  thrpt    5      1217.735 ±    1154.375  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                               128  thrpt    5     54809.137 ±   53127.800    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                             128  thrpt    5         1.466 ±       8.192  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                        128  thrpt    5        66.371 ±     372.987    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                128  thrpt    5        50.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                         128  thrpt    5    301248.543 ±   14575.349   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1519.371 ±      61.956  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      7938.095 ±      63.942    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.001 ±       0.005    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1491.852 ±    1174.324  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      7810.951 ±    6610.702    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.465 ±       8.192  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         7.763 ±      43.587    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                               128  thrpt    5        11.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                                128  thrpt    5        49.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                   128  thrpt    5   1314783.988 ±   60609.597   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                    128  thrpt    5       415.126 ±      19.418  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               128  thrpt    5       496.959 ±       5.448    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              128  thrpt    5       402.318 ±    1414.205  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       481.016 ±    1691.245    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.158 ±       1.362    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                         128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                          128  thrpt    5        31.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                                  128  thrpt    5    546856.608 ±   30245.320   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       440.082 ±      22.938  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      1265.980 ±       8.476    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       403.345 ±    1417.825  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1168.027 ±    4106.984    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.142  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.379 ±       3.266    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        28.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                                 128  thrpt    5   1731364.285 ±   63298.415   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       334.833 ±      12.031  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5       304.341 ±       2.653    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       404.542 ±    1422.023  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       369.916 ±    1300.357    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        22.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                      128  thrpt    5     71922.711 ±    1417.622   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      2332.196 ±      42.329  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     51037.261 ±     120.343    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.007 ±       0.043  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.151 ±       0.949    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      2315.729 ±    1440.880  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     50681.115 ±   31648.799    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        17.629 ±     151.794    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        36.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                        128  thrpt    5    312562.085 ±   13207.598   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       486.188 ±      12.181  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      2448.519 ±      51.138    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       404.293 ±    1421.149  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2049.449 ±    7204.616    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.674 ±       5.806    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                                  128  thrpt    5   1234326.278 ±   61328.350   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   128  thrpt    5       571.731 ±      31.534  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              128  thrpt    5       728.924 ±       5.139    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             128  thrpt    5       670.736 ±       0.929  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       855.272 ±      41.853    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.148  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.172 ±       1.479    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                         128  thrpt    5        59.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                                 128  thrpt    5    966301.223 ±   62837.751   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       686.043 ±      19.603  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      1117.555 ±      41.950    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       673.166 ±       1.292  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1096.696 ±      73.944    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.431 ±       2.272    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        44.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                                128  thrpt    5   2361732.771 ±   46097.808   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1093.259 ±      20.468  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       728.664 ±       2.203    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1079.118 ±    1418.169  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       720.056 ±     955.198    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.932 ±       5.619  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.620 ±       3.741    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        60.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   2779392.509 ±  115234.729   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5         1.348 ±      11.245  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.778 ±       6.494    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                     128  thrpt    5    526000.750 ±   14007.566   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       570.132 ±      15.568  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5      1706.029 ±       8.262    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       673.293 ±       0.693  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2014.804 ±      54.750    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.398 ±       3.425    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        43.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                            128  thrpt    5    158742.687 ±    6018.474   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1908.959 ±      65.653  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     18928.757 ±     142.081    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.001 ±       0.005  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.011 ±       0.048    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1903.170 ±    1164.064  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     18889.675 ±   11959.281    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         1.599 ±       8.621  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        15.877 ±      85.814    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        39.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                     128  thrpt    5    367947.000 ±    8537.532   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       284.698 ±       4.395  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1217.873 ±      10.358    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       269.234 ±    1419.596  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1159.373 ±    6113.043    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.574 ±       4.939    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        18.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                    128  thrpt    5   1135242.406 ±   19526.872   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       219.706 ±       3.150  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5       304.632 ±       3.843    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       269.733 ±    1422.223  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       375.818 ±    1981.581    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.185 ±       1.597    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        15.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                         128  thrpt    5     61568.110 ±    2184.622   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2303.745 ±      68.762  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     58893.929 ±     429.632    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.007 ±       0.045  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.172 ±       1.150    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2315.735 ±    1432.168  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     59219.357 ±   37168.414    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.800 ±       6.884  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        20.315 ±     174.916    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        17.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        29.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                           128  thrpt    5    266264.037 ±    9909.029   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1178.677 ±      48.316  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      6967.538 ±     101.503    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1216.147 ±    1166.985  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      7186.792 ±    6868.474    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.466 ±       7.780  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         8.582 ±      45.512    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         9.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        61.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                    128  thrpt    5   1668397.262 ±   67043.270   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       856.845 ±      33.812  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5       808.404 ±       2.296    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       942.477 ±    1418.909  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       891.599 ±    1371.661    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.254 ±       1.338    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        63.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                   128  thrpt    5   2409511.969 ±   34438.657   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       649.696 ±       9.694  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       424.442 ±       2.182    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       674.015 ±       0.231  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       440.334 ±       6.302    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         5.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        38.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   2645823.891 ±    4383.211   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                        128  thrpt    5     39242.744 ±    2868.699   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1660.957 ±     119.169  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     66619.494 ±     171.487    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.009 ±       0.077  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.358 ±       3.086    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1628.418 ±    1430.327  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     65346.619 ±   57923.829    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.732 ±      13.522  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        70.871 ±     554.433    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        49.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                            128  thrpt    5    227916.681 ±   10169.472   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      2343.516 ±      94.796  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     16184.655 ±      80.638    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.009 ±       0.059  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.064 ±       0.397    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      2316.062 ±    1432.986  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     15990.061 ±    9720.654    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.734  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         4.520 ±      38.921    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        17.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                     128  thrpt    5    281874.098 ±    7081.915   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1351.134 ±      33.794  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      7544.954 ±       3.864    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.005 ±       0.044  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.028 ±       0.242    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1352.342 ±      29.533  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      7551.737 ±      32.079    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±       8.029  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         9.670 ±      44.803    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        10.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        62.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                    128  thrpt    5   2145447.892 ±   97435.224   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       744.038 ±      25.295  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5       545.865 ±       7.354    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       674.091 ±       0.303  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       494.589 ±      22.802    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        37.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                         128  thrpt    5     63423.889 ±    1167.990   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2413.414 ±      44.440  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     59885.822 ±      36.643    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.022 ±       0.186  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.552 ±       4.645    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2452.274 ±    1434.401  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     60869.690 ±   36158.915    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        19.933 ±     171.627    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        37.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                           128  thrpt    5    198955.714 ±   11733.968   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1685.601 ±      97.782  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     13334.254 ±      88.335    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.017 ±       0.142  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.132 ±       1.137    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1765.536 ±    1429.617  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     13989.232 ±   11757.112    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.598 ±       8.622  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        12.689 ±      68.167    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        13.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        46.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                    128  thrpt    5   1391287.006 ±   27933.451   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       815.007 ±       5.354  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5       921.973 ±      13.457    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       807.890 ±    1158.724  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       915.328 ±    1337.928    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.152 ±       1.310    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        53.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   2759677.267 ±   77069.864   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       940.998 ±      19.945  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       536.673 ±       4.007    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       943.774 ±    1421.797  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       539.479 ±     827.872    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        53.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   3032874.862 ±  178723.430   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                        128  thrpt    5    277631.017 ±    7003.079   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      2269.689 ±      58.260  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     12867.295 ±      19.332    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.005 ±       0.032  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.026 ±       0.181    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      2179.542 ±    1175.431  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     12353.608 ±    6545.542    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         4.584 ±      39.473    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        16.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        26.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                          128  thrpt    5     24504.460 ±     653.408   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                           128  thrpt    5      1401.613 ±      31.984  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                      128  thrpt    5     90024.578 ±     508.317    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.019 ±       0.164  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         1.212 ±      10.438    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1353.374 ±      26.839  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     86926.810 ±    1102.194    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.732 ±       8.231  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5       111.435 ±     530.234    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                                128  thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                                 128  thrpt    5        55.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                    128  thrpt    5     84170.678 ±    4396.716   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                     128  thrpt    5       758.876 ±      41.571  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                128  thrpt    5     14188.361 ±     102.235    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                               128  thrpt    5       804.618 ±    1155.742  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     15069.678 ±   22079.950    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         4.939 ±      26.040    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                           128  thrpt    5        70.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                   128  thrpt    5     54147.933 ±    1076.915   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       893.817 ±      17.666  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     25980.877 ±      26.220    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       942.130 ±    1419.232  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     27429.227 ±   41865.013    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         7.788 ±      41.064    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                          128  thrpt    5        63.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                                  128  thrpt    5    135973.150 ±    4911.194   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       878.898 ±      15.009  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5     10174.017 ±     205.861    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       808.925 ±    1161.135  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      9369.084 ±   13536.780    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                        128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                         128  thrpt    5        45.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                       128  thrpt    5     29233.658 ±     711.522   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                        128  thrpt    5      1526.611 ±      36.520  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     82195.169 ±     112.688    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.004 ±       0.034    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1490.132 ±    1144.178  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     80234.895 ±   61656.889    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.865 ±       8.773  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5       100.643 ±     473.865    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                             128  thrpt    5        11.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                              128  thrpt    5        56.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                         128  thrpt    5     29848.299 ±    1178.828   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                          128  thrpt    5       342.883 ±       4.966  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                     128  thrpt    5     18081.979 ±     606.259    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       269.665 ±    1421.864  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     14237.581 ±   75070.869    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                               128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                                128  thrpt    5        16.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                                  128  thrpt    5     29558.961 ±     767.797   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       332.520 ±       6.401  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5     17705.979 ±     140.048    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       269.345 ±    1420.177  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     14448.352 ±   76182.068    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                        128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                         128  thrpt    5        17.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                                 128  thrpt    5     32025.925 ±    2686.786   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       352.935 ±      32.650  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     17343.544 ±     282.322    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       404.312 ±    1421.216  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     19815.545 ±   69669.659    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         6.478 ±      55.777    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                       128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                         128  thrpt    5     32524.295 ±    2160.853   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          128  thrpt    5       320.970 ±      13.838  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     128  thrpt    5     15533.536 ±     391.254    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                    128  thrpt    5       269.624 ±    1421.651  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                               128  thrpt    5     13242.400 ±   69838.103    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                128  thrpt    5        16.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                        128  thrpt    5     19923.802 ±     769.855   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5       699.240 ±      17.148  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     55226.559 ±    1537.644    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       808.238 ±    1155.023  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     63796.261 ±   90447.829    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.145  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        10.460 ±      90.065    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        49.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                                 128  thrpt    5     18346.378 ±     760.056   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       520.847 ±       9.956  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     44684.957 ±    1134.682    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       538.227 ±    1158.575  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     46295.964 ±   99676.615    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        37.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                                128  thrpt    5    101670.565 ±    2235.648   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       267.571 ±      19.220  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      4142.096 ±     330.061    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       269.642 ±    1421.742  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      4191.840 ±   22102.363    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        15.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                     128  thrpt    5     14756.723 ±     877.085   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5       882.035 ±      59.147  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     94072.505 ±     898.515    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       942.101 ±    1420.247  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    100975.014 ±  158179.552    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        66.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                       128  thrpt    5     43089.820 ±    3820.036   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       653.186 ±      60.169  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     23856.622 ±     229.729    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       673.893 ±       1.317  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     24623.973 ±    2231.768    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         4.815 ±      41.462    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        42.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                                128  thrpt    5     55244.381 ±    1650.454   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       764.751 ±      11.708  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     21789.537 ±     437.850    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       673.134 ±       1.465  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     19179.518 ±     565.113    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         7.614 ±      40.149    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        46.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                               128  thrpt    5    166870.764 ±    9639.348   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       265.191 ±      17.075  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      2501.106 ±      25.108    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       269.678 ±    1421.934  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      2544.112 ±   13415.198    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        15.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    176812.008 ±    2889.268   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         1.578 ±      12.724  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        14.148 ±     114.122    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                    128  thrpt    5     49836.183 ±   11727.603   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       775.473 ±     181.619  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     24489.503 ±      41.399    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       807.937 ±    1159.134  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     25499.565 ±   35234.572    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         4.079 ±      35.118    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        54.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                            128  thrpt    5     89173.135 ±    2092.337   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1794.006 ±      43.226  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     31661.608 ±      38.374    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.012 ±       0.105  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.215 ±       1.849    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1766.796 ±    1448.249  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     31200.339 ±   25943.354    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         1.599 ±       8.622  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        28.367 ±     153.222    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        45.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                     128  thrpt    5     98336.012 ±    3254.904   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1288.361 ±      43.499  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     20619.184 ±       8.642    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1215.494 ±    1168.671  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     19471.120 ±   18928.875    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±       8.231  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        27.936 ±     132.985    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        64.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                    128  thrpt    5    142025.742 ±    1699.828   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1294.638 ±      13.359  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5     14345.153 ±      44.506    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.008 ±       0.067  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.086 ±       0.741    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1352.827 ±      26.203  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     14989.897 ±     226.976    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.466 ±       7.782  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        16.198 ±      85.967    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5        10.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        59.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                         128  thrpt    5     37236.845 ±    1318.349   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1910.244 ±      67.295  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     80735.530 ±      87.254    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.005 ±       0.043  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.211 ±       1.819    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1902.371 ±    1173.733  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     80430.585 ±   50195.011    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.732 ±       9.176  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        73.674 ±     390.899    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        14.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        55.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                           128  thrpt    5    157162.172 ±   47059.381   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       545.507 ±     164.054  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      5463.281 ±     131.550    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       539.110 ±    1160.475  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      5521.069 ±   12036.723    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         1.525 ±      13.132    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        32.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                    128  thrpt    5    372831.291 ±    5983.759   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       378.965 ±       8.916  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1599.768 ±      50.271    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       404.059 ±    1420.326  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1710.749 ±    6013.534    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                   128  thrpt    5    638064.191 ±   17284.488   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       490.389 ±      11.293  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1209.698 ±       8.191    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       539.252 ±    1160.780  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1334.104 ±    2871.812    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        30.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5    676819.315 ±   68035.332   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                        128  thrpt    5    254009.910 ±    4979.481   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5       700.309 ±      12.957  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5      4339.604 ±      19.396    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       807.359 ±    1158.193  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      5007.758 ±    7268.523    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.828 ±       7.132    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        55.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                           128  thrpt    5     35234.165 ±    1240.577   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1634.140 ±      55.971  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     72994.323 ±     344.598    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.008 ±       0.041  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.337 ±       1.831    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1629.121 ±    1418.635  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     72745.471 ±   62737.934    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.599 ±       7.389  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        71.841 ±     332.882    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                                 128  thrpt    5        12.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        47.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                     128  thrpt    5    278270.958 ±    5235.414   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                      128  thrpt    5       289.145 ±       3.698  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                 128  thrpt    5      1635.420 ±      22.407    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                128  thrpt    5       268.323 ±    1414.788  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1519.393 ±    8011.460    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                           128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                            128  thrpt    5        20.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                    128  thrpt    5     94990.858 ±    1829.211   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1046.510 ±      26.846  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     17341.434 ±     180.765    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1077.662 ±    1416.545  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     17881.550 ±   23763.523    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.066 ±       5.318  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        17.698 ±      88.471    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5        71.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                   128  thrpt    5    438322.915 ±   15922.480   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       286.599 ±       3.823  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1029.259 ±      33.142    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       269.625 ±    1421.654  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       978.032 ±    5156.918    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                        128  thrpt    5     33059.818 ±    2046.551   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      1577.267 ±      96.987  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     75088.210 ±      57.336    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.010 ±       0.085  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.462 ±       3.978    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1626.513 ±    1429.113  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     77445.908 ±   68143.284    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.865 ±       8.774  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        89.049 ±     418.494    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        12.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        59.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                          128  thrpt    5     68879.866 ±    1171.459   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                           128  thrpt    5       331.793 ±       9.138  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                      128  thrpt    5      7582.148 ±     149.595    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       269.487 ±    1420.925  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      6187.074 ±   32622.662    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         3.058 ±      26.333    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                                128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                    128  thrpt    5     81055.158 ±    2163.753   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                     128  thrpt    5       406.967 ±       8.110  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                128  thrpt    5      7902.143 ±      78.349    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                               128  thrpt    5       402.491 ±    1414.814  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      7852.960 ±   27604.458    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                          128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                           128  thrpt    5        33.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                   128  thrpt    5     71523.169 ±    1710.362   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       376.272 ±       7.627  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5      8278.994 ±      50.243    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       404.142 ±    1420.617  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      8930.283 ±   31391.333    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                                  128  thrpt    5     80949.979 ±    2056.108   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       407.593 ±       7.849  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      7925.986 ±     264.390    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       539.237 ±    1160.748  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     10508.558 ±   22621.614    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        32.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5     80640.287 ±    5382.912   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5       341.238 ±      23.436  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5      6659.951 ±      84.930    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                     128  thrpt    5       404.472 ±    1421.775  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5      7971.923 ±   28028.527    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                 128  thrpt    5        23.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                         128  thrpt    5      8443.298 ±     134.111   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1427.183 ±      21.078  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    266034.933 ±     271.549    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.002 ±       0.016  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.353 ±       3.039    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1489.469 ±    1194.163  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    277732.427 ±  225070.998    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.732 ±       8.231  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       323.310 ±    1536.563    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                               128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                                128  thrpt    5        56.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                                  128  thrpt    5      7863.463 ±     413.941   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5      1275.823 ±      69.999  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    255352.482 ±    5938.016    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.011 ±       0.092  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         2.116 ±      18.216    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1215.765 ±    1169.341  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    243604.378 ±  237371.389    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.732 ±       7.163  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       345.025 ±    1432.259    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        62.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                                 128  thrpt    5    144403.263 ±   11098.073   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       376.211 ±      26.923  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      4100.382 ±      30.691    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       404.484 ±    1421.820  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      4460.535 ±   15683.550    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        22.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                      128  thrpt    5      3990.234 ±      89.485   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1133.798 ±      20.766  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    447227.704 ±    3725.460    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1077.836 ±    1417.388  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    425380.173 ±  561803.349    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.598 ±       7.388  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       632.133 ±    2926.047    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        67.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                        128  thrpt    5     19531.626 ±     690.320   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5      1051.713 ±      35.443  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     84745.147 ±     453.193    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       943.434 ±    1417.440  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     76147.723 ±  115974.038    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.933 ±       5.619  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        74.902 ±     452.499    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        56.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                                 128  thrpt    5     21287.596 ±     615.191   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      1124.639 ±      29.539  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     83150.586 ±     393.236    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1214.439 ±    1166.284  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     89777.171 ±   86047.933    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.865 ±       8.773  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5       137.076 ±     644.118    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        68.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                                128  thrpt    5    129486.248 ±    9877.385   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       286.824 ±      21.342  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      3486.513 ±      33.053    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       269.651 ±    1421.791  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      3276.378 ±   17275.823    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    137698.304 ±     226.363   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5         0.034 ±       0.293  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.392 ±       3.347    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                     128  thrpt    5     21563.534 ±     661.730   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1178.171 ±      32.482  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     85994.853 ±     661.403    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1214.711 ±    1166.804  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     88710.102 ±   85762.663    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.865 ±       7.567  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       135.614 ±     549.206    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        67.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                             128  thrpt    5    126413.069 ±    5293.260   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1631.076 ±      68.337  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     20307.547 ±      14.552    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.001 ±       0.009  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.017 ±       0.115    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1627.944 ±    1418.407  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     20293.402 ±   18203.876    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         1.466 ±       7.781  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        18.270 ±      97.049    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        49.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                       128  thrpt    5    518899.935 ±    7342.059   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                        128  thrpt    5       538.276 ±       8.458  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                   128  thrpt    5      1632.821 ±       7.066    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       536.584 ±    1155.038  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1630.038 ±    3508.808    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                             128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                              128  thrpt    5        41.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                      128  thrpt    5    256015.332 ±    8265.202   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       355.753 ±      11.307  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      2187.273 ±      25.969    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       403.885 ±    1419.712  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      2483.531 ±    8730.068    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        28.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                     128  thrpt    5    677329.479 ±  117239.897   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       442.690 ±      76.029  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1028.807 ±      32.089    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       404.570 ±    1422.121  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       913.440 ±    3210.884    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.302 ±       2.598    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        23.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                          128  thrpt    5     55133.655 ±    1033.379   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      2199.206 ±      39.322  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     62770.231 ±     258.523    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.003 ±       0.012  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.085 ±       0.356    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      2315.214 ±    1425.380  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     66107.987 ±   41504.137    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.066 ±       9.177  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        30.574 ±     263.247    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        17.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        36.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                            128  thrpt    5    174401.120 ±    8571.978   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5       867.557 ±      33.529  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5      7829.585 ±      85.738    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       808.554 ±    1159.078  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      7296.203 ±   10434.060    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         2.396 ±      12.633    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5         6.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        48.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                      128  thrpt    5    620658.440 ±   16659.855   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                       128  thrpt    5       338.559 ±       5.095  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                  128  thrpt    5       858.538 ±      13.525    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       268.459 ±    1415.509  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       685.600 ±    3614.978    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                            128  thrpt    5         2.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                             128  thrpt    5        21.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                     128  thrpt    5    614235.506 ±   31630.906   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       458.706 ±       7.219  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1175.472 ±      44.003    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       404.098 ±    1420.461  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1042.702 ±    3665.803    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                    128  thrpt    5    963224.684 ±   49860.634   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       524.378 ±      24.326  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5       856.849 ±       6.427    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       539.300 ±    1160.884  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       885.692 ±    1906.785    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        30.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1076866.642 ±    5822.238   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5         0.099 ±       0.852  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5         0.145 ±       1.246    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                         128  thrpt    5     30521.921 ±    1069.708   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1542.743 ±      52.159  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     79560.866 ±     110.007    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.002 ±       0.013  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.079 ±       0.682    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1491.955 ±    1179.144  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     76942.854 ±   60780.191    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.732 ±       9.176  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        89.892 ±     476.682    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        47.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                        128  thrpt    5    119928.290 ±    1118.257   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      1323.032 ±      12.473  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     17362.255 ±       6.018    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1353.505 ±      26.909  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     17762.235 ±     387.721    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.599 ±       7.390  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        20.968 ±      96.952    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        55.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                                 128  thrpt    5    140846.779 ±   12680.914   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       745.287 ±      67.292  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      8329.015 ±       6.502    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       672.858 ±       1.023  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      7522.965 ±     694.859    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         3.027 ±      15.971    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        47.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                                128  thrpt    5    187948.883 ±    3596.473   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       856.289 ±      17.842  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      7171.631 ±      25.866    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       808.820 ±    1160.875  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      6773.557 ±    9710.838    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        46.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                     128  thrpt    5     51853.610 ±    1807.601   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1984.973 ±      66.668  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     60254.672 ±     233.267    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.028 ±       0.234  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.843 ±       7.127    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1903.827 ±    1194.949  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     57789.434 ±   36206.978    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±       9.176  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        52.747 ±     279.558    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        40.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                       128  thrpt    5    165121.481 ±    3565.148   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       575.084 ±      22.326  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5      5480.695 ±     217.894    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       674.081 ±       1.045  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      6424.223 ±     132.291    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        42.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                                128  thrpt    5    677754.099 ±   16997.770   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       688.678 ±       7.992  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1599.466 ±      45.721    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       673.279 ±       1.161  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      1563.700 ±      39.566    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.309 ±       2.662    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        45.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                               128  thrpt    5    622066.948 ±   24324.378   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       477.879 ±      19.410  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      1209.089 ±       8.215    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       539.253 ±    1160.782  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      1358.758 ±    2924.943    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        31.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    698336.138 ±    1411.831   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         0.053 ±       0.448  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5         0.121 ±       1.009    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                    128  thrpt    5    276345.257 ±   10563.809   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       759.801 ±      21.509  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5      4328.024 ±      47.259    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       672.962 ±       1.443  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      3833.600 ±     152.449    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.755 ±       6.502    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        47.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                   128  thrpt    5      7501.947 ±     175.317   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1023.635 ±      19.843  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    214737.197 ±    1153.055    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1078.314 ±    1423.618  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5    226508.002 ±  302291.406    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.066 ±       7.822  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5       223.299 ±    1640.669    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                         128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        61.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                            128  thrpt    5      7772.652 ±     179.904   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       996.671 ±      22.792  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5    201823.452 ±     139.996    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       941.959 ±    1419.759  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5    191089.935 ±  292288.719    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         0.666 ±       4.442  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5       134.508 ±     895.113    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        66.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                           128  thrpt    5    243516.948 ±   10482.005   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1584.687 ±      70.758  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10242.754 ±      14.032    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5      1493.467 ±    1179.762  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5      9656.721 ±    7715.704    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         1.465 ±       6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5         9.534 ±      44.796    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        40.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                                128  thrpt    5      6034.659 ±     196.074   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1172.196 ±      32.759  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    305665.644 ±    2423.196    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1214.150 ±    1164.972  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5    316944.233 ±  308031.978    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.732 ±       9.176  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5       449.867 ±    2383.861    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        76.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                                  128  thrpt    5     24425.151 ±     747.515   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       978.106 ±      27.357  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     63025.914 ±     221.114    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             128  thrpt    5       942.845 ±    1420.729  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     60867.876 ±   93127.944    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        42.677 ±     367.463    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        59.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                           128  thrpt    5     27320.323 ±    1578.587   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1052.088 ±      63.580  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     60609.882 ±     457.002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       942.576 ±    1416.956  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     54486.668 ±   84181.069    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.932 ±       5.619  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5        53.406 ±     322.334    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        61.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                          128  thrpt    5    445502.148 ±   24912.491   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       804.444 ±      41.941  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2842.354 ±      11.584    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5       808.824 ±    1160.531  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5      2861.772 ±    4170.772    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        46.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    429578.018 ±    2094.956   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.298 ±       1.644  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         1.094 ±       6.034    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                               128  thrpt    5     27123.081 ±     392.144   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1091.990 ±      17.200  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     63369.389 ±     459.582    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1212.924 ±    1162.826  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     70436.539 ±   68104.958    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.998 ±       7.254  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5       116.097 ±     421.749    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        74.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                       128  thrpt    5     27314.927 ±     636.850   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                        128  thrpt    5      1447.321 ±      32.712  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     83399.368 ±     185.999    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.003 ±       0.025  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.166 ±       1.426    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1491.009 ±    1189.947  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     85884.333 ±   67571.311    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.599 ±       7.389  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        92.445 ±     427.758    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                             128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                              128  thrpt    5        49.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                                128  thrpt    5     25658.372 ±    1226.298   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                                 128  thrpt    5      1172.345 ±      56.826  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     71916.886 ±     605.425    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1213.834 ±    1164.662  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     74640.387 ±   73651.031    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.732 ±       9.176  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5       107.234 ±     568.396    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                       128  thrpt    5        70.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                               128  thrpt    5    398907.575 ±   13651.470   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1039.009 ±      30.718  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      4099.651 ±      26.567    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       943.868 ±    1422.854  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      3728.832 ±    5677.326    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.799 ±       5.560  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         3.124 ±      21.712    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                     128  thrpt    5         7.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                      128  thrpt    5        54.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                    128  thrpt    5     14092.666 ±     163.413   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                     128  thrpt    5      1426.433 ±      30.831  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                128  thrpt    5    159310.066 ±    2052.125    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1488.364 ±    1142.026  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5    166223.192 ±  127386.836    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.732 ±       7.163  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5       193.161 ±     799.212    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                           128  thrpt    5        67.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                      128  thrpt    5     52020.288 ±    3312.326   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                       128  thrpt    5      1160.928 ±      70.920  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     35117.277 ±     205.712    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1215.740 ±    1165.705  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     36731.584 ±   34669.938    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.599 ±       7.390  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        47.662 ±     219.756    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                            128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                             128  thrpt    5        62.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                               128  thrpt    5    129506.983 ±    4928.368   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1350.814 ±      49.176  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     16410.100 ±       5.871    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1350.874 ±    1817.779  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     16416.576 ±   22250.148    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.729 ±       7.152  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        21.136 ±      87.503    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                      128  thrpt    5        61.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                              128  thrpt    5    807155.069 ±   27172.161   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       867.133 ±      27.057  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1690.838 ±      11.335    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       808.796 ±    1160.873  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      1581.099 ±    2339.764    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5         0.258 ±       2.223    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                    128  thrpt    5         6.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                     128  thrpt    5        47.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                      128  thrpt    5    948747.964 ±   29241.346   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       128  thrpt    5         0.099 ±       0.852  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  128  thrpt    5         0.164 ±       1.408    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                   128  thrpt    5     61973.181 ±    2038.078   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                    128  thrpt    5      1319.875 ±      37.550  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     33520.637 ±     238.167    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1352.475 ±      30.170  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     34349.900 ±    1176.397    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.732 ±       9.176  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        44.202 ±     234.036    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                          128  thrpt    5        67.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                       128  thrpt    5     13197.903 ±     516.930   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                        128  thrpt    5      1292.331 ±      39.472  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                   128  thrpt    5    154107.136 ±    2557.634    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.027 ±       0.232  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         3.158 ±      27.191    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1352.209 ±      24.046  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5    161253.578 ±    5323.276    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.599 ±       7.389  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5       191.495 ±     888.416    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                              128  thrpt    5        61.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                                128  thrpt    5     11436.743 ±     758.247   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                 128  thrpt    5      1038.870 ±      76.003  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5    142959.837 ±    2654.799    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1077.223 ±    1421.670  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5    148434.174 ±  197838.900    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.066 ±       7.823  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5       144.948 ±    1059.653    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                       128  thrpt    5        70.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                               128  thrpt    5    517639.729 ±   17629.113   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1350.451 ±      41.949  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      4105.913 ±      69.839    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.011 ±       0.094  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.034 ±       0.288    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1354.020 ±      25.690  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      4116.940 ±     147.077    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.465 ±       7.780  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         4.444 ±      23.625    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                      128  thrpt    5        53.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                    128  thrpt    5      8399.847 ±     519.447   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                     128  thrpt    5      1261.392 ±      74.411  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                128  thrpt    5    236361.237 ±    4382.133    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1215.925 ±    1169.649  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5    227621.081 ±  216221.024    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.865 ±       6.639  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5       348.914 ±    1247.514    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                           128  thrpt    5        63.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                      128  thrpt    5     41440.615 ±    1416.859   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                       128  thrpt    5      1290.552 ±      30.872  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     49017.213 ±     526.000    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.005 ±       0.043  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.187 ±       1.613    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1353.078 ±      28.242  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     51395.213 ±    2444.317    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.599 ±       8.622  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        61.101 ±     328.889    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                            128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                             128  thrpt    5        59.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                               128  thrpt    5     54197.172 ±    3108.396   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1438.560 ±      84.251  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     41777.274 ±     141.235    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.007 ±       0.059  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.195 ±       1.682    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1354.022 ±      31.941  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     39327.311 ±    1752.474    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.865 ±       7.779  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        54.734 ±     229.751    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                      128  thrpt    5        54.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                              128  thrpt    5    999450.127 ±   25149.502   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       909.881 ±      19.226  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1433.037 ±       8.575    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       943.647 ±    1421.583  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      1487.120 ±    2251.245    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                    128  thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                     128  thrpt    5        55.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                      128  thrpt    5   1109902.152 ±    8663.510   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       128  thrpt    5         0.010 ±       0.084  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  128  thrpt    5         0.014 ±       0.119    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                   128  thrpt    5     39331.635 ±     817.267   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                    128  thrpt    5      1190.397 ±      22.585  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     47633.857 ±     400.959    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1214.766 ±    1165.404  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     48639.897 ±   47022.168    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.732 ±       8.028  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        69.220 ±     320.728    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                         128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                          128  thrpt    5        65.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                            128  thrpt    5    122576.320 ±    4840.479   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1709.593 ±      66.338  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     21951.739 ±      29.308    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.003 ±       0.018  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.042 ±       0.223    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1629.278 ±    1431.111  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     20940.253 ±   18806.529    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         1.599 ±      13.767  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        20.823 ±     179.292    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        44.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                      128  thrpt    5    345887.255 ±    6881.767   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                       128  thrpt    5       693.025 ±      14.099  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  128  thrpt    5      3153.235 ±      10.623    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       670.835 ±       0.380  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      3052.340 ±      60.848    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                            128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                             128  thrpt    5        51.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                     128  thrpt    5    209086.294 ±   21220.090   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       454.579 ±      46.966  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      3421.991 ±      32.846    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       403.747 ±    1419.229  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      3078.472 ±   10829.660    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         1.000 ±       8.613    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                    128  thrpt    5    470204.154 ±   27674.713   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       595.071 ±      24.064  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1991.832 ±      49.928    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       539.218 ±    1160.708  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1809.287 ±    3896.809    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        29.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                         128  thrpt    5     54681.253 ±     411.742   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2117.440 ±      16.231  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     60950.087 ±      22.958    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.008 ±       0.065  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.224 ±       1.871    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2178.302 ±    1177.684  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     62700.910 ±   33853.244    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±       9.176  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        30.778 ±     265.005    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        16.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        33.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                           128  thrpt    5    119183.108 ±    1681.974   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       649.975 ±       5.494  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      8583.840 ±      59.243    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       673.814 ±       1.427  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      8898.724 ±     128.841    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         1.755 ±      15.110    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        39.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                     128  thrpt    5    205251.521 ±   10951.026   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      128  thrpt    5       160.671 ±       8.496  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 128  thrpt    5      1232.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                128  thrpt    5       134.200 ±    1155.499  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1054.729 ±    9081.539    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                           128  thrpt    5         1.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                            128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                    128  thrpt    5    393632.796 ±   39234.141   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       405.665 ±      39.661  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1622.149 ±      40.109    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       403.781 ±    1419.349  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1633.201 ±    5745.357    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.531 ±       4.570    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                   128  thrpt    5    433043.512 ±   24509.820   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       339.463 ±      15.698  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1233.807 ±      13.869    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       404.474 ±    1421.784  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1480.927 ±    5206.725    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        24.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5    467860.930 ±    1401.755   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5         0.166 ±       1.428  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5         0.558 ±       4.796    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                        128  thrpt    5     24848.618 ±    1544.209   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1228.588 ±      76.619  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     77824.046 ±     148.818    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1214.648 ±    1159.639  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     77072.721 ±   75091.221    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.865 ±       5.560  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       117.464 ±     347.001    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        66.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                                  128  thrpt    5      6292.993 ±     283.681   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1002.684 ±      43.867  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    250779.804 ±     725.411    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1078.492 ±    1422.762  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    270402.124 ±  363836.772    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.199 ±       7.566  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       304.093 ±    1931.477    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                         128  thrpt    5        61.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                           128  thrpt    5      5377.379 ±     218.294   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       824.101 ±      32.550  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    241144.532 ±     174.549    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       807.043 ±    1156.068  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5    236459.526 ±  343945.135    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        55.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                          128  thrpt    5    165707.397 ±   10304.733   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1607.326 ±      91.494  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     15267.654 ±      87.584    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               128  thrpt    5         0.002 ±       0.015  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          128  thrpt    5         0.022 ±       0.139    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5      1629.663 ±    1453.042  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5     15490.045 ±   14013.729    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                              128  thrpt    5         1.465 ±       8.191  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         128  thrpt    5        14.124 ±      78.754    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5        12.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5        41.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                               128  thrpt    5      5532.106 ±     294.020   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1060.053 ±      57.143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    301541.268 ±     113.371    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1076.642 ±    1413.968  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5    306937.799 ±  410426.092    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.197 ±       4.921  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5       339.322 ±    1389.377    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        72.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                                 128  thrpt    5     18975.725 ±     293.764   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       790.520 ±       9.420  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     65570.096 ±     525.740    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                            128  thrpt    5       808.080 ±    1159.647  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     67047.426 ±   96583.441    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        49.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                          128  thrpt    5     22818.166 ±     787.419   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       880.785 ±      30.835  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     60748.303 ±     158.921    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5       807.608 ±    1157.359  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5     55849.751 ±   82638.285    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                              128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                         128  thrpt    5        18.442 ±      97.248    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        55.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                         128  thrpt    5    313387.681 ±    3379.963   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       710.802 ±       6.538  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3570.215 ±      14.674    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                    128  thrpt    5       673.895 ±       1.294  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                               128  thrpt    5      3384.851 ±      37.020    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                        128  thrpt    5         0.669 ±       5.760    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        39.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    414295.673 ±    7426.777   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         2.564 ±      19.924  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         9.816 ±      76.341    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                              128  thrpt    5     20904.299 ±     870.390   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       884.615 ±      38.172  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     66605.865 ±     510.112    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                         128  thrpt    5       942.352 ±    1420.429  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     71053.220 ±  108300.115    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        20.007 ±     105.512    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        63.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                      128  thrpt    5      9962.073 ±     239.435   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1080.697 ±      21.819  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5    170752.603 ±     794.721    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1079.147 ±    1426.546  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    170705.617 ±  227794.471    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.599 ±       7.389  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       251.781 ±    1162.136    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                             128  thrpt    5        57.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                               128  thrpt    5      8826.092 ±     577.567   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       901.345 ±      60.574  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5    160722.675 ±    1272.821    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       942.093 ±    1419.768  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5    168244.783 ±  256535.944    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        23.662 ±     203.736    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         7.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        65.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                              128  thrpt    5    261688.520 ±    7554.674   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      1515.084 ±      40.323  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      9112.632 ±      32.465    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.006 ±       0.056  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.039 ±       0.337    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1491.918 ±    1174.565  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      8979.503 ±    7244.965    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.465 ±       7.780  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5         8.874 ±      47.116    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        47.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                   128  thrpt    5      8014.234 ±     126.107   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1083.792 ±      27.938  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5    212849.136 ±    2316.584    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1076.863 ±    1415.753  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5    211536.170 ±  278587.700    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.799 ±       4.588  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5       157.294 ±     902.098    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        75.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                     128  thrpt    5     29335.649 ±    1651.029   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5       958.643 ±      50.019  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     51433.201 ±     293.864    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                128  thrpt    5       942.955 ±    1421.404  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     50796.600 ±   79050.653    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.666 ±       4.442  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        35.125 ±     233.376    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        59.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                              128  thrpt    5     71965.008 ±    3495.401   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1567.190 ±      75.561  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     34276.785 ±      34.943    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.015 ±       0.097  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.333 ±       2.101    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1628.553 ±    1431.355  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     35623.687 ±   31366.513    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.598 ±      12.379  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        35.284 ±     273.780    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        47.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                             128  thrpt    5    584234.585 ±    9413.577   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       802.611 ±      10.838  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2162.023 ±      12.185    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       809.045 ±    1161.645  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      2181.292 ±    3166.312    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        47.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    654280.721 ±   13943.840   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         0.308 ±       2.645  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5         0.740 ±       6.363    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                                  128  thrpt    5     66694.730 ±    1380.324   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1440.646 ±      30.566  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     33990.990 ±     184.562    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.055 ±       0.474  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         1.304 ±      11.226    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1353.926 ±      32.398  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     31945.622 ±    1011.448    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.865 ±       7.782  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        44.177 ±     184.278    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        58.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                          128  thrpt    5     18971.228 ±     754.543   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                           128  thrpt    5       663.579 ±      32.361  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                      128  thrpt    5     55053.568 ±    1191.022    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       673.813 ±       1.486  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     55908.130 ±    2326.675    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        10.977 ±      94.515    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                                128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                                 128  thrpt    5        41.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                   128  thrpt    5     18807.086 ±    1287.629   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       531.533 ±      31.448  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     44493.773 ±    4113.577    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       538.354 ±    1158.849  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     45299.071 ±   97554.673    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        11.422 ±      98.345    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                          128  thrpt    5        38.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                                  128  thrpt    5    114123.620 ±    3824.228   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       287.469 ±       3.311  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      3964.598 ±     107.431    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       269.660 ±    1421.838  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      3748.240 ±   19764.193    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                        128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                         128  thrpt    5        15.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                       128  thrpt    5     15046.686 ±     796.483   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                        128  thrpt    5       915.715 ±      36.900  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     95783.517 ±    2947.810    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       807.351 ±    1158.474  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     84593.924 ±  123892.996    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        13.761 ±     118.485    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                             128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                              128  thrpt    5        56.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                         128  thrpt    5     49110.568 ±    3781.006   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                          128  thrpt    5       786.350 ±      60.588  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     128  thrpt    5     25201.551 ±     546.184    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       673.834 ±       1.425  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     21602.272 ±    1679.036    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         8.645 ±      45.602    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                               128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                                128  thrpt    5        41.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                                  128  thrpt    5     62529.232 ±    1237.768   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   128  thrpt    5      1010.741 ±      20.307  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5     25441.886 ±      16.180    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1077.679 ±    1420.769  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     27163.316 ±   36205.800    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.066 ±       6.437  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        26.865 ±     162.045    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                         128  thrpt    5        69.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                                 128  thrpt    5    292812.486 ±   12130.153   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       562.182 ±      24.589  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      3021.818 ±      18.156    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       539.274 ±    1160.827  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      2906.953 ±    6258.689    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                       128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                        128  thrpt    5        31.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                         128  thrpt    5    326631.282 ±    9848.611   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          128  thrpt    5         0.322 ±       2.766  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     128  thrpt    5         1.571 ±      13.517    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                      128  thrpt    5     57913.910 ±    1332.159   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                       128  thrpt    5      1037.242 ±      23.935  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     28190.382 ±      22.811    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1077.418 ±    1421.124  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     29315.908 ±   39032.086    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.199 ±       7.564  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        32.605 ±     205.446    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                             128  thrpt    5        68.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                           128  thrpt    5    147573.715 ±    3825.456   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1807.418 ±      44.415  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     19278.818 ±     124.019    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.003 ±       0.024  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.035 ±       0.257    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1766.871 ±    1446.829  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     18848.380 ±   15472.020    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.465 ±       8.191  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        15.708 ±      87.938    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                                 128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        37.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                     128  thrpt    5    760553.106 ±   16451.899   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                      128  thrpt    5       421.753 ±       8.439  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                 128  thrpt    5       872.831 ±       4.808    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                128  thrpt    5       536.480 ±    1154.815  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1113.047 ±    2395.920    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.276 ±       2.379    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                           128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                            128  thrpt    5        47.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                    128  thrpt    5    296116.693 ±   24779.333   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       303.130 ±      21.262  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1610.935 ±      23.380    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       268.914 ±    1417.911  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1455.334 ±    7676.891    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5         2.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5        18.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                   128  thrpt    5   1032278.640 ±   43902.744   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       359.727 ±      26.424  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       548.517 ±      31.527    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       404.397 ±    1421.513  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       619.592 ±    2178.221    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                        128  thrpt    5     56816.372 ±    3792.735   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      2218.034 ±     109.635  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     61441.987 ±    1094.413    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.007 ±       0.024  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.197 ±       0.677    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      2315.014 ±    1426.981  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     64250.062 ±   43158.522    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.066 ±       9.179  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        30.444 ±     262.129    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        17.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        36.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                          128  thrpt    5    237101.241 ±   11065.564   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                           128  thrpt    5      1081.889 ±      54.017  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                      128  thrpt    5      7182.321 ±      38.519    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1079.539 ±    1425.411  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      7171.521 ±    9519.090    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.599 ±       6.438  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        10.522 ±      41.990    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                                 128  thrpt    5        57.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                    128  thrpt    5   1135484.856 ±   98398.527   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                     128  thrpt    5       387.052 ±      32.948  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                128  thrpt    5       536.475 ±       3.116    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                               128  thrpt    5       402.660 ±    1415.407  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       557.379 ±    1959.509    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.186 ±       1.598    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                          128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                           128  thrpt    5        31.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                   128  thrpt    5    907446.533 ±   21934.035   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       531.095 ±      10.654  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       921.091 ±       5.289    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       538.674 ±    1159.537  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       936.428 ±    2015.792    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.232 ±       1.993    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        36.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                                  128  thrpt    5   1871433.373 ±    8278.082   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       637.933 ±       2.615  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       536.542 ±       2.982    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       674.095 ±       0.118  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       566.956 ±       2.486    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        38.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   1952205.830 ±  304360.856   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         0.233 ±       1.459  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5         0.185 ±       1.158    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                       128  thrpt    5     39087.943 ±    1563.739   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      1818.769 ±      72.906  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     73236.312 ±      12.291    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.003 ±       0.029  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.134 ±       1.155    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1766.587 ±    1426.686  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     71187.234 ±   58483.193    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.599 ±       8.622  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        65.019 ±     351.630    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        44.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                            128  thrpt    5     38125.685 ±     387.441   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5       711.129 ±       5.568  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     29359.994 ±     127.002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       673.620 ±       1.558  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     27811.466 ±     236.352    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        11.011 ±      58.055    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        39.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                     128  thrpt    5     58654.280 ±    1267.711   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       615.994 ±      13.629  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     16530.194 ±      47.609    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       538.611 ±    1159.402  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     14487.221 ±   31185.261    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        37.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                    128  thrpt    5    192800.206 ±    6213.892   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       627.856 ±      23.021  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      5125.057 ±      34.593    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       674.142 ±       0.321  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      5503.228 ±     177.494    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        38.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                         128  thrpt    5     21095.689 ±    1902.709   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1053.705 ±      37.201  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     78636.497 ±    5170.421    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1077.174 ±    1415.819  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     80637.285 ±  108902.324    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±       5.619  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        68.720 ±     415.312    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        70.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                           128  thrpt    5     45083.876 ±    1398.732   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       667.914 ±      21.838  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     23314.812 ±      85.338    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       674.036 ±       1.266  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     23529.785 ±     740.899    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         4.647 ±      40.009    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        41.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                    128  thrpt    5     97024.806 ±    5307.212   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1330.898 ±      64.419  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     21591.975 ±     149.144    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.001 ±       0.010  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.018 ±       0.155    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1352.343 ±      29.410  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     21942.076 ±     945.049    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.732 ±       9.176  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        27.922 ±     148.008    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        64.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                   128  thrpt    5    176923.072 ±    5338.032   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       565.978 ±       8.464  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      5035.034 ±     104.443    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       539.328 ±    1160.944  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      4809.450 ±   10353.536    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        32.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5    191535.644 ±    3175.854   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5         0.629 ±       5.056  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5         5.207 ±      41.876    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                        128  thrpt    5     66449.773 ±    2130.923   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5       983.751 ±      26.938  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     23302.155 ±     124.752    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       942.479 ±    1418.606  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     22338.667 ±   33792.019    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.933 ±       5.319  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        21.956 ±     124.756    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        61.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                       128  thrpt    5     20207.456 ±     972.113   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                        128  thrpt    5      1163.218 ±      52.180  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     90584.562 ±    2171.535    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1215.024 ±    1164.724  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     94777.275 ±   92677.115    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.598 ±       7.390  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5       124.661 ±     576.803    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                             128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                              128  thrpt    5        61.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                                128  thrpt    5     19905.569 ±    1171.312   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       908.524 ±      50.904  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     71833.824 ±     333.833    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       942.278 ±    1418.485  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     74604.752 ±  113522.666    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        21.158 ±     111.576    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                       128  thrpt    5        64.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                               128  thrpt    5    478544.933 ±   13149.114   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1247.146 ±      29.993  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      4101.882 ±      45.132    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.020 ±       0.175  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.066 ±       0.571    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1352.469 ±      24.696  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      4448.319 ±      47.187    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.465 ±       6.639  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         4.820 ±      21.870    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                                      128  thrpt    5        57.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                                    128  thrpt    5     16653.278 ±    1345.587   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                                     128  thrpt    5      1312.061 ±      97.815  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                128  thrpt    5    124004.577 ±    2200.108    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1351.815 ±      29.508  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5    127790.480 ±    7615.370    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.732 ±       9.176  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5       163.284 ±     863.380    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                          128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                           128  thrpt    5        70.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                                      128  thrpt    5     69561.518 ±    2380.765   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                       128  thrpt    5      1335.936 ±      42.626  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     30227.777 ±      88.241    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.001 ±       0.007  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.018 ±       0.151    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1353.123 ±      27.927  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     30617.373 ±     520.953    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.599 ±       8.622  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        36.036 ±     194.492    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                            128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                             128  thrpt    5        54.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                               128  thrpt    5    154033.061 ±    6011.784   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1169.192 ±      35.066  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     11947.327 ±     151.389    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1214.555 ±    1165.061  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     12422.822 ±   12056.885    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.998 ±       8.310  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        20.473 ±      85.333    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                                      128  thrpt    5        67.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                              128  thrpt    5   1056330.593 ±   26063.091   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       876.726 ±      19.639  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1306.314 ±      13.988    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       808.916 ±    1160.711  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      1205.676 ±    1736.764    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                                    128  thrpt    5         6.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                                     128  thrpt    5        47.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                                      128  thrpt    5   1165977.027 ±    7835.661   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       128  thrpt    5         0.207 ±       1.444  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  128  thrpt    5         0.280 ±       1.956    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                                   128  thrpt    5    115593.139 ±    3389.459   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                                    128  thrpt    5      1302.355 ±      37.417  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     17733.071 ±      34.346    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.005 ±       0.047  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.074 ±       0.636    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1352.040 ±      29.953  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     18409.777 ±     152.692    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.732 ±       9.176  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        23.595 ±     125.084    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                          128  thrpt    5        65.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                                     128  thrpt    5     27409.497 ±     757.725   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1162.138 ±      30.239  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     66726.414 ±     151.738    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1214.247 ±    1165.171  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     69773.137 ±   67586.154    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.865 ±       8.773  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       107.216 ±     504.850    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         9.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        69.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                                    128  thrpt    5    655738.779 ±   16765.714   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1281.459 ±      27.235  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      3075.793 ±      23.502    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.012 ±       0.107  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.030 ±       0.255    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1352.523 ±      23.971  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      3246.383 ±      41.265    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.465 ±       6.639  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         3.507 ±      15.902    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        57.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                         128  thrpt    5     21094.353 ±    1474.854   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1593.258 ±      93.029  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5    118889.361 ±    1953.710    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.002 ±       0.012  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.159 ±       0.850    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1625.979 ±    1429.560  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    121393.630 ±  107873.176    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.732 ±       9.175  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       129.781 ±     686.570    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        62.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                                    128  thrpt    5    331116.085 ±   11374.637   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       922.495 ±      41.601  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      4385.437 ±      58.455    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       942.430 ±    1421.187  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      4491.419 ±    6909.372    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±       5.561  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         3.823 ±      26.651    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        64.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   1424070.789 ±   53310.429   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       833.321 ±      29.203  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       920.982 ±       3.749    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       943.952 ±    1421.602  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1046.192 ±    1611.753    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.147 ±       1.262    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        55.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1616245.707 ±   32774.170   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5         0.385 ±       2.423  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5         0.375 ±       2.360    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                        128  thrpt    5    204386.591 ±    8327.676   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1322.392 ±      50.685  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     10183.500 ±      31.409    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.028 ±       0.238  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.210 ±       1.806    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1352.303 ±      28.948  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     10414.239 ±     214.673    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.865 ±       8.773  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        14.372 ±      67.587    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        64.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                          128  thrpt    5     54403.644 ±    2357.294   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                           128  thrpt    5       968.407 ±      41.949  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                      128  thrpt    5     28016.628 ±       5.343    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1077.295 ±    1419.306  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     31225.966 ±   41777.565    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       5.560  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        23.475 ±     163.598    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                                 128  thrpt    5        65.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                   128  thrpt    5     57089.775 ±     655.610   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       660.003 ±       6.033  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     18197.131 ±     106.863    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       672.574 ±       1.117  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     18543.814 ±     205.552    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         3.678 ±      31.672    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                         128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                          128  thrpt    5        47.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                                  128  thrpt    5     62328.927 ±     950.650   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       676.921 ±      12.924  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5     17095.651 ±      73.547    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       673.490 ±       1.115  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     17009.256 ±     256.724    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         3.363 ±      28.954    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                         128  thrpt    5        39.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                       128  thrpt    5     29247.125 ±     866.492   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                        128  thrpt    5      1292.172 ±      33.395  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     69533.167 ±     316.690    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1215.734 ±    1160.665  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     65499.526 ±   63455.708    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.732 ±       8.029  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        92.823 ±     430.418    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                             128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                              128  thrpt    5        64.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                         128  thrpt    5    109052.468 ±    2436.650   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                          128  thrpt    5       481.120 ±       8.540  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      6944.272 ±      61.871    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       403.786 ±    1419.365  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      5844.567 ±   20544.995    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         1.933 ±      16.646    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                               128  thrpt    5         3.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                                128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                                  128  thrpt    5    227013.228 ±   14796.277   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       337.491 ±      22.887  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      2339.950 ±      14.441    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       269.116 ±    1418.972  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1891.039 ±    9972.757    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                        128  thrpt    5         2.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                         128  thrpt    5        18.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                                 128  thrpt    5    728257.506 ±   33471.927   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       903.417 ±      41.453  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      1952.606 ±       3.030    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       808.519 ±    1162.477  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1753.573 ±    2626.583    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.572 ±       3.016    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                       128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                        128  thrpt    5        46.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                         128  thrpt    5    802661.484 ±    4824.161   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          128  thrpt    5         0.221 ±       1.898  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     128  thrpt    5         0.434 ±       3.732    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                      128  thrpt    5    189566.376 ±    4540.802   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                       128  thrpt    5       612.261 ±      14.171  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5      5081.895 ±      16.294    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       537.939 ±    1157.958  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      4474.481 ±    9632.237    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                            128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                             128  thrpt    5        38.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                      128  thrpt    5    113658.268 ±    1238.307   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1399.023 ±      15.582  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     19375.207 ±      26.928    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.003 ±       0.022  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.036 ±       0.307    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1489.296 ±    1144.058  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     20630.848 ±   16008.312    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.865 ±       7.565  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        25.850 ±     104.897    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        57.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                               128  thrpt    5    128190.093 ±    5875.229   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       678.534 ±      30.057  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      8331.879 ±      14.926    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       672.702 ±       0.168  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      8261.182 ±     380.830    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         1.621 ±      13.960    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        46.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                              128  thrpt    5    402983.118 ±   12098.072   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       784.752 ±      22.298  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      3065.267 ±      66.789    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       809.012 ±    1160.578  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      3160.873 ±    4548.425    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5         0.523 ±       4.505    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        45.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                   128  thrpt    5     47605.511 ±    1478.506   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1827.287 ±      52.913  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     60412.949 ±    1426.078    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.007 ±       0.048  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.244 ±       1.570    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1766.096 ±    1428.592  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     58411.801 ±   47675.870    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.732 ±       9.177  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        57.695 ±     305.672    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        57.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                     128  thrpt    5    169732.786 ±     663.504   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5       579.851 ±       3.580  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5      5377.275 ±      25.776    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                128  thrpt    5       674.048 ±       0.228  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      6250.816 ±      24.523    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        39.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                              128  thrpt    5    428501.069 ±   35237.045   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       423.234 ±      36.111  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1554.431 ±      20.343    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       538.687 ±    1159.565  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      1985.741 ±    4278.795    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5         0.509 ±       4.380    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        36.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1049600.961 ±   28046.308   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       780.469 ±      16.424  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      1170.517 ±      16.013    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       808.795 ±    1160.459  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      1213.920 ±    1757.863    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        47.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1147025.650 ±   69184.566   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         0.603 ±       2.923  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5         0.839 ±       4.085    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                                  128  thrpt    5    315579.521 ±   10264.143   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5       855.472 ±      24.137  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5      4266.429 ±      52.808    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5       942.262 ±    1418.407  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      4711.607 ±    7245.057    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         1.329 ±       7.009    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        64.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                   128  thrpt    5      3926.922 ±     144.094   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       806.920 ±      30.770  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    323427.739 ±     687.129    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              128  thrpt    5       805.556 ±    1155.880  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5    323742.127 ±  479558.294    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        57.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                            128  thrpt    5      3606.186 ±     119.417   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       714.621 ±      21.781  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5    311742.369 ±     191.537    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       803.624 ±    1144.464  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5    351025.677 ±  507892.354    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        64.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                           128  thrpt    5     34617.311 ±     960.208   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       568.026 ±      14.329  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     25827.534 ±     148.467    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       537.633 ±    1157.295  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     24485.626 ±   52712.320    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        35.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                                128  thrpt    5      3228.042 ±      63.844   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5       847.919 ±      16.806  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    413435.538 ±     168.807    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5       804.797 ±    1154.837  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5    392970.641 ±  573806.497    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        61.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                                  128  thrpt    5     13809.464 ±    1018.071   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       718.216 ±      53.045  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     81854.146 ±     992.007    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             128  thrpt    5       671.411 ±       0.459  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     76542.446 ±    5745.969    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        49.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                           128  thrpt    5     17058.799 ±     403.336   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       819.712 ±      15.804  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     75635.630 ±     356.326    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       804.827 ±    1154.963  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     74390.131 ±  109017.124    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        61.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                          128  thrpt    5    236083.676 ±    6681.210   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       834.080 ±      17.259  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5560.736 ±      75.208    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5       806.519 ±    1157.463  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5      5381.337 ±    7799.086    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        53.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    262680.178 ±    4108.509   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.168 ±       1.444  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         1.014 ±       8.715    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                               128  thrpt    5     15957.075 ±     392.306   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       830.431 ±      28.208  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     81918.194 ±    3372.762    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          128  thrpt    5       804.708 ±    1153.883  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     79445.286 ±  115083.530    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        13.205 ±     113.695    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        63.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                          128  thrpt    5   1352653.534 ±   23878.960   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5        55.243 ±       0.861  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5        64.278 ±       1.836    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                               128  thrpt    5     60431.242 ±    1098.851   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      2488.613 ±      45.811  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     64815.231 ±     112.547    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.001 ±       0.003  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.014 ±       0.076    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2588.219 ±    1171.523  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     67424.211 ±   31000.001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.933 ±       8.030  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        24.432 ±     210.368    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        19.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        32.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                          128  thrpt    5   1626830.266 ±   48746.416   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       852.493 ±      27.606  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       824.783 ±       6.271    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       942.050 ±    1419.980  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       911.522 ±    1374.686    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         7.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        63.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                         128  thrpt    5   1926462.027 ±  184201.387   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       539.733 ±      51.834  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       440.954 ±       4.901    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       539.285 ±    1160.851  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       443.677 ±     956.024    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        31.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2192741.322 ±   11811.455   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5         0.051 ±       0.440  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.037 ±       0.316    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                              128  thrpt    5     46852.909 ±    2116.386   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1884.643 ±      82.315  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     63305.829 ±     237.215    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.014 ±       0.077  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.478 ±       2.585    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1902.586 ±    1162.214  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     63964.317 ±   40283.229    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         1.732 ±       9.177  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        58.544 ±     310.602    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        14.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        46.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                           N/A  thrpt    5    788963.756 ±   21772.049   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                            N/A  thrpt    5      2424.224 ±      60.131  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      4835.791 ±      29.773    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                N/A  thrpt    5         0.074 ±       0.640  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           N/A  thrpt    5         0.149 ±       1.284    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5      2454.370 ±    1440.870  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5      4897.538 ±    2920.087    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         0.933 ±       8.031  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5         1.869 ±      16.097    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                                 N/A  thrpt    5        19.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                                  N/A  thrpt    5        32.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                     N/A  thrpt    5   4387618.153 ±  108996.492   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5       267.914 ±       5.892  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        96.101 ±       0.541    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5       268.045 ±    1413.325  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5        96.786 ±     510.326    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         0.048 ±       0.413    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                           N/A  thrpt    5         2.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                            N/A  thrpt    5        22.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                    N/A  thrpt    5    762014.010 ±   33088.328   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       887.747 ±      32.200  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5      1833.876 ±      15.442    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               N/A  thrpt    5       941.745 ±    1418.700  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          N/A  thrpt    5      1951.854 ±    3019.483    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                          N/A  thrpt    5         7.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                           N/A  thrpt    5        67.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                   N/A  thrpt    5   8273846.814 ±  261181.553   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       379.118 ±       9.556  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        72.119 ±       0.695    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       404.823 ±    1423.011  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5        77.429 ±     272.179    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                         N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                          N/A  thrpt    5        21.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                        N/A  thrpt    5    384449.134 ±   23732.890   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1870.197 ±     114.671  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      7656.937 ±       4.759    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             N/A  thrpt    5         0.002 ±       0.021  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        N/A  thrpt    5         0.010 ±       0.087    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5      1764.138 ±    1441.823  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5      7225.206 ±    5943.367    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         1.732 ±      12.247  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5         7.224 ±      51.342    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                              N/A  thrpt    5        13.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                               N/A  thrpt    5        54.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                                 N/A  thrpt    5      4313.201 ±      87.563   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      1975.599 ±      41.503  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5    720897.831 ±     735.635    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.112 ±       0.441  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5        40.779 ±     160.723    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      2040.177 ±      31.215  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    744467.620 ±    5320.635    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         1.731 ±      13.520  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5       637.107 ±    4980.801    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        15.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        50.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                          N/A  thrpt    5      4867.554 ±     118.423   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5      2013.321 ±      39.873  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5    650910.223 ±    4158.067    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.008 ±       0.028  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         2.508 ±       9.098    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5      2039.852 ±      33.442  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5    659514.227 ±   24630.557    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.865 ±      12.221  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5       599.571 ±    3920.663    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5        15.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        48.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                         N/A  thrpt    5     43640.184 ±     673.749   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       705.360 ±       2.074  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     25439.084 ±     387.160    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       674.086 ±       0.243  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     24311.159 ±     373.689    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        38.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                                N/A  thrpt    5      4243.904 ±     109.725   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                                 N/A  thrpt    5       781.543 ±      21.603  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                            N/A  thrpt    5    289801.255 ±    1902.422    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       807.872 ±    1159.527  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    300027.061 ±  438749.669    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.266 ±       1.405  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5        99.474 ±     524.501    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                                      N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                       N/A  thrpt    5        51.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                         N/A  thrpt    5      4391.419 ±     136.125   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                          N/A  thrpt    5       537.893 ±      14.185  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5    192778.890 ±    1334.471    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       537.553 ±    1157.124  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5    193087.308 ±  415679.413    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5        47.598 ±     409.830    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                               N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                                N/A  thrpt    5        41.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                        N/A  thrpt    5      6316.182 ±     159.875   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         N/A  thrpt    5       274.187 ±       6.931  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5     68317.725 ±     179.413    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       269.632 ±    1421.694  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5     67622.333 ±  356554.318    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                              N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                               N/A  thrpt    5        19.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                                N/A  thrpt    5      6363.575 ±     122.938   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 N/A  thrpt    5       229.760 ±       3.738  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            N/A  thrpt    5     56835.433 ±     682.537    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                           N/A  thrpt    5       269.574 ±    1421.387  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                      N/A  thrpt    5     67045.279 ±  353510.469    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                       N/A  thrpt    5        16.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                           N/A  thrpt    5      7156.555 ±      97.583   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1269.809 ±      15.503  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5    279276.636 ±    1040.768    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                N/A  thrpt    5         0.009 ±       0.081  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           N/A  thrpt    5         2.063 ±      17.761    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5      1351.396 ±      26.421  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5    297223.141 ±    7148.615    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         1.598 ±       7.388  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5       350.637 ±    1618.680    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                                 N/A  thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                                  N/A  thrpt    5        67.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                     N/A  thrpt    5     14836.285 ±     949.710   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5       344.712 ±      17.467  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5     36573.770 ±     820.368    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5       402.160 ±    1413.651  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5     42456.052 ±  149291.799    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                           N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                            N/A  thrpt    5        31.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                    N/A  thrpt    5     12904.066 ±     375.734   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       328.493 ±      21.903  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5     40069.534 ±    3390.522    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               N/A  thrpt    5       268.850 ±    1417.568  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          N/A  thrpt    5     33030.924 ±  174163.703    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                          N/A  thrpt    5         2.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                           N/A  thrpt    5        20.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                   N/A  thrpt    5     19973.503 ±     671.584   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       336.111 ±       8.035  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5     26487.435 ±     924.509    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       404.452 ±    1421.706  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5     32058.632 ±  112692.930    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                         N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                          N/A  thrpt    5        22.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                        N/A  thrpt    5      3770.847 ±     199.841   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      2192.632 ±     107.456  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5    915136.716 ±    3378.116    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             N/A  thrpt    5         0.017 ±       0.098  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        N/A  thrpt    5         7.203 ±      40.395    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5      2176.151 ±    1180.177  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5    908127.672 ±  484588.868    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         1.865 ±      13.380  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5       794.638 ±    5724.712    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                              N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                               N/A  thrpt    5        45.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                          N/A  thrpt    5      9087.641 ±     616.154   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                           N/A  thrpt    5      1571.101 ±     102.003  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    272118.400 ±    4813.067    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.003 ±       0.021  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         0.495 ±       3.570    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5      1627.105 ±    1424.050  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5    281741.324 ±  244026.517    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.599 ±       8.621  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5       279.227 ±    1500.337    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                                N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                                 N/A  thrpt    5        53.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                    N/A  thrpt    5     51974.464 ±    1573.979   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5       486.734 ±      13.347  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5     14739.609 ±     187.317    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                               N/A  thrpt    5       402.201 ±    1413.792  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          N/A  thrpt    5     12248.701 ±   43056.011    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                          N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                           N/A  thrpt    5        31.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                   N/A  thrpt    5     37535.960 ±     769.593   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5       540.061 ±       9.839  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5     22643.938 ±     222.447    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       538.084 ±    1158.266  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5     22611.637 ±   48673.777    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         5.600 ±      48.220    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                         N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                          N/A  thrpt    5        38.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                                  N/A  thrpt    5     85114.071 ±     776.973   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       640.369 ±       6.152  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     11841.576 ±      47.485    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             N/A  thrpt    5       674.078 ±       0.387  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        N/A  thrpt    5     12464.979 ±     112.544    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                        N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                         N/A  thrpt    5        40.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                          N/A  thrpt    5     93807.210 ±     464.681   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           N/A  thrpt    5         0.055 ±       0.303  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      N/A  thrpt    5         0.921 ±       5.070    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                       N/A  thrpt    5      6596.837 ±     214.901   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      1997.864 ±      65.728  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5    476674.312 ±     493.902    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            N/A  thrpt    5         0.034 ±       0.138  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       N/A  thrpt    5         8.054 ±      32.799    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5      1903.646 ±    1167.873  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5    454338.221 ±  281739.058    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           N/A  thrpt    5         1.732 ±      12.246  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      N/A  thrpt    5       417.995 ±    2965.016    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                             N/A  thrpt    5        14.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                              N/A  thrpt    5        47.000                    ms
[info] IntBenchmark.readCirce                                                                                     N/A  thrpt    5   8047787.990 ±   81559.643   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                      N/A  thrpt    5      4220.006 ±      21.734  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                                 N/A  thrpt    5       825.320 ±       5.033    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.001 ±       0.005  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      4224.773 ±    1173.867  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5       826.243 ±     228.873    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                           N/A  thrpt    5        31.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                            N/A  thrpt    5        44.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                               N/A  thrpt    5  32483969.361 ±   88065.733   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                                N/A  thrpt    5         0.033 ±       0.286  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                           N/A  thrpt    5         0.002 ±       0.014    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                     N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                              N/A  thrpt    5   8463452.954 ±   50652.863   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                               N/A  thrpt    5      3100.087 ±      15.518  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5       576.485 ±       1.893    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.001 ±       0.005  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      3134.645 ±    1435.561  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5       582.966 ±     269.068    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                    N/A  thrpt    5        23.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                     N/A  thrpt    5        35.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                             N/A  thrpt    5  36937502.323 ± 2731330.339   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                              N/A  thrpt    5         0.069 ±       0.448  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5         0.003 ±       0.019    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                                N/A  thrpt    5  24494084.746 ± 1136337.573   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                                 N/A  thrpt    5       872.530 ±      41.043  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5        56.060 ±       0.316    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       944.006 ±    1421.816  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5        60.653 ±      91.327    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         0.009 ±       0.075    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                      N/A  thrpt    5         7.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                       N/A  thrpt    5        50.000                    ms
[info] IntBenchmark.readPlayJson                                                                                  N/A  thrpt    5   7156252.502 ±  270784.513   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                   N/A  thrpt    5      3094.198 ±     109.761  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                              N/A  thrpt    5       680.529 ±       3.037    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       N/A  thrpt    5         0.001 ±       0.005  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5      2998.213 ±    1435.951  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5       659.537 ±     319.830    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                        N/A  thrpt    5        22.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                         N/A  thrpt    5        33.000                    ms
[info] IntBenchmark.writeCirce                                                                                    N/A  thrpt    5  14922370.333 ±  477848.232   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1214.578 ±      34.674  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5       128.095 ±       0.470    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1216.467 ±    1167.465  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5       128.126 ±     120.903    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.465 ±       7.779  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         0.154 ±       0.816    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                          N/A  thrpt    5         9.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                           N/A  thrpt    5        59.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                              N/A  thrpt    5  42168830.630 ± 1759047.118   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                               N/A  thrpt    5       857.576 ±      36.655  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                          N/A  thrpt    5        32.010 ±       0.081    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       804.885 ±    1155.081  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5        30.068 ±      43.546    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                    N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                     N/A  thrpt    5        62.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                             N/A  thrpt    5  11411910.410 ±  668677.723   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5      2262.522 ±     132.843  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5       312.059 ±       0.306    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.015 ±       0.122  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5         0.002 ±       0.017    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      2178.452 ±    1177.437  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5       300.410 ±     158.851    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         1.066 ±       9.176  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         0.151 ±       1.301    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                   N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                    N/A  thrpt    5        35.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                            N/A  thrpt    5  40919089.373 ± 3288197.462   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       832.778 ±      64.210  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5        32.033 ±       0.171    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       808.899 ±    1160.880  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5        31.227 ±      46.682    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                                  N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                   N/A  thrpt    5        45.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                    N/A  thrpt    5  46962887.612 ±  681389.489   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                     N/A  thrpt    5         0.549 ±       2.227  MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                N/A  thrpt    5         0.018 ±       0.075    B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                          N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                               N/A  thrpt    5  22874283.126 ±  824484.271   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                                N/A  thrpt    5       931.224 ±      30.477  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5        64.071 ±       0.325    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       944.343 ±    1423.663  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5        65.152 ±     100.412    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.266 ±       1.405  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.018 ±       0.096    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                     N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                      N/A  thrpt    5        50.000                    ms
[info] IntBenchmark.writePlayJson                                                                                 N/A  thrpt    5   2278295.847 ±   75542.702   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5      1670.892 ±      28.520  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5      1154.336 ±      19.533    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.001 ±       0.006  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1627.109 ±    1417.986  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      1125.168 ±    1004.131    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         1.732 ±       8.231  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         1.193 ±       5.654    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                       N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                        N/A  thrpt    5        60.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                                128  thrpt    5    164135.452 ±    9369.832   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      3012.715 ±     162.892  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     28892.104 ±     102.442    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.011 ±       0.091  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.110 ±       0.892    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      2998.018 ±    1436.752  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     28764.964 ±   14239.615    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        22.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        34.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                                     128  thrpt    5     26197.388 ±    2097.248   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1820.408 ±     118.168  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5    109377.626 ±    1899.877    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.011 ±       0.092  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.636 ±       5.473    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1765.887 ±    1447.279  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    105939.043 ±   83232.675    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±       9.528  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       105.739 ±     578.850    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        13.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        46.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                                128  thrpt    5    117852.674 ±    2966.278   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       947.158 ±      23.795  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     12649.686 ±       7.575    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       941.828 ±    1420.042  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     12603.820 ±   19315.582    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.799 ±       4.214  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        10.711 ±      56.735    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        66.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                               128  thrpt    5    407987.542 ±   20919.818   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1587.646 ±      81.144  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      6124.881 ±      61.014    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.013 ±       0.108  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.049 ±       0.425    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1493.268 ±    1178.758  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      5770.930 ±    4829.559    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.465 ±       7.779  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         5.686 ±      30.142    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        47.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    445403.732 ±   19680.323   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5      1244.526 ±      55.082  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5      4398.123 ±      23.324    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                  128  thrpt    5      1216.193 ±    1151.000  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                             128  thrpt    5      4304.107 ±    4146.552    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                           128  thrpt    5         1.465 ±       8.191  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                      128  thrpt    5         5.245 ±      29.339    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              128  thrpt    5        56.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                                    128  thrpt    5     56759.537 ±    1418.342   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1066.914 ±      26.390  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     29585.985 ±      10.825    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1077.070 ±    1415.638  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     29919.256 ±   39883.532    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.932 ±       5.619  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        25.889 ±     156.498    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         8.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        74.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                          128  thrpt    5    222246.321 ±    8709.833   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                           128  thrpt    5      1510.340 ±      58.969  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                      128  thrpt    5     10696.690 ±       2.441    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.010 ±       0.087  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.071 ±       0.608    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1491.309 ±    1143.529  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     10577.118 ±    8542.833    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.598 ±       8.621  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        11.340 ±      61.185    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                                128  thrpt    5        11.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                                 128  thrpt    5        54.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                                   128  thrpt    5    359515.026 ±    9107.346   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       931.141 ±      17.698  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5      4076.992 ±      78.366    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       941.775 ±    1418.600  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      4128.745 ±    6283.888    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                          128  thrpt    5        67.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                                  128  thrpt    5   1160904.423 ±   45406.087   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5      2268.200 ±      86.271  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      3075.468 ±      21.116    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.023 ±       0.176  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.030 ±       0.237    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      2316.161 ±    1439.322  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      3140.256 ±    1939.640    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.533 ±       4.588  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.716 ±       6.168    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                        128  thrpt    5        17.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                         128  thrpt    5        30.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                       128  thrpt    5     77098.100 ±    2425.431   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                        128  thrpt    5      2489.061 ±      77.410  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     50816.489 ±     106.679    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.004 ±       0.032  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.085 ±       0.654    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      2588.970 ±    1172.086  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     52879.936 ±   24698.687    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.266 ±       2.294  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         5.428 ±      46.740    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                             128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                              128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                         128  thrpt    5    310727.263 ±  100008.354   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                          128  thrpt    5       482.219 ±     154.216  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      2442.423 ±      14.899    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       404.498 ±    1421.866  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      2018.299 ±    7119.234    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                               128  thrpt    5         3.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                                128  thrpt    5        24.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                                  128  thrpt    5    792392.263 ±   40883.327   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       574.757 ±      23.928  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      1141.643 ±      43.601    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       673.097 ±       1.525  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1337.087 ±      70.484    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.530 ±       2.793    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                         128  thrpt    5        45.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                                 128  thrpt    5   1945922.111 ±  126279.932   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       900.668 ±      53.977  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5       728.597 ±       4.028    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       943.605 ±    1421.424  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       766.681 ±    1195.791    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                        128  thrpt    5        54.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                         128  thrpt    5   2147677.377 ±   13317.235   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          128  thrpt    5         0.541 ±       3.169  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     128  thrpt    5         0.397 ±       2.328    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                                      128  thrpt    5    410414.150 ±    4707.760   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                       128  thrpt    5       593.167 ±       5.860  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5      2275.085 ±      18.636    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       672.949 ±       1.391  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      2581.100 ±      31.431    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         1.019 ±       5.373    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                            128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                             128  thrpt    5        44.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                                     128  thrpt    5     44928.351 ±    2645.966   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1402.483 ±      82.085  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     49124.960 ±      83.261    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1353.702 ±      26.363  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     47422.544 ±    2031.274    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±       6.931  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        60.470 ±     240.784    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                           128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                            128  thrpt    5        52.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                              128  thrpt    5     59715.876 ±    2259.951   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1073.522 ±      38.483  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     28292.706 ±      82.569    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1078.105 ±    1424.753  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     28477.583 ±   38323.468    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.465 ±       7.780  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        38.824 ±     206.361    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        68.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                             128  thrpt    5     92548.134 ±    5104.674   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1420.610 ±      66.069  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     24158.531 ±     307.177    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  128  thrpt    5         0.006 ±       0.051  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             128  thrpt    5         0.101 ±       0.866    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1490.493 ±    1145.179  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     25394.393 ±   20832.372    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         1.466 ±       7.780  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5        24.571 ±     130.396    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        53.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                                  128  thrpt    5     21745.232 ±     923.593   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      1411.993 ±      51.894  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    102191.297 ±     797.707    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.003 ±       0.022  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.212 ±       1.564    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1488.295 ±    1141.579  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    107849.861 ±   86603.342    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.732 ±       7.610  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       125.289 ±     550.241    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        68.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                             128  thrpt    5    117252.991 ±    4749.247   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1078.163 ±      43.909  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     14472.394 ±      48.015    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1077.770 ±    1423.464  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     14480.198 ±   19261.468    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         1.465 ±       8.192  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5        19.575 ±     109.260    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        68.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                            128  thrpt    5    420421.247 ±   24381.426   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       463.993 ±      26.767  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1737.068 ±       8.672    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       404.426 ±    1421.613  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      1528.664 ±    5373.882    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        23.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    448242.131 ±    1509.092   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         4.576 ±       0.107  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        16.068 ±       0.360    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                                 128  thrpt    5     53313.788 ±     787.632   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1004.008 ±      15.122  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     29640.006 ±      48.608    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            128  thrpt    5       941.830 ±    1418.596  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     27823.648 ±   42147.819    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.666 ±       5.735  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        19.591 ±     168.689    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         7.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        69.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                         N/A  thrpt    5   2579142.489 ±   38551.665   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                          N/A  thrpt    5      3252.318 ±      51.130  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1984.811 ±       2.296    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              N/A  thrpt    5         0.001 ±       0.002  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5      3134.406 ±    1437.538  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5      1912.596 ±     866.861    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                               N/A  thrpt    5        23.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                                N/A  thrpt    5        39.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                   N/A  thrpt    5    770828.793 ±   46514.461   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       474.501 ±      29.061  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5       968.790 ±       4.581    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       402.388 ±    1414.452  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       827.776 ±    2910.377    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.269 ±       2.318    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                         N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                          N/A  thrpt    5        31.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                                  N/A  thrpt    5    291535.571 ±    5913.038   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       551.714 ±       7.363  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5      2978.721 ±      23.413    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             N/A  thrpt    5       538.175 ±    1158.463  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        N/A  thrpt    5      2907.720 ±    6259.485    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                        N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                         N/A  thrpt    5        39.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                                 N/A  thrpt    5    458116.486 ±   27617.121   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       346.315 ±      12.217  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1189.843 ±      37.499    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            N/A  thrpt    5       404.485 ±    1421.822  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       N/A  thrpt    5      1401.206 ±    4926.174    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                       N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                        N/A  thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                             N/A  thrpt    5   1348260.831 ±   55737.825   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                              N/A  thrpt    5       432.183 ±      18.490  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                         N/A  thrpt    5       504.530 ±       3.388    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       539.285 ±    1160.851  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5       631.403 ±    1359.404    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                    N/A  thrpt    5        30.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                       N/A  thrpt    5   3655652.948 ±  108166.278   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                        N/A  thrpt    5       297.795 ±      10.412  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                   N/A  thrpt    5       128.214 ±       1.845    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                                  N/A  thrpt    5       269.750 ±    1422.313  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                             N/A  thrpt    5       116.938 ±     616.597    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space                           N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Survivor_Space.norm                      N/A  thrpt    5         0.057 ±       0.494    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                             N/A  thrpt    5         2.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                              N/A  thrpt    5        15.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                      N/A  thrpt    5    221396.159 ±    9675.786   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      1488.485 ±      65.075  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5     10581.094 ±      24.288    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5      1488.242 ±    1198.092  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     10563.661 ±    8027.395    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          N/A  thrpt    5         1.732 ±       9.177  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     N/A  thrpt    5        12.295 ±      65.109    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                            N/A  thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                             N/A  thrpt    5        69.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1359433.599 ±  134186.260   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        42.345 ±       3.168  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        49.070 ±       8.793    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.readPlayJson                                                                        128  thrpt    5     58576.400 ±     507.750   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      2491.071 ±      22.731  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     66932.359 ±      94.075    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.003 ±       0.017  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.078 ±       0.462    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      2588.485 ±    1171.631  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     69557.597 ±   31744.059    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±       6.882  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        21.559 ±     185.630    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        19.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        33.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1445025.172 ±   28955.467   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       757.737 ±       6.300  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       825.361 ±      11.716    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       672.743 ±       0.473  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       732.788 ±      14.784    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         5.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        46.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   1743266.568 ±   44081.343   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       470.278 ±      12.631  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       424.564 ±       3.002    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       404.492 ±    1421.846  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       366.755 ±    1289.213    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         3.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        23.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5    981895.628 ±    1517.485   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        10.015 ±       0.278  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.055 ±       0.468    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                       128  thrpt    5     46909.809 ±     941.456   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      1888.162 ±      26.952  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     63357.872 ±     646.517    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.009 ±       0.074  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.302 ±       2.506    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1902.102 ±    1161.584  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     63855.260 ±   39672.652    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.732 ±       9.176  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        58.388 ±     309.324    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        14.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        51.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5    224298.912 ±    7750.935   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       878.716 ±      33.166  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6166.131 ±      42.644    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   128  thrpt    5       808.915 ±    1160.654  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              128  thrpt    5      5685.004 ±    8306.789    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         6.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        46.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5     28331.622 ±    1130.978   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1365.812 ±      60.804  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     75879.939 ±    1150.288    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             128  thrpt    5         0.006 ±       0.050    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1351.981 ±      29.921  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     75114.878 ±    1480.547    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         1.732 ±       9.176  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5        96.121 ±     509.420    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        67.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5     91055.597 ±    1716.476   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1111.224 ±      22.797  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19203.295 ±      75.270    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   128  thrpt    5      1077.267 ±    1421.606  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              128  thrpt    5     18639.942 ±   24851.129    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            128  thrpt    5         1.465 ±       8.191  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       128  thrpt    5        25.294 ±     141.559    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        69.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5    313628.070 ±   14084.966   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       422.801 ±      19.387  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      2121.829 ±      11.361    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  128  thrpt    5       404.459 ±    1421.729  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             128  thrpt    5      2041.624 ±    7177.446    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    341382.001 ±    1191.732   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         3.522 ±       0.266  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        16.238 ±       1.248    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5     43291.671 ±    1241.880   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1065.017 ±      29.582  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     38716.784 ±     101.941    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       128  thrpt    5       942.508 ±    1417.866  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5     34312.945 ±   52232.214    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                128  thrpt    5         0.800 ±       4.590  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5        29.241 ±     168.282    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         7.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        63.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     63769.828 ±    1750.040   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1354.413 ±      36.158  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     33426.905 ±      82.132    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.002 ±       0.021  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.060 ±       0.519    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1353.875 ±      26.246  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     33413.997 ±     297.868    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.599 ±       7.390  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        39.437 ±     182.253    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        53.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5    107421.471 ±    2019.301   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5       527.214 ±      11.416  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      7725.055 ±      48.996    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                  128  thrpt    5       538.187 ±    1158.488  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                             128  thrpt    5      7902.192 ±   17010.161    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        38.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    243479.805 ±    9092.046   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1003.279 ±      36.672  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      6485.860 ±      34.040    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                 128  thrpt    5      1078.496 ±    1421.530  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                            128  thrpt    5      6974.740 ±    9222.136    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                          128  thrpt    5         0.666 ±       5.735  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                     128  thrpt    5         4.243 ±      36.535    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        63.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     20766.173 ±     549.866   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1025.728 ±      16.737  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     77737.140 ±     985.486    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                      128  thrpt    5      1076.897 ±    1420.472  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     81731.550 ±  109076.122    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                               128  thrpt    5         1.199 ±       8.960  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5        90.969 ±     678.831    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        75.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    133572.618 ±    3579.640   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5       691.365 ±       7.167  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      8146.632 ±     179.678    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                 128  thrpt    5       672.790 ±       0.264  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                            128  thrpt    5      7927.822 ±     213.559    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        48.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    423990.893 ±   22273.230   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1244.506 ±      49.366  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      4619.781 ±      62.453    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'          128  thrpt    5         0.011 ±       0.091  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     128  thrpt    5         0.039 ±       0.332    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                128  thrpt    5      1352.389 ±      23.857  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                           128  thrpt    5      5020.720 ±     242.532    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                         128  thrpt    5         1.466 ±       6.883  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                    128  thrpt    5         5.500 ±      25.897    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        59.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    472129.324 ±   21421.367   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5       870.022 ±      15.399  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5      2900.337 ±      98.283    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                        128  thrpt    5       809.030 ±    1161.796  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                   128  thrpt    5      2697.727 ±    3886.607    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                    128  thrpt    5        46.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     53883.347 ±    2655.510   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1113.443 ±      46.643  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     32524.542 ±     282.394    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                     128  thrpt    5      1077.885 ±    1424.474  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5     31521.509 ±   42039.698    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                              128  thrpt    5         1.465 ±       8.192  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                         128  thrpt    5        42.380 ±     237.050    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        69.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     88843.932 ±    2462.831   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      1339.058 ±      34.008  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     23720.822 ±     170.667    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1353.993 ±      26.352  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     23985.581 ±     228.012    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.465 ±       7.780  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        25.967 ±     137.937    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        56.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    142511.956 ±     669.563   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       593.168 ±       2.605  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      6550.897 ±      30.958    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       672.650 ±       1.171  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      7428.693 ±      34.539    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         1.472 ±      12.674    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        47.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    224027.174 ±    3443.731   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       802.492 ±      20.727  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      5638.256 ±     136.438    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       809.033 ±    1161.978  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      5688.206 ±    8240.602    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.940 ±       8.093    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        45.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     53110.378 ±    1077.669   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      2009.809 ±      46.336  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     59559.861 ±     537.721    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.003 ±       0.013  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.079 ±       0.380    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      2040.459 ±      31.564  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     60468.780 ±     798.724    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±      12.245  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        51.624 ±     365.573    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        15.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        38.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    172321.062 ±    4122.793   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       811.647 ±      20.174  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5      7412.593 ±      17.932    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       808.298 ±    1159.303  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      7391.706 ±   10772.094    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.266 ±       1.405  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         2.426 ±      12.793    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        47.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    512662.420 ±   14197.454   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       404.437 ±      10.204  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1241.690 ±      12.912    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       403.602 ±    1418.718  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      1245.053 ±    4376.554    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    546569.010 ±   42450.551   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       294.498 ±      22.843  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       848.099 ±       0.849    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       269.653 ±    1421.800  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5       776.767 ±    4095.776    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         2.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        16.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    598160.574 ±    4665.477   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         6.213 ±       1.097  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.350 ±       3.010    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     32999.556 ±    2344.413   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1590.529 ±     111.512  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     75860.618 ±      16.008    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.008 ±       0.073  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.400 ±       3.440    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1626.903 ±    1426.208  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     77763.162 ±   71590.677    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.732 ±       9.175  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        82.136 ±     435.353    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        61.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                              N/A  thrpt    5    797970.746 ±   33451.576   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2036.608 ±      84.971  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4017.017 ±       2.489    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.016 ±       0.137  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5         0.032 ±       0.269    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      2039.388 ±      34.287  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      4022.766 ±     126.160    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         1.599 ±       8.623  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         3.176 ±      17.172    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        15.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        41.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1529828.897 ±   47335.608   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5       979.749 ±      29.950  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1008.043 ±       0.366    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5       941.428 ±    1419.359  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5       970.792 ±    1490.465    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           N/A  thrpt    5         0.933 ±       3.890  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      N/A  thrpt    5         0.966 ±       4.064    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         7.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        70.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   7337812.350 ±  303515.164   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       224.296 ±       7.341  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        48.114 ±       0.862    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       269.767 ±    1422.404  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5        58.551 ±     308.720    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5        19.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                           N/A  thrpt    5    315292.997 ±   11395.959   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      1953.794 ±      49.481  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5      9754.383 ±     189.863    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                N/A  thrpt    5         0.006 ±       0.052  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           N/A  thrpt    5         0.030 ±       0.259    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5      1901.990 ±    1198.362  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5      9493.217 ±    5925.914    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         1.732 ±      10.194  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5         8.676 ±      51.065    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        48.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                             N/A  thrpt    5    958939.547 ±   10428.592   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1423.452 ±      15.485  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      2336.147 ±       0.344    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.044 ±       0.382  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5         0.073 ±       0.625    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      1489.167 ±    1185.255  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5      2443.440 ±    1928.521    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         1.732 ±       9.178  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         2.839 ±      15.044    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        11.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        63.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2194796.110 ±  102911.910   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1039.690 ±      40.637  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       745.612 ±      11.226    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5      1076.799 ±    1421.555  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5       772.443 ±    1022.269    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          N/A  thrpt    5         0.932 ±       6.688  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     N/A  thrpt    5         0.670 ±       4.803    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        71.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5   5637768.328 ±   90496.123   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       631.191 ±       6.645  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       176.186 ±       1.371    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5       673.827 ±       2.333  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5       188.089 ±       3.014    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        40.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5   5806758.135 ±  329286.951   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5       355.099 ±      18.981  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5        96.249 ±       1.081    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       404.457 ±    1421.724  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5       109.389 ±     384.523    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                    N/A  thrpt    5        23.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                          N/A  thrpt    5    354833.660 ±   24602.802   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      1906.039 ±     137.274  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      8455.425 ±      52.257    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.020 ±       0.163  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         0.089 ±       0.734    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5      1901.634 ±    1160.783  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5      8438.552 ±    5192.531    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.865 ±       9.833  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         8.426 ±      44.426    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        53.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                               128  thrpt    5     57073.082 ±    2006.330   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1494.384 ±      47.876  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     41202.230 ±     139.867    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.004 ±       0.032  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.105 ±       0.874    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1491.776 ±    1189.650  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     41110.328 ±   32167.691    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         1.599 ±       6.440  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        44.051 ±     176.749    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        11.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        54.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                        128  thrpt    5     73859.110 ±    2418.297   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1134.200 ±      27.670  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     24167.832 ±     317.665    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1077.772 ±    1415.767  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     23014.516 ±   30765.936    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.466 ±       7.781  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        31.144 ±     165.469    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5         8.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        67.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                       128  thrpt    5     98617.213 ±    1404.188   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1451.115 ±      14.074  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     23157.635 ±     184.917    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.008 ±       0.068  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.127 ±       1.090    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1355.796 ±      28.296  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     21636.824 ±     675.448    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.466 ±       7.781  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        23.380 ±     124.082    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5        10.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        45.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                            128  thrpt    5     39793.208 ±     870.607   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      1952.225 ±      76.823  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     77211.195 ±    1833.208    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.004 ±       0.038  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.178 ±       1.529    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1904.230 ±    1195.863  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     75295.966 ±   46864.364    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         1.732 ±       9.177  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        68.867 ±     364.805    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        37.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                              128  thrpt    5    156034.268 ±    4762.764   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5       746.737 ±      23.959  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      7533.081 ±      28.256    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       808.681 ±    1160.665  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      8158.184 ±   11706.984    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.133 ±       1.147  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         1.341 ±      11.544    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5         6.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        49.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                       128  thrpt    5    386973.262 ±   28552.743   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       334.446 ±      24.261  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1360.144 ±       1.234    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       269.161 ±    1419.210  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1113.512 ±    5872.546    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5         2.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        19.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                                      128  thrpt    5    618591.940 ±   11885.506   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       335.020 ±      11.676  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       852.431 ±      30.828    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       404.473 ±    1421.778  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1032.688 ±    3630.046    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        23.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5    659460.475 ±   57481.457   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5         6.819 ±       1.237  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5        16.271 ±       2.328    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                           128  thrpt    5     30697.415 ±    1109.059   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5      1480.524 ±      48.767  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     75898.412 ±     277.153    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.031 ±       0.250  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.573 ±      12.680    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1490.685 ±    1191.260  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     76340.620 ±   58609.626    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.732 ±       8.232  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        88.514 ±     420.958    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5        11.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        54.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                      128  thrpt    5   3471043.925 ±   94844.153   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      2348.662 ±      63.343  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5      1065.061 ±       1.823    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.007 ±       0.057  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.003 ±       0.026    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      2316.104 ±    1434.105  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1050.721 ±     662.911    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.666 ±       5.735  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.304 ±       2.614    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        17.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        35.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                                128  thrpt    5   3502497.175 ±  206921.182   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       374.644 ±      23.328  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5       168.356 ±       2.029    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                           128  thrpt    5       402.453 ±    1414.681  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       180.214 ±     633.478    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         3.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        31.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                               128  thrpt    5   2489984.076 ±   66052.024   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1179.046 ±      36.004  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5       745.198 ±       9.184    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1213.767 ±    1157.659  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5       767.963 ±     742.023    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.731 ±       7.159  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         1.096 ±       4.542    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        68.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                              128  thrpt    5   3872010.183 ±   88592.985   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       414.546 ±       8.603  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5       168.519 ±       3.371    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       404.445 ±    1421.680  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5       165.040 ±     580.140    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        23.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                   128  thrpt    5   2624528.074 ±   43931.757   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1241.357 ±      20.426  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5       744.233 ±       1.224    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1215.145 ±    1167.938  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       728.370 ±     698.203    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.732 ±       8.231  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         1.040 ±       4.948    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        60.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                     128  thrpt    5   2226519.088 ±   16674.545   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5       535.102 ±      17.057  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5       378.290 ±      13.780    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                128  thrpt    5       539.271 ±    1160.822  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       381.047 ±     820.238    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        32.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                               128  thrpt    5   5733046.448 ±  223633.695   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       553.717 ±      21.720  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       152.022 ±       0.065    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                          128  thrpt    5       536.458 ±    1154.767  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5       147.821 ±     318.229    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         0.036 ±       0.314    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5        48.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                              128  thrpt    5   3380157.440 ±   74053.818   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1050.208 ±      19.100  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5       489.078 ±       4.625    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1078.051 ±    1424.032  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5       502.809 ±     672.442    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.599 ±       8.622  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5         0.747 ±       4.027    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        66.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                             128  thrpt    5   5776489.755 ±  209684.267   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       558.503 ±      19.373  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       152.181 ±       0.730    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       539.256 ±    1160.789  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5       147.424 ±     317.369    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        33.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   6357682.076 ±   26160.657   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         0.458 ±       2.319  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5         0.113 ±       0.574    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                                  128  thrpt    5   3494390.733 ±  295462.024   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5       963.458 ±      51.410  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5       434.057 ±      16.619    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5       942.486 ±    1420.172  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       424.169 ±     633.118    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.666 ±       5.735  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.297 ±       2.559    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        63.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                   128  thrpt    5   1063168.897 ±   29929.618   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1687.392 ±      45.879  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5      2497.970 ±      13.468    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.007 ±       0.062  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.011 ±       0.092    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1764.265 ±    1432.144  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      2612.419 ±    2132.320    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.466 ±       7.782  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         2.163 ±      11.476    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        13.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        49.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                             128  thrpt    5   1760330.043 ±   42252.476   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       493.108 ±      10.403  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       440.912 ±       3.527    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                        128  thrpt    5       402.461 ±    1414.708  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5       361.467 ±    1270.612    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        31.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                            128  thrpt    5   1173670.481 ±   28446.525   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       842.120 ±      17.907  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1129.358 ±       6.024    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       807.273 ±    1158.467  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      1083.904 ±    1577.947    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        54.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1681586.895 ±   34644.822   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       470.793 ±       8.614  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       440.659 ±       2.052    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       404.704 ±    1422.591  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5       380.095 ±    1336.101    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5         0.125 ±       1.077    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        21.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                                128  thrpt    5   1222897.592 ±    2666.310   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5       789.534 ±       1.509  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5      1016.306 ±       2.468    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5       673.203 ±       1.174  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       866.563 ±       1.822    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.172 ±       1.477    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        44.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                                  128  thrpt    5   1040284.274 ±   42404.730   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       874.012 ±      26.309  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      1322.433 ±      15.517    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             128  thrpt    5       808.890 ±    1160.750  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1225.473 ±    1785.766    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        47.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                            128  thrpt    5    806042.477 ±   32765.223   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       209.613 ±       7.100  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       409.306 ±       7.614    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                       128  thrpt    5       268.329 ±    1414.820  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5       529.729 ±    2793.163    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5         2.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1918033.548 ±   87373.904   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       909.112 ±      28.185  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       746.047 ±      13.422    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       942.619 ±    1418.944  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5       773.998 ±    1170.421    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5         0.109 ±       0.939    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        61.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   2172168.794 ±   37650.684   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       563.922 ±       9.365  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       408.666 ±       3.580    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     128  thrpt    5       674.017 ±       0.205  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                128  thrpt    5       488.457 ±       8.479    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        39.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2298859.106 ±    8422.282   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.037 ±       0.289  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.025 ±       0.198    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                               128  thrpt    5   2003845.696 ±   62652.871   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       878.203 ±      26.055  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5       689.581 ±      11.036    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          128  thrpt    5       807.101 ±    1151.150  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5       633.315 ±     895.054    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        51.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                              N/A  thrpt    5      6972.607 ±      62.855   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5       834.964 ±       7.321  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5    188455.840 ±     875.851    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       808.149 ±    1160.411  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5    182494.534 ±  263660.589    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        50.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                       N/A  thrpt    5     16285.334 ±    1390.085   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5       216.731 ±      22.802  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5     20948.887 ±    1793.911    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5       268.836 ±    1417.496  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5     26384.806 ±  139168.341    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        21.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                      N/A  thrpt    5     19710.437 ±     483.564   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       189.251 ±      20.109  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5     15113.820 ±    1868.456    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       134.981 ±    1162.223  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     10843.278 ±   93363.892    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         1.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                           N/A  thrpt    5      5885.185 ±     321.503   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      1614.590 ±      87.201  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5    431830.463 ±     323.203    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                N/A  thrpt    5         0.006 ±       0.055  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           N/A  thrpt    5         1.688 ±      14.531    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5      1623.821 ±    1409.146  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5    435196.382 ±  396433.098    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         1.998 ±      10.097  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5       537.359 ±    2711.758    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        12.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        80.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                      N/A  thrpt    5     47789.772 ±     569.852   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5       600.496 ±       4.573  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5     19775.186 ±      92.270    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       537.731 ±    1157.507  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     17721.631 ±   38147.778    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        39.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5     81128.657 ±    1571.785   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       542.660 ±      10.033  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5     10525.967 ±      44.263    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5       538.971 ±    1160.176  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5     10477.513 ±   22553.713    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         2.588 ±      22.284    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        32.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5     87797.434 ±     226.272   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5        23.910 ±       1.572  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5       428.611 ±      28.935    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                        128  thrpt    5    272880.870 ±   11967.801   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      1460.124 ±      66.619  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      8421.264 ±      31.714    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.005 ±       0.042  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.028 ±       0.243    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1490.285 ±    1145.438  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      8602.618 ±    6815.156    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.466 ±       8.192  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         8.510 ±      47.516    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                              128  thrpt    5        11.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                               128  thrpt    5        57.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                                 128  thrpt    5    391558.876 ±   17365.049   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       441.934 ±      13.151  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      1776.606 ±      32.281    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       403.647 ±    1418.878  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1635.896 ±    5750.467    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        29.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                                128  thrpt    5    989262.079 ±   30568.758   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       518.277 ±      16.774  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       824.637 ±       3.425    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       539.226 ±    1160.724  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       857.714 ±    1846.593    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                                     128  thrpt    5     72428.836 ±     834.467   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      2235.639 ±      22.508  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     48582.735 ±      82.973    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.002 ±       0.014  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.038 ±       0.301    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      2179.518 ±    1176.762  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     47373.949 ±   26003.681    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±       6.881  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        17.405 ±     149.866    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        16.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                       128  thrpt    5    290322.830 ±   37053.233   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       463.232 ±      59.459  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5      2511.499 ±      36.467    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       404.281 ±    1421.107  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      2175.990 ±    7650.639    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.714 ±       6.147    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        24.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                                128  thrpt    5    710180.337 ±   14465.629   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       542.085 ±       9.205  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1201.383 ±       6.563    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       538.098 ±    1158.296  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      1195.078 ±    2572.523    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        37.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                               128  thrpt    5   1349600.364 ±  113716.524   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       628.032 ±      28.008  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       732.613 ±      30.690    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5       674.053 ±       0.131  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5       786.460 ±      68.061    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        39.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5   1490089.100 ±    4997.311   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         0.563 ±       3.234  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5         0.595 ±       3.420    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                                    128  thrpt    5    391700.126 ±   36835.346   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       582.349 ±      52.391  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5      2340.005 ±      31.159    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       673.320 ±       1.164  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      2706.782 ±     256.449    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.533 ±       4.593    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        44.000                    ms
[info] Benchmark result is saved to jdk10graal.json
[success] Total time: 7078 s, completed May 14, 2018 3:28:42 AM
