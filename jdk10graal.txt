[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 16, 2018 5:57:56 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1400:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1430:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != 'Z' && tokenOrDigitError('Z')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1465:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1496:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1524:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1559:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1603:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1906:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1933:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1962:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:990:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1076:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 15 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d7(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d11(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e7(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:55:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -jvmArgsAppend -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -prof gc -rf json -rff jdk10graal.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92414.901 ops/s
[info] # Warmup Iteration   2: 729140.700 ops/s
[info] # Warmup Iteration   3: 778275.096 ops/s
[info] # Warmup Iteration   4: 782427.561 ops/s
[info] # Warmup Iteration   5: 783103.718 ops/s
[info] Iteration   1: 760525.209 ops/s
[info]                  ·gc.alloc.rate:                   2100.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              4346.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4192.832 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 779141.091 ops/s
[info]                  ·gc.alloc.rate:                   2147.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              4338.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4096.625 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 766213.645 ops/s
[info]                  ·gc.alloc.rate:                   2114.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              4341.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4172.000 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 772878.362 ops/s
[info]                  ·gc.alloc.rate:                   2159.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              4395.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5515.198 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 783514.734 ops/s
[info]                  ·gc.alloc.rate:                   2187.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              4394.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4089.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   772454.608 ±(99.9%) 35940.929 ops/s [Average]
[info]   (min, avg, max) = (760525.209, 772454.608, 783514.734), stdev = 9333.745
[info]   CI (99.9%): [736513.680, 808395.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2141.694 ±(99.9%) 135.015 MB/sec [Average]
[info]   (min, avg, max) = (2100.067, 2141.694, 2187.373), stdev = 35.063
[info]   CI (99.9%): [2006.679, 2276.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4363.301 ±(99.9%) 110.672 B/op [Average]
[info]   (min, avg, max) = (4338.700, 4363.301, 4395.200), stdev = 28.741
[info]   CI (99.9%): [4252.628, 4473.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.144 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (0.084, 0.144, 0.210), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2166.014 ±(99.9%) 1170.031 MB/sec [Average]
[info]   (min, avg, max) = (2025.722, 2166.014, 2709.522), stdev = 303.853
[info]   CI (99.9%): [995.984, 3336.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4413.167 ±(99.9%) 2378.648 B/op [Average]
[info]   (min, avg, max) = (4089.179, 4413.167, 5515.198), stdev = 617.727
[info]   CI (99.9%): [2034.519, 6791.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:55:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100804.189 ops/s
[info] # Warmup Iteration   2: 1875218.889 ops/s
[info] # Warmup Iteration   3: 1954612.808 ops/s
[info] # Warmup Iteration   4: 1963437.511 ops/s
[info] # Warmup Iteration   5: 1975245.513 ops/s
[info] Iteration   1: 1987642.922 ops/s
[info]                  ·gc.alloc.rate:                   1301.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              1030.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1067.583 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1950333.992 ops/s
[info]                  ·gc.alloc.rate:                   1276.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              1030.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1088.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1942364.049 ops/s
[info]                  ·gc.alloc.rate:                   1278.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              1036.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1093.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1979355.637 ops/s
[info]                  ·gc.alloc.rate:                   1271.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              1011.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 536.830 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1984530.333 ops/s
[info]                  ·gc.alloc.rate:                   1288.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              1021.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1071.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1968845.387 ±(99.9%) 80628.548 ops/s [Average]
[info]   (min, avg, max) = (1942364.049, 1968845.387, 1987642.922), stdev = 20938.978
[info]   CI (99.9%): [1888216.838, 2049473.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1283.456 ±(99.9%) 45.901 MB/sec [Average]
[info]   (min, avg, max) = (1271.664, 1283.456, 1301.804), stdev = 11.920
[info]   CI (99.9%): [1237.555, 1329.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1026.137 ±(99.9%) 37.807 B/op [Average]
[info]   (min, avg, max) = (1011.247, 1026.137, 1036.455), stdev = 9.818
[info]   CI (99.9%): [988.330, 1063.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.066), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1214.640 ±(99.9%) 1161.465 MB/sec [Average]
[info]   (min, avg, max) = (675.075, 1214.640, 1351.418), stdev = 301.629
[info]   CI (99.9%): [53.176, 2376.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   971.743 ±(99.9%) 937.139 B/op [Average]
[info]   (min, avg, max) = (536.830, 971.743, 1093.832), stdev = 243.372
[info]   CI (99.9%): [34.604, 1908.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:54:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3082926.415 ops/s
[info] # Warmup Iteration   2: 5395313.453 ops/s
[info] # Warmup Iteration   3: 5489479.470 ops/s
[info] # Warmup Iteration   4: 5738206.153 ops/s
[info] # Warmup Iteration   5: 5620791.543 ops/s
[info] Iteration   1: 5710755.182 ops/s
[info]                  ·gc.alloc.rate:                   387.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              106.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140.996 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5736314.949 ops/s
[info]                  ·gc.alloc.rate:      379.117 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5676417.343 ops/s
[info]                  ·gc.alloc.rate:                   392.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              108.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5578947.495 ops/s
[info]                  ·gc.alloc.rate:                   390.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              110.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190.359 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5714078.087 ops/s
[info]                  ·gc.alloc.rate:      377.508 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5683302.611 ±(99.9%) 239301.944 ops/s [Average]
[info]   (min, avg, max) = (5578947.495, 5683302.611, 5736314.949), stdev = 62145.955
[info]   CI (99.9%): [5444000.668, 5922604.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   385.665 ±(99.9%) 26.927 MB/sec [Average]
[info]   (min, avg, max) = (377.508, 385.665, 392.989), stdev = 6.993
[info]   CI (99.9%): [358.738, 412.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   106.826 ±(99.9%) 10.999 B/op [Average]
[info]   (min, avg, max) = (104.000, 106.826, 110.315), stdev = 2.856
[info]   CI (99.9%): [95.827, 117.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.524 ±(99.9%) 4.471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.524, 2.602), stdev = 1.161
[info]   CI (99.9%): [≈ 0, 4.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.148 ±(99.9%) 1.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.734), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   372.238 ±(99.9%) 1333.297 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372.238, 674.725), stdev = 346.253
[info]   CI (99.9%): [≈ 0, 1705.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   103.691 ±(99.9%) 372.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 103.691, 190.359), stdev = 96.648
[info]   CI (99.9%): [≈ 0, 475.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:53:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 753.564 ops/s
[info] # Warmup Iteration   2: 186025.887 ops/s
[info] # Warmup Iteration   3: 265052.895 ops/s
[info] # Warmup Iteration   4: 272084.986 ops/s
[info] # Warmup Iteration   5: 270261.654 ops/s
[info] Iteration   1: 273254.296 ops/s
[info]                  ·gc.alloc.rate:                   2365.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              13628.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2699.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15553.842 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 273971.323 ops/s
[info]                  ·gc.alloc.rate:                   2355.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              13534.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11650.547 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 273486.876 ops/s
[info]                  ·gc.alloc.rate:                   2376.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              13676.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15585.588 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 272392.873 ops/s
[info]                  ·gc.alloc.rate:                   2370.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              13695.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11750.832 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 269669.520 ops/s
[info]                  ·gc.alloc.rate:                   2343.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              13681.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11881.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   272554.978 ±(99.9%) 6590.019 ops/s [Average]
[info]   (min, avg, max) = (269669.520, 272554.978, 273971.323), stdev = 1711.407
[info]   CI (99.9%): [265964.959, 279144.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2362.277 ±(99.9%) 49.791 MB/sec [Average]
[info]   (min, avg, max) = (2343.705, 2362.277, 2376.603), stdev = 12.931
[info]   CI (99.9%): [2312.486, 2412.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13643.033 ±(99.9%) 253.815 B/op [Average]
[info]   (min, avg, max) = (13534.117, 13643.033, 13695.571), stdev = 65.915
[info]   CI (99.9%): [13389.218, 13896.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.384 ±(99.9%) 0.597 B/op [Average]
[info]   (min, avg, max) = (0.241, 0.384, 0.599), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2300.952 ±(99.9%) 1417.360 MB/sec [Average]
[info]   (min, avg, max) = (2027.607, 2300.952, 2708.439), stdev = 368.084
[info]   CI (99.9%): [883.592, 3718.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13284.397 ±(99.9%) 8039.500 B/op [Average]
[info]   (min, avg, max) = (11650.547, 13284.397, 15585.588), stdev = 2087.833
[info]   CI (99.9%): [5244.897, 21323.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:53:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41609.492 ops/s
[info] # Warmup Iteration   2: 808916.205 ops/s
[info] # Warmup Iteration   3: 880435.355 ops/s
[info] # Warmup Iteration   4: 868936.606 ops/s
[info] # Warmup Iteration   5: 869349.472 ops/s
[info] Iteration   1: 883787.937 ops/s
[info]                  ·gc.alloc.rate:                   2192.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              3905.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3609.701 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 874946.560 ops/s
[info]                  ·gc.alloc.rate:                   2171.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              3905.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3650.890 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 871294.188 ops/s
[info]                  ·gc.alloc.rate:                   2184.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              3946.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4896.149 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 874223.847 ops/s
[info]                  ·gc.alloc.rate:                   2195.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              3953.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3663.716 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 885250.286 ops/s
[info]                  ·gc.alloc.rate:                   2219.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              3947.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3621.697 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   877900.564 ±(99.9%) 23936.652 ops/s [Average]
[info]   (min, avg, max) = (871294.188, 877900.564, 885250.286), stdev = 6216.273
[info]   CI (99.9%): [853963.912, 901837.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2192.828 ±(99.9%) 68.986 MB/sec [Average]
[info]   (min, avg, max) = (2171.152, 2192.828, 2219.884), stdev = 17.915
[info]   CI (99.9%): [2123.842, 2261.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3931.701 ±(99.9%) 92.199 B/op [Average]
[info]   (min, avg, max) = (3905.415, 3931.701, 3953.620), stdev = 23.944
[info]   CI (99.9%): [3839.502, 4023.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.075 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.075, 0.112), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2167.602 ±(99.9%) 1168.043 MB/sec [Average]
[info]   (min, avg, max) = (2026.571, 2167.602, 2710.180), stdev = 303.337
[info]   CI (99.9%): [999.558, 3335.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3888.431 ±(99.9%) 2170.799 B/op [Average]
[info]   (min, avg, max) = (3609.701, 3888.431, 4896.149), stdev = 563.750
[info]   CI (99.9%): [1717.631, 6059.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:52:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f6a7f336/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 74301.118 ops/s
[info] # Warmup Iteration   2: 2503446.862 ops/s
[info] # Warmup Iteration   3: 2396392.829 ops/s
[info] # Warmup Iteration   4: 2679908.580 ops/s
[info] # Warmup Iteration   5: 2705683.618 ops/s
[info] Iteration   1: 2676593.515 ops/s
[info]                  ·gc.alloc.rate:                   1150.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              676.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 792.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2702061.376 ops/s
[info]                  ·gc.alloc.rate:                   1150.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              670.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 392.654 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2698916.639 ops/s
[info]                  ·gc.alloc.rate:                   1159.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              676.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 786.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2667791.756 ops/s
[info]                  ·gc.alloc.rate:                   1140.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              673.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 796.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2708667.951 ops/s
[info]                  ·gc.alloc.rate:                   1155.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              671.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 392.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2690806.247 ±(99.9%) 67884.063 ops/s [Average]
[info]   (min, avg, max) = (2667791.756, 2690806.247, 2708667.951), stdev = 17629.276
[info]   CI (99.9%): [2622922.185, 2758690.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1151.293 ±(99.9%) 26.708 MB/sec [Average]
[info]   (min, avg, max) = (1140.852, 1151.293, 1159.350), stdev = 6.936
[info]   CI (99.9%): [1124.584, 1178.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   673.513 ±(99.9%) 10.424 B/op [Average]
[info]   (min, avg, max) = (670.366, 673.513, 676.375), stdev = 2.707
[info]   CI (99.9%): [663.089, 683.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.037), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1078.947 ±(99.9%) 1421.609 MB/sec [Average]
[info]   (min, avg, max) = (674.110, 1078.947, 1349.410), stdev = 369.187
[info]   CI (99.9%): [≈ 0, 2500.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   632.061 ±(99.9%) 842.300 B/op [Average]
[info]   (min, avg, max) = (392.289, 632.061, 796.160), stdev = 218.743
[info]   CI (99.9%): [≈ 0, 1474.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:52:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3082040.809 ops/s
[info] # Warmup Iteration   2: 12960236.368 ops/s
[info] # Warmup Iteration   3: 13584361.596 ops/s
[info] # Warmup Iteration   4: 13554113.381 ops/s
[info] # Warmup Iteration   5: 13572842.633 ops/s
[info] Iteration   1: 13555182.599 ops/s
[info]                  ·gc.alloc.rate:                   712.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.194 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13574417.672 ops/s
[info]                  ·gc.alloc.rate:                   717.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              83.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 13601537.318 ops/s
[info]                  ·gc.alloc.rate:                   716.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 13565985.527 ops/s
[info]                  ·gc.alloc.rate:                   708.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.979 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13571826.512 ops/s
[info]                  ·gc.alloc.rate:                   715.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.944 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   13573789.926 ±(99.9%) 66173.630 ops/s [Average]
[info]   (min, avg, max) = (13555182.599, 13573789.926, 13601537.318), stdev = 17185.082
[info]   CI (99.9%): [13507616.296, 13639963.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   714.122 ±(99.9%) 14.734 MB/sec [Average]
[info]   (min, avg, max) = (708.173, 714.122, 717.464), stdev = 3.826
[info]   CI (99.9%): [699.388, 728.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.811 ±(99.9%) 1.516 B/op [Average]
[info]   (min, avg, max) = (82.161, 82.811, 83.183), stdev = 0.394
[info]   CI (99.9%): [81.295, 84.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.618 ±(99.9%) 5.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.618, 2.945), stdev = 1.301
[info]   CI (99.9%): [≈ 0, 5.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.072 ±(99.9%) 0.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.342), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.596 ±(99.9%) 2.068 MB/sec [Average]
[info]   (min, avg, max) = (672.011, 672.596, 673.320), stdev = 0.537
[info]   CI (99.9%): [670.528, 674.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   77.995 ±(99.9%) 0.485 B/op [Average]
[info]   (min, avg, max) = (77.851, 77.995, 78.194), stdev = 0.126
[info]   CI (99.9%): [77.510, 78.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:52:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3959239.969 ops/s
[info] # Warmup Iteration   2: 13634252.774 ops/s
[info] # Warmup Iteration   3: 14647538.888 ops/s
[info] # Warmup Iteration   4: 14637707.966 ops/s
[info] # Warmup Iteration   5: 14685022.753 ops/s
[info] Iteration   1: 14697199.655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14679602.355 ops/s
[info]                  ·gc.alloc.rate:      0.001 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14638741.801 ops/s
[info]                  ·gc.alloc.rate:      0.003 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 14638172.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14329853.664 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   14596714.094 ±(99.9%) 582922.725 ops/s [Average]
[info]   (min, avg, max) = (14329853.664, 14596714.094, 14697199.655), stdev = 151383.181
[info]   CI (99.9%): [14013791.369, 15179636.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.035 ±(99.9%) 0.291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.035, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:52:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2103.979 ops/s
[info] # Warmup Iteration   2: 113003.613 ops/s
[info] # Warmup Iteration   3: 464872.750 ops/s
[info] # Warmup Iteration   4: 468419.313 ops/s
[info] # Warmup Iteration   5: 474912.251 ops/s
[info] Iteration   1: 464016.957 ops/s
[info]                  ·gc.alloc.rate:                   1406.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              4771.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4577.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 472289.438 ops/s
[info]                  ·gc.alloc.rate:                   1438.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              4793.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4497.392 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 473775.510 ops/s
[info]                  ·gc.alloc.rate:                   1424.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              4733.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4483.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 471597.666 ops/s
[info]                  ·gc.alloc.rate:                   1418.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              4734.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4506.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 475679.143 ops/s
[info]                  ·gc.alloc.rate:                   1426.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              4722.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4470.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   471471.743 ±(99.9%) 17141.624 ops/s [Average]
[info]   (min, avg, max) = (464016.957, 471471.743, 475679.143), stdev = 4451.625
[info]   CI (99.9%): [454330.119, 488613.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1422.995 ±(99.9%) 44.781 MB/sec [Average]
[info]   (min, avg, max) = (1406.430, 1422.995, 1438.096), stdev = 11.629
[info]   CI (99.9%): [1378.214, 1467.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4751.086 ±(99.9%) 114.900 B/op [Average]
[info]   (min, avg, max) = (4722.546, 4751.086, 4793.116), stdev = 29.839
[info]   CI (99.9%): [4636.187, 4865.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.111 ±(99.9%) 0.354 B/op [Average]
[info]   (min, avg, max) = (0.069, 0.111, 0.275), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1349.835 ±(99.9%) 2.488 MB/sec [Average]
[info]   (min, avg, max) = (1349.312, 1349.835, 1350.860), stdev = 0.646
[info]   CI (99.9%): [1347.348, 1352.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4507.025 ±(99.9%) 160.556 B/op [Average]
[info]   (min, avg, max) = (4470.640, 4507.025, 4577.563), stdev = 41.696
[info]   CI (99.9%): [4346.468, 4667.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:51:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 373878.577 ops/s
[info] # Warmup Iteration   2: 1844064.406 ops/s
[info] # Warmup Iteration   3: 1951672.370 ops/s
[info] # Warmup Iteration   4: 1975077.976 ops/s
[info] # Warmup Iteration   5: 1961511.913 ops/s
[info] Iteration   1: 1978520.215 ops/s
[info]                  ·gc.alloc.rate:                   2711.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              2157.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2694.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2143.868 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1981321.468 ops/s
[info]                  ·gc.alloc.rate:                   2726.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              2166.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2701.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2145.955 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1976286.998 ops/s
[info]                  ·gc.alloc.rate:                   2750.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              2190.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2155.908 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1974841.400 ops/s
[info]                  ·gc.alloc.rate:                   2745.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              2188.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2160.998 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1973584.760 ops/s
[info]                  ·gc.alloc.rate:                   2745.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              2190.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2165.528 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1976910.968 ±(99.9%) 11833.808 ops/s [Average]
[info]   (min, avg, max) = (1973584.760, 1976910.968, 1981321.468), stdev = 3073.202
[info]   CI (99.9%): [1965077.160, 1988744.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2735.951 ±(99.9%) 62.499 MB/sec [Average]
[info]   (min, avg, max) = (2711.848, 2735.951, 2750.164), stdev = 16.231
[info]   CI (99.9%): [2673.453, 2798.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2178.502 ±(99.9%) 59.345 B/op [Average]
[info]   (min, avg, max) = (2157.808, 2178.502, 2190.288), stdev = 15.412
[info]   CI (99.9%): [2119.157, 2237.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.043 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.043, 0.066), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2705.752 ±(99.9%) 31.363 MB/sec [Average]
[info]   (min, avg, max) = (2694.328, 2705.752, 2714.866), stdev = 8.145
[info]   CI (99.9%): [2674.389, 2737.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2154.451 ±(99.9%) 36.115 B/op [Average]
[info]   (min, avg, max) = (2143.868, 2154.451, 2165.528), stdev = 9.379
[info]   CI (99.9%): [2118.336, 2190.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:51:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.736 ops/s
[info] # Warmup Iteration   2: 8716320.010 ops/s
[info] # Warmup Iteration   3: 9456827.274 ops/s
[info] # Warmup Iteration   4: 9319403.613 ops/s
[info] # Warmup Iteration   5: 9375370.418 ops/s
[info] Iteration   1: 9423572.401 ops/s
[info]                  ·gc.alloc.rate:                   1170.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              195.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.705 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 9624517.171 ops/s
[info]                  ·gc.alloc.rate:                   1217.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              199.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218.740 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9690233.728 ops/s
[info]                  ·gc.alloc.rate:                   1215.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 217.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9572319.890 ops/s
[info]                  ·gc.alloc.rate:                   1197.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9788592.056 ops/s
[info]                  ·gc.alloc.rate:                   1217.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              195.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.855 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9619847.049 ±(99.9%) 524570.003 ops/s [Average]
[info]   (min, avg, max) = (9423572.401, 9619847.049, 9788592.056), stdev = 136229.164
[info]   CI (99.9%): [9095277.046, 10144417.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1203.832 ±(99.9%) 78.749 MB/sec [Average]
[info]   (min, avg, max) = (1170.690, 1203.832, 1217.884), stdev = 20.451
[info]   CI (99.9%): [1125.082, 1282.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   196.947 ±(99.9%) 5.565 B/op [Average]
[info]   (min, avg, max) = (195.547, 196.947, 199.144), stdev = 1.445
[info]   CI (99.9%): [191.382, 202.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1071.050 ±(99.9%) 1410.315 MB/sec [Average]
[info]   (min, avg, max) = (668.747, 1071.050, 1339.394), stdev = 366.254
[info]   CI (99.9%): [≈ 0, 2481.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   175.182 ±(99.9%) 229.992 B/op [Average]
[info]   (min, avg, max) = (107.855, 175.182, 220.251), stdev = 59.728
[info]   CI (99.9%): [≈ 0, 405.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:51:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15353.548 ops/s
[info] # Warmup Iteration   2: 2860442.845 ops/s
[info] # Warmup Iteration   3: 3195114.923 ops/s
[info] # Warmup Iteration   4: 3211085.099 ops/s
[info] # Warmup Iteration   5: 3220135.678 ops/s
[info] Iteration   1: 3215531.679 ops/s
[info]                  ·gc.alloc.rate:                   1957.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              957.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 990.717 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3223469.596 ops/s
[info]                  ·gc.alloc.rate:                   1957.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              955.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 659.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3222516.048 ops/s
[info]                  ·gc.alloc.rate:                   1966.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 990.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3214778.129 ops/s
[info]                  ·gc.alloc.rate:                   1978.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              968.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 994.347 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3223797.251 ops/s
[info]                  ·gc.alloc.rate:                   1998.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              975.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 992.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3220018.540 ±(99.9%) 17222.736 ops/s [Average]
[info]   (min, avg, max) = (3214778.129, 3220018.540, 3223797.251), stdev = 4472.690
[info]   CI (99.9%): [3202795.804, 3237241.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1971.487 ±(99.9%) 66.200 MB/sec [Average]
[info]   (min, avg, max) = (1957.308, 1971.487, 1998.074), stdev = 17.192
[info]   CI (99.9%): [1905.287, 2037.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   963.664 ±(99.9%) 32.124 B/op [Average]
[info]   (min, avg, max) = (955.607, 963.664, 975.612), stdev = 8.342
[info]   CI (99.9%): [931.540, 995.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.022, 0.051), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1893.625 ±(99.9%) 1167.977 MB/sec [Average]
[info]   (min, avg, max) = (1351.060, 1893.625, 2033.317), stdev = 303.320
[info]   CI (99.9%): [725.647, 3061.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   925.686 ±(99.9%) 572.811 B/op [Average]
[info]   (min, avg, max) = (659.594, 925.686, 994.347), stdev = 148.757
[info]   CI (99.9%): [352.875, 1498.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:51:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7181692.413 ops/s
[info] # Warmup Iteration   2: 12847733.803 ops/s
[info] # Warmup Iteration   3: 13275564.116 ops/s
[info] # Warmup Iteration   4: 13289972.604 ops/s
[info] # Warmup Iteration   5: 13021131.362 ops/s
[info] Iteration   1: 13275049.441 ops/s
[info]                  ·gc.alloc.rate:                   1732.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239.533 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13289996.595 ops/s
[info]                  ·gc.alloc.rate:                   1741.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13049911.403 ops/s
[info]                  ·gc.alloc.rate:                   1712.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13341828.320 ops/s
[info]                  ·gc.alloc.rate:                   1734.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13296541.341 ops/s
[info]                  ·gc.alloc.rate:                   1756.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240.167 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   13250665.420 ±(99.9%) 442652.295 ops/s [Average]
[info]   (min, avg, max) = (13049911.403, 13250665.420, 13341828.320), stdev = 114955.395
[info]   CI (99.9%): [12808013.125, 13693317.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1735.507 ±(99.9%) 61.497 MB/sec [Average]
[info]   (min, avg, max) = (1712.625, 1735.507, 1756.824), stdev = 15.970
[info]   CI (99.9%): [1674.011, 1797.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.152 ±(99.9%) 4.913 B/op [Average]
[info]   (min, avg, max) = (204.611, 206.152, 207.983), stdev = 1.276
[info]   CI (99.9%): [201.240, 211.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.008 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.008, 0.013), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1754.248 ±(99.9%) 1424.049 MB/sec [Average]
[info]   (min, avg, max) = (1347.402, 1754.248, 2028.681), stdev = 369.821
[info]   CI (99.9%): [330.199, 3178.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   208.546 ±(99.9%) 172.618 B/op [Average]
[info]   (min, avg, max) = (159.362, 208.546, 244.079), stdev = 44.828
[info]   CI (99.9%): [35.928, 381.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:50:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1214.194 ops/s
[info] # Warmup Iteration   2: 234728.763 ops/s
[info] # Warmup Iteration   3: 554060.961 ops/s
[info] # Warmup Iteration   4: 1202710.041 ops/s
[info] # Warmup Iteration   5: 1208913.681 ops/s
[info] Iteration   1: 1210334.216 ops/s
[info]                  ·gc.alloc.rate:                   2634.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              3426.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3509.532 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1199285.074 ops/s
[info]                  ·gc.alloc.rate:                   2594.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              3405.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3547.543 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1214188.087 ops/s
[info]                  ·gc.alloc.rate:                   2646.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              3430.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3510.488 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1206190.885 ops/s
[info]                  ·gc.alloc.rate:                   2632.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              3433.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3538.974 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1208628.953 ops/s
[info]                  ·gc.alloc.rate:                   2635.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              3431.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2651.336 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1207725.443 ±(99.9%) 21351.333 ops/s [Average]
[info]   (min, avg, max) = (1199285.074, 1207725.443, 1214188.087), stdev = 5544.873
[info]   CI (99.9%): [1186374.110, 1229076.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2628.705 ±(99.9%) 75.996 MB/sec [Average]
[info]   (min, avg, max) = (2594.920, 2628.705, 2646.919), stdev = 19.736
[info]   CI (99.9%): [2552.709, 2704.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3425.791 ±(99.9%) 44.285 B/op [Average]
[info]   (min, avg, max) = (3405.809, 3425.791, 3433.956), stdev = 11.501
[info]   CI (99.9%): [3381.505, 3470.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.119 ±(99.9%) 0.189 B/op [Average]
[info]   (min, avg, max) = (0.054, 0.119, 0.189), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2571.605 ±(99.9%) 1153.790 MB/sec [Average]
[info]   (min, avg, max) = (2035.692, 2571.605, 2712.820), stdev = 299.636
[info]   CI (99.9%): [1417.815, 3725.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3351.575 ±(99.9%) 1508.720 B/op [Average]
[info]   (min, avg, max) = (2651.336, 3351.575, 3547.543), stdev = 391.810
[info]   CI (99.9%): [1842.855, 4860.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:50:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 436765.514 ops/s
[info] # Warmup Iteration   2: 2437358.391 ops/s
[info] # Warmup Iteration   3: 2380266.282 ops/s
[info] # Warmup Iteration   4: 2523837.714 ops/s
[info] # Warmup Iteration   5: 2502418.012 ops/s
[info] Iteration   1: 2545119.655 ops/s
[info]                  ·gc.alloc.rate:                   2025.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              1252.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1252.647 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2541461.437 ops/s
[info]                  ·gc.alloc.rate:                   2027.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              1255.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1256.323 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2543933.727 ops/s
[info]                  ·gc.alloc.rate:                   2032.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              1257.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1256.577 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2545900.154 ops/s
[info]                  ·gc.alloc.rate:                   2032.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              1256.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1256.863 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2513423.098 ops/s
[info]                  ·gc.alloc.rate:                   2035.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              1274.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1274.730 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2537967.614 ±(99.9%) 53227.803 ops/s [Average]
[info]   (min, avg, max) = (2513423.098, 2537967.614, 2545900.154), stdev = 13823.091
[info]   CI (99.9%): [2484739.811, 2591195.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2030.719 ±(99.9%) 15.629 MB/sec [Average]
[info]   (min, avg, max) = (2025.265, 2030.719, 2035.367), stdev = 4.059
[info]   CI (99.9%): [2015.091, 2046.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1259.297 ±(99.9%) 33.656 B/op [Average]
[info]   (min, avg, max) = (1252.438, 1259.297, 1274.586), stdev = 8.740
[info]   CI (99.9%): [1225.641, 1292.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.044 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.044, 0.077), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2030.930 ±(99.9%) 14.964 MB/sec [Average]
[info]   (min, avg, max) = (2025.603, 2030.930, 2035.597), stdev = 3.886
[info]   CI (99.9%): [2015.966, 2045.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1259.428 ±(99.9%) 33.595 B/op [Average]
[info]   (min, avg, max) = (1252.647, 1259.428, 1274.730), stdev = 8.725
[info]   CI (99.9%): [1225.833, 1293.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:50:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.737 ops/s
[info] # Warmup Iteration   2: 16811189.978 ops/s
[info] # Warmup Iteration   3: 17868747.262 ops/s
[info] # Warmup Iteration   4: 17574086.857 ops/s
[info] # Warmup Iteration   5: 18226916.189 ops/s
[info] Iteration   1: 18195107.865 ops/s
[info]                  ·gc.alloc.rate:                   573.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17001979.727 ops/s
[info]                  ·gc.alloc.rate:                   540.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.974 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 17683674.797 ops/s
[info]                  ·gc.alloc.rate:      541.696 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.208 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18275993.391 ops/s
[info]                  ·gc.alloc.rate:                   579.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.653 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 18259890.217 ops/s
[info]                  ·gc.alloc.rate:                   575.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   17883329.199 ±(99.9%) 2117703.697 ops/s [Average]
[info]   (min, avg, max) = (17001979.727, 17883329.199, 18275993.391), stdev = 549960.925
[info]   CI (99.9%): [15765625.502, 20001032.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   562.187 ±(99.9%) 75.369 MB/sec [Average]
[info]   (min, avg, max) = (540.114, 562.187, 579.912), stdev = 19.573
[info]   CI (99.9%): [486.818, 637.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.481 ±(99.9%) 2.823 B/op [Average]
[info]   (min, avg, max) = (48.208, 49.481, 50.001), stdev = 0.733
[info]   CI (99.9%): [46.658, 52.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.818 ±(99.9%) 6.956 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.818, 4.050), stdev = 1.806
[info]   CI (99.9%): [≈ 0, 7.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.071 ±(99.9%) 0.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.350), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   535.775 ±(99.9%) 1153.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.775, 670.677), stdev = 299.508
[info]   CI (99.9%): [≈ 0, 1689.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   47.071 ±(99.9%) 101.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.071, 61.974), stdev = 26.376
[info]   CI (99.9%): [≈ 0, 148.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:50:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f6a7f336/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 441366.597 ops/s
[info] # Warmup Iteration   2: 5952445.732 ops/s
[info] # Warmup Iteration   3: 5909346.529 ops/s
[info] # Warmup Iteration   4: 6068783.117 ops/s
[info] # Warmup Iteration   5: 6039939.604 ops/s
[info] Iteration   1: 6251674.838 ops/s
[info]                  ·gc.alloc.rate:                   1751.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 339.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5538692.754 ops/s
[info]                  ·gc.alloc.rate:                   1586.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              450.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 575.919 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6114632.029 ops/s
[info]                  ·gc.alloc.rate:                   1718.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 348.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6023574.255 ops/s
[info]                  ·gc.alloc.rate:                   1705.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6082557.616 ops/s
[info]                  ·gc.alloc.rate:                   1748.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              452.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525.702 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6002226.299 ±(99.9%) 1048605.756 ops/s [Average]
[info]   (min, avg, max) = (5538692.754, 6002226.299, 6251674.838), stdev = 272319.585
[info]   CI (99.9%): [4953620.543, 7050832.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1702.011 ±(99.9%) 260.972 MB/sec [Average]
[info]   (min, avg, max) = (1586.017, 1702.011, 1751.335), stdev = 67.773
[info]   CI (99.9%): [1441.040, 1962.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   446.472 ±(99.9%) 19.566 B/op [Average]
[info]   (min, avg, max) = (440.988, 446.472, 452.613), stdev = 5.081
[info]   CI (99.9%): [426.906, 466.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.014, 0.016), stdev = 0.003
[info]   CI (99.9%): [0.004, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1622.441 ±(99.9%) 1428.784 MB/sec [Average]
[info]   (min, avg, max) = (1349.328, 1622.441, 2031.339), stdev = 371.051
[info]   CI (99.9%): [193.657, 3051.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   428.603 ±(99.9%) 435.395 B/op [Average]
[info]   (min, avg, max) = (339.762, 428.603, 575.919), stdev = 113.071
[info]   CI (99.9%): [≈ 0, 863.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:49:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10051026.626 ops/s
[info] # Warmup Iteration   2: 19091947.901 ops/s
[info] # Warmup Iteration   3: 21021450.706 ops/s
[info] # Warmup Iteration   4: 20681381.372 ops/s
[info] # Warmup Iteration   5: 20562517.628 ops/s
[info] Iteration   1: 19646848.600 ops/s
[info]                  ·gc.alloc.rate:                   628.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.951 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20678265.578 ops/s
[info]                  ·gc.alloc.rate:                   645.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20589034.998 ops/s
[info]                  ·gc.alloc.rate:                   652.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.430 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21105624.447 ops/s
[info]                  ·gc.alloc.rate:                   658.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 21081328.286 ops/s
[info]                  ·gc.alloc.rate:                   667.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.179 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   20620220.382 ±(99.9%) 2278097.708 ops/s [Average]
[info]   (min, avg, max) = (19646848.600, 20620220.382, 21105624.447), stdev = 591614.740
[info]   CI (99.9%): [18342122.674, 22898318.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   650.432 ±(99.9%) 55.858 MB/sec [Average]
[info]   (min, avg, max) = (628.670, 650.432, 667.253), stdev = 14.506
[info]   CI (99.9%): [594.574, 706.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.659 ±(99.9%) 2.104 B/op [Average]
[info]   (min, avg, max) = (49.066, 49.659, 50.369), stdev = 0.546
[info]   CI (99.9%): [47.555, 51.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.591 ±(99.9%) 4.956 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.893), stdev = 1.287
[info]   CI (99.9%): [≈ 0, 5.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.047 ±(99.9%) 0.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.232), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.606 ±(99.9%) 2.039 MB/sec [Average]
[info]   (min, avg, max) = (672.054, 672.606, 673.384), stdev = 0.529
[info]   CI (99.9%): [670.567, 674.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   51.378 ±(99.9%) 5.987 B/op [Average]
[info]   (min, avg, max) = (50.122, 51.378, 53.951), stdev = 1.555
[info]   CI (99.9%): [45.391, 57.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:49:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12035546.267 ops/s
[info] # Warmup Iteration   2: 22008628.134 ops/s
[info] # Warmup Iteration   3: 22333662.498 ops/s
[info] # Warmup Iteration   4: 23292038.240 ops/s
[info] # Warmup Iteration   5: 23062407.371 ops/s
[info] Iteration   1: 23336654.029 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23256500.454 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23270924.716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23242297.603 ops/s
[info]                  ·gc.alloc.rate:      0.175 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22293650.215 ops/s
[info]                  ·gc.alloc.rate:      0.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   23080005.403 ±(99.9%) 1698394.202 ops/s [Average]
[info]   (min, avg, max) = (22293650.215, 23080005.403, 23336654.029), stdev = 441067.581
[info]   CI (99.9%): [21381611.201, 24778399.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.046 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.046, 0.175), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:49:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32855.906 ops/s
[info] # Warmup Iteration   2: 1587374.031 ops/s
[info] # Warmup Iteration   3: 1725660.456 ops/s
[info] # Warmup Iteration   4: 1748632.010 ops/s
[info] # Warmup Iteration   5: 1745203.668 ops/s
[info] Iteration   1: 1748024.319 ops/s
[info]                  ·gc.alloc.rate:                   2687.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              2420.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2434.880 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1734377.979 ops/s
[info]                  ·gc.alloc.rate:                   2667.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              2420.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2457.612 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1733566.602 ops/s
[info]                  ·gc.alloc.rate:                   2706.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              2457.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2462.294 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1741369.174 ops/s
[info]                  ·gc.alloc.rate:                   2705.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              2444.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2451.149 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1714439.046 ops/s
[info]                  ·gc.alloc.rate:                   2664.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              2446.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1871.273 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1734355.424 ±(99.9%) 48452.219 ops/s [Average]
[info]   (min, avg, max) = (1714439.046, 1734355.424, 1748024.319), stdev = 12582.887
[info]   CI (99.9%): [1685903.205, 1782807.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2686.264 ±(99.9%) 78.063 MB/sec [Average]
[info]   (min, avg, max) = (2664.319, 2686.264, 2706.758), stdev = 20.273
[info]   CI (99.9%): [2608.201, 2764.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2437.861 ±(99.9%) 64.566 B/op [Average]
[info]   (min, avg, max) = (2420.170, 2437.861, 2457.747), stdev = 16.768
[info]   CI (99.9%): [2373.295, 2502.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.072 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (0.056, 0.072, 0.115), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2574.912 ±(99.9%) 1155.845 MB/sec [Average]
[info]   (min, avg, max) = (2037.992, 2574.912, 2712.994), stdev = 300.169
[info]   CI (99.9%): [1419.068, 3730.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2335.442 ±(99.9%) 999.955 B/op [Average]
[info]   (min, avg, max) = (1871.273, 2335.442, 2462.294), stdev = 259.685
[info]   CI (99.9%): [1335.487, 3335.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:49:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146604.902 ops/s
[info] # Warmup Iteration   2: 290667.643 ops/s
[info] # Warmup Iteration   3: 302390.373 ops/s
[info] # Warmup Iteration   4: 293591.711 ops/s
[info] # Warmup Iteration   5: 305148.996 ops/s
[info] Iteration   1: 303746.478 ops/s
[info]                  ·gc.alloc.rate:                   1696.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              8789.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6965.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 297433.499 ops/s
[info]                  ·gc.alloc.rate:                   1698.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              8988.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10678.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 306228.060 ops/s
[info]                  ·gc.alloc.rate:                   1720.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              8840.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6922.717 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 305070.791 ops/s
[info]                  ·gc.alloc.rate:                   1726.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              8910.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10438.405 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 281245.570 ops/s
[info]                  ·gc.alloc.rate:                   1582.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              8857.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7559.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   298744.880 ±(99.9%) 39876.792 ops/s [Average]
[info]   (min, avg, max) = (281245.570, 298744.880, 306228.060), stdev = 10355.876
[info]   CI (99.9%): [258868.088, 338621.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1684.835 ±(99.9%) 226.096 MB/sec [Average]
[info]   (min, avg, max) = (1582.550, 1684.835, 1726.926), stdev = 58.716
[info]   CI (99.9%): [1458.739, 1910.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8877.398 ±(99.9%) 291.157 B/op [Average]
[info]   (min, avg, max) = (8789.968, 8877.398, 8988.728), stdev = 75.613
[info]   CI (99.9%): [8586.241, 9168.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.172 ±(99.9%) 0.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.172, 0.324), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1616.479 ±(99.9%) 1419.836 MB/sec [Average]
[info]   (min, avg, max) = (1344.063, 1616.479, 2023.122), stdev = 368.727
[info]   CI (99.9%): [196.643, 3036.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8512.784 ±(99.9%) 7262.354 B/op [Average]
[info]   (min, avg, max) = (6922.717, 8512.784, 10678.032), stdev = 1886.010
[info]   CI (99.9%): [1250.430, 15775.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:48:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119227.766 ops/s
[info] # Warmup Iteration   2: 498471.171 ops/s
[info] # Warmup Iteration   3: 509435.126 ops/s
[info] # Warmup Iteration   4: 507619.212 ops/s
[info] # Warmup Iteration   5: 508734.574 ops/s
[info] Iteration   1: 510837.612 ops/s
[info]                  ·gc.alloc.rate:                   689.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              2124.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2077.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 490187.103 ops/s
[info]                  ·gc.alloc.rate:                   658.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              2113.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2164.513 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 510160.892 ops/s
[info]                  ·gc.alloc.rate:                   681.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              2102.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2079.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 510544.564 ops/s
[info]                  ·gc.alloc.rate:                   678.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              2090.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2078.181 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 509672.252 ops/s
[info]                  ·gc.alloc.rate:                   684.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              2114.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2081.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   506280.485 ±(99.9%) 34682.972 ops/s [Average]
[info]   (min, avg, max) = (490187.103, 506280.485, 510837.612), stdev = 9007.058
[info]   CI (99.9%): [471597.513, 540963.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   678.350 ±(99.9%) 46.405 MB/sec [Average]
[info]   (min, avg, max) = (658.079, 678.350, 689.283), stdev = 12.051
[info]   CI (99.9%): [631.945, 724.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2108.952 ±(99.9%) 49.274 B/op [Average]
[info]   (min, avg, max) = (2090.387, 2108.952, 2124.086), stdev = 12.796
[info]   CI (99.9%): [2059.678, 2158.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.077 ±(99.9%) 0.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.077, 0.193), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.095 ±(99.9%) 0.562 MB/sec [Average]
[info]   (min, avg, max) = (673.991, 674.095, 674.350), stdev = 0.146
[info]   CI (99.9%): [673.533, 674.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2096.236 ±(99.9%) 147.127 B/op [Average]
[info]   (min, avg, max) = (2077.018, 2096.236, 2164.513), stdev = 38.208
[info]   CI (99.9%): [1949.109, 2243.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:48:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 890171.210 ops/s
[info] # Warmup Iteration   2: 1239547.073 ops/s
[info] # Warmup Iteration   3: 1240870.020 ops/s
[info] # Warmup Iteration   4: 1280699.196 ops/s
[info] # Warmup Iteration   5: 1274553.175 ops/s
[info] Iteration   1: 1273800.569 ops/s
[info]                  ·gc.alloc.rate:                   872.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              1078.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 832.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1266237.229 ops/s
[info]                  ·gc.alloc.rate:                   858.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              1067.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 836.293 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1283197.684 ops/s
[info]                  ·gc.alloc.rate:                   876.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              1075.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 825.238 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1265347.673 ops/s
[info]                  ·gc.alloc.rate:                   890.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              1107.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1673.713 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1280183.440 ops/s
[info]                  ·gc.alloc.rate:                   868.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              1067.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 827.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1273753.319 ±(99.9%) 30906.737 ops/s [Average]
[info]   (min, avg, max) = (1265347.673, 1273753.319, 1283197.684), stdev = 8026.382
[info]   CI (99.9%): [1242846.582, 1304660.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   873.373 ±(99.9%) 44.948 MB/sec [Average]
[info]   (min, avg, max) = (858.849, 873.373, 890.671), stdev = 11.673
[info]   CI (99.9%): [828.425, 918.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1079.328 ±(99.9%) 64.117 B/op [Average]
[info]   (min, avg, max) = (1067.712, 1079.328, 1107.978), stdev = 16.651
[info]   CI (99.9%): [1015.211, 1143.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.052), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.404 ±(99.9%) 1158.183 MB/sec [Average]
[info]   (min, avg, max) = (672.700, 807.404, 1345.449), stdev = 300.776
[info]   CI (99.9%): [≈ 0, 1965.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   998.895 ±(99.9%) 1452.691 B/op [Average]
[info]   (min, avg, max) = (825.238, 998.895, 1673.713), stdev = 377.259
[info]   CI (99.9%): [≈ 0, 2451.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43673.257 ops/s
[info] # Warmup Iteration   2: 117122.179 ops/s
[info] # Warmup Iteration   3: 118100.893 ops/s
[info] # Warmup Iteration   4: 119279.172 ops/s
[info] # Warmup Iteration   5: 122114.278 ops/s
[info] Iteration   1: 121368.553 ops/s
[info]                  ·gc.alloc.rate:                   3615.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              46893.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3391.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43985.443 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 118627.574 ops/s
[info]                  ·gc.alloc.rate:                   3538.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              46944.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45061.938 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 120790.131 ops/s
[info]                  ·gc.alloc.rate:                   3600.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              46908.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44310.185 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 121507.086 ops/s
[info]                  ·gc.alloc.rate:                   3622.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              46912.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44081.452 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 120322.851 ops/s
[info]                  ·gc.alloc.rate:                   3587.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              46933.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44525.705 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   120523.239 ±(99.9%) 4468.838 ops/s [Average]
[info]   (min, avg, max) = (118627.574, 120523.239, 121507.086), stdev = 1160.543
[info]   CI (99.9%): [116054.401, 124992.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3592.813 ±(99.9%) 127.104 MB/sec [Average]
[info]   (min, avg, max) = (3538.970, 3592.813, 3622.081), stdev = 33.009
[info]   CI (99.9%): [3465.709, 3719.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   46918.512 ±(99.9%) 77.754 B/op [Average]
[info]   (min, avg, max) = (46893.600, 46918.512, 46944.149), stdev = 20.193
[info]   CI (99.9%): [46840.757, 46996.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.545 ±(99.9%) 1.661 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 1.085), stdev = 0.431
[info]   CI (99.9%): [≈ 0, 2.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3399.178 ±(99.9%) 19.519 MB/sec [Average]
[info]   (min, avg, max) = (3391.379, 3399.178, 3403.464), stdev = 5.069
[info]   CI (99.9%): [3379.659, 3418.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   44392.945 ±(99.9%) 1650.744 B/op [Average]
[info]   (min, avg, max) = (43985.443, 44392.945, 45061.938), stdev = 428.693
[info]   CI (99.9%): [42742.200, 46043.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:48:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150198.630 ops/s
[info] # Warmup Iteration   2: 341709.358 ops/s
[info] # Warmup Iteration   3: 350747.816 ops/s
[info] # Warmup Iteration   4: 344748.800 ops/s
[info] # Warmup Iteration   5: 350069.198 ops/s
[info] Iteration   1: 342886.383 ops/s
[info]                  ·gc.alloc.rate:                   547.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              2515.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3092.680 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 350540.867 ops/s
[info]                  ·gc.alloc.rate:                   559.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              2510.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3026.729 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 350937.166 ops/s
[info]                  ·gc.alloc.rate:                   558.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              2506.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3023.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 343789.943 ops/s
[info]                  ·gc.alloc.rate:      532.917 MB/sec
[info]                  ·gc.alloc.rate.norm: 2440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 343463.411 ops/s
[info]                  ·gc.alloc.rate:                   546.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              2505.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3090.511 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   346323.554 ±(99.9%) 15580.233 ops/s [Average]
[info]   (min, avg, max) = (342886.383, 346323.554, 350937.166), stdev = 4046.137
[info]   CI (99.9%): [330743.321, 361903.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   549.083 ±(99.9%) 41.474 MB/sec [Average]
[info]   (min, avg, max) = (532.917, 549.083, 559.140), stdev = 10.771
[info]   CI (99.9%): [507.609, 590.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2495.533 ±(99.9%) 120.539 B/op [Average]
[info]   (min, avg, max) = (2440.001, 2495.533, 2515.428), stdev = 31.303
[info]   CI (99.9%): [2374.994, 2616.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.807 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.479), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 0.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.477 ±(99.9%) 3.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.477, 2.198), stdev = 0.963
[info]   CI (99.9%): [≈ 0, 4.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   539.230 ±(99.9%) 1160.733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.230, 674.354), stdev = 301.439
[info]   CI (99.9%): [≈ 0, 1699.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2446.659 ±(99.9%) 5268.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2446.659, 3092.680), stdev = 1368.129
[info]   CI (99.9%): [≈ 0, 7714.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342575.964 ops/s
[info] # Warmup Iteration   2: 824277.622 ops/s
[info] # Warmup Iteration   3: 829945.127 ops/s
[info] # Warmup Iteration   4: 826711.057 ops/s
[info] # Warmup Iteration   5: 833413.288 ops/s
[info] Iteration   1: 835121.539 ops/s
[info]                  ·gc.alloc.rate:                   622.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              1173.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1269.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 826338.306 ops/s
[info]                  ·gc.alloc.rate:                   617.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              1175.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1282.722 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 833324.114 ops/s
[info]                  ·gc.alloc.rate:                   616.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              1163.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1271.904 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 837274.321 ops/s
[info]                  ·gc.alloc.rate:                   629.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              1182.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1265.929 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 832938.529 ops/s
[info]                  ·gc.alloc.rate:                   616.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              1164.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1272.536 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   832999.362 ±(99.9%) 15789.723 ops/s [Average]
[info]   (min, avg, max) = (826338.306, 832999.362, 837274.321), stdev = 4100.541
[info]   CI (99.9%): [817209.639, 848789.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   620.215 ±(99.9%) 21.361 MB/sec [Average]
[info]   (min, avg, max) = (616.067, 620.215, 629.042), stdev = 5.547
[info]   CI (99.9%): [598.855, 641.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1171.985 ±(99.9%) 30.344 B/op [Average]
[info]   (min, avg, max) = (1163.679, 1171.985, 1182.572), stdev = 7.880
[info]   CI (99.9%): [1141.640, 1202.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.246 ±(99.9%) 1.936 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 1.145), stdev = 0.503
[info]   CI (99.9%): [≈ 0, 2.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.463 ±(99.9%) 3.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.463, 2.158), stdev = 0.948
[info]   CI (99.9%): [≈ 0, 4.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.369 ±(99.9%) 0.266 MB/sec [Average]
[info]   (min, avg, max) = (673.306, 673.369, 673.478), stdev = 0.069
[info]   CI (99.9%): [673.103, 673.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1272.456 ±(99.9%) 24.276 B/op [Average]
[info]   (min, avg, max) = (1265.929, 1272.456, 1282.722), stdev = 6.304
[info]   CI (99.9%): [1248.180, 1296.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:47:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1493936.626 ops/s
[info] # Warmup Iteration   2: 1958149.203 ops/s
[info] # Warmup Iteration   3: 2040058.014 ops/s
[info] # Warmup Iteration   4: 2125593.606 ops/s
[info] # Warmup Iteration   5: 2130211.083 ops/s
[info] Iteration   1: 2120613.383 ops/s
[info]                  ·gc.alloc.rate:                   998.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              741.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 498.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2111700.737 ops/s
[info]                  ·gc.alloc.rate:                   1000.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 500.944 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2123207.724 ops/s
[info]                  ·gc.alloc.rate:                   1021.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 996.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2122950.456 ops/s
[info]                  ·gc.alloc.rate:                   1008.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 498.276 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2104640.466 ops/s
[info]                  ·gc.alloc.rate:                   1006.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1005.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2116622.553 ±(99.9%) 31467.574 ops/s [Average]
[info]   (min, avg, max) = (2104640.466, 2116622.553, 2123207.724), stdev = 8172.029
[info]   CI (99.9%): [2085154.979, 2148090.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1006.995 ±(99.9%) 34.112 MB/sec [Average]
[info]   (min, avg, max) = (998.864, 1006.995, 1021.149), stdev = 8.859
[info]   CI (99.9%): [972.883, 1041.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.885 ±(99.9%) 23.261 B/op [Average]
[info]   (min, avg, max) = (741.570, 748.885, 756.970), stdev = 6.041
[info]   CI (99.9%): [725.624, 772.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.062), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.985 ±(99.9%) 1418.261 MB/sec [Average]
[info]   (min, avg, max) = (671.916, 940.985, 1344.706), stdev = 368.318
[info]   CI (99.9%): [≈ 0, 2359.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   700.049 ±(99.9%) 1058.291 B/op [Average]
[info]   (min, avg, max) = (498.276, 700.049, 1005.733), stdev = 274.835
[info]   CI (99.9%): [≈ 0, 1758.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:47:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1702294.454 ops/s
[info] # Warmup Iteration   2: 2303748.081 ops/s
[info] # Warmup Iteration   3: 2329794.469 ops/s
[info] # Warmup Iteration   4: 2327414.096 ops/s
[info] # Warmup Iteration   5: 2327004.012 ops/s
[info] Iteration   1: 2328515.206 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2254405.526 ops/s
[info]                  ·gc.alloc.rate:      1.730 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.207 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2335739.255 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2306862.975 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.116 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2331849.365 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2311474.465 ±(99.9%) 130189.825 ops/s [Average]
[info]   (min, avg, max) = (2254405.526, 2311474.465, 2335739.255), stdev = 33809.884
[info]   CI (99.9%): [2181284.641, 2441664.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.380 ±(99.9%) 2.919 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.380, 1.730), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 3.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.265 ±(99.9%) 2.038 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.265, 1.207), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:47:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223186.479 ops/s
[info] # Warmup Iteration   2: 441323.024 ops/s
[info] # Warmup Iteration   3: 456678.160 ops/s
[info] # Warmup Iteration   4: 451735.164 ops/s
[info] # Warmup Iteration   5: 446439.465 ops/s
[info] Iteration   1: 446659.784 ops/s
[info]                  ·gc.alloc.rate:                   658.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              2320.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2374.319 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 458484.923 ops/s
[info]                  ·gc.alloc.rate:                   685.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              2351.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2313.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 462664.489 ops/s
[info]                  ·gc.alloc.rate:                   692.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              2354.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2293.332 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 462177.828 ops/s
[info]                  ·gc.alloc.rate:                   683.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              2326.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2295.564 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 461677.894 ops/s
[info]                  ·gc.alloc.rate:                   691.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              2356.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2299.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   458332.984 ±(99.9%) 25903.979 ops/s [Average]
[info]   (min, avg, max) = (446659.784, 458332.984, 462664.489), stdev = 6727.181
[info]   CI (99.9%): [432429.005, 484236.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   682.026 ±(99.9%) 52.887 MB/sec [Average]
[info]   (min, avg, max) = (658.473, 682.026, 692.405), stdev = 13.735
[info]   CI (99.9%): [629.139, 734.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2342.050 ±(99.9%) 65.217 B/op [Average]
[info]   (min, avg, max) = (2320.771, 2342.050, 2356.349), stdev = 16.937
[info]   CI (99.9%): [2276.833, 2407.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.072 ±(99.9%) 0.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.213), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   674.030 ±(99.9%) 1.154 MB/sec [Average]
[info]   (min, avg, max) = (673.666, 674.030, 674.345), stdev = 0.300
[info]   CI (99.9%): [672.875, 675.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2315.120 ±(99.9%) 130.809 B/op [Average]
[info]   (min, avg, max) = (2293.332, 2315.120, 2374.319), stdev = 33.971
[info]   CI (99.9%): [2184.311, 2445.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:47:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9615.877 ops/s
[info] # Warmup Iteration   2: 17253.658 ops/s
[info] # Warmup Iteration   3: 17691.640 ops/s
[info] # Warmup Iteration   4: 16414.264 ops/s
[info] # Warmup Iteration   5: 17526.120 ops/s
[info] Iteration   1: 17645.641 ops/s
[info]                  ·gc.alloc.rate:                   1229.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              109650.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119776.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17340.975 ops/s
[info]                  ·gc.alloc.rate:                   1198.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              108770.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60971.454 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 17675.499 ops/s
[info]                  ·gc.alloc.rate:                   1224.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              109078.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119691.519 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17650.483 ops/s
[info]                  ·gc.alloc.rate:                   1212.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              108118.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119973.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17658.277 ops/s
[info]                  ·gc.alloc.rate:                   1224.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              109176.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120050.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   17594.175 ±(99.9%) 546.779 ops/s [Average]
[info]   (min, avg, max) = (17340.975, 17594.175, 17675.499), stdev = 141.997
[info]   CI (99.9%): [17047.396, 18140.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1218.017 ±(99.9%) 47.684 MB/sec [Average]
[info]   (min, avg, max) = (1198.907, 1218.017, 1229.219), stdev = 12.383
[info]   CI (99.9%): [1170.333, 1265.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   108958.869 ±(99.9%) 2180.459 B/op [Average]
[info]   (min, avg, max) = (108118.348, 108958.869, 109650.743), stdev = 566.258
[info]   CI (99.9%): [106778.411, 111139.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.112 ±(99.9%) 9.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.112, 5.560), stdev = 2.487
[info]   CI (99.9%): [≈ 0, 10.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1210.166 ±(99.9%) 1158.345 MB/sec [Average]
[info]   (min, avg, max) = (672.052, 1210.166, 1346.612), stdev = 300.818
[info]   CI (99.9%): [51.821, 2368.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   108092.626 ±(99.9%) 101433.410 B/op [Average]
[info]   (min, avg, max) = (60971.454, 108092.626, 120050.998), stdev = 26341.935
[info]   CI (99.9%): [6659.216, 209526.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:46:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8453.128 ops/s
[info] # Warmup Iteration   2: 28780.496 ops/s
[info] # Warmup Iteration   3: 30121.565 ops/s
[info] # Warmup Iteration   4: 30220.745 ops/s
[info] # Warmup Iteration   5: 29758.868 ops/s
[info] Iteration   1: 30317.773 ops/s
[info]                  ·gc.alloc.rate:                   783.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              40668.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69902.764 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 30305.140 ops/s
[info]                  ·gc.alloc.rate:                   772.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              40133.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35009.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 30495.428 ops/s
[info]                  ·gc.alloc.rate:                   776.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              40064.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34793.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 30499.330 ops/s
[info]                  ·gc.alloc.rate:                   784.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              40492.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34803.580 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 30426.731 ops/s
[info]                  ·gc.alloc.rate:                   780.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              40395.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34888.213 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   30408.880 ±(99.9%) 360.466 ops/s [Average]
[info]   (min, avg, max) = (30305.140, 30408.880, 30499.330), stdev = 93.612
[info]   CI (99.9%): [30048.414, 30769.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   779.604 ±(99.9%) 19.360 MB/sec [Average]
[info]   (min, avg, max) = (772.744, 779.604, 784.623), stdev = 5.028
[info]   CI (99.9%): [760.244, 798.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   40351.103 ±(99.9%) 967.419 B/op [Average]
[info]   (min, avg, max) = (40064.458, 40351.103, 40668.894), stdev = 251.236
[info]   CI (99.9%): [39383.684, 41318.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.215 ±(99.9%) 1.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.215, 1.074), stdev = 0.480
[info]   CI (99.9%): [≈ 0, 2.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   808.761 ±(99.9%) 1158.340 MB/sec [Average]
[info]   (min, avg, max) = (674.072, 808.761, 1346.879), stdev = 300.817
[info]   CI (99.9%): [≈ 0, 1967.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41879.366 ±(99.9%) 60323.397 B/op [Average]
[info]   (min, avg, max) = (34793.236, 41879.366, 69902.764), stdev = 15665.795
[info]   CI (99.9%): [≈ 0, 102202.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:46:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26946.057 ops/s
[info] # Warmup Iteration   2: 39070.279 ops/s
[info] # Warmup Iteration   3: 37793.716 ops/s
[info] # Warmup Iteration   4: 39304.613 ops/s
[info] # Warmup Iteration   5: 39744.841 ops/s
[info] Iteration   1: 39329.391 ops/s
[info]                  ·gc.alloc.rate:                   592.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              23703.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26976.787 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 40307.692 ops/s
[info]                  ·gc.alloc.rate:      580.719 MB/sec
[info]                  ·gc.alloc.rate.norm: 22680.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 40098.448 ops/s
[info]                  ·gc.alloc.rate:                   590.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              23181.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26434.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 40135.686 ops/s
[info]                  ·gc.alloc.rate:                   593.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              23295.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26409.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 40196.168 ops/s
[info]                  ·gc.alloc.rate:                   597.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              23386.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26343.509 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   40013.477 ±(99.9%) 1503.807 ops/s [Average]
[info]   (min, avg, max) = (39329.391, 40013.477, 40307.692), stdev = 390.534
[info]   CI (99.9%): [38509.670, 41517.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   590.942 ±(99.9%) 23.943 MB/sec [Average]
[info]   (min, avg, max) = (580.719, 590.942, 597.191), stdev = 6.218
[info]   CI (99.9%): [566.999, 614.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23249.470 ±(99.9%) 1435.115 B/op [Average]
[info]   (min, avg, max) = (22680.010, 23249.470, 23703.173), stdev = 372.695
[info]   CI (99.9%): [21814.355, 24684.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.579 ±(99.9%) 4.804 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.810), stdev = 1.247
[info]   CI (99.9%): [≈ 0, 5.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23.145 ±(99.9%) 192.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.145, 112.459), stdev = 49.931
[info]   CI (99.9%): [≈ 0, 215.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.705 ±(99.9%) 1159.604 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.705, 674.077), stdev = 301.145
[info]   CI (99.9%): [≈ 0, 1698.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21232.667 ±(99.9%) 45715.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21232.667, 26976.787), stdev = 11872.136
[info]   CI (99.9%): [≈ 0, 66948.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:46:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6119.340 ops/s
[info] # Warmup Iteration   2: 26029.333 ops/s
[info] # Warmup Iteration   3: 28079.651 ops/s
[info] # Warmup Iteration   4: 28015.620 ops/s
[info] # Warmup Iteration   5: 27915.272 ops/s
[info] Iteration   1: 27963.174 ops/s
[info]                  ·gc.alloc.rate:                   1413.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              79553.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75883.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28512.759 ops/s
[info]                  ·gc.alloc.rate:                   1432.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              79078.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74496.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28367.068 ops/s
[info]                  ·gc.alloc.rate:                   1421.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              78856.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74914.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28598.758 ops/s
[info]                  ·gc.alloc.rate:                   1442.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              79395.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74379.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28482.105 ops/s
[info]                  ·gc.alloc.rate:                   1450.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              80166.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112152.874 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   28384.773 ±(99.9%) 962.088 ops/s [Average]
[info]   (min, avg, max) = (27963.174, 28384.773, 28598.758), stdev = 249.851
[info]   CI (99.9%): [27422.685, 29346.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1431.973 ±(99.9%) 58.665 MB/sec [Average]
[info]   (min, avg, max) = (1413.123, 1431.973, 1450.523), stdev = 15.235
[info]   CI (99.9%): [1373.309, 1490.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79410.005 ±(99.9%) 1933.173 B/op [Average]
[info]   (min, avg, max) = (78856.645, 79410.005, 80166.022), stdev = 502.039
[info]   CI (99.9%): [77476.832, 81343.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.315 ±(99.9%) 6.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.315, 4.686), stdev = 1.657
[info]   CI (99.9%): [≈ 0, 8.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1485.653 ±(99.9%) 1170.235 MB/sec [Average]
[info]   (min, avg, max) = (1347.941, 1485.653, 2029.293), stdev = 303.906
[info]   CI (99.9%): [315.418, 2655.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   82365.412 ±(99.9%) 64160.216 B/op [Average]
[info]   (min, avg, max) = (74379.832, 82365.412, 112152.874), stdev = 16662.204
[info]   CI (99.9%): [18205.196, 146525.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:46:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9295.084 ops/s
[info] # Warmup Iteration   2: 22672.365 ops/s
[info] # Warmup Iteration   3: 23599.569 ops/s
[info] # Warmup Iteration   4: 23585.858 ops/s
[info] # Warmup Iteration   5: 23584.434 ops/s
[info] Iteration   1: 23620.055 ops/s
[info]                  ·gc.alloc.rate:                   1378.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              91890.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89926.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23615.937 ops/s
[info]                  ·gc.alloc.rate:                   1377.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              91808.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89985.756 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23587.620 ops/s
[info]                  ·gc.alloc.rate:                   1394.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              93064.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90137.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23690.523 ops/s
[info]                  ·gc.alloc.rate:                   1388.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              92273.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89833.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23567.192 ops/s
[info]                  ·gc.alloc.rate:                   1382.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              92290.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90395.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   23616.265 ±(99.9%) 180.173 ops/s [Average]
[info]   (min, avg, max) = (23567.192, 23616.265, 23690.523), stdev = 46.790
[info]   CI (99.9%): [23436.093, 23796.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1384.339 ±(99.9%) 27.941 MB/sec [Average]
[info]   (min, avg, max) = (1377.339, 1384.339, 1394.638), stdev = 7.256
[info]   CI (99.9%): [1356.398, 1412.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   92265.406 ±(99.9%) 1913.491 B/op [Average]
[info]   (min, avg, max) = (91808.225, 92265.406, 93064.038), stdev = 496.927
[info]   CI (99.9%): [90351.915, 94178.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.494 ±(99.9%) 11.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.494, 6.935), stdev = 3.005
[info]   CI (99.9%): [≈ 0, 14.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1351.181 ±(99.9%) 6.686 MB/sec [Average]
[info]   (min, avg, max) = (1349.349, 1351.181, 1353.693), stdev = 1.736
[info]   CI (99.9%): [1344.495, 1357.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   90055.566 ±(99.9%) 845.547 B/op [Average]
[info]   (min, avg, max) = (89833.690, 90055.566, 90395.250), stdev = 219.586
[info]   CI (99.9%): [89210.019, 90901.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:45:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2564.323 ops/s
[info] # Warmup Iteration   2: 20662.964 ops/s
[info] # Warmup Iteration   3: 21618.450 ops/s
[info] # Warmup Iteration   4: 21680.915 ops/s
[info] # Warmup Iteration   5: 21271.772 ops/s
[info] Iteration   1: 21472.206 ops/s
[info]                  ·gc.alloc.rate:                   1244.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              91196.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98773.945 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21566.477 ops/s
[info]                  ·gc.alloc.rate:                   1273.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              92911.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98416.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21629.432 ops/s
[info]                  ·gc.alloc.rate:                   1256.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              91461.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98178.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21765.137 ops/s
[info]                  ·gc.alloc.rate:                   1248.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              90278.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48794.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 21425.331 ops/s
[info]                  ·gc.alloc.rate:                   1244.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              91456.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99235.248 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   21571.716 ±(99.9%) 516.981 ops/s [Average]
[info]   (min, avg, max) = (21425.331, 21571.716, 21765.137), stdev = 134.258
[info]   CI (99.9%): [21054.736, 22088.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1253.605 ±(99.9%) 46.294 MB/sec [Average]
[info]   (min, avg, max) = (1244.339, 1253.605, 1273.169), stdev = 12.022
[info]   CI (99.9%): [1207.311, 1299.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   91461.004 ±(99.9%) 3638.410 B/op [Average]
[info]   (min, avg, max) = (90278.979, 91461.004, 92911.515), stdev = 944.883
[info]   CI (99.9%): [87822.595, 95099.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.609 ±(99.9%) 3.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.609, 1.529), stdev = 0.834
[info]   CI (99.9%): [≈ 0, 3.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1214.226 ±(99.9%) 1160.690 MB/sec [Average]
[info]   (min, avg, max) = (675.020, 1214.226, 1350.682), stdev = 301.427
[info]   CI (99.9%): [53.536, 2374.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   88679.678 ±(99.9%) 85869.557 B/op [Average]
[info]   (min, avg, max) = (48794.501, 88679.678, 99235.248), stdev = 22300.051
[info]   CI (99.9%): [2810.121, 174549.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:45:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16338.273 ops/s
[info] # Warmup Iteration   2: 25084.299 ops/s
[info] # Warmup Iteration   3: 25604.572 ops/s
[info] # Warmup Iteration   4: 25994.186 ops/s
[info] # Warmup Iteration   5: 25107.696 ops/s
[info] Iteration   1: 25891.778 ops/s
[info]                  ·gc.alloc.rate:                   1394.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              84780.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81712.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26115.310 ops/s
[info]                  ·gc.alloc.rate:                   1392.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              83945.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81008.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26017.689 ops/s
[info]                  ·gc.alloc.rate:                   1391.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              84146.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81397.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 26135.002 ops/s
[info]                  ·gc.alloc.rate:                   1388.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              83629.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81110.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26121.173 ops/s
[info]                  ·gc.alloc.rate:                   1391.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              83870.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81233.936 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   26056.190 ±(99.9%) 396.649 ops/s [Average]
[info]   (min, avg, max) = (25891.778, 26056.190, 26135.002), stdev = 103.009
[info]   CI (99.9%): [25659.541, 26452.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1391.776 ±(99.9%) 8.477 MB/sec [Average]
[info]   (min, avg, max) = (1388.591, 1391.776, 1394.560), stdev = 2.201
[info]   CI (99.9%): [1383.299, 1400.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   84074.650 ±(99.9%) 1678.289 B/op [Average]
[info]   (min, avg, max) = (83629.927, 84074.650, 84780.716), stdev = 435.846
[info]   CI (99.9%): [82396.361, 85752.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.187), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.267 ±(99.9%) 17.611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.267, 11.290), stdev = 4.574
[info]   CI (99.9%): [≈ 0, 20.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1345.728 ±(99.9%) 6.700 MB/sec [Average]
[info]   (min, avg, max) = (1344.063, 1345.728, 1348.094), stdev = 1.740
[info]   CI (99.9%): [1339.028, 1352.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   81292.532 ±(99.9%) 1062.658 B/op [Average]
[info]   (min, avg, max) = (81008.628, 81292.532, 81712.479), stdev = 275.969
[info]   CI (99.9%): [80229.874, 82355.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:45:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16742.754 ops/s
[info] # Warmup Iteration   2: 26174.630 ops/s
[info] # Warmup Iteration   3: 26168.338 ops/s
[info] # Warmup Iteration   4: 26475.375 ops/s
[info] # Warmup Iteration   5: 26327.888 ops/s
[info] Iteration   1: 26632.603 ops/s
[info]                  ·gc.alloc.rate:                   1365.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              80723.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79360.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26566.766 ops/s
[info]                  ·gc.alloc.rate:                   1353.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              80208.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79633.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 26558.926 ops/s
[info]                  ·gc.alloc.rate:                   1364.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              80843.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79700.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26612.754 ops/s
[info]                  ·gc.alloc.rate:                   1365.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              80781.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79617.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 25958.585 ops/s
[info]                  ·gc.alloc.rate:                   1319.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              80022.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81703.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   26465.927 ±(99.9%) 1098.534 ops/s [Average]
[info]   (min, avg, max) = (25958.585, 26465.927, 26632.603), stdev = 285.286
[info]   CI (99.9%): [25367.393, 27564.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1353.867 ±(99.9%) 75.984 MB/sec [Average]
[info]   (min, avg, max) = (1319.729, 1353.867, 1365.867), stdev = 19.733
[info]   CI (99.9%): [1277.883, 1429.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   80515.943 ±(99.9%) 1439.300 B/op [Average]
[info]   (min, avg, max) = (80022.416, 80515.943, 80843.580), stdev = 373.782
[info]   CI (99.9%): [79076.643, 81955.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.493 ±(99.9%) 2.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.493, 1.234), stdev = 0.676
[info]   CI (99.9%): [≈ 0, 3.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1345.063 ±(99.9%) 6.960 MB/sec [Average]
[info]   (min, avg, max) = (1342.799, 1345.063, 1347.455), stdev = 1.808
[info]   CI (99.9%): [1338.103, 1352.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   80003.051 ±(99.9%) 3694.122 B/op [Average]
[info]   (min, avg, max) = (79360.634, 80003.051, 81703.549), stdev = 959.352
[info]   CI (99.9%): [76308.929, 83697.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:45:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1846.709 ops/s
[info] # Warmup Iteration   2: 7056.056 ops/s
[info] # Warmup Iteration   3: 7616.659 ops/s
[info] # Warmup Iteration   4: 7609.921 ops/s
[info] # Warmup Iteration   5: 7621.837 ops/s
[info] Iteration   1: 7634.780 ops/s
[info]                  ·gc.alloc.rate:                   1017.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              209719.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138830.584 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7591.218 ops/s
[info]                  ·gc.alloc.rate:                   1027.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              213011.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 279233.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7476.835 ops/s
[info]                  ·gc.alloc.rate:                   998.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              210125.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141763.886 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7606.516 ops/s
[info]                  ·gc.alloc.rate:                   1028.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              212881.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 278820.879 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7446.512 ops/s
[info]                  ·gc.alloc.rate:                   1000.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              211452.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142526.943 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7551.172 ±(99.9%) 322.954 ops/s [Average]
[info]   (min, avg, max) = (7446.512, 7551.172, 7634.780), stdev = 83.870
[info]   CI (99.9%): [7228.218, 7874.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1014.344 ±(99.9%) 56.032 MB/sec [Average]
[info]   (min, avg, max) = (998.096, 1014.344, 1028.873), stdev = 14.551
[info]   CI (99.9%): [958.312, 1070.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   211438.275 ±(99.9%) 5851.663 B/op [Average]
[info]   (min, avg, max) = (209719.995, 211438.275, 213011.975), stdev = 1519.658
[info]   CI (99.9%): [205586.612, 217289.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.583 ±(99.9%) 9.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.583, 4.316), stdev = 2.358
[info]   CI (99.9%): [≈ 0, 11.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   943.037 ±(99.9%) 1420.390 MB/sec [Average]
[info]   (min, avg, max) = (673.315, 943.037, 1347.562), stdev = 368.871
[info]   CI (99.9%): [≈ 0, 2363.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   196235.177 ±(99.9%) 291074.799 B/op [Average]
[info]   (min, avg, max) = (138830.584, 196235.177, 279233.593), stdev = 75591.201
[info]   CI (99.9%): [≈ 0, 487309.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:44:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7683.951 ops/s
[info] # Warmup Iteration   2: 17239.059 ops/s
[info] # Warmup Iteration   3: 17339.780 ops/s
[info] # Warmup Iteration   4: 17646.544 ops/s
[info] # Warmup Iteration   5: 17528.963 ops/s
[info] Iteration   1: 17450.194 ops/s
[info]                  ·gc.alloc.rate:                   1388.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              125222.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121481.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17425.408 ops/s
[info]                  ·gc.alloc.rate:                   1403.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              126800.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121716.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17601.416 ops/s
[info]                  ·gc.alloc.rate:                   1387.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              124034.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120611.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17524.463 ops/s
[info]                  ·gc.alloc.rate:                   1393.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              125194.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121267.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17695.881 ops/s
[info]                  ·gc.alloc.rate:                   1392.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              123904.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120201.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17539.473 ±(99.9%) 428.388 ops/s [Average]
[info]   (min, avg, max) = (17425.408, 17539.473, 17695.881), stdev = 111.251
[info]   CI (99.9%): [17111.084, 17967.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1393.128 ±(99.9%) 25.487 MB/sec [Average]
[info]   (min, avg, max) = (1387.013, 1393.128, 1403.766), stdev = 6.619
[info]   CI (99.9%): [1367.641, 1418.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   125031.561 ±(99.9%) 4497.564 B/op [Average]
[info]   (min, avg, max) = (123904.755, 125031.561, 126800.745), stdev = 1168.003
[info]   CI (99.9%): [120533.998, 129529.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.984 ±(99.9%) 6.362 B/op [Average]
[info]   (min, avg, max) = (1.861, 2.984, 5.554), stdev = 1.652
[info]   CI (99.9%): [≈ 0, 9.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1348.850 ±(99.9%) 6.995 MB/sec [Average]
[info]   (min, avg, max) = (1346.754, 1348.850, 1351.133), stdev = 1.817
[info]   CI (99.9%): [1341.855, 1355.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   121055.715 ±(99.9%) 2427.933 B/op [Average]
[info]   (min, avg, max) = (120201.170, 121055.715, 121716.161), stdev = 630.526
[info]   CI (99.9%): [118627.782, 123483.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:44:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17017.618 ops/s
[info] # Warmup Iteration   2: 35606.595 ops/s
[info] # Warmup Iteration   3: 35613.377 ops/s
[info] # Warmup Iteration   4: 35099.979 ops/s
[info] # Warmup Iteration   5: 35891.037 ops/s
[info] Iteration   1: 35514.954 ops/s
[info]                  ·gc.alloc.rate:                   900.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              39919.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59764.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 35719.305 ops/s
[info]                  ·gc.alloc.rate:                   892.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              39339.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29718.214 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 35920.570 ops/s
[info]                  ·gc.alloc.rate:                   906.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              39740.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29565.716 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 35240.048 ops/s
[info]                  ·gc.alloc.rate:                   904.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              40392.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60290.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 35422.190 ops/s
[info]                  ·gc.alloc.rate:                   887.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              39437.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29996.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   35563.413 ±(99.9%) 1016.454 ops/s [Average]
[info]   (min, avg, max) = (35240.048, 35563.413, 35920.570), stdev = 263.970
[info]   CI (99.9%): [34546.959, 36579.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   898.506 ±(99.9%) 31.072 MB/sec [Average]
[info]   (min, avg, max) = (887.693, 898.506, 906.913), stdev = 8.069
[info]   CI (99.9%): [867.434, 929.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39765.851 ±(99.9%) 1618.580 B/op [Average]
[info]   (min, avg, max) = (39339.191, 39765.851, 40392.518), stdev = 420.340
[info]   CI (99.9%): [38147.271, 41384.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.167), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.032 ±(99.9%) 11.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.032, 7.380), stdev = 3.087
[info]   CI (99.9%): [≈ 0, 13.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.568 ±(99.9%) 1422.626 MB/sec [Average]
[info]   (min, avg, max) = (674.386, 944.568, 1349.757), stdev = 369.451
[info]   CI (99.9%): [≈ 0, 2367.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41867.049 ±(99.9%) 63843.702 B/op [Average]
[info]   (min, avg, max) = (29565.716, 41867.049, 60290.517), stdev = 16580.007
[info]   CI (99.9%): [≈ 0, 105710.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:44:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45014.882 ops/s
[info] # Warmup Iteration   2: 58918.323 ops/s
[info] # Warmup Iteration   3: 59500.551 ops/s
[info] # Warmup Iteration   4: 60064.020 ops/s
[info] # Warmup Iteration   5: 59896.249 ops/s
[info] Iteration   1: 60237.811 ops/s
[info]                  ·gc.alloc.rate:                   792.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              20708.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17578.956 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 48633.168 ops/s
[info]                  ·gc.alloc.rate:                   643.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              20822.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21773.921 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 60158.703 ops/s
[info]                  ·gc.alloc.rate:                   822.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              21518.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35169.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 60347.887 ops/s
[info]                  ·gc.alloc.rate:                   799.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              20853.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17529.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 60138.818 ops/s
[info]                  ·gc.alloc.rate:                   794.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17590.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   57903.277 ±(99.9%) 19957.119 ops/s [Average]
[info]   (min, avg, max) = (48633.168, 57903.277, 60347.887), stdev = 5182.801
[info]   CI (99.9%): [37946.158, 77860.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   770.528 ±(99.9%) 277.520 MB/sec [Average]
[info]   (min, avg, max) = (643.376, 770.528, 822.459), stdev = 72.071
[info]   CI (99.9%): [493.008, 1048.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20940.684 ±(99.9%) 1261.059 B/op [Average]
[info]   (min, avg, max) = (20708.113, 20940.684, 21518.397), stdev = 327.493
[info]   CI (99.9%): [19679.625, 22201.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.435 ±(99.9%) 2.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.435, 1.632), stdev = 0.709
[info]   CI (99.9%): [≈ 0, 3.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.783 ±(99.9%) 1156.851 MB/sec [Average]
[info]   (min, avg, max) = (672.064, 806.783, 1344.209), stdev = 300.431
[info]   CI (99.9%): [≈ 0, 1963.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21928.361 ±(99.9%) 29352.859 B/op [Average]
[info]   (min, avg, max) = (17529.544, 21928.361, 35169.218), stdev = 7622.844
[info]   CI (99.9%): [≈ 0, 51281.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:44:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5368.923 ops/s
[info] # Warmup Iteration   2: 25749.880 ops/s
[info] # Warmup Iteration   3: 28221.569 ops/s
[info] # Warmup Iteration   4: 28112.695 ops/s
[info] # Warmup Iteration   5: 27702.883 ops/s
[info] Iteration   1: 28117.407 ops/s
[info]                  ·gc.alloc.rate:                   1785.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              99968.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113347.475 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 28255.674 ops/s
[info]                  ·gc.alloc.rate:                   1766.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              98423.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75264.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 28187.325 ops/s
[info]                  ·gc.alloc.rate:                   1800.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              100563.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113270.606 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28156.309 ops/s
[info]                  ·gc.alloc.rate:                   1799.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              100587.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113529.641 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 28241.995 ops/s
[info]                  ·gc.alloc.rate:                   1790.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              99792.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75526.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   28191.742 ±(99.9%) 222.984 ops/s [Average]
[info]   (min, avg, max) = (28117.407, 28191.742, 28255.674), stdev = 57.908
[info]   CI (99.9%): [27968.758, 28414.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1788.694 ±(99.9%) 52.650 MB/sec [Average]
[info]   (min, avg, max) = (1766.884, 1788.694, 1800.895), stdev = 13.673
[info]   CI (99.9%): [1736.044, 1841.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99867.286 ±(99.9%) 3392.707 B/op [Average]
[info]   (min, avg, max) = (98423.298, 99867.286, 100587.710), stdev = 881.075
[info]   CI (99.9%): [96474.580, 103259.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.395 ±(99.9%) 3.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.395, 2.327), stdev = 0.973
[info]   CI (99.9%): [≈ 0, 5.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1758.080 ±(99.9%) 1423.541 MB/sec [Average]
[info]   (min, avg, max) = (1351.131, 1758.080, 2030.796), stdev = 369.689
[info]   CI (99.9%): [334.539, 3181.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   98187.693 ±(99.9%) 80119.839 B/op [Average]
[info]   (min, avg, max) = (75264.018, 98187.693, 113529.641), stdev = 20806.868
[info]   CI (99.9%): [18067.854, 178307.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:43:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3425.222 ops/s
[info] # Warmup Iteration   2: 23937.948 ops/s
[info] # Warmup Iteration   3: 25869.253 ops/s
[info] # Warmup Iteration   4: 25885.650 ops/s
[info] # Warmup Iteration   5: 24694.514 ops/s
[info] Iteration   1: 25909.893 ops/s
[info]                  ·gc.alloc.rate:                   1502.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              91283.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81918.736 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 26000.033 ops/s
[info]                  ·gc.alloc.rate:                   1504.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              91074.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81672.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 25989.801 ops/s
[info]                  ·gc.alloc.rate:                   1512.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              91614.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81764.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 25999.659 ops/s
[info]                  ·gc.alloc.rate:                   1511.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              91508.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81813.524 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 25920.588 ops/s
[info]                  ·gc.alloc.rate:                   1520.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              92359.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82146.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   25963.995 ±(99.9%) 172.719 ops/s [Average]
[info]   (min, avg, max) = (25909.893, 25963.995, 26000.033), stdev = 44.855
[info]   CI (99.9%): [25791.276, 26136.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1510.485 ±(99.9%) 27.966 MB/sec [Average]
[info]   (min, avg, max) = (1502.552, 1510.485, 1520.891), stdev = 7.263
[info]   CI (99.9%): [1482.519, 1538.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   91568.132 ±(99.9%) 1882.836 B/op [Average]
[info]   (min, avg, max) = (91074.811, 91568.132, 92359.429), stdev = 488.967
[info]   CI (99.9%): [89685.296, 93450.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.027 ±(99.9%) 10.057 B/op [Average]
[info]   (min, avg, max) = (1.261, 3.027, 7.560), stdev = 2.612
[info]   CI (99.9%): [≈ 0, 13.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1350.395 ±(99.9%) 6.509 MB/sec [Average]
[info]   (min, avg, max) = (1348.409, 1350.395, 1352.720), stdev = 1.690
[info]   CI (99.9%): [1343.887, 1356.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   81863.172 ±(99.9%) 700.057 B/op [Average]
[info]   (min, avg, max) = (81672.397, 81863.172, 82146.880), stdev = 181.802
[info]   CI (99.9%): [81163.115, 82563.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:43:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22652.370 ops/s
[info] # Warmup Iteration   2: 34587.837 ops/s
[info] # Warmup Iteration   3: 34118.271 ops/s
[info] # Warmup Iteration   4: 34447.171 ops/s
[info] # Warmup Iteration   5: 35095.766 ops/s
[info] Iteration   1: 35035.292 ops/s
[info]                  ·gc.alloc.rate:                   1417.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              63687.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60448.731 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 35192.234 ops/s
[info]                  ·gc.alloc.rate:                   1417.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              63421.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60179.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 35259.425 ops/s
[info]                  ·gc.alloc.rate:                   1430.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              63834.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60092.786 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34992.038 ops/s
[info]                  ·gc.alloc.rate:                   1432.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              64439.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90949.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 35053.598 ops/s
[info]                  ·gc.alloc.rate:                   1421.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              63836.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60595.424 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   35106.517 ±(99.9%) 437.803 ops/s [Average]
[info]   (min, avg, max) = (34992.038, 35106.517, 35259.425), stdev = 113.696
[info]   CI (99.9%): [34668.715, 35544.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1423.976 ±(99.9%) 27.317 MB/sec [Average]
[info]   (min, avg, max) = (1417.474, 1423.976, 1432.914), stdev = 7.094
[info]   CI (99.9%): [1396.658, 1451.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   63843.738 ±(99.9%) 1437.163 B/op [Average]
[info]   (min, avg, max) = (63421.880, 63843.738, 64439.204), stdev = 373.227
[info]   CI (99.9%): [62406.576, 65280.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.989 ±(99.9%) 7.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.989, 4.676), stdev = 2.024
[info]   CI (99.9%): [≈ 0, 10.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1481.763 ±(99.9%) 1163.801 MB/sec [Average]
[info]   (min, avg, max) = (1345.396, 1481.763, 2022.410), stdev = 302.235
[info]   CI (99.9%): [317.962, 2645.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   66453.065 ±(99.9%) 52735.729 B/op [Average]
[info]   (min, avg, max) = (60092.786, 66453.065, 90949.294), stdev = 13695.301
[info]   CI (99.9%): [13717.337, 119188.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:43:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23374.503 ops/s
[info] # Warmup Iteration   2: 34303.938 ops/s
[info] # Warmup Iteration   3: 35227.825 ops/s
[info] # Warmup Iteration   4: 34737.783 ops/s
[info] # Warmup Iteration   5: 35473.489 ops/s
[info] Iteration   1: 35469.042 ops/s
[info]                  ·gc.alloc.rate:                   1373.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              60940.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59648.382 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34482.171 ops/s
[info]                  ·gc.alloc.rate:                   1341.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              61253.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61355.439 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 35380.602 ops/s
[info]                  ·gc.alloc.rate:                   1360.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              60529.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59826.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 35504.807 ops/s
[info]                  ·gc.alloc.rate:                   1376.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              61036.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59676.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 35480.616 ops/s
[info]                  ·gc.alloc.rate:                   1363.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              60475.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59777.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   35263.448 ±(99.9%) 1691.441 ops/s [Average]
[info]   (min, avg, max) = (34482.171, 35263.448, 35504.807), stdev = 439.262
[info]   CI (99.9%): [33572.007, 36954.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1363.105 ±(99.9%) 52.523 MB/sec [Average]
[info]   (min, avg, max) = (1341.942, 1363.105, 1376.769), stdev = 13.640
[info]   CI (99.9%): [1310.582, 1415.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   60847.053 ±(99.9%) 1289.354 B/op [Average]
[info]   (min, avg, max) = (60475.227, 60847.053, 61253.214), stdev = 334.841
[info]   CI (99.9%): [59557.700, 62136.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2.961 ±(99.9%) 6.326 B/op [Average]
[info]   (min, avg, max) = (0.950, 2.961, 4.618), stdev = 1.643
[info]   CI (99.9%): [≈ 0, 9.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1345.287 ±(99.9%) 5.408 MB/sec [Average]
[info]   (min, avg, max) = (1344.126, 1345.287, 1347.360), stdev = 1.404
[info]   CI (99.9%): [1339.880, 1350.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   60056.861 ±(99.9%) 2809.214 B/op [Average]
[info]   (min, avg, max) = (59648.382, 60056.861, 61355.439), stdev = 729.544
[info]   CI (99.9%): [57247.647, 62866.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:43:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150731.796 ops/s
[info] # Warmup Iteration   2: 309311.312 ops/s
[info] # Warmup Iteration   3: 319798.960 ops/s
[info] # Warmup Iteration   4: 322960.461 ops/s
[info] # Warmup Iteration   5: 323291.163 ops/s
[info] Iteration   1: 326507.101 ops/s
[info]                  ·gc.alloc.rate:                   1689.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              8143.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6486.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 328865.991 ops/s
[info]                  ·gc.alloc.rate:                   1714.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              8203.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9667.387 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 329404.339 ops/s
[info]                  ·gc.alloc.rate:                   1702.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              8137.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6441.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 330075.464 ops/s
[info]                  ·gc.alloc.rate:                   1705.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              8134.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6435.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 329187.957 ops/s
[info]                  ·gc.alloc.rate:                   1695.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              8109.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6462.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   328808.170 ±(99.9%) 5238.841 ops/s [Average]
[info]   (min, avg, max) = (326507.101, 328808.170, 330075.464), stdev = 1360.510
[info]   CI (99.9%): [323569.329, 334047.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1701.622 ±(99.9%) 37.328 MB/sec [Average]
[info]   (min, avg, max) = (1689.189, 1701.622, 1714.631), stdev = 9.694
[info]   CI (99.9%): [1664.294, 1738.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8145.654 ±(99.9%) 133.983 B/op [Average]
[info]   (min, avg, max) = (8109.294, 8145.654, 8203.321), stdev = 34.795
[info]   CI (99.9%): [8011.670, 8279.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.199 ±(99.9%) 0.899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.199, 0.498), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1482.964 ±(99.9%) 1157.430 MB/sec [Average]
[info]   (min, avg, max) = (1345.425, 1482.964, 2020.645), stdev = 300.581
[info]   CI (99.9%): [325.533, 2640.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7098.631 ±(99.9%) 5529.973 B/op [Average]
[info]   (min, avg, max) = (6435.417, 7098.631, 9667.387), stdev = 1436.116
[info]   CI (99.9%): [1568.658, 12628.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:42:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.875 ops/s
[info] # Warmup Iteration   2: 1230051.801 ops/s
[info] # Warmup Iteration   3: 1291949.381 ops/s
[info] # Warmup Iteration   4: 1313414.700 ops/s
[info] # Warmup Iteration   5: 1317990.191 ops/s
[info] Iteration   1: 1313771.741 ops/s
[info]                  ·gc.alloc.rate:                   427.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 805.218 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1319371.408 ops/s
[info]                  ·gc.alloc.rate:      415.782 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1315921.386 ops/s
[info]                  ·gc.alloc.rate:                   436.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              521.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 803.927 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1279483.391 ops/s
[info]                  ·gc.alloc.rate:                   423.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              521.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 826.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1133790.460 ops/s
[info]                  ·gc.alloc.rate:      357.278 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1272467.677 ±(99.9%) 304875.213 ops/s [Average]
[info]   (min, avg, max) = (1133790.460, 1272467.677, 1319371.408), stdev = 79175.125
[info]   CI (99.9%): [967592.465, 1577342.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   412.132 ±(99.9%) 121.416 MB/sec [Average]
[info]   (min, avg, max) = (357.278, 412.132, 436.250), stdev = 31.531
[info]   CI (99.9%): [290.716, 533.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   509.483 ±(99.9%) 49.695 B/op [Average]
[info]   (min, avg, max) = (496.000, 509.483, 521.807), stdev = 12.906
[info]   CI (99.9%): [459.789, 559.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.713 ±(99.9%) 6.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.713, 3.540), stdev = 1.581
[info]   CI (99.9%): [≈ 0, 6.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.853 ±(99.9%) 7.280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.853, 4.235), stdev = 1.891
[info]   CI (99.9%): [≈ 0, 8.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   403.125 ±(99.9%) 1417.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.125, 672.112), stdev = 368.002
[info]   CI (99.9%): [≈ 0, 1820.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   487.030 ±(99.9%) 1712.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 487.030, 826.003), stdev = 444.681
[info]   CI (99.9%): [≈ 0, 2199.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:42:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265664.207 ops/s
[info] # Warmup Iteration   2: 621814.607 ops/s
[info] # Warmup Iteration   3: 673435.749 ops/s
[info] # Warmup Iteration   4: 672352.934 ops/s
[info] # Warmup Iteration   5: 661955.337 ops/s
[info] Iteration   1: 669112.470 ops/s
[info]                  ·gc.alloc.rate:                   559.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              1316.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1585.710 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 667618.067 ops/s
[info]                  ·gc.alloc.rate:                   552.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              1301.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1589.225 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 618297.597 ops/s
[info]                  ·gc.alloc.rate:      496.466 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 672428.804 ops/s
[info]                  ·gc.alloc.rate:                   553.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              1295.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1577.828 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 676429.208 ops/s
[info]                  ·gc.alloc.rate:                   557.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              1297.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1568.462 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   660777.229 ±(99.9%) 92366.027 ops/s [Average]
[info]   (min, avg, max) = (618297.597, 660777.229, 676429.208), stdev = 23987.164
[info]   CI (99.9%): [568411.202, 753143.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   543.808 ±(99.9%) 102.578 MB/sec [Average]
[info]   (min, avg, max) = (496.466, 543.808, 559.553), stdev = 26.639
[info]   CI (99.9%): [441.230, 646.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1294.948 ±(99.9%) 73.934 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1294.948, 1316.478), stdev = 19.201
[info]   CI (99.9%): [1221.014, 1368.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.208 ±(99.9%) 1.704 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.208, 0.999), stdev = 0.442
[info]   CI (99.9%): [≈ 0, 1.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.489 ±(99.9%) 4.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.489, 2.350), stdev = 1.041
[info]   CI (99.9%): [≈ 0, 4.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.243 ±(99.9%) 1160.762 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.243, 674.109), stdev = 301.446
[info]   CI (99.9%): [≈ 0, 1700.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1264.245 ±(99.9%) 2721.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1264.245, 1589.225), stdev = 706.780
[info]   CI (99.9%): [≈ 0, 3985.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:42:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1305474.093 ops/s
[info] # Warmup Iteration   2: 1653757.177 ops/s
[info] # Warmup Iteration   3: 1790681.409 ops/s
[info] # Warmup Iteration   4: 1778758.514 ops/s
[info] # Warmup Iteration   5: 1776358.678 ops/s
[info] Iteration   1: 1792530.317 ops/s
[info]                  ·gc.alloc.rate:                   358.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              314.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 449.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1796440.019 ops/s
[info]                  ·gc.alloc.rate:      346.953 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1766549.674 ops/s
[info]                  ·gc.alloc.rate:                   359.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              319.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 601.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1769564.777 ops/s
[info]                  ·gc.alloc.rate:      341.764 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1752847.972 ops/s
[info]                  ·gc.alloc.rate:                   354.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              318.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 605.876 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1775586.552 ±(99.9%) 70922.135 ops/s [Average]
[info]   (min, avg, max) = (1752847.972, 1775586.552, 1796440.019), stdev = 18418.253
[info]   CI (99.9%): [1704664.416, 1846508.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   352.168 ±(99.9%) 28.995 MB/sec [Average]
[info]   (min, avg, max) = (341.764, 352.168, 359.083), stdev = 7.530
[info]   CI (99.9%): [323.172, 381.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   312.211 ±(99.9%) 29.896 B/op [Average]
[info]   (min, avg, max) = (304.000, 312.211, 319.950), stdev = 7.764
[info]   CI (99.9%): [282.315, 342.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.543 ±(99.9%) 4.611 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.543, 2.685), stdev = 1.197
[info]   CI (99.9%): [≈ 0, 5.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.488 ±(99.9%) 4.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.488, 2.411), stdev = 1.075
[info]   CI (99.9%): [≈ 0, 4.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   372.218 ±(99.9%) 1333.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372.218, 674.724), stdev = 346.245
[info]   CI (99.9%): [≈ 0, 1705.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   331.251 ±(99.9%) 1189.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 331.251, 605.876), stdev = 308.889
[info]   CI (99.9%): [≈ 0, 1520.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:42:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20296.376 ops/s
[info] # Warmup Iteration   2: 98336.465 ops/s
[info] # Warmup Iteration   3: 96446.362 ops/s
[info] # Warmup Iteration   4: 101948.742 ops/s
[info] # Warmup Iteration   5: 102980.140 ops/s
[info] Iteration   1: 101724.051 ops/s
[info]                  ·gc.alloc.rate:                   3401.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              52644.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3387.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52420.555 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 101719.897 ops/s
[info]                  ·gc.alloc.rate:                   3430.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              53076.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3393.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52504.041 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 101867.076 ops/s
[info]                  ·gc.alloc.rate:                   3435.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              53082.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52499.300 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 101558.670 ops/s
[info]                  ·gc.alloc.rate:                   3399.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              52684.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42158.996 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 97615.371 ops/s
[info]                  ·gc.alloc.rate:                   3299.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              53203.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54871.095 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   100897.013 ±(99.9%) 7076.472 ops/s [Average]
[info]   (min, avg, max) = (97615.371, 100897.013, 101867.076), stdev = 1837.737
[info]   CI (99.9%): [93820.540, 107973.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3393.186 ±(99.9%) 211.287 MB/sec [Average]
[info]   (min, avg, max) = (3299.389, 3393.186, 3435.188), stdev = 54.871
[info]   CI (99.9%): [3181.899, 3604.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52938.246 ±(99.9%) 982.526 B/op [Average]
[info]   (min, avg, max) = (52644.732, 52938.246, 53203.032), stdev = 255.159
[info]   CI (99.9%): [51955.721, 53920.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.235 ±(99.9%) 1.052 B/op [Average]
[info]   (min, avg, max) = (0.966, 1.235, 1.610), stdev = 0.273
[info]   CI (99.9%): [0.182, 2.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3260.208 ±(99.9%) 1162.774 MB/sec [Average]
[info]   (min, avg, max) = (2720.125, 3260.208, 3402.834), stdev = 301.969
[info]   CI (99.9%): [2097.435, 4422.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50890.798 ±(99.9%) 19216.325 B/op [Average]
[info]   (min, avg, max) = (42158.996, 50890.798, 54871.095), stdev = 4990.419
[info]   CI (99.9%): [31674.472, 70107.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:41:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184166.071 ops/s
[info] # Warmup Iteration   2: 357969.268 ops/s
[info] # Warmup Iteration   3: 366207.201 ops/s
[info] # Warmup Iteration   4: 363054.301 ops/s
[info] # Warmup Iteration   5: 368180.187 ops/s
[info] Iteration   1: 360117.244 ops/s
[info]                  ·gc.alloc.rate:                   574.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              2509.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2944.874 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 355144.113 ops/s
[info]                  ·gc.alloc.rate:      551.106 MB/sec
[info]                  ·gc.alloc.rate.norm: 2442.654 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 363515.064 ops/s
[info]                  ·gc.alloc.rate:                   584.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              2532.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2917.133 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 367643.108 ops/s
[info]                  ·gc.alloc.rate:                   586.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              2512.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2885.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 367289.878 ops/s
[info]                  ·gc.alloc.rate:                   591.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              2535.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2888.749 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   362741.881 ±(99.9%) 20185.504 ops/s [Average]
[info]   (min, avg, max) = (355144.113, 362741.881, 367643.108), stdev = 5242.111
[info]   CI (99.9%): [342556.378, 382927.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   577.757 ±(99.9%) 62.247 MB/sec [Average]
[info]   (min, avg, max) = (551.106, 577.757, 591.520), stdev = 16.165
[info]   CI (99.9%): [515.510, 640.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2506.618 ±(99.9%) 144.643 B/op [Average]
[info]   (min, avg, max) = (2442.654, 2506.618, 2535.210), stdev = 37.563
[info]   CI (99.9%): [2361.975, 2651.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.187), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.217 ±(99.9%) 1.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.217, 0.819), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   539.137 ±(99.9%) 1160.534 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.137, 674.036), stdev = 301.387
[info]   CI (99.9%): [≈ 0, 1699.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2327.339 ±(99.9%) 5010.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2327.339, 2944.874), stdev = 1301.242
[info]   CI (99.9%): [≈ 0, 7337.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:41:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.873 ops/s
[info] # Warmup Iteration   2: 1243239.666 ops/s
[info] # Warmup Iteration   3: 1271141.837 ops/s
[info] # Warmup Iteration   4: 1315477.417 ops/s
[info] # Warmup Iteration   5: 1311204.491 ops/s
[info] Iteration   1: 1152673.637 ops/s
[info]                  ·gc.alloc.rate:                   549.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 916.834 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1272478.772 ops/s
[info]                  ·gc.alloc.rate:                   609.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 828.864 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1278917.281 ops/s
[info]                  ·gc.alloc.rate:                   605.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 824.663 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1296636.843 ops/s
[info]                  ·gc.alloc.rate:                   621.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 813.441 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1314170.808 ops/s
[info]                  ·gc.alloc.rate:                   629.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 802.591 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1262975.468 ±(99.9%) 245544.600 ops/s [Average]
[info]   (min, avg, max) = (1152673.637, 1262975.468, 1314170.808), stdev = 63767.153
[info]   CI (99.9%): [1017430.868, 1508520.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   603.299 ±(99.9%) 120.798 MB/sec [Average]
[info]   (min, avg, max) = (549.827, 603.299, 629.993), stdev = 31.371
[info]   CI (99.9%): [482.501, 724.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   751.714 ±(99.9%) 14.610 B/op [Average]
[info]   (min, avg, max) = (745.554, 751.714, 754.528), stdev = 3.794
[info]   CI (99.9%): [737.103, 766.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.773 ±(99.9%) 6.475 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 3.781), stdev = 1.682
[info]   CI (99.9%): [≈ 0, 7.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.052 ±(99.9%) 8.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.052, 5.161), stdev = 2.297
[info]   CI (99.9%): [≈ 0, 9.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   670.457 ±(99.9%) 2.608 MB/sec [Average]
[info]   (min, avg, max) = (670.123, 670.457, 671.667), stdev = 0.677
[info]   CI (99.9%): [667.849, 673.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   837.279 ±(99.9%) 175.726 B/op [Average]
[info]   (min, avg, max) = (802.591, 837.279, 916.834), stdev = 45.636
[info]   CI (99.9%): [661.552, 1013.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:41:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 445951.897 ops/s
[info] # Warmup Iteration   2: 929937.409 ops/s
[info] # Warmup Iteration   3: 976661.083 ops/s
[info] # Warmup Iteration   4: 959453.772 ops/s
[info] # Warmup Iteration   5: 986306.064 ops/s
[info] Iteration   1: 974678.685 ops/s
[info]                  ·gc.alloc.rate:                   707.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              1142.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1087.496 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 953647.889 ops/s
[info]                  ·gc.alloc.rate:                   698.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1111.418 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 913175.465 ops/s
[info]                  ·gc.alloc.rate:                   664.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              1144.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1161.917 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 982287.119 ops/s
[info]                  ·gc.alloc.rate:                   709.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              1137.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1080.136 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 958445.932 ops/s
[info]                  ·gc.alloc.rate:                   701.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1106.948 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   956447.018 ±(99.9%) 103401.846 ops/s [Average]
[info]   (min, avg, max) = (913175.465, 956447.018, 982287.119), stdev = 26853.131
[info]   CI (99.9%): [853045.172, 1059848.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   696.247 ±(99.9%) 71.079 MB/sec [Average]
[info]   (min, avg, max) = (664.262, 696.247, 709.994), stdev = 18.459
[info]   CI (99.9%): [625.168, 767.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1145.866 ±(99.9%) 24.929 B/op [Average]
[info]   (min, avg, max) = (1137.672, 1145.866, 1152.405), stdev = 6.474
[info]   CI (99.9%): [1120.938, 1170.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.034), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.795 ±(99.9%) 1.541 MB/sec [Average]
[info]   (min, avg, max) = (673.314, 673.795, 674.182), stdev = 0.400
[info]   CI (99.9%): [672.254, 675.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1109.583 ±(99.9%) 123.343 B/op [Average]
[info]   (min, avg, max) = (1080.136, 1109.583, 1161.917), stdev = 32.032
[info]   CI (99.9%): [986.240, 1232.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:40:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1922061.366 ops/s
[info] # Warmup Iteration   2: 2427829.418 ops/s
[info] # Warmup Iteration   3: 2502644.749 ops/s
[info] # Warmup Iteration   4: 2467915.128 ops/s
[info] # Warmup Iteration   5: 2503724.824 ops/s
[info] Iteration   1: 2515562.636 ops/s
[info]                  ·gc.alloc.rate:                   1204.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 841.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2502972.396 ops/s
[info]                  ·gc.alloc.rate:                   1174.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              738.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 422.631 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2496423.236 ops/s
[info]                  ·gc.alloc.rate:                   1184.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 847.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2499557.284 ops/s
[info]                  ·gc.alloc.rate:                   1190.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 847.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2518453.088 ops/s
[info]                  ·gc.alloc.rate:                   1198.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 841.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2506593.728 ±(99.9%) 37882.892 ops/s [Average]
[info]   (min, avg, max) = (2496423.236, 2506593.728, 2518453.088), stdev = 9838.067
[info]   CI (99.9%): [2468710.836, 2544476.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1190.546 ±(99.9%) 46.271 MB/sec [Average]
[info]   (min, avg, max) = (1174.144, 1190.546, 1204.856), stdev = 12.016
[info]   CI (99.9%): [1144.275, 1236.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   747.618 ±(99.9%) 22.200 B/op [Average]
[info]   (min, avg, max) = (738.360, 747.618, 753.981), stdev = 5.765
[info]   CI (99.9%): [725.419, 769.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.146), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.050 ±(99.9%) 0.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.092), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1210.633 ±(99.9%) 1159.303 MB/sec [Average]
[info]   (min, avg, max) = (672.070, 1210.633, 1346.851), stdev = 301.067
[info]   CI (99.9%): [51.329, 2369.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   760.131 ±(99.9%) 726.594 B/op [Average]
[info]   (min, avg, max) = (422.631, 760.131, 847.910), stdev = 188.694
[info]   CI (99.9%): [33.538, 1486.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:40:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2220434.672 ops/s
[info] # Warmup Iteration   2: 2754208.523 ops/s
[info] # Warmup Iteration   3: 2665685.427 ops/s
[info] # Warmup Iteration   4: 2671627.584 ops/s
[info] # Warmup Iteration   5: 2808977.473 ops/s
[info] Iteration   1: 2811048.682 ops/s
[info]                  ·gc.alloc.rate:      0.015 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2802224.120 ops/s
[info]                  ·gc.alloc.rate:      1.522 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.855 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2810478.111 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2810177.827 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2803689.093 ops/s
[info]                  ·gc.alloc.rate:      0.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.162 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2807523.566 ±(99.9%) 16221.702 ops/s [Average]
[info]   (min, avg, max) = (2802224.120, 2807523.566, 2811048.682), stdev = 4212.725
[info]   CI (99.9%): [2791301.864, 2823745.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.365 ±(99.9%) 2.535 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.365, 1.522), stdev = 0.658
[info]   CI (99.9%): [≈ 0, 2.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.205 ±(99.9%) 1.424 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.205, 0.855), stdev = 0.370
[info]   CI (99.9%): [≈ 0, 1.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:40:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258061.814 ops/s
[info] # Warmup Iteration   2: 464901.302 ops/s
[info] # Warmup Iteration   3: 583287.395 ops/s
[info] # Warmup Iteration   4: 585563.821 ops/s
[info] # Warmup Iteration   5: 565097.043 ops/s
[info] Iteration   1: 602053.793 ops/s
[info]                  ·gc.alloc.rate:                   667.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1759.750 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 603443.187 ops/s
[info]                  ·gc.alloc.rate:                   676.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              1764.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1756.525 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 603300.737 ops/s
[info]                  ·gc.alloc.rate:                   677.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              1767.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1756.915 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 602961.959 ops/s
[info]                  ·gc.alloc.rate:                   678.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              1770.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1758.702 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 601639.041 ops/s
[info]                  ·gc.alloc.rate:                   667.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              1747.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1762.586 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   602679.743 ±(99.9%) 3058.172 ops/s [Average]
[info]   (min, avg, max) = (601639.041, 602679.743, 603443.187), stdev = 794.198
[info]   CI (99.9%): [599621.571, 605737.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   673.452 ±(99.9%) 20.678 MB/sec [Average]
[info]   (min, avg, max) = (667.375, 673.452, 678.050), stdev = 5.370
[info]   CI (99.9%): [652.774, 694.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1758.926 ±(99.9%) 45.708 B/op [Average]
[info]   (min, avg, max) = (1744.921, 1758.926, 1770.091), stdev = 11.870
[info]   CI (99.9%): [1713.218, 1804.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.562), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.337 ±(99.9%) 2.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.337, 1.469), stdev = 0.634
[info]   CI (99.9%): [≈ 0, 2.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   673.435 ±(99.9%) 0.999 MB/sec [Average]
[info]   (min, avg, max) = (673.047, 673.435, 673.687), stdev = 0.259
[info]   CI (99.9%): [672.436, 674.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1758.896 ±(99.9%) 9.419 B/op [Average]
[info]   (min, avg, max) = (1756.525, 1758.896, 1762.586), stdev = 2.446
[info]   CI (99.9%): [1749.477, 1768.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:40:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93492.360 ops/s
[info] # Warmup Iteration   2: 156805.103 ops/s
[info] # Warmup Iteration   3: 162951.215 ops/s
[info] # Warmup Iteration   4: 154169.578 ops/s
[info] # Warmup Iteration   5: 166061.774 ops/s
[info] Iteration   1: 165854.597 ops/s
[info]                  ·gc.alloc.rate:                   2059.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              19549.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19131.161 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 163028.878 ops/s
[info]                  ·gc.alloc.rate:                   2038.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              19674.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19493.930 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 165831.104 ops/s
[info]                  ·gc.alloc.rate:                   2072.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              19668.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19204.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 164402.499 ops/s
[info]                  ·gc.alloc.rate:                   2041.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              19547.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19401.895 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 165874.911 ops/s
[info]                  ·gc.alloc.rate:                   2072.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              19671.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19260.772 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   164998.398 ±(99.9%) 4881.690 ops/s [Average]
[info]   (min, avg, max) = (163028.878, 164998.398, 165874.911), stdev = 1267.759
[info]   CI (99.9%): [160116.708, 169880.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2056.898 ±(99.9%) 63.498 MB/sec [Average]
[info]   (min, avg, max) = (2038.013, 2056.898, 2072.792), stdev = 16.490
[info]   CI (99.9%): [1993.401, 2120.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19622.180 ±(99.9%) 258.717 B/op [Average]
[info]   (min, avg, max) = (19547.813, 19622.180, 19674.323), stdev = 67.188
[info]   CI (99.9%): [19363.462, 19880.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.476 ±(99.9%) 0.866 B/op [Average]
[info]   (min, avg, max) = (0.201, 0.476, 0.790), stdev = 0.225
[info]   CI (99.9%): [≈ 0, 1.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2022.878 ±(99.9%) 21.438 MB/sec [Average]
[info]   (min, avg, max) = (2015.550, 2022.878, 2029.551), stdev = 5.567
[info]   CI (99.9%): [2001.439, 2044.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19298.431 ±(99.9%) 568.424 B/op [Average]
[info]   (min, avg, max) = (19131.161, 19298.431, 19493.930), stdev = 147.618
[info]   CI (99.9%): [18730.008, 19866.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:39:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196313.180 ops/s
[info] # Warmup Iteration   2: 415546.368 ops/s
[info] # Warmup Iteration   3: 442319.355 ops/s
[info] # Warmup Iteration   4: 440441.739 ops/s
[info] # Warmup Iteration   5: 437966.415 ops/s
[info] Iteration   1: 442884.072 ops/s
[info]                  ·gc.alloc.rate:      342.090 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 434410.988 ops/s
[info]                  ·gc.alloc.rate:                   349.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              1265.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2441.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 442423.843 ops/s
[info]                  ·gc.alloc.rate:      341.767 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 439829.389 ops/s
[info]                  ·gc.alloc.rate:                   354.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              1268.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2411.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 396183.239 ops/s
[info]                  ·gc.alloc.rate:      306.181 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   431146.306 ±(99.9%) 76370.708 ops/s [Average]
[info]   (min, avg, max) = (396183.239, 431146.306, 442884.072), stdev = 19833.230
[info]   CI (99.9%): [354775.598, 507517.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   338.768 ±(99.9%) 73.052 MB/sec [Average]
[info]   (min, avg, max) = (306.181, 338.768, 354.424), stdev = 18.971
[info]   CI (99.9%): [265.716, 411.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1236.477 ±(99.9%) 107.986 B/op [Average]
[info]   (min, avg, max) = (1216.001, 1236.477, 1268.408), stdev = 28.044
[info]   CI (99.9%): [1128.491, 1344.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.150 ±(99.9%) 1.290 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.749), stdev = 0.335
[info]   CI (99.9%): [≈ 0, 1.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.536 ±(99.9%) 4.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.536, 2.682), stdev = 1.199
[info]   CI (99.9%): [≈ 0, 5.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   269.489 ±(99.9%) 1420.940 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.489, 673.728), stdev = 369.014
[info]   CI (99.9%): [≈ 0, 1690.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   970.462 ±(99.9%) 5117.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 970.462, 2441.187), stdev = 1328.903
[info]   CI (99.9%): [≈ 0, 6087.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:39:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 953843.278 ops/s
[info] # Warmup Iteration   2: 1143952.421 ops/s
[info] # Warmup Iteration   3: 1192931.584 ops/s
[info] # Warmup Iteration   4: 1193771.266 ops/s
[info] # Warmup Iteration   5: 1196099.600 ops/s
[info] Iteration   1: 1155240.286 ops/s
[info]                  ·gc.alloc.rate:      232.392 MB/sec
[info]                  ·gc.alloc.rate.norm: 316.603 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1176059.005 ops/s
[info]                  ·gc.alloc.rate:                   242.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              324.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 684.622 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1201869.503 ops/s
[info]                  ·gc.alloc.rate:      232.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1173986.182 ops/s
[info]                  ·gc.alloc.rate:                   241.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              323.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 685.881 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1201784.018 ops/s
[info]                  ·gc.alloc.rate:      232.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1181787.799 ±(99.9%) 77050.855 ops/s [Average]
[info]   (min, avg, max) = (1155240.286, 1181787.799, 1201869.503), stdev = 20009.862
[info]   CI (99.9%): [1104736.944, 1258838.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   236.079 ±(99.9%) 20.369 MB/sec [Average]
[info]   (min, avg, max) = (232.133, 236.079, 242.417), stdev = 5.290
[info]   CI (99.9%): [215.710, 256.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   314.494 ±(99.9%) 38.662 B/op [Average]
[info]   (min, avg, max) = (304.000, 314.494, 324.341), stdev = 10.040
[info]   CI (99.9%): [275.832, 353.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.649 ±(99.9%) 1079.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.649, 511.695), stdev = 280.227
[info]   CI (99.9%): [≈ 0, 1283.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   274.101 ±(99.9%) 1445.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 274.101, 685.881), stdev = 375.328
[info]   CI (99.9%): [≈ 0, 1719.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:39:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22391.295 ops/s
[info] # Warmup Iteration   2: 76401.405 ops/s
[info] # Warmup Iteration   3: 76206.896 ops/s
[info] # Warmup Iteration   4: 78990.907 ops/s
[info] # Warmup Iteration   5: 80588.194 ops/s
[info] Iteration   1: 80283.041 ops/s
[info]                  ·gc.alloc.rate:                   3182.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              62402.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3387.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66417.475 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 79484.454 ops/s
[info]                  ·gc.alloc.rate:                   3179.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              62967.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53749.116 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 80505.989 ops/s
[info]                  ·gc.alloc.rate:                   3245.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              63465.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66408.511 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 80523.676 ops/s
[info]                  ·gc.alloc.rate:                   3220.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              62962.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53166.372 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 80221.779 ops/s
[info]                  ·gc.alloc.rate:                   3236.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              63507.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66755.483 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   80203.788 ±(99.9%) 1631.078 ops/s [Average]
[info]   (min, avg, max) = (79484.454, 80203.788, 80523.676), stdev = 423.586
[info]   CI (99.9%): [78572.710, 81834.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3213.220 ±(99.9%) 117.150 MB/sec [Average]
[info]   (min, avg, max) = (3179.763, 3213.220, 3245.940), stdev = 30.424
[info]   CI (99.9%): [3096.070, 3330.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63061.129 ±(99.9%) 1737.313 B/op [Average]
[info]   (min, avg, max) = (62402.957, 63061.129, 63507.394), stdev = 451.175
[info]   CI (99.9%): [61323.816, 64798.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.717 ±(99.9%) 2.081 B/op [Average]
[info]   (min, avg, max) = (1.221, 1.717, 2.473), stdev = 0.540
[info]   CI (99.9%): [≈ 0, 3.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3124.054 ±(99.9%) 1430.831 MB/sec [Average]
[info]   (min, avg, max) = (2714.258, 3124.054, 3401.944), stdev = 371.582
[info]   CI (99.9%): [1693.223, 4554.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   61299.391 ±(99.9%) 27581.169 B/op [Average]
[info]   (min, avg, max) = (53166.372, 61299.391, 66755.483), stdev = 7162.742
[info]   CI (99.9%): [33718.223, 88880.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:39:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136882.753 ops/s
[info] # Warmup Iteration   2: 271882.291 ops/s
[info] # Warmup Iteration   3: 282197.573 ops/s
[info] # Warmup Iteration   4: 278756.988 ops/s
[info] # Warmup Iteration   5: 279938.492 ops/s
[info] Iteration   1: 277330.158 ops/s
[info]                  ·gc.alloc.rate:                   1268.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              7198.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7666.726 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 284965.447 ops/s
[info]                  ·gc.alloc.rate:                   1285.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              7101.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3730.383 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 284007.061 ops/s
[info]                  ·gc.alloc.rate:                   1296.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7490.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 284720.403 ops/s
[info]                  ·gc.alloc.rate:                   1298.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              7179.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7477.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 283333.218 ops/s
[info]                  ·gc.alloc.rate:                   1303.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              7244.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7519.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   282871.257 ±(99.9%) 12178.664 ops/s [Average]
[info]   (min, avg, max) = (277330.158, 282871.257, 284965.447), stdev = 3162.760
[info]   CI (99.9%): [270692.593, 295049.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1290.609 ±(99.9%) 54.631 MB/sec [Average]
[info]   (min, avg, max) = (1268.161, 1290.609, 1303.831), stdev = 14.187
[info]   CI (99.9%): [1235.978, 1345.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7181.653 ±(99.9%) 198.613 B/op [Average]
[info]   (min, avg, max) = (7101.358, 7181.653, 7244.161), stdev = 51.579
[info]   CI (99.9%): [6983.040, 7380.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.140 ±(99.9%) 0.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.140, 0.236), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1216.733 ±(99.9%) 1165.295 MB/sec [Average]
[info]   (min, avg, max) = (675.387, 1216.733, 1353.309), stdev = 302.623
[info]   CI (99.9%): [51.439, 2382.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6776.709 ±(99.9%) 6563.920 B/op [Average]
[info]   (min, avg, max) = (3730.383, 6776.709, 7666.726), stdev = 1704.629
[info]   CI (99.9%): [212.789, 13340.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:38:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 831316.988 ops/s
[info] # Warmup Iteration   2: 1774433.110 ops/s
[info] # Warmup Iteration   3: 1805071.884 ops/s
[info] # Warmup Iteration   4: 1770622.904 ops/s
[info] # Warmup Iteration   5: 1725428.199 ops/s
[info] Iteration   1: 1815378.240 ops/s
[info]                  ·gc.alloc.rate:                   955.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              828.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 584.460 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1806733.149 ops/s
[info]                  ·gc.alloc.rate:                   942.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              821.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1820351.384 ops/s
[info]                  ·gc.alloc.rate:                   978.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              845.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1166.876 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1802410.630 ops/s
[info]                  ·gc.alloc.rate:                   942.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              823.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 589.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1798507.279 ops/s
[info]                  ·gc.alloc.rate:                   939.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              821.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 590.811 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1808676.136 ±(99.9%) 34851.360 ops/s [Average]
[info]   (min, avg, max) = (1798507.279, 1808676.136, 1820351.384), stdev = 9050.787
[info]   CI (99.9%): [1773824.776, 1843527.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   951.767 ±(99.9%) 62.768 MB/sec [Average]
[info]   (min, avg, max) = (939.221, 951.767, 978.724), stdev = 16.301
[info]   CI (99.9%): [888.999, 1014.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   828.144 ±(99.9%) 39.783 B/op [Average]
[info]   (min, avg, max) = (821.484, 828.144, 845.921), stdev = 10.332
[info]   CI (99.9%): [788.360, 867.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.040 ±(99.9%) 0.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.126), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809.701 ±(99.9%) 1163.180 MB/sec [Average]
[info]   (min, avg, max) = (674.031, 809.701, 1350.066), stdev = 302.074
[info]   CI (99.9%): [≈ 0, 1972.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   703.785 ±(99.9%) 996.881 B/op [Average]
[info]   (min, avg, max) = (584.460, 703.785, 1166.876), stdev = 258.887
[info]   CI (99.9%): [≈ 0, 1700.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:38:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1950381.927 ops/s
[info] # Warmup Iteration   2: 2351965.596 ops/s
[info] # Warmup Iteration   3: 2432700.475 ops/s
[info] # Warmup Iteration   4: 2481825.845 ops/s
[info] # Warmup Iteration   5: 2489130.753 ops/s
[info] Iteration   1: 2494270.374 ops/s
[info]                  ·gc.alloc.rate:                   695.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              438.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 424.553 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2494718.177 ops/s
[info]                  ·gc.alloc.rate:                   697.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              439.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 424.464 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2475586.405 ops/s
[info]                  ·gc.alloc.rate:                   685.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              435.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 427.312 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2373889.891 ops/s
[info]                  ·gc.alloc.rate:      639.702 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.113 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2492414.048 ops/s
[info]                  ·gc.alloc.rate:                   691.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              436.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 424.434 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2466175.779 ±(99.9%) 200987.998 ops/s [Average]
[info]   (min, avg, max) = (2373889.891, 2466175.779, 2494718.177), stdev = 52195.945
[info]   CI (99.9%): [2265187.781, 2667163.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   681.798 ±(99.9%) 92.260 MB/sec [Average]
[info]   (min, avg, max) = (639.702, 681.798, 697.118), stdev = 23.960
[info]   CI (99.9%): [589.539, 774.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   435.045 ±(99.9%) 24.373 B/op [Average]
[info]   (min, avg, max) = (424.113, 435.045, 439.882), stdev = 6.330
[info]   CI (99.9%): [410.672, 459.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.013), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   537.923 ±(99.9%) 1157.921 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.923, 672.783), stdev = 300.708
[info]   CI (99.9%): [≈ 0, 1695.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   340.153 ±(99.9%) 732.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 340.153, 427.312), stdev = 190.155
[info]   CI (99.9%): [≈ 0, 1072.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:38:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2028456.631 ops/s
[info] # Warmup Iteration   2: 2583948.260 ops/s
[info] # Warmup Iteration   3: 2614850.456 ops/s
[info] # Warmup Iteration   4: 2618397.212 ops/s
[info] # Warmup Iteration   5: 2617331.251 ops/s
[info] Iteration   1: 2619349.388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2559913.613 ops/s
[info]                  ·gc.alloc.rate:      9.723 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.978 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2615058.985 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2622227.062 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2626270.028 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2608563.815 ±(99.9%) 105902.374 ops/s [Average]
[info]   (min, avg, max) = (2559913.613, 2608563.815, 2626270.028), stdev = 27502.510
[info]   CI (99.9%): [2502661.441, 2714466.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.945 ±(99.9%) 16.743 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.945, 9.723), stdev = 4.348
[info]   CI (99.9%): [≈ 0, 18.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.196 ±(99.9%) 10.294 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.196, 5.978), stdev = 2.673
[info]   CI (99.9%): [≈ 0, 11.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:38:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18479.701 ops/s
[info] # Warmup Iteration   2: 44298.923 ops/s
[info] # Warmup Iteration   3: 45254.590 ops/s
[info] # Warmup Iteration   4: 45311.207 ops/s
[info] # Warmup Iteration   5: 45078.822 ops/s
[info] Iteration   1: 46014.929 ops/s
[info]                  ·gc.alloc.rate:                   2002.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              68467.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69296.741 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 43897.160 ops/s
[info]                  ·gc.alloc.rate:                   1910.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              68505.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72738.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 45711.215 ops/s
[info]                  ·gc.alloc.rate:                   1986.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              68408.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69931.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 45989.074 ops/s
[info]                  ·gc.alloc.rate:                   2012.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              68888.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69598.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 46043.245 ops/s
[info]                  ·gc.alloc.rate:                   2001.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              68433.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46384.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   45531.125 ±(99.9%) 3554.461 ops/s [Average]
[info]   (min, avg, max) = (43897.160, 45531.125, 46043.245), stdev = 923.082
[info]   CI (99.9%): [41976.664, 49085.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1982.754 ±(99.9%) 159.783 MB/sec [Average]
[info]   (min, avg, max) = (1910.419, 1982.754, 2012.889), stdev = 41.495
[info]   CI (99.9%): [1822.972, 2142.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68540.880 ±(99.9%) 762.383 B/op [Average]
[info]   (min, avg, max) = (68408.801, 68540.880, 68888.949), stdev = 197.988
[info]   CI (99.9%): [67778.497, 69303.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.590 ±(99.9%) 3.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.590, 2.239), stdev = 0.947
[info]   CI (99.9%): [≈ 0, 5.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1895.212 ±(99.9%) 1159.202 MB/sec [Average]
[info]   (min, avg, max) = (1356.715, 1895.212, 2033.609), stdev = 301.041
[info]   CI (99.9%): [736.010, 3054.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65589.728 ±(99.9%) 41678.235 B/op [Average]
[info]   (min, avg, max) = (46384.271, 65589.728, 72738.496), stdev = 10823.705
[info]   CI (99.9%): [23911.493, 107267.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:37:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131148.325 ops/s
[info] # Warmup Iteration   2: 212766.606 ops/s
[info] # Warmup Iteration   3: 240136.943 ops/s
[info] # Warmup Iteration   4: 242649.307 ops/s
[info] # Warmup Iteration   5: 239772.745 ops/s
[info] Iteration   1: 242324.904 ops/s
[info]                  ·gc.alloc.rate:                   2570.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              16700.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2697.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17522.778 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 240398.583 ops/s
[info]                  ·gc.alloc.rate:                   2538.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              16617.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13277.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 242386.149 ops/s
[info]                  ·gc.alloc.rate:                   2598.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              16878.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17585.269 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 238403.849 ops/s
[info]                  ·gc.alloc.rate:                   2559.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              16898.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17906.711 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 242312.929 ops/s
[info]                  ·gc.alloc.rate:                   2571.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              16706.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13230.888 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   241165.283 ±(99.9%) 6770.368 ops/s [Average]
[info]   (min, avg, max) = (238403.849, 241165.283, 242386.149), stdev = 1758.243
[info]   CI (99.9%): [234394.915, 247935.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2567.815 ±(99.9%) 84.753 MB/sec [Average]
[info]   (min, avg, max) = (2538.209, 2567.815, 2598.995), stdev = 22.010
[info]   CI (99.9%): [2483.061, 2652.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16760.334 ±(99.9%) 471.098 B/op [Average]
[info]   (min, avg, max) = (16617.810, 16760.334, 16898.931), stdev = 122.343
[info]   CI (99.9%): [16289.235, 17231.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.543 ±(99.9%) 0.736 B/op [Average]
[info]   (min, avg, max) = (0.270, 0.543, 0.811), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2436.403 ±(99.9%) 1420.842 MB/sec [Average]
[info]   (min, avg, max) = (2027.984, 2436.403, 2712.279), stdev = 368.988
[info]   CI (99.9%): [1015.562, 3857.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15904.597 ±(99.9%) 9333.909 B/op [Average]
[info]   (min, avg, max) = (13230.888, 15904.597, 17906.711), stdev = 2423.986
[info]   CI (99.9%): [6570.688, 25238.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:37:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157378.788 ops/s
[info] # Warmup Iteration   2: 366208.437 ops/s
[info] # Warmup Iteration   3: 373043.380 ops/s
[info] # Warmup Iteration   4: 377359.496 ops/s
[info] # Warmup Iteration   5: 371711.225 ops/s
[info] Iteration   1: 375267.568 ops/s
[info]                  ·gc.alloc.rate:                   1844.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              7738.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8495.867 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 378380.268 ops/s
[info]                  ·gc.alloc.rate:                   1868.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              7774.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8435.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 377900.470 ops/s
[info]                  ·gc.alloc.rate:                   1853.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              7719.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5637.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 378459.328 ops/s
[info]                  ·gc.alloc.rate:                   1869.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              7774.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8450.427 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 370189.601 ops/s
[info]                  ·gc.alloc.rate:                   1843.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              7840.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8650.341 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   376039.447 ±(99.9%) 13561.590 ops/s [Average]
[info]   (min, avg, max) = (370189.601, 376039.447, 378459.328), stdev = 3521.902
[info]   CI (99.9%): [362477.857, 389601.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1856.133 ±(99.9%) 48.847 MB/sec [Average]
[info]   (min, avg, max) = (1843.852, 1856.133, 1869.964), stdev = 12.685
[info]   CI (99.9%): [1807.286, 1904.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7769.417 ±(99.9%) 178.639 B/op [Average]
[info]   (min, avg, max) = (7719.036, 7769.417, 7840.571), stdev = 46.392
[info]   CI (99.9%): [7590.778, 7948.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.174 ±(99.9%) 0.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.174, 0.433), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1894.649 ±(99.9%) 1165.080 MB/sec [Average]
[info]   (min, avg, max) = (1353.438, 1894.649, 2034.284), stdev = 302.568
[info]   CI (99.9%): [729.569, 3059.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7933.818 ±(99.9%) 4954.182 B/op [Average]
[info]   (min, avg, max) = (5637.356, 7933.818, 8650.341), stdev = 1286.585
[info]   CI (99.9%): [2979.636, 12888.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:37:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1625771.390 ops/s
[info] # Warmup Iteration   2: 2099934.783 ops/s
[info] # Warmup Iteration   3: 2149924.389 ops/s
[info] # Warmup Iteration   4: 2151950.965 ops/s
[info] # Warmup Iteration   5: 2178304.527 ops/s
[info] Iteration   1: 2185382.312 ops/s
[info]                  ·gc.alloc.rate:                   768.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485.987 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2184503.781 ops/s
[info]                  ·gc.alloc.rate:                   776.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              559.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 486.192 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2185676.728 ops/s
[info]                  ·gc.alloc.rate:                   780.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              561.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485.453 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2173237.811 ops/s
[info]                  ·gc.alloc.rate:                   795.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 976.444 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2186228.920 ops/s
[info]                  ·gc.alloc.rate:                   772.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              556.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485.326 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2183005.910 ±(99.9%) 21163.460 ops/s [Average]
[info]   (min, avg, max) = (2173237.811, 2183005.910, 2186228.920), stdev = 5496.083
[info]   CI (99.9%): [2161842.451, 2204169.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   778.929 ±(99.9%) 40.338 MB/sec [Average]
[info]   (min, avg, max) = (768.485, 778.929, 795.877), stdev = 10.476
[info]   CI (99.9%): [738.592, 819.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   561.612 ±(99.9%) 34.341 B/op [Average]
[info]   (min, avg, max) = (553.357, 561.612, 576.449), stdev = 8.918
[info]   CI (99.9%): [527.271, 595.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   809.217 ±(99.9%) 1160.052 MB/sec [Average]
[info]   (min, avg, max) = (674.074, 809.217, 1348.131), stdev = 301.262
[info]   CI (99.9%): [≈ 0, 1969.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   583.880 ±(99.9%) 845.023 B/op [Average]
[info]   (min, avg, max) = (485.326, 583.880, 976.444), stdev = 219.450
[info]   CI (99.9%): [≈ 0, 1428.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:36:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14075.011 ops/s
[info] # Warmup Iteration   2: 79564.684 ops/s
[info] # Warmup Iteration   3: 82030.061 ops/s
[info] # Warmup Iteration   4: 84699.335 ops/s
[info] # Warmup Iteration   5: 83686.626 ops/s
[info] Iteration   1: 84840.682 ops/s
[info]                  ·gc.alloc.rate:                   3308.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              61387.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3386.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62838.190 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 84763.442 ops/s
[info]                  ·gc.alloc.rate:                   3360.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              62402.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63000.399 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 83740.555 ops/s
[info]                  ·gc.alloc.rate:                   3292.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              61884.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51079.817 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 84474.545 ops/s
[info]                  ·gc.alloc.rate:                   3351.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              62449.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63350.924 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 84314.207 ops/s
[info]                  ·gc.alloc.rate:                   3342.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              62410.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63515.395 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   84426.686 ±(99.9%) 1690.029 ops/s [Average]
[info]   (min, avg, max) = (83740.555, 84426.686, 84840.682), stdev = 438.895
[info]   CI (99.9%): [82736.657, 86116.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3331.162 ±(99.9%) 112.601 MB/sec [Average]
[info]   (min, avg, max) = (3292.823, 3331.162, 3360.522), stdev = 29.242
[info]   CI (99.9%): [3218.561, 3443.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62106.961 ±(99.9%) 1789.938 B/op [Average]
[info]   (min, avg, max) = (61387.292, 62106.961, 62449.734), stdev = 464.841
[info]   CI (99.9%): [60317.022, 63896.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.008 ±(99.9%) 1.320 B/op [Average]
[info]   (min, avg, max) = (0.776, 1.008, 1.546), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 2.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3259.764 ±(99.9%) 1166.641 MB/sec [Average]
[info]   (min, avg, max) = (2717.905, 3259.764, 3402.064), stdev = 302.973
[info]   CI (99.9%): [2093.123, 4426.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   60756.945 ±(99.9%) 20856.600 B/op [Average]
[info]   (min, avg, max) = (51079.817, 60756.945, 63515.395), stdev = 5416.393
[info]   CI (99.9%): [39900.345, 81613.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:36:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103996.087 ops/s
[info] # Warmup Iteration   2: 238277.771 ops/s
[info] # Warmup Iteration   3: 246940.455 ops/s
[info] # Warmup Iteration   4: 248065.159 ops/s
[info] # Warmup Iteration   5: 253217.731 ops/s
[info] Iteration   1: 251250.850 ops/s
[info]                  ·gc.alloc.rate:                   1694.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              10614.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12695.559 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 250747.273 ops/s
[info]                  ·gc.alloc.rate:                   1668.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              10474.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8487.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 251867.805 ops/s
[info]                  ·gc.alloc.rate:                   1680.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              10502.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8456.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 252864.583 ops/s
[info]                  ·gc.alloc.rate:                   1700.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              10581.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12645.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 253276.797 ops/s
[info]                  ·gc.alloc.rate:                   1688.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              10497.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8427.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   252001.462 ±(99.9%) 4095.885 ops/s [Average]
[info]   (min, avg, max) = (250747.273, 252001.462, 253276.797), stdev = 1063.688
[info]   CI (99.9%): [247905.577, 256097.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1686.593 ±(99.9%) 47.575 MB/sec [Average]
[info]   (min, avg, max) = (1668.700, 1686.593, 1700.000), stdev = 12.355
[info]   CI (99.9%): [1639.018, 1734.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10534.019 ±(99.9%) 233.376 B/op [Average]
[info]   (min, avg, max) = (10474.718, 10534.019, 10614.917), stdev = 60.607
[info]   CI (99.9%): [10300.643, 10767.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.312 ±(99.9%) 0.668 B/op [Average]
[info]   (min, avg, max) = (0.130, 0.312, 0.517), stdev = 0.174
[info]   CI (99.9%): [≈ 0, 0.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1623.982 ±(99.9%) 1424.921 MB/sec [Average]
[info]   (min, avg, max) = (1352.124, 1623.982, 2031.652), stdev = 370.048
[info]   CI (99.9%): [199.061, 3048.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10142.513 ±(99.9%) 8887.291 B/op [Average]
[info]   (min, avg, max) = (8427.783, 10142.513, 12695.559), stdev = 2308.001
[info]   CI (99.9%): [1255.222, 19029.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:36:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 691894.885 ops/s
[info] # Warmup Iteration   2: 1398602.215 ops/s
[info] # Warmup Iteration   3: 1363866.173 ops/s
[info] # Warmup Iteration   4: 1395839.120 ops/s
[info] # Warmup Iteration   5: 1405835.011 ops/s
[info] Iteration   1: 1391793.463 ops/s
[info]                  ·gc.alloc.rate:                   836.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              946.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 762.339 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1379186.780 ops/s
[info]                  ·gc.alloc.rate:                   827.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 769.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1396505.720 ops/s
[info]                  ·gc.alloc.rate:                   866.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1519.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1395600.196 ops/s
[info]                  ·gc.alloc.rate:                   835.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              942.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 760.237 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1404008.070 ops/s
[info]                  ·gc.alloc.rate:                   837.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              939.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 756.434 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1393418.846 ±(99.9%) 35060.548 ops/s [Average]
[info]   (min, avg, max) = (1379186.780, 1393418.846, 1404008.070), stdev = 9105.113
[info]   CI (99.9%): [1358358.298, 1428479.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   841.008 ±(99.9%) 57.574 MB/sec [Average]
[info]   (min, avg, max) = (827.833, 841.008, 866.808), stdev = 14.952
[info]   CI (99.9%): [783.434, 898.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   949.969 ±(99.9%) 58.877 B/op [Average]
[info]   (min, avg, max) = (939.297, 949.969, 976.913), stdev = 15.290
[info]   CI (99.9%): [891.093, 1008.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809.053 ±(99.9%) 1160.714 MB/sec [Average]
[info]   (min, avg, max) = (673.966, 809.053, 1348.274), stdev = 301.434
[info]   CI (99.9%): [≈ 0, 1969.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   913.562 ±(99.9%) 1304.529 B/op [Average]
[info]   (min, avg, max) = (756.434, 913.562, 1519.536), stdev = 338.782
[info]   CI (99.9%): [≈ 0, 2218.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:36:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2057638.594 ops/s
[info] # Warmup Iteration   2: 2765451.192 ops/s
[info] # Warmup Iteration   3: 2668911.735 ops/s
[info] # Warmup Iteration   4: 2820657.444 ops/s
[info] # Warmup Iteration   5: 2797748.089 ops/s
[info] Iteration   1: 2785221.694 ops/s
[info]                  ·gc.alloc.rate:                   990.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              559.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 760.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2689513.660 ops/s
[info]                  ·gc.alloc.rate:                   938.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              549.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 393.338 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2800653.097 ops/s
[info]                  ·gc.alloc.rate:                   992.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              557.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 755.810 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2792728.576 ops/s
[info]                  ·gc.alloc.rate:                   967.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              545.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 379.168 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2831439.400 ops/s
[info]                  ·gc.alloc.rate:                   991.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 374.170 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2779911.285 ±(99.9%) 206014.699 ops/s [Average]
[info]   (min, avg, max) = (2689513.660, 2779911.285, 2831439.400), stdev = 53501.363
[info]   CI (99.9%): [2573896.586, 2985925.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   975.816 ±(99.9%) 90.194 MB/sec [Average]
[info]   (min, avg, max) = (938.243, 975.816, 992.089), stdev = 23.423
[info]   CI (99.9%): [885.622, 1066.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   552.528 ±(99.9%) 23.243 B/op [Average]
[info]   (min, avg, max) = (545.176, 552.528, 559.773), stdev = 6.036
[info]   CI (99.9%): [529.285, 575.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.071), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   941.604 ±(99.9%) 1418.425 MB/sec [Average]
[info]   (min, avg, max) = (672.040, 941.604, 1345.411), stdev = 368.360
[info]   CI (99.9%): [≈ 0, 2360.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   532.574 ±(99.9%) 793.232 B/op [Average]
[info]   (min, avg, max) = (374.170, 532.574, 760.384), stdev = 206.000
[info]   CI (99.9%): [≈ 0, 1325.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:35:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2450634.222 ops/s
[info] # Warmup Iteration   2: 3049681.505 ops/s
[info] # Warmup Iteration   3: 3104721.288 ops/s
[info] # Warmup Iteration   4: 3102743.884 ops/s
[info] # Warmup Iteration   5: 3044713.981 ops/s
[info] Iteration   1: 3107441.802 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3086657.619 ops/s
[info]                  ·gc.alloc.rate:      1.996 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3106722.595 ops/s
[info]                  ·gc.alloc.rate:      0.080 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.040 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3106301.765 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3107242.663 ops/s
[info]                  ·gc.alloc.rate:      0.169 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.086 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3102873.289 ±(99.9%) 34947.765 ops/s [Average]
[info]   (min, avg, max) = (3086657.619, 3102873.289, 3107441.802), stdev = 9075.824
[info]   CI (99.9%): [3067925.524, 3137821.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.449 ±(99.9%) 3.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.449, 1.996), stdev = 0.867
[info]   CI (99.9%): [≈ 0, 3.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.229 ±(99.9%) 1.704 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.229, 1.018), stdev = 0.442
[info]   CI (99.9%): [≈ 0, 1.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:35:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128889.084 ops/s
[info] # Warmup Iteration   2: 353775.197 ops/s
[info] # Warmup Iteration   3: 376287.245 ops/s
[info] # Warmup Iteration   4: 379071.045 ops/s
[info] # Warmup Iteration   5: 377437.444 ops/s
[info] Iteration   1: 379927.378 ops/s
[info]                  ·gc.alloc.rate:                   2429.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              10066.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8400.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 378359.222 ops/s
[info]                  ·gc.alloc.rate:                   2405.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              10009.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8448.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 378549.799 ops/s
[info]                  ·gc.alloc.rate:                   2404.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              9998.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11272.152 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 378393.985 ops/s
[info]                  ·gc.alloc.rate:                   2396.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              9969.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8467.251 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 377421.058 ops/s
[info]                  ·gc.alloc.rate:                   2456.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              10243.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11331.077 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   378530.288 ±(99.9%) 3460.482 ops/s [Average]
[info]   (min, avg, max) = (377421.058, 378530.288, 379927.378), stdev = 898.676
[info]   CI (99.9%): [375069.807, 381990.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2418.667 ±(99.9%) 93.691 MB/sec [Average]
[info]   (min, avg, max) = (2396.602, 2418.667, 2456.075), stdev = 24.331
[info]   CI (99.9%): [2324.976, 2512.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10057.429 ±(99.9%) 423.626 B/op [Average]
[info]   (min, avg, max) = (9969.028, 10057.429, 10243.732), stdev = 110.014
[info]   CI (99.9%): [9633.803, 10481.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.260 ±(99.9%) 0.707 B/op [Average]
[info]   (min, avg, max) = (0.087, 0.260, 0.520), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 0.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2304.403 ±(99.9%) 1439.705 MB/sec [Average]
[info]   (min, avg, max) = (2027.648, 2304.403, 2716.781), stdev = 373.887
[info]   CI (99.9%): [864.698, 3744.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9583.904 ±(99.9%) 6039.267 B/op [Average]
[info]   (min, avg, max) = (8400.132, 9583.904, 11331.077), stdev = 1568.378
[info]   CI (99.9%): [3544.637, 15623.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:35:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11950.143 ops/s
[info] # Warmup Iteration   2: 23432.833 ops/s
[info] # Warmup Iteration   3: 24063.088 ops/s
[info] # Warmup Iteration   4: 24858.866 ops/s
[info] # Warmup Iteration   5: 24943.486 ops/s
[info] Iteration   1: 24750.907 ops/s
[info]                  ·gc.alloc.rate:                   1460.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              92867.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85394.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 24970.074 ops/s
[info]                  ·gc.alloc.rate:                   1472.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              92838.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127004.701 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23241.366 ops/s
[info]                  ·gc.alloc.rate:                                  1355.655 MB/sec
[info]                  ·gc.alloc.rate.norm:                             91813.655 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.392 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 26.580 B/op
[info]                  ·gc.churn.Compressed_Class_Space:                0.016 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm:           1.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    11.277 B/op
[info]                  ·gc.churn.PS_Old_Gen:                            0.051 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:                       3.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     1358.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                92031.745 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        70.000 ms
[info] Iteration   4: 24556.155 ops/s
[info]                  ·gc.alloc.rate:                   1430.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              91695.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86328.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 25012.078 ops/s
[info]                  ·gc.alloc.rate:                   1482.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              93308.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84876.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   24506.116 ±(99.9%) 2812.073 ops/s [Average]
[info]   (min, avg, max) = (23241.366, 24506.116, 25012.078), stdev = 730.286
[info]   CI (99.9%): [21694.043, 27318.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1440.429 ±(99.9%) 197.610 MB/sec [Average]
[info]   (min, avg, max) = (1355.655, 1440.429, 1482.798), stdev = 51.319
[info]   CI (99.9%): [1242.819, 1638.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92504.971 ±(99.9%) 2737.494 B/op [Average]
[info]   (min, avg, max) = (91695.930, 92504.971, 93308.824), stdev = 710.919
[info]   CI (99.9%): [89767.476, 95242.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.078 ±(99.9%) 0.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.392), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.316 ±(99.9%) 45.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.316, 26.580), stdev = 11.887
[info]   CI (99.9%): [≈ 0, 51.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm":
[info]   0.216 ±(99.9%) 1.856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 1.078), stdev = 0.482
[info]   CI (99.9%): [≈ 0, 2.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.167), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.370 ±(99.9%) 16.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.370, 11.277), stdev = 4.387
[info]   CI (99.9%): [≈ 0, 21.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Old_Gen":
[info]   0.010 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm":
[info]   0.691 ±(99.9%) 5.954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 3.457), stdev = 1.546
[info]   CI (99.9%): [≈ 0, 6.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1482.435 ±(99.9%) 1146.579 MB/sec [Average]
[info]   (min, avg, max) = (1342.821, 1482.435, 2014.983), stdev = 297.763
[info]   CI (99.9%): [335.856, 2629.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   95127.124 ±(99.9%) 69498.034 B/op [Average]
[info]   (min, avg, max) = (84876.940, 95127.124, 127004.701), stdev = 18048.419
[info]   CI (99.9%): [25629.090, 164625.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   77.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 15.400, 70.000), stdev = 30.525
[info]   CI (99.9%): [77.000, 77.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:35:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.774 ops/s
[info] # Warmup Iteration   2: 80705.728 ops/s
[info] # Warmup Iteration   3: 85911.034 ops/s
[info] # Warmup Iteration   4: 87058.535 ops/s
[info] # Warmup Iteration   5: 86959.219 ops/s
[info] Iteration   1: 88494.937 ops/s
[info]                  ·gc.alloc.rate:                   834.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              14841.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23812.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 87539.523 ops/s
[info]                  ·gc.alloc.rate:                   812.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              14605.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12024.652 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 87432.704 ops/s
[info]                  ·gc.alloc.rate:                   807.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              14527.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12038.953 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 87386.177 ops/s
[info]                  ·gc.alloc.rate:                   802.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              14444.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12051.426 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 87340.843 ops/s
[info]                  ·gc.alloc.rate:                   809.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              14590.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12057.772 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   87638.837 ±(99.9%) 1864.581 ops/s [Average]
[info]   (min, avg, max) = (87340.843, 87638.837, 88494.937), stdev = 484.226
[info]   CI (99.9%): [85774.256, 89503.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   813.080 ±(99.9%) 48.086 MB/sec [Average]
[info]   (min, avg, max) = (802.034, 813.080, 834.360), stdev = 12.488
[info]   CI (99.9%): [764.994, 861.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14601.693 ±(99.9%) 569.848 B/op [Average]
[info]   (min, avg, max) = (14444.707, 14601.693, 14841.038), stdev = 147.988
[info]   CI (99.9%): [14031.845, 15171.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.298 ±(99.9%) 1.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.298, 0.750), stdev = 0.408
[info]   CI (99.9%): [≈ 0, 1.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   802.924 ±(99.9%) 1153.428 MB/sec [Average]
[info]   (min, avg, max) = (668.826, 802.924, 1338.760), stdev = 299.541
[info]   CI (99.9%): [≈ 0, 1956.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   14397.153 ±(99.9%) 20268.300 B/op [Average]
[info]   (min, avg, max) = (12024.652, 14397.153, 23812.963), stdev = 5263.613
[info]   CI (99.9%): [≈ 0, 34665.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:34:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19833.350 ops/s
[info] # Warmup Iteration   2: 59704.502 ops/s
[info] # Warmup Iteration   3: 57897.117 ops/s
[info] # Warmup Iteration   4: 58695.551 ops/s
[info] # Warmup Iteration   5: 60426.033 ops/s
[info] Iteration   1: 60371.338 ops/s
[info]                  ·gc.alloc.rate:                   1019.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              26579.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17574.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 59378.322 ops/s
[info]                  ·gc.alloc.rate:                   1019.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              27029.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35738.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 59155.087 ops/s
[info]                  ·gc.alloc.rate:                   1000.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              26625.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17944.750 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 60319.452 ops/s
[info]                  ·gc.alloc.rate:                   1034.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              27002.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35203.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 60272.583 ops/s
[info]                  ·gc.alloc.rate:                   1007.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              26307.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17620.933 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   59899.356 ±(99.9%) 2248.557 ops/s [Average]
[info]   (min, avg, max) = (59155.087, 59899.356, 60371.338), stdev = 583.943
[info]   CI (99.9%): [57650.799, 62147.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1016.430 ±(99.9%) 50.586 MB/sec [Average]
[info]   (min, avg, max) = (1000.645, 1016.430, 1034.757), stdev = 13.137
[info]   CI (99.9%): [965.844, 1067.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26708.918 ±(99.9%) 1176.682 B/op [Average]
[info]   (min, avg, max) = (26307.841, 26708.918, 27029.740), stdev = 305.581
[info]   CI (99.9%): [25532.236, 27885.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.438 ±(99.9%) 2.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 1.104), stdev = 0.600
[info]   CI (99.9%): [≈ 0, 2.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.128 ±(99.9%) 1421.923 MB/sec [Average]
[info]   (min, avg, max) = (674.272, 944.128, 1349.062), stdev = 369.269
[info]   CI (99.9%): [≈ 0, 2366.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24816.464 ±(99.9%) 37463.727 B/op [Average]
[info]   (min, avg, max) = (17574.385, 24816.464, 35738.281), stdev = 9729.211
[info]   CI (99.9%): [≈ 0, 62280.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:34:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90150.249 ops/s
[info] # Warmup Iteration   2: 123982.455 ops/s
[info] # Warmup Iteration   3: 135645.202 ops/s
[info] # Warmup Iteration   4: 135508.037 ops/s
[info] # Warmup Iteration   5: 134096.582 ops/s
[info] Iteration   1: 132963.923 ops/s
[info]                  ·gc.alloc.rate:                   881.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              10436.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7963.828 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 132389.679 ops/s
[info]                  ·gc.alloc.rate:                   880.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              10468.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7990.312 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 133061.932 ops/s
[info]                  ·gc.alloc.rate:                   903.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15900.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 133422.139 ops/s
[info]                  ·gc.alloc.rate:                   878.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              10360.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7928.518 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 133232.692 ops/s
[info]                  ·gc.alloc.rate:                   873.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7943.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   133014.073 ±(99.9%) 1502.473 ops/s [Average]
[info]   (min, avg, max) = (132389.679, 133014.073, 133422.139), stdev = 390.188
[info]   CI (99.9%): [131511.600, 134516.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   883.482 ±(99.9%) 44.235 MB/sec [Average]
[info]   (min, avg, max) = (873.554, 883.482, 903.268), stdev = 11.488
[info]   CI (99.9%): [839.247, 927.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10453.418 ±(99.9%) 538.793 B/op [Average]
[info]   (min, avg, max) = (10320.490, 10453.418, 10680.517), stdev = 139.923
[info]   CI (99.9%): [9914.625, 10992.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.345 ±(99.9%) 2.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.345, 1.477), stdev = 0.642
[info]   CI (99.9%): [≈ 0, 2.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.819 ±(99.9%) 1157.813 MB/sec [Average]
[info]   (min, avg, max) = (672.095, 806.819, 1344.693), stdev = 300.680
[info]   CI (99.9%): [≈ 0, 1964.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9545.293 ±(99.9%) 13679.384 B/op [Average]
[info]   (min, avg, max) = (7928.518, 9545.293, 15900.050), stdev = 3552.492
[info]   CI (99.9%): [≈ 0, 23224.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:34:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6614.305 ops/s
[info] # Warmup Iteration   2: 34363.919 ops/s
[info] # Warmup Iteration   3: 35640.622 ops/s
[info] # Warmup Iteration   4: 35061.096 ops/s
[info] # Warmup Iteration   5: 36055.194 ops/s
[info] Iteration   1: 35230.155 ops/s
[info]                  ·gc.alloc.rate:                   1753.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              78344.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90401.665 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 36042.735 ops/s
[info]                  ·gc.alloc.rate:                   1795.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              78367.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88455.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 35889.501 ops/s
[info]                  ·gc.alloc.rate:                   1774.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              77839.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59297.693 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 35773.335 ops/s
[info]                  ·gc.alloc.rate:                   1782.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89342.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 35803.387 ops/s
[info]                  ·gc.alloc.rate:                   1769.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              77797.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59560.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   35747.823 ±(99.9%) 1184.916 ops/s [Average]
[info]   (min, avg, max) = (35230.155, 35747.823, 36042.735), stdev = 307.719
[info]   CI (99.9%): [34562.907, 36932.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1775.047 ±(99.9%) 59.360 MB/sec [Average]
[info]   (min, avg, max) = (1753.322, 1775.047, 1795.022), stdev = 15.416
[info]   CI (99.9%): [1715.686, 1834.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78152.977 ±(99.9%) 1181.828 B/op [Average]
[info]   (min, avg, max) = (77797.325, 78152.977, 78416.960), stdev = 306.917
[info]   CI (99.9%): [76971.149, 79334.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.205 ±(99.9%) 6.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.205, 3.720), stdev = 1.675
[info]   CI (99.9%): [≈ 0, 8.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1757.363 ±(99.9%) 1419.664 MB/sec [Average]
[info]   (min, avg, max) = (1352.101, 1757.363, 2030.547), stdev = 368.682
[info]   CI (99.9%): [337.700, 3177.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   77411.503 ±(99.9%) 63267.292 B/op [Average]
[info]   (min, avg, max) = (59297.693, 77411.503, 90401.665), stdev = 16430.315
[info]   CI (99.9%): [14144.211, 140678.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:34:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15631.814 ops/s
[info] # Warmup Iteration   2: 30159.186 ops/s
[info] # Warmup Iteration   3: 30874.394 ops/s
[info] # Warmup Iteration   4: 29208.080 ops/s
[info] # Warmup Iteration   5: 30345.010 ops/s
[info] Iteration   1: 30878.338 ops/s
[info]                  ·gc.alloc.rate:      352.601 MB/sec
[info]                  ·gc.alloc.rate.norm: 17976.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 30758.165 ops/s
[info]                  ·gc.alloc.rate:                   367.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              18808.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34459.444 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 30865.636 ops/s
[info]                  ·gc.alloc.rate:      352.470 MB/sec
[info]                  ·gc.alloc.rate.norm: 17976.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 30771.877 ops/s
[info]                  ·gc.alloc.rate:                   371.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              19017.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34444.889 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30881.173 ops/s
[info]                  ·gc.alloc.rate:      352.655 MB/sec
[info]                  ·gc.alloc.rate.norm: 17976.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   30831.038 ±(99.9%) 233.896 ops/s [Average]
[info]   (min, avg, max) = (30758.165, 30831.038, 30881.173), stdev = 60.742
[info]   CI (99.9%): [30597.142, 31064.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   359.414 ±(99.9%) 36.537 MB/sec [Average]
[info]   (min, avg, max) = (352.470, 359.414, 371.833), stdev = 9.489
[info]   CI (99.9%): [322.877, 395.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   18350.711 ±(99.9%) 1996.030 B/op [Average]
[info]   (min, avg, max) = (17976.013, 18350.711, 19017.197), stdev = 518.363
[info]   CI (99.9%): [16354.681, 20346.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.789 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.458), stdev = 0.205
[info]   CI (99.9%): [≈ 0, 0.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.685 ±(99.9%) 40.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.685, 23.423), stdev = 10.475
[info]   CI (99.9%): [≈ 0, 45.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   269.363 ±(99.9%) 1420.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.363, 673.482), stdev = 368.841
[info]   CI (99.9%): [≈ 0, 1689.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13780.867 ±(99.9%) 72662.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13780.867, 34459.444), stdev = 18870.229
[info]   CI (99.9%): [≈ 0, 86443.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:33:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13219.407 ops/s
[info] # Warmup Iteration   2: 29609.226 ops/s
[info] # Warmup Iteration   3: 30034.032 ops/s
[info] # Warmup Iteration   4: 29888.599 ops/s
[info] # Warmup Iteration   5: 30013.800 ops/s
[info] Iteration   1: 30160.766 ops/s
[info]                  ·gc.alloc.rate:      337.284 MB/sec
[info]                  ·gc.alloc.rate.norm: 17600.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 29837.092 ops/s
[info]                  ·gc.alloc.rate:                   352.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              18586.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35506.536 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 29962.302 ops/s
[info]                  ·gc.alloc.rate:      335.067 MB/sec
[info]                  ·gc.alloc.rate.norm: 17600.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 29833.112 ops/s
[info]                  ·gc.alloc.rate:                   353.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              18672.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35510.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 29933.090 ops/s
[info]                  ·gc.alloc.rate:      334.673 MB/sec
[info]                  ·gc.alloc.rate.norm: 17600.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   29945.272 ±(99.9%) 513.592 ops/s [Average]
[info]   (min, avg, max) = (29833.112, 29945.272, 30160.766), stdev = 133.378
[info]   CI (99.9%): [29431.681, 30458.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   342.666 ±(99.9%) 37.112 MB/sec [Average]
[info]   (min, avg, max) = (334.673, 342.666, 353.866), stdev = 9.638
[info]   CI (99.9%): [305.553, 379.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18011.751 ±(99.9%) 2174.161 B/op [Average]
[info]   (min, avg, max) = (17600.014, 18011.751, 18672.645), stdev = 564.623
[info]   CI (99.9%): [15837.589, 20185.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.160 ±(99.9%) 1.336 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.160, 0.781), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.459 ±(99.9%) 70.498 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.459, 41.199), stdev = 18.308
[info]   CI (99.9%): [≈ 0, 78.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   269.250 ±(99.9%) 1419.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.250, 673.295), stdev = 368.685
[info]   CI (99.9%): [≈ 0, 1688.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14203.328 ±(99.9%) 74890.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14203.328, 35510.106), stdev = 19448.708
[info]   CI (99.9%): [≈ 0, 89093.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:33:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24616.276 ops/s
[info] # Warmup Iteration   2: 32139.892 ops/s
[info] # Warmup Iteration   3: 33544.370 ops/s
[info] # Warmup Iteration   4: 32994.573 ops/s
[info] # Warmup Iteration   5: 33681.322 ops/s
[info] Iteration   1: 33472.564 ops/s
[info]                  ·gc.alloc.rate:                   381.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              17941.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24054.793 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 33485.669 ops/s
[info]                  ·gc.alloc.rate:      381.539 MB/sec
[info]                  ·gc.alloc.rate.norm: 17933.936 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 33465.419 ops/s
[info]                  ·gc.alloc.rate:                   371.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              17492.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31672.503 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33351.040 ops/s
[info]                  ·gc.alloc.rate:                   385.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              18185.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31780.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 33571.143 ops/s
[info]                  ·gc.alloc.rate:      368.716 MB/sec
[info]                  ·gc.alloc.rate.norm: 17288.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   33469.167 ±(99.9%) 302.288 ops/s [Average]
[info]   (min, avg, max) = (33351.040, 33469.167, 33571.143), stdev = 78.503
[info]   CI (99.9%): [33166.879, 33771.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   377.814 ±(99.9%) 27.360 MB/sec [Average]
[info]   (min, avg, max) = (368.716, 377.814, 385.335), stdev = 7.105
[info]   CI (99.9%): [350.454, 405.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   17768.349 ±(99.9%) 1412.382 B/op [Average]
[info]   (min, avg, max) = (17288.013, 17768.349, 18185.609), stdev = 366.791
[info]   CI (99.9%): [16355.967, 19180.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.618 ±(99.9%) 5.323 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.618, 3.091), stdev = 1.382
[info]   CI (99.9%): [≈ 0, 5.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29.176 ±(99.9%) 251.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.176, 145.878), stdev = 65.239
[info]   CI (99.9%): [≈ 0, 280.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   371.675 ±(99.9%) 1331.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.675, 673.404), stdev = 345.664
[info]   CI (99.9%): [≈ 0, 1702.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17501.608 ±(99.9%) 62691.772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17501.608, 31780.746), stdev = 16280.854
[info]   CI (99.9%): [≈ 0, 80193.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:33:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22974.231 ops/s
[info] # Warmup Iteration   2: 32020.617 ops/s
[info] # Warmup Iteration   3: 33350.983 ops/s
[info] # Warmup Iteration   4: 33119.580 ops/s
[info] # Warmup Iteration   5: 33284.243 ops/s
[info] Iteration   1: 33196.181 ops/s
[info]                  ·gc.alloc.rate:                   341.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              16209.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24254.755 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 33512.624 ops/s
[info]                  ·gc.alloc.rate:      329.782 MB/sec
[info]                  ·gc.alloc.rate.norm: 15488.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 33293.725 ops/s
[info]                  ·gc.alloc.rate:                   347.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              16411.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31836.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 33473.366 ops/s
[info]                  ·gc.alloc.rate:      329.368 MB/sec
[info]                  ·gc.alloc.rate.norm: 15488.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 33242.062 ops/s
[info]                  ·gc.alloc.rate:                   343.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              16266.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31884.936 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   33343.592 ±(99.9%) 544.352 ops/s [Average]
[info]   (min, avg, max) = (33196.181, 33343.592, 33512.624), stdev = 141.366
[info]   CI (99.9%): [32799.240, 33887.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   338.338 ±(99.9%) 31.664 MB/sec [Average]
[info]   (min, avg, max) = (329.368, 338.338, 347.124), stdev = 8.223
[info]   CI (99.9%): [306.675, 370.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   15972.775 ±(99.9%) 1727.393 B/op [Average]
[info]   (min, avg, max) = (15488.012, 15972.775, 16411.461), stdev = 448.599
[info]   CI (99.9%): [14245.382, 17700.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.606 ±(99.9%) 5.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.606, 3.029), stdev = 1.354
[info]   CI (99.9%): [≈ 0, 5.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   28.680 ±(99.9%) 246.943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.680, 143.400), stdev = 64.130
[info]   CI (99.9%): [≈ 0, 275.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   371.664 ±(99.9%) 1330.995 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.664, 673.402), stdev = 345.655
[info]   CI (99.9%): [≈ 0, 1702.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   17595.158 ±(99.9%) 62994.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17595.158, 31884.936), stdev = 16359.490
[info]   CI (99.9%): [≈ 0, 80589.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:32:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3364.994 ops/s
[info] # Warmup Iteration   2: 19170.907 ops/s
[info] # Warmup Iteration   3: 19944.123 ops/s
[info] # Warmup Iteration   4: 20317.443 ops/s
[info] # Warmup Iteration   5: 20412.578 ops/s
[info] Iteration   1: 20251.115 ops/s
[info]                  ·gc.alloc.rate:                   726.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              56443.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52338.205 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 20056.513 ops/s
[info]                  ·gc.alloc.rate:                   720.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              56563.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52846.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20384.710 ops/s
[info]                  ·gc.alloc.rate:                   735.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              56780.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52045.658 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20054.987 ops/s
[info]                  ·gc.alloc.rate:                   717.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              56289.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52901.885 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20108.415 ops/s
[info]                  ·gc.alloc.rate:                   726.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              56867.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52785.920 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   20171.148 ±(99.9%) 553.253 ops/s [Average]
[info]   (min, avg, max) = (20054.987, 20171.148, 20384.710), stdev = 143.678
[info]   CI (99.9%): [19617.896, 20724.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   725.238 ±(99.9%) 26.377 MB/sec [Average]
[info]   (min, avg, max) = (717.192, 725.238, 735.359), stdev = 6.850
[info]   CI (99.9%): [698.862, 751.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56588.845 ±(99.9%) 915.836 B/op [Average]
[info]   (min, avg, max) = (56289.105, 56588.845, 56867.775), stdev = 237.840
[info]   CI (99.9%): [55673.010, 57504.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.653 ±(99.9%) 3.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.653, 1.634), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 4.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   673.876 ±(99.9%) 1.468 MB/sec [Average]
[info]   (min, avg, max) = (673.370, 673.876, 674.328), stdev = 0.381
[info]   CI (99.9%): [672.408, 675.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   52583.729 ±(99.9%) 1442.330 B/op [Average]
[info]   (min, avg, max) = (52045.658, 52583.729, 52901.885), stdev = 374.569
[info]   CI (99.9%): [51141.399, 54026.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:32:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5343.804 ops/s
[info] # Warmup Iteration   2: 17728.339 ops/s
[info] # Warmup Iteration   3: 19222.248 ops/s
[info] # Warmup Iteration   4: 19341.673 ops/s
[info] # Warmup Iteration   5: 19361.242 ops/s
[info] Iteration   1: 19392.059 ops/s
[info]                  ·gc.alloc.rate:                   571.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              46420.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54710.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19281.180 ops/s
[info]                  ·gc.alloc.rate:                   577.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              47168.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55025.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 19378.740 ops/s
[info]                  ·gc.alloc.rate:                   571.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              46451.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54746.887 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 19410.659 ops/s
[info]                  ·gc.alloc.rate:      549.016 MB/sec
[info]                  ·gc.alloc.rate.norm: 44520.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19453.543 ops/s
[info]                  ·gc.alloc.rate:                   567.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              45925.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54538.671 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   19383.236 ±(99.9%) 245.119 ops/s [Average]
[info]   (min, avg, max) = (19281.180, 19383.236, 19453.543), stdev = 63.657
[info]   CI (99.9%): [19138.118, 19628.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   567.654 ±(99.9%) 42.517 MB/sec [Average]
[info]   (min, avg, max) = (549.016, 567.654, 577.882), stdev = 11.042
[info]   CI (99.9%): [525.136, 610.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   46097.333 ±(99.9%) 3799.954 B/op [Average]
[info]   (min, avg, max) = (44520.021, 46097.333, 47168.648), stdev = 986.836
[info]   CI (99.9%): [42297.380, 49897.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.246 ±(99.9%) 2.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 1.207), stdev = 0.538
[info]   CI (99.9%): [≈ 0, 2.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19.934 ±(99.9%) 168.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.934, 97.986), stdev = 43.639
[info]   CI (99.9%): [≈ 0, 187.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.241 ±(99.9%) 1160.756 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.241, 674.135), stdev = 301.445
[info]   CI (99.9%): [≈ 0, 1699.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43804.169 ±(99.9%) 94294.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43804.169, 55025.093), stdev = 24487.897
[info]   CI (99.9%): [≈ 0, 138098.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:32:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86101.289 ops/s
[info] # Warmup Iteration   2: 96548.044 ops/s
[info] # Warmup Iteration   3: 102330.335 ops/s
[info] # Warmup Iteration   4: 102070.073 ops/s
[info] # Warmup Iteration   5: 102329.120 ops/s
[info] Iteration   1: 101789.055 ops/s
[info]                  ·gc.alloc.rate:                   279.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              4317.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7910.205 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 103686.204 ops/s
[info]                  ·gc.alloc.rate:      269.825 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 103234.457 ops/s
[info]                  ·gc.alloc.rate:                   283.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              4324.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7799.502 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 101357.369 ops/s
[info]                  ·gc.alloc.rate:      263.783 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 101769.002 ops/s
[info]                  ·gc.alloc.rate:                   283.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              4386.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10425.699 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   102367.217 ±(99.9%) 3947.501 ops/s [Average]
[info]   (min, avg, max) = (101357.369, 102367.217, 103686.204), stdev = 1025.153
[info]   CI (99.9%): [98419.717, 106314.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   276.050 ±(99.9%) 34.289 MB/sec [Average]
[info]   (min, avg, max) = (263.783, 276.050, 283.772), stdev = 8.905
[info]   CI (99.9%): [241.761, 310.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4244.181 ±(99.9%) 531.209 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4244.181, 4386.988), stdev = 137.953
[info]   CI (99.9%): [3712.972, 4775.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.032 ±(99.9%) 0.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.161), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.501 ±(99.9%) 1220.456 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.501, 674.225), stdev = 316.949
[info]   CI (99.9%): [≈ 0, 1559.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5227.081 ±(99.9%) 18813.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5227.081, 10425.699), stdev = 4885.870
[info]   CI (99.9%): [≈ 0, 24040.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:32:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2867.228 ops/s
[info] # Warmup Iteration   2: 15383.621 ops/s
[info] # Warmup Iteration   3: 16151.970 ops/s
[info] # Warmup Iteration   4: 16357.801 ops/s
[info] # Warmup Iteration   5: 15948.159 ops/s
[info] Iteration   1: 15889.289 ops/s
[info]                  ·gc.alloc.rate:                   985.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              97676.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66768.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16271.455 ops/s
[info]                  ·gc.alloc.rate:                   1022.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              98906.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130403.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16198.354 ops/s
[info]                  ·gc.alloc.rate:                   1037.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              100790.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65499.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16334.875 ops/s
[info]                  ·gc.alloc.rate:                   1035.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              99816.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130029.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16133.474 ops/s
[info]                  ·gc.alloc.rate:                   998.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              97408.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65860.918 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16165.489 ±(99.9%) 662.242 ops/s [Average]
[info]   (min, avg, max) = (15889.289, 16165.489, 16334.875), stdev = 171.982
[info]   CI (99.9%): [15503.247, 16827.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1015.954 ±(99.9%) 88.356 MB/sec [Average]
[info]   (min, avg, max) = (985.910, 1015.954, 1037.232), stdev = 22.946
[info]   CI (99.9%): [927.598, 1104.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98919.734 ±(99.9%) 5490.545 B/op [Average]
[info]   (min, avg, max) = (97408.270, 98919.734, 100790.248), stdev = 1425.877
[info]   CI (99.9%): [93429.189, 104410.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.403 ±(99.9%) 3.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.403, 2.013), stdev = 0.900
[info]   CI (99.9%): [≈ 0, 3.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   944.089 ±(99.9%) 1422.388 MB/sec [Average]
[info]   (min, avg, max) = (673.938, 944.089, 1349.403), stdev = 369.390
[info]   CI (99.9%): [≈ 0, 2366.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   91712.417 ±(99.9%) 135359.291 B/op [Average]
[info]   (min, avg, max) = (65499.593, 91712.417, 130403.553), stdev = 35152.378
[info]   CI (99.9%): [≈ 0, 227071.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:31:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16973.008 ops/s
[info] # Warmup Iteration   2: 42463.090 ops/s
[info] # Warmup Iteration   3: 42693.923 ops/s
[info] # Warmup Iteration   4: 43385.813 ops/s
[info] # Warmup Iteration   5: 43529.170 ops/s
[info] Iteration   1: 43776.628 ops/s
[info]                  ·gc.alloc.rate:                   682.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              24531.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24260.729 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 43688.541 ops/s
[info]                  ·gc.alloc.rate:                   676.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              24368.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24309.589 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 43747.927 ops/s
[info]                  ·gc.alloc.rate:                   675.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              24321.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24275.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 43658.855 ops/s
[info]                  ·gc.alloc.rate:                   678.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              24450.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24325.734 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 43725.581 ops/s
[info]                  ·gc.alloc.rate:                   686.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              24711.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24289.577 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   43719.506 ±(99.9%) 180.045 ops/s [Average]
[info]   (min, avg, max) = (43658.855, 43719.506, 43776.628), stdev = 46.757
[info]   CI (99.9%): [43539.462, 43899.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   679.841 ±(99.9%) 17.135 MB/sec [Average]
[info]   (min, avg, max) = (675.959, 679.841, 686.453), stdev = 4.450
[info]   CI (99.9%): [662.707, 696.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24476.916 ±(99.9%) 593.032 B/op [Average]
[info]   (min, avg, max) = (24321.253, 24476.916, 24711.968), stdev = 154.008
[info]   CI (99.9%): [23883.884, 25069.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.749 ±(99.9%) 2.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 1.501), stdev = 0.749
[info]   CI (99.9%): [≈ 0, 3.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   674.708 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (674.677, 674.708, 674.751), stdev = 0.031
[info]   CI (99.9%): [674.591, 674.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24292.155 ±(99.9%) 100.322 B/op [Average]
[info]   (min, avg, max) = (24260.729, 24292.155, 24325.734), stdev = 26.053
[info]   CI (99.9%): [24191.833, 24392.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:31:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28844.317 ops/s
[info] # Warmup Iteration   2: 55537.812 ops/s
[info] # Warmup Iteration   3: 55300.889 ops/s
[info] # Warmup Iteration   4: 55964.788 ops/s
[info] # Warmup Iteration   5: 56423.331 ops/s
[info] Iteration   1: 56446.367 ops/s
[info]                  ·gc.alloc.rate:                   796.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              22203.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18796.211 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 56460.662 ops/s
[info]                  ·gc.alloc.rate:                   804.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              22439.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18791.551 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 56458.847 ops/s
[info]                  ·gc.alloc.rate:                   797.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18791.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 55937.890 ops/s
[info]                  ·gc.alloc.rate:                   810.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              22797.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18976.589 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 53866.665 ops/s
[info]                  ·gc.alloc.rate:                   781.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              22847.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39423.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   55834.086 ±(99.9%) 4322.052 ops/s [Average]
[info]   (min, avg, max) = (53866.665, 55834.086, 56460.662), stdev = 1122.423
[info]   CI (99.9%): [51512.034, 60156.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   798.124 ±(99.9%) 41.250 MB/sec [Average]
[info]   (min, avg, max) = (781.971, 798.124, 810.309), stdev = 10.712
[info]   CI (99.9%): [756.875, 839.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22502.306 ±(99.9%) 1180.820 B/op [Average]
[info]   (min, avg, max) = (22203.362, 22502.306, 22847.049), stdev = 306.655
[info]   CI (99.9%): [21321.486, 23683.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.200 ±(99.9%) 6.838 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.200, 4.258), stdev = 1.776
[info]   CI (99.9%): [≈ 0, 8.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809.200 ±(99.9%) 1162.637 MB/sec [Average]
[info]   (min, avg, max) = (673.983, 809.200, 1349.315), stdev = 301.933
[info]   CI (99.9%): [≈ 0, 1971.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22955.906 ±(99.9%) 35448.618 B/op [Average]
[info]   (min, avg, max) = (18791.551, 22955.906, 39423.297), stdev = 9205.894
[info]   CI (99.9%): [≈ 0, 58404.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:31:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131077.025 ops/s
[info] # Warmup Iteration   2: 155905.692 ops/s
[info] # Warmup Iteration   3: 170662.948 ops/s
[info] # Warmup Iteration   4: 169594.633 ops/s
[info] # Warmup Iteration   5: 170299.594 ops/s
[info] Iteration   1: 170126.524 ops/s
[info]                  ·gc.alloc.rate:                   282.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              2612.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4732.781 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 170877.229 ops/s
[info]                  ·gc.alloc.rate:      271.015 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 169546.738 ops/s
[info]                  ·gc.alloc.rate:                   277.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              2577.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4748.969 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 170478.153 ops/s
[info]                  ·gc.alloc.rate:      270.387 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 169728.223 ops/s
[info]                  ·gc.alloc.rate:                   286.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              2653.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6245.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   170151.373 ±(99.9%) 2090.467 ops/s [Average]
[info]   (min, avg, max) = (169546.738, 170151.373, 170877.229), stdev = 542.888
[info]   CI (99.9%): [168060.906, 172241.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   277.531 ±(99.9%) 26.697 MB/sec [Average]
[info]   (min, avg, max) = (270.387, 277.531, 286.172), stdev = 6.933
[info]   CI (99.9%): [250.834, 304.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2567.337 ±(99.9%) 271.356 B/op [Average]
[info]   (min, avg, max) = (2496.003, 2567.337, 2653.914), stdev = 70.470
[info]   CI (99.9%): [2295.981, 2838.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.077 ±(99.9%) 0.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.077, 0.193), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.293 ±(99.9%) 1219.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.293, 673.405), stdev = 316.702
[info]   CI (99.9%): [≈ 0, 1558.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3145.361 ±(99.9%) 11306.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3145.361, 6245.054), stdev = 2936.245
[info]   CI (99.9%): [≈ 0, 14451.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:31:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132402.539 ops/s
[info] # Warmup Iteration   2: 173082.017 ops/s
[info] # Warmup Iteration   3: 178563.188 ops/s
[info] # Warmup Iteration   4: 173597.136 ops/s
[info] # Warmup Iteration   5: 178032.684 ops/s
[info] Iteration   1: 178032.331 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.507 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 177803.868 ops/s
[info]                  ·gc.alloc.rate:      0.706 MB/sec
[info]                  ·gc.alloc.rate.norm: 6.253 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 177759.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 177901.957 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 177760.832 ops/s
[info]                  ·gc.alloc.rate:      0.162 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.439 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   177851.617 ±(99.9%) 448.537 ops/s [Average]
[info]   (min, avg, max) = (177759.096, 177851.617, 178032.331), stdev = 116.484
[info]   CI (99.9%): [177403.079, 178300.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.208 ±(99.9%) 1.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.208, 0.706), stdev = 0.291
[info]   CI (99.9%): [≈ 0, 1.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.841 ±(99.9%) 9.911 B/op [Average]
[info]   (min, avg, max) = (0.002, 1.841, 6.253), stdev = 2.574
[info]   CI (99.9%): [≈ 0, 11.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:30:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26449.602 ops/s
[info] # Warmup Iteration   2: 50947.098 ops/s
[info] # Warmup Iteration   3: 52518.618 ops/s
[info] # Warmup Iteration   4: 52776.828 ops/s
[info] # Warmup Iteration   5: 53185.712 ops/s
[info] Iteration   1: 53130.669 ops/s
[info]                  ·gc.alloc.rate:                   847.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              25106.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19910.295 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 53487.868 ops/s
[info]                  ·gc.alloc.rate:                   850.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              25015.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19796.657 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 53400.764 ops/s
[info]                  ·gc.alloc.rate:                   871.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              25695.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39677.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 53544.375 ops/s
[info]                  ·gc.alloc.rate:                   849.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              24986.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19794.797 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 53525.862 ops/s
[info]                  ·gc.alloc.rate:                   850.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              25009.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19821.779 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   53417.908 ±(99.9%) 653.881 ops/s [Average]
[info]   (min, avg, max) = (53130.669, 53417.908, 53544.375), stdev = 169.811
[info]   CI (99.9%): [52764.027, 54071.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   853.940 ±(99.9%) 38.696 MB/sec [Average]
[info]   (min, avg, max) = (847.355, 853.940, 871.780), stdev = 10.049
[info]   CI (99.9%): [815.244, 892.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   25162.923 ±(99.9%) 1160.721 B/op [Average]
[info]   (min, avg, max) = (24986.117, 25162.923, 25695.851), stdev = 301.435
[info]   CI (99.9%): [24002.202, 26323.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.490 ±(99.9%) 2.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.490, 1.227), stdev = 0.671
[info]   CI (99.9%): [≈ 0, 3.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   807.656 ±(99.9%) 1159.113 MB/sec [Average]
[info]   (min, avg, max) = (671.971, 807.656, 1346.132), stdev = 301.018
[info]   CI (99.9%): [≈ 0, 1966.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23800.194 ±(99.9%) 34177.452 B/op [Average]
[info]   (min, avg, max) = (19794.797, 23800.194, 39677.440), stdev = 8875.776
[info]   CI (99.9%): [≈ 0, 57977.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:30:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31912.021 ops/s
[info] # Warmup Iteration   2: 89805.000 ops/s
[info] # Warmup Iteration   3: 92702.537 ops/s
[info] # Warmup Iteration   4: 95172.857 ops/s
[info] # Warmup Iteration   5: 94133.166 ops/s
[info] Iteration   1: 94700.676 ops/s
[info]                  ·gc.alloc.rate:                   1962.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              32609.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33688.966 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 94975.246 ops/s
[info]                  ·gc.alloc.rate:                   1948.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              32287.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22419.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 95113.691 ops/s
[info]                  ·gc.alloc.rate:                   1965.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              32535.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33608.488 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 94863.348 ops/s
[info]                  ·gc.alloc.rate:                   1974.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              32757.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33730.911 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 94759.447 ops/s
[info]                  ·gc.alloc.rate:                   1987.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              33009.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33812.184 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   94882.482 ±(99.9%) 640.354 ops/s [Average]
[info]   (min, avg, max) = (94700.676, 94882.482, 95113.691), stdev = 166.298
[info]   CI (99.9%): [94242.128, 95522.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1967.569 ±(99.9%) 55.450 MB/sec [Average]
[info]   (min, avg, max) = (1948.381, 1967.569, 1987.198), stdev = 14.400
[info]   CI (99.9%): [1912.119, 2023.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32640.030 ±(99.9%) 1030.705 B/op [Average]
[info]   (min, avg, max) = (32287.936, 32640.030, 33009.849), stdev = 267.671
[info]   CI (99.9%): [31609.325, 33670.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.759 ±(99.9%) 1.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.759, 1.378), stdev = 0.511
[info]   CI (99.9%): [≈ 0, 2.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1895.825 ±(99.9%) 1168.748 MB/sec [Average]
[info]   (min, avg, max) = (1352.899, 1895.825, 2035.499), stdev = 303.520
[info]   CI (99.9%): [727.077, 3064.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31452.072 ±(99.9%) 19444.684 B/op [Average]
[info]   (min, avg, max) = (22419.811, 31452.072, 33812.184), stdev = 5049.723
[info]   CI (99.9%): [12007.388, 50896.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:30:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25217.948 ops/s
[info] # Warmup Iteration   2: 112290.420 ops/s
[info] # Warmup Iteration   3: 115429.165 ops/s
[info] # Warmup Iteration   4: 120146.526 ops/s
[info] # Warmup Iteration   5: 120004.570 ops/s
[info] Iteration   1: 120154.617 ops/s
[info]                  ·gc.alloc.rate:                   1630.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              21352.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26499.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 119728.470 ops/s
[info]                  ·gc.alloc.rate:                   1611.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              21177.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17749.767 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 119466.345 ops/s
[info]                  ·gc.alloc.rate:                   1606.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              21157.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17797.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 119997.968 ops/s
[info]                  ·gc.alloc.rate:                   1627.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              21353.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26613.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 119912.803 ops/s
[info]                  ·gc.alloc.rate:                   1625.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              21343.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17774.994 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   119852.041 ±(99.9%) 1019.821 ops/s [Average]
[info]   (min, avg, max) = (119466.345, 119852.041, 120154.617), stdev = 264.844
[info]   CI (99.9%): [118832.219, 120871.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1620.262 ±(99.9%) 42.041 MB/sec [Average]
[info]   (min, avg, max) = (1606.046, 1620.262, 1630.406), stdev = 10.918
[info]   CI (99.9%): [1578.222, 1662.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21276.889 ±(99.9%) 385.756 B/op [Average]
[info]   (min, avg, max) = (21157.554, 21276.889, 21353.561), stdev = 100.180
[info]   CI (99.9%): [20891.133, 21662.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.547 ±(99.9%) 1.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.547, 1.091), stdev = 0.432
[info]   CI (99.9%): [≈ 0, 2.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1621.514 ±(99.9%) 1422.143 MB/sec [Average]
[info]   (min, avg, max) = (1350.377, 1621.514, 2028.737), stdev = 369.326
[info]   CI (99.9%): [199.371, 3043.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21286.864 ±(99.9%) 18522.686 B/op [Average]
[info]   (min, avg, max) = (17749.767, 21286.864, 26613.028), stdev = 4810.283
[info]   CI (99.9%): [2764.178, 39809.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:29:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87855.712 ops/s
[info] # Warmup Iteration   2: 140671.509 ops/s
[info] # Warmup Iteration   3: 149952.262 ops/s
[info] # Warmup Iteration   4: 149190.710 ops/s
[info] # Warmup Iteration   5: 148255.930 ops/s
[info] Iteration   1: 149573.167 ops/s
[info]                  ·gc.alloc.rate:                   1398.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              14717.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14172.882 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 144213.258 ops/s
[info]                  ·gc.alloc.rate:                   1354.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              14778.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14707.443 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 143190.767 ops/s
[info]                  ·gc.alloc.rate:                   1329.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              14613.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7409.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 145628.362 ops/s
[info]                  ·gc.alloc.rate:                   1367.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              14780.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14578.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 144878.393 ops/s
[info]                  ·gc.alloc.rate:                   1370.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              14894.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14668.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   145496.789 ±(99.9%) 9428.531 ops/s [Average]
[info]   (min, avg, max) = (143190.767, 145496.789, 149573.167), stdev = 2448.560
[info]   CI (99.9%): [136068.259, 154925.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1363.998 ±(99.9%) 97.078 MB/sec [Average]
[info]   (min, avg, max) = (1329.336, 1363.998, 1398.408), stdev = 25.211
[info]   CI (99.9%): [1266.920, 1461.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14757.013 ±(99.9%) 394.941 B/op [Average]
[info]   (min, avg, max) = (14613.230, 14757.013, 14894.175), stdev = 102.565
[info]   CI (99.9%): [14362.072, 15151.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.537 ±(99.9%) 1.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.537, 1.125), stdev = 0.514
[info]   CI (99.9%): [≈ 0, 2.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1213.375 ±(99.9%) 1160.947 MB/sec [Average]
[info]   (min, avg, max) = (674.051, 1213.375, 1350.014), stdev = 301.494
[info]   CI (99.9%): [52.428, 2374.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13107.405 ±(99.9%) 12291.871 B/op [Average]
[info]   (min, avg, max) = (7409.758, 13107.405, 14707.443), stdev = 3192.160
[info]   CI (99.9%): [815.534, 25399.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:29:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5881.548 ops/s
[info] # Warmup Iteration   2: 47472.580 ops/s
[info] # Warmup Iteration   3: 53790.907 ops/s
[info] # Warmup Iteration   4: 53590.377 ops/s
[info] # Warmup Iteration   5: 54065.956 ops/s
[info] Iteration   1: 54101.118 ops/s
[info]                  ·gc.alloc.rate:                   2842.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              82702.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78695.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 53793.597 ops/s
[info]                  ·gc.alloc.rate:                   2841.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              83128.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79280.484 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 53892.108 ops/s
[info]                  ·gc.alloc.rate:                   2870.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              83840.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79247.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 53551.131 ops/s
[info]                  ·gc.alloc.rate:                   2880.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              84660.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99806.580 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 54013.362 ops/s
[info]                  ·gc.alloc.rate:                   2878.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              83877.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79251.709 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   53870.263 ±(99.9%) 821.306 ops/s [Average]
[info]   (min, avg, max) = (53551.131, 53870.263, 54101.118), stdev = 213.291
[info]   CI (99.9%): [53048.957, 54691.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2862.485 ±(99.9%) 74.423 MB/sec [Average]
[info]   (min, avg, max) = (2841.034, 2862.485, 2880.355), stdev = 19.327
[info]   CI (99.9%): [2788.063, 2936.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83641.941 ±(99.9%) 2905.295 B/op [Average]
[info]   (min, avg, max) = (82702.966, 83641.941, 84660.173), stdev = 754.496
[info]   CI (99.9%): [80736.646, 86547.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.311 ±(99.9%) 3.052 B/op [Average]
[info]   (min, avg, max) = (1.213, 2.311, 3.045), stdev = 0.793
[info]   CI (99.9%): [≈ 0, 5.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2848.499 ±(99.9%) 1178.022 MB/sec [Average]
[info]   (min, avg, max) = (2704.630, 2848.499, 3395.674), stdev = 305.928
[info]   CI (99.9%): [1670.477, 4026.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83256.199 ±(99.9%) 35638.422 B/op [Average]
[info]   (min, avg, max) = (78695.037, 83256.199, 99806.580), stdev = 9255.185
[info]   CI (99.9%): [47617.777, 118894.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:29:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88996.368 ops/s
[info] # Warmup Iteration   2: 168526.975 ops/s
[info] # Warmup Iteration   3: 176500.547 ops/s
[info] # Warmup Iteration   4: 177347.397 ops/s
[info] # Warmup Iteration   5: 177566.981 ops/s
[info] Iteration   1: 177523.926 ops/s
[info]                  ·gc.alloc.rate:                   636.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              5641.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5970.804 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 171428.940 ops/s
[info]                  ·gc.alloc.rate:                   613.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              5633.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6188.779 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 176571.216 ops/s
[info]                  ·gc.alloc.rate:                   630.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              5623.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6008.861 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 176523.994 ops/s
[info]                  ·gc.alloc.rate:                   634.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              5657.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6010.393 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 175978.644 ops/s
[info]                  ·gc.alloc.rate:                   624.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              5584.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6029.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   175605.344 ±(99.9%) 9241.443 ops/s [Average]
[info]   (min, avg, max) = (171428.940, 175605.344, 177523.926), stdev = 2399.973
[info]   CI (99.9%): [166363.901, 184846.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   627.868 ±(99.9%) 35.325 MB/sec [Average]
[info]   (min, avg, max) = (613.546, 627.868, 636.067), stdev = 9.174
[info]   CI (99.9%): [592.543, 663.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5628.008 ±(99.9%) 105.155 B/op [Average]
[info]   (min, avg, max) = (5584.631, 5628.008, 5657.655), stdev = 27.308
[info]   CI (99.9%): [5522.854, 5733.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.135 ±(99.9%) 1.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.635), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.201 ±(99.9%) 9.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.201, 5.632), stdev = 2.482
[info]   CI (99.9%): [≈ 0, 10.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   673.902 ±(99.9%) 1.441 MB/sec [Average]
[info]   (min, avg, max) = (673.235, 673.902, 674.110), stdev = 0.374
[info]   CI (99.9%): [672.461, 675.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6041.582 ±(99.9%) 327.170 B/op [Average]
[info]   (min, avg, max) = (5970.804, 6041.582, 6188.779), stdev = 84.965
[info]   CI (99.9%): [5714.412, 6368.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:29:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195401.299 ops/s
[info] # Warmup Iteration   2: 357046.092 ops/s
[info] # Warmup Iteration   3: 364736.604 ops/s
[info] # Warmup Iteration   4: 367091.625 ops/s
[info] # Warmup Iteration   5: 364132.677 ops/s
[info] Iteration   1: 366889.967 ops/s
[info]                  ·gc.alloc.rate:                   391.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              1678.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2888.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 364956.659 ops/s
[info]                  ·gc.alloc.rate:      369.285 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 364716.124 ops/s
[info]                  ·gc.alloc.rate:                   383.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              1653.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2905.996 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 374065.040 ops/s
[info]                  ·gc.alloc.rate:      389.722 MB/sec
[info]                  ·gc.alloc.rate.norm: 1639.854 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 376511.165 ops/s
[info]                  ·gc.alloc.rate:                   398.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              1667.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2815.302 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   369427.791 ±(99.9%) 21118.039 ops/s [Average]
[info]   (min, avg, max) = (364716.124, 369427.791, 376511.165), stdev = 5484.288
[info]   CI (99.9%): [348309.752, 390545.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   386.458 ±(99.9%) 42.902 MB/sec [Average]
[info]   (min, avg, max) = (369.285, 386.458, 398.958), stdev = 11.142
[info]   CI (99.9%): [343.555, 429.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1646.248 ±(99.9%) 129.573 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1646.248, 1678.324), stdev = 33.650
[info]   CI (99.9%): [1516.675, 1775.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.164 ±(99.9%) 1.416 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.164, 0.822), stdev = 0.368
[info]   CI (99.9%): [≈ 0, 1.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.710 ±(99.9%) 6.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.710, 3.550), stdev = 1.587
[info]   CI (99.9%): [≈ 0, 6.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.050 ±(99.9%) 1420.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.050, 673.485), stdev = 368.845
[info]   CI (99.9%): [≈ 0, 1824.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1722.033 ±(99.9%) 6054.611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1722.033, 2905.996), stdev = 1572.363
[info]   CI (99.9%): [≈ 0, 7776.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:28:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 476749.583 ops/s
[info] # Warmup Iteration   2: 613601.430 ops/s
[info] # Warmup Iteration   3: 642704.265 ops/s
[info] # Warmup Iteration   4: 644924.477 ops/s
[info] # Warmup Iteration   5: 646679.086 ops/s
[info] Iteration   1: 642935.038 ops/s
[info]                  ·gc.alloc.rate:                   511.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              1251.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1648.627 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 638792.874 ops/s
[info]                  ·gc.alloc.rate:                   506.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              1247.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1659.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 645467.159 ops/s
[info]                  ·gc.alloc.rate:      507.900 MB/sec
[info]                  ·gc.alloc.rate.norm: 1238.609 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 646804.437 ops/s
[info]                  ·gc.alloc.rate:                   505.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              1229.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1637.141 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 642891.067 ops/s
[info]                  ·gc.alloc.rate:                   509.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              1247.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1646.966 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   643378.115 ±(99.9%) 11799.845 ops/s [Average]
[info]   (min, avg, max) = (638792.874, 643378.115, 646804.437), stdev = 3064.382
[info]   CI (99.9%): [631578.270, 655177.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   507.940 ±(99.9%) 9.392 MB/sec [Average]
[info]   (min, avg, max) = (505.021, 507.940, 511.105), stdev = 2.439
[info]   CI (99.9%): [498.548, 517.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1242.776 ±(99.9%) 34.644 B/op [Average]
[info]   (min, avg, max) = (1229.024, 1242.776, 1251.362), stdev = 8.997
[info]   CI (99.9%): [1208.132, 1277.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.616 ±(99.9%) 5.304 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 3.080), stdev = 1.377
[info]   CI (99.9%): [≈ 0, 5.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.518 ±(99.9%) 13.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.518, 7.591), stdev = 3.395
[info]   CI (99.9%): [≈ 0, 14.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.410 ±(99.9%) 1158.969 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.410, 673.364), stdev = 300.981
[info]   CI (99.9%): [≈ 0, 1697.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1318.404 ±(99.9%) 2838.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1318.404, 1659.287), stdev = 737.052
[info]   CI (99.9%): [≈ 0, 4156.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:28:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 542065.467 ops/s
[info] # Warmup Iteration   2: 650021.791 ops/s
[info] # Warmup Iteration   3: 688018.665 ops/s
[info] # Warmup Iteration   4: 705295.202 ops/s
[info] # Warmup Iteration   5: 699296.355 ops/s
[info] Iteration   1: 705660.823 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 702420.587 ops/s
[info]                  ·gc.alloc.rate:      2.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.959 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 703505.033 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 705805.233 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 703169.113 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   704112.158 ±(99.9%) 5897.968 ops/s [Average]
[info]   (min, avg, max) = (702420.587, 704112.158, 705805.233), stdev = 1531.684
[info]   CI (99.9%): [698214.190, 710010.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.443 ±(99.9%) 3.810 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.443, 2.213), stdev = 0.989
[info]   CI (99.9%): [≈ 0, 4.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.992 ±(99.9%) 8.538 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.992, 4.959), stdev = 2.217
[info]   CI (99.9%): [≈ 0, 9.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:28:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89671.730 ops/s
[info] # Warmup Iteration   2: 253465.384 ops/s
[info] # Warmup Iteration   3: 257586.665 ops/s
[info] # Warmup Iteration   4: 251500.537 ops/s
[info] # Warmup Iteration   5: 252157.248 ops/s
[info] Iteration   1: 258636.606 ops/s
[info]                  ·gc.alloc.rate:                   735.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              4477.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4106.356 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 258270.767 ops/s
[info]                  ·gc.alloc.rate:                   726.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              4425.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4112.111 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 257937.210 ops/s
[info]                  ·gc.alloc.rate:                   736.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              4493.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4113.274 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 246241.222 ops/s
[info]                  ·gc.alloc.rate:                   693.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              4431.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4308.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 257750.898 ops/s
[info]                  ·gc.alloc.rate:                   733.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              4481.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4116.338 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   255767.340 ±(99.9%) 20546.856 ops/s [Average]
[info]   (min, avg, max) = (246241.222, 255767.340, 258636.606), stdev = 5335.953
[info]   CI (99.9%): [235220.484, 276314.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   725.154 ±(99.9%) 70.074 MB/sec [Average]
[info]   (min, avg, max) = (693.402, 725.154, 736.293), stdev = 18.198
[info]   CI (99.9%): [655.079, 795.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4461.833 ±(99.9%) 118.984 B/op [Average]
[info]   (min, avg, max) = (4425.849, 4461.833, 4493.233), stdev = 30.900
[info]   CI (99.9%): [4342.849, 4580.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.155 ±(99.9%) 0.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.266), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   674.415 ±(99.9%) 1.512 MB/sec [Average]
[info]   (min, avg, max) = (674.031, 674.415, 674.850), stdev = 0.393
[info]   CI (99.9%): [672.903, 675.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4151.359 ±(99.9%) 339.007 B/op [Average]
[info]   (min, avg, max) = (4106.356, 4151.359, 4308.715), stdev = 88.039
[info]   CI (99.9%): [3812.351, 4490.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:28:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16150.735 ops/s
[info] # Warmup Iteration   2: 34751.285 ops/s
[info] # Warmup Iteration   3: 35531.697 ops/s
[info] # Warmup Iteration   4: 36225.598 ops/s
[info] # Warmup Iteration   5: 36832.024 ops/s
[info] Iteration   1: 36095.697 ops/s
[info]                  ·gc.alloc.rate:                   1706.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              74423.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58786.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 36821.378 ops/s
[info]                  ·gc.alloc.rate:                   1759.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              75235.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86543.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 36695.179 ops/s
[info]                  ·gc.alloc.rate:                   1741.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              74700.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57970.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 35835.671 ops/s
[info]                  ·gc.alloc.rate:                   1715.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              75335.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89158.655 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 36547.457 ops/s
[info]                  ·gc.alloc.rate:                   1733.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              74676.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58348.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   36399.076 ±(99.9%) 1607.958 ops/s [Average]
[info]   (min, avg, max) = (35835.671, 36399.076, 36821.378), stdev = 417.582
[info]   CI (99.9%): [34791.119, 38007.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1731.456 ±(99.9%) 81.368 MB/sec [Average]
[info]   (min, avg, max) = (1706.955, 1731.456, 1759.937), stdev = 21.131
[info]   CI (99.9%): [1650.088, 1812.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   74874.265 ±(99.9%) 1511.097 B/op [Average]
[info]   (min, avg, max) = (74423.283, 74874.265, 75335.469), stdev = 392.427
[info]   CI (99.9%): [73363.168, 76385.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.622 ±(99.9%) 3.813 B/op [Average]
[info]   (min, avg, max) = (0.893, 1.622, 2.743), stdev = 0.990
[info]   CI (99.9%): [≈ 0, 5.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1621.746 ±(99.9%) 1425.009 MB/sec [Average]
[info]   (min, avg, max) = (1348.319, 1621.746, 2029.790), stdev = 370.070
[info]   CI (99.9%): [196.737, 3046.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   70161.494 ±(99.9%) 62293.583 B/op [Average]
[info]   (min, avg, max) = (57970.102, 70161.494, 89158.655), stdev = 16177.446
[info]   CI (99.9%): [7867.911, 132455.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:27:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.815 ops/s
[info] # Warmup Iteration   2: 267971.847 ops/s
[info] # Warmup Iteration   3: 273865.654 ops/s
[info] # Warmup Iteration   4: 280507.338 ops/s
[info] # Warmup Iteration   5: 286120.871 ops/s
[info] Iteration   1: 273837.960 ops/s
[info]                  ·gc.alloc.rate:                   291.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              1675.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2940.427 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 285504.579 ops/s
[info]                  ·gc.alloc.rate:      296.082 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 285574.370 ops/s
[info]                  ·gc.alloc.rate:                   312.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              1721.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3696.874 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 286232.403 ops/s
[info]                  ·gc.alloc.rate:      296.871 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 285905.935 ops/s
[info]                  ·gc.alloc.rate:                   312.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              1718.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3692.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   283411.049 ±(99.9%) 20637.023 ops/s [Average]
[info]   (min, avg, max) = (273837.960, 283411.049, 286232.403), stdev = 5359.369
[info]   CI (99.9%): [262774.027, 304048.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   301.773 ±(99.9%) 37.481 MB/sec [Average]
[info]   (min, avg, max) = (291.516, 301.773, 312.356), stdev = 9.734
[info]   CI (99.9%): [264.291, 339.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1675.906 ±(99.9%) 169.215 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1675.906, 1721.685), stdev = 43.945
[info]   CI (99.9%): [1506.691, 1845.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.785 ±(99.9%) 6.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.916), stdev = 1.750
[info]   CI (99.9%): [≈ 0, 7.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   4.325 ±(99.9%) 37.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.325, 21.559), stdev = 9.634
[info]   CI (99.9%): [≈ 0, 41.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   370.577 ±(99.9%) 1326.454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.577, 670.703), stdev = 344.476
[info]   CI (99.9%): [≈ 0, 1697.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2065.992 ±(99.9%) 7358.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2065.992, 3696.874), stdev = 1910.962
[info]   CI (99.9%): [≈ 0, 9424.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:27:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44848.807 ops/s
[info] # Warmup Iteration   2: 101931.240 ops/s
[info] # Warmup Iteration   3: 102400.214 ops/s
[info] # Warmup Iteration   4: 104917.745 ops/s
[info] # Warmup Iteration   5: 107485.639 ops/s
[info] Iteration   1: 104089.529 ops/s
[info]                  ·gc.alloc.rate:                   1186.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              17945.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20386.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 105052.482 ops/s
[info]                  ·gc.alloc.rate:                   1167.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10108.560 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 105172.380 ops/s
[info]                  ·gc.alloc.rate:                   1189.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              17796.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20201.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 105294.424 ops/s
[info]                  ·gc.alloc.rate:                   1184.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              17704.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20187.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 104979.437 ops/s
[info]                  ·gc.alloc.rate:                   1166.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              17483.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10126.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   104917.650 ±(99.9%) 1841.304 ops/s [Average]
[info]   (min, avg, max) = (104089.529, 104917.650, 105294.424), stdev = 478.181
[info]   CI (99.9%): [103076.347, 106758.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1178.792 ±(99.9%) 42.923 MB/sec [Average]
[info]   (min, avg, max) = (1166.197, 1178.792, 1189.263), stdev = 11.147
[info]   CI (99.9%): [1135.869, 1221.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17683.894 ±(99.9%) 769.885 B/op [Average]
[info]   (min, avg, max) = (17483.909, 17683.894, 17945.837), stdev = 199.937
[info]   CI (99.9%): [16914.009, 18453.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.312 ±(99.9%) 2.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.312, 1.246), stdev = 0.540
[info]   CI (99.9%): [≈ 0, 2.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.765 ±(99.9%) 1422.592 MB/sec [Average]
[info]   (min, avg, max) = (674.673, 1079.765, 1350.811), stdev = 369.443
[info]   CI (99.9%): [≈ 0, 2502.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16201.940 ±(99.9%) 21389.643 B/op [Average]
[info]   (min, avg, max) = (10108.560, 16201.940, 20386.124), stdev = 5554.822
[info]   CI (99.9%): [≈ 0, 37591.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:27:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 341166.147 ops/s
[info] # Warmup Iteration   2: 418924.632 ops/s
[info] # Warmup Iteration   3: 441729.352 ops/s
[info] # Warmup Iteration   4: 414815.739 ops/s
[info] # Warmup Iteration   5: 440284.623 ops/s
[info] Iteration   1: 443220.976 ops/s
[info]                  ·gc.alloc.rate:      288.368 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 438066.435 ops/s
[info]                  ·gc.alloc.rate:                   302.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              1085.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1838.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 413839.081 ops/s
[info]                  ·gc.alloc.rate:      269.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 441487.068 ops/s
[info]                  ·gc.alloc.rate:      287.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 439879.986 ops/s
[info]                  ·gc.alloc.rate:                   307.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              1099.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2411.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   435298.709 ±(99.9%) 46774.711 ops/s [Average]
[info]   (min, avg, max) = (413839.081, 435298.709, 443220.976), stdev = 12147.244
[info]   CI (99.9%): [388523.999, 482073.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   290.870 ±(99.9%) 57.420 MB/sec [Average]
[info]   (min, avg, max) = (269.222, 290.870, 307.471), stdev = 14.912
[info]   CI (99.9%): [233.450, 348.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1051.417 ±(99.9%) 145.920 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1051.417, 1099.845), stdev = 37.895
[info]   CI (99.9%): [905.497, 1197.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   237.170 ±(99.9%) 1269.969 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 237.170, 674.221), stdev = 329.807
[info]   CI (99.9%): [≈ 0, 1507.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   849.963 ±(99.9%) 4549.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 849.963, 2411.736), stdev = 1181.399
[info]   CI (99.9%): [≈ 0, 5399.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:27:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6856.810 ops/s
[info] # Warmup Iteration   2: 37895.466 ops/s
[info] # Warmup Iteration   3: 39122.142 ops/s
[info] # Warmup Iteration   4: 39027.634 ops/s
[info] # Warmup Iteration   5: 39484.653 ops/s
[info] Iteration   1: 39380.580 ops/s
[info]                  ·gc.alloc.rate:                   1935.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              77353.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80954.571 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39346.918 ops/s
[info]                  ·gc.alloc.rate:                   1931.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              77256.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81119.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40157.294 ops/s
[info]                  ·gc.alloc.rate:                   1969.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              77182.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79562.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 40093.320 ops/s
[info]                  ·gc.alloc.rate:                   1980.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              77726.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79806.832 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40207.470 ops/s
[info]                  ·gc.alloc.rate:                   1972.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              77204.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53101.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   39837.116 ±(99.9%) 1671.857 ops/s [Average]
[info]   (min, avg, max) = (39346.918, 39837.116, 40207.470), stdev = 434.176
[info]   CI (99.9%): [38165.260, 41508.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1957.819 ±(99.9%) 86.366 MB/sec [Average]
[info]   (min, avg, max) = (1931.505, 1957.819, 1980.453), stdev = 22.429
[info]   CI (99.9%): [1871.453, 2044.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77344.825 ±(99.9%) 859.990 B/op [Average]
[info]   (min, avg, max) = (77182.721, 77344.825, 77726.481), stdev = 223.337
[info]   CI (99.9%): [76484.835, 78204.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.465 ±(99.9%) 4.473 B/op [Average]
[info]   (min, avg, max) = (0.832, 2.465, 3.331), stdev = 1.162
[info]   CI (99.9%): [≈ 0, 6.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1894.763 ±(99.9%) 1158.827 MB/sec [Average]
[info]   (min, avg, max) = (1356.440, 1894.763, 2033.460), stdev = 300.944
[info]   CI (99.9%): [735.936, 3053.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   74908.988 ±(99.9%) 47016.101 B/op [Average]
[info]   (min, avg, max) = (53101.532, 74908.988, 81119.826), stdev = 12209.932
[info]   CI (99.9%): [27892.887, 121925.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:26:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34237.375 ops/s
[info] # Warmup Iteration   2: 71248.062 ops/s
[info] # Warmup Iteration   3: 73144.051 ops/s
[info] # Warmup Iteration   4: 71957.864 ops/s
[info] # Warmup Iteration   5: 72734.059 ops/s
[info] Iteration   1: 73341.387 ops/s
[info]                  ·gc.alloc.rate:      352.390 MB/sec
[info]                  ·gc.alloc.rate.norm: 7563.657 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 73147.296 ops/s
[info]                  ·gc.alloc.rate:                   363.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              7816.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14489.508 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 73292.818 ops/s
[info]                  ·gc.alloc.rate:      352.000 MB/sec
[info]                  ·gc.alloc.rate.norm: 7560.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 73134.654 ops/s
[info]                  ·gc.alloc.rate:                   371.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              7994.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14492.875 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 73285.959 ops/s
[info]                  ·gc.alloc.rate:      351.960 MB/sec
[info]                  ·gc.alloc.rate.norm: 7560.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   73240.423 ±(99.9%) 359.537 ops/s [Average]
[info]   (min, avg, max) = (73134.654, 73240.423, 73341.387), stdev = 93.371
[info]   CI (99.9%): [72880.886, 73599.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   358.227 ±(99.9%) 34.082 MB/sec [Average]
[info]   (min, avg, max) = (351.960, 358.227, 371.470), stdev = 8.851
[info]   CI (99.9%): [324.145, 392.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7698.947 ±(99.9%) 765.686 B/op [Average]
[info]   (min, avg, max) = (7560.006, 7698.947, 7994.669), stdev = 198.846
[info]   CI (99.9%): [6933.262, 8464.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.845 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.500), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 0.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.329 ±(99.9%) 18.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.329, 10.751), stdev = 4.724
[info]   CI (99.9%): [≈ 0, 20.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   269.379 ±(99.9%) 1420.356 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.379, 673.487), stdev = 368.862
[info]   CI (99.9%): [≈ 0, 1689.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5796.477 ±(99.9%) 30563.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5796.477, 14492.875), stdev = 7937.152
[info]   CI (99.9%): [≈ 0, 36359.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:26:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.692 ops/s
[info] # Warmup Iteration   2: 78920.564 ops/s
[info] # Warmup Iteration   3: 84164.435 ops/s
[info] # Warmup Iteration   4: 84313.210 ops/s
[info] # Warmup Iteration   5: 84457.094 ops/s
[info] Iteration   1: 81319.211 ops/s
[info]                  ·gc.alloc.rate:                   420.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              8138.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12982.787 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 70711.667 ops/s
[info]                  ·gc.alloc.rate:      354.901 MB/sec
[info]                  ·gc.alloc.rate.norm: 7898.673 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 83880.669 ops/s
[info]                  ·gc.alloc.rate:                   442.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              8308.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12586.312 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 84341.519 ops/s
[info]                  ·gc.alloc.rate:                   442.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              8261.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12505.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 84392.925 ops/s
[info]                  ·gc.alloc.rate:      422.902 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   80929.198 ±(99.9%) 22527.301 ops/s [Average]
[info]   (min, avg, max) = (70711.667, 80929.198, 84392.925), stdev = 5850.269
[info]   CI (99.9%): [58401.898, 103456.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   416.795 ±(99.9%) 139.276 MB/sec [Average]
[info]   (min, avg, max) = (354.901, 416.795, 442.804), stdev = 36.169
[info]   CI (99.9%): [277.519, 556.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   8099.115 ±(99.9%) 761.800 B/op [Average]
[info]   (min, avg, max) = (7888.005, 8099.115, 8308.249), stdev = 197.837
[info]   CI (99.9%): [7337.315, 8860.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.803 ±(99.9%) 6.867 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 3.993), stdev = 1.783
[info]   CI (99.9%): [≈ 0, 7.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15.063 ±(99.9%) 128.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.063, 74.926), stdev = 33.465
[info]   CI (99.9%): [≈ 0, 143.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.382 ±(99.9%) 1414.431 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.382, 670.964), stdev = 367.323
[info]   CI (99.9%): [≈ 0, 1816.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   7614.839 ±(99.9%) 26776.278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7614.839, 12982.787), stdev = 6953.714
[info]   CI (99.9%): [≈ 0, 34391.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:26:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34588.085 ops/s
[info] # Warmup Iteration   2: 69649.186 ops/s
[info] # Warmup Iteration   3: 72041.281 ops/s
[info] # Warmup Iteration   4: 72312.974 ops/s
[info] # Warmup Iteration   5: 72006.966 ops/s
[info] Iteration   1: 71978.539 ops/s
[info]                  ·gc.alloc.rate:                   398.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              8708.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14732.673 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 72019.797 ops/s
[info]                  ·gc.alloc.rate:      378.504 MB/sec
[info]                  ·gc.alloc.rate.norm: 8272.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 71873.591 ops/s
[info]                  ·gc.alloc.rate:                   402.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              8818.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14753.987 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 72481.795 ops/s
[info]                  ·gc.alloc.rate:      380.921 MB/sec
[info]                  ·gc.alloc.rate.norm: 8272.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 72322.396 ops/s
[info]                  ·gc.alloc.rate:                   395.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              8609.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14670.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   72135.224 ±(99.9%) 984.497 ops/s [Average]
[info]   (min, avg, max) = (71873.591, 72135.224, 72481.795), stdev = 255.671
[info]   CI (99.9%): [71150.727, 73119.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   391.197 ±(99.9%) 41.685 MB/sec [Average]
[info]   (min, avg, max) = (378.504, 391.197, 402.754), stdev = 10.825
[info]   CI (99.9%): [349.512, 432.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8535.993 ±(99.9%) 970.739 B/op [Average]
[info]   (min, avg, max) = (8272.006, 8535.993, 8818.522), stdev = 252.098
[info]   CI (99.9%): [7565.254, 9506.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.158 ±(99.9%) 1.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.729), stdev = 0.320
[info]   CI (99.9%): [≈ 0, 1.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.463 ±(99.9%) 26.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.463, 15.954), stdev = 7.008
[info]   CI (99.9%): [≈ 0, 30.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.327 ±(99.9%) 1421.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.327, 674.110), stdev = 369.098
[info]   CI (99.9%): [≈ 0, 1825.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8831.385 ±(99.9%) 31043.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8831.385, 14753.987), stdev = 8061.973
[info]   CI (99.9%): [≈ 0, 39875.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:25:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58828.832 ops/s
[info] # Warmup Iteration   2: 77975.922 ops/s
[info] # Warmup Iteration   3: 82213.713 ops/s
[info] # Warmup Iteration   4: 83194.870 ops/s
[info] # Warmup Iteration   5: 83240.652 ops/s
[info] Iteration   1: 83541.829 ops/s
[info]                  ·gc.alloc.rate:      418.635 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 83534.567 ops/s
[info]                  ·gc.alloc.rate:                   432.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              8152.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12675.481 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 82854.769 ops/s
[info]                  ·gc.alloc.rate:                   441.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              8374.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12780.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 83488.684 ops/s
[info]                  ·gc.alloc.rate:      418.356 MB/sec
[info]                  ·gc.alloc.rate.norm: 7888.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 83409.744 ops/s
[info]                  ·gc.alloc.rate:                   431.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              8147.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12682.816 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   83365.919 ±(99.9%) 1118.764 ops/s [Average]
[info]   (min, avg, max) = (82854.769, 83365.919, 83541.829), stdev = 290.539
[info]   CI (99.9%): [82247.155, 84484.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   428.485 ±(99.9%) 37.790 MB/sec [Average]
[info]   (min, avg, max) = (418.356, 428.485, 441.045), stdev = 9.814
[info]   CI (99.9%): [390.695, 466.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   8090.187 ±(99.9%) 793.647 B/op [Average]
[info]   (min, avg, max) = (7888.005, 8090.187, 8374.759), stdev = 206.108
[info]   CI (99.9%): [7296.540, 8883.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.635 ±(99.9%) 5.469 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.635, 3.176), stdev = 1.420
[info]   CI (99.9%): [≈ 0, 6.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12.061 ±(99.9%) 103.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.061, 60.304), stdev = 26.969
[info]   CI (99.9%): [≈ 0, 115.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   403.559 ±(99.9%) 1418.568 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.559, 673.063), stdev = 368.398
[info]   CI (99.9%): [≈ 0, 1822.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7627.742 ±(99.9%) 26813.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7627.742, 12780.414), stdev = 6963.267
[info]   CI (99.9%): [≈ 0, 34440.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:25:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64520.353 ops/s
[info] # Warmup Iteration   2: 79077.140 ops/s
[info] # Warmup Iteration   3: 84898.173 ops/s
[info] # Warmup Iteration   4: 84833.377 ops/s
[info] # Warmup Iteration   5: 85260.140 ops/s
[info] Iteration   1: 84734.562 ops/s
[info]                  ·gc.alloc.rate:                   369.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              6870.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9502.364 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 85406.339 ops/s
[info]                  ·gc.alloc.rate:      360.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 6648.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 83700.104 ops/s
[info]                  ·gc.alloc.rate:                   372.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              7009.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12663.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 83524.858 ops/s
[info]                  ·gc.alloc.rate:      352.882 MB/sec
[info]                  ·gc.alloc.rate.norm: 6648.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 84612.706 ops/s
[info]                  ·gc.alloc.rate:                   381.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              7086.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12527.301 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   84395.714 ±(99.9%) 2998.517 ops/s [Average]
[info]   (min, avg, max) = (83524.858, 84395.714, 85406.339), stdev = 778.705
[info]   CI (99.9%): [81397.197, 87394.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   367.445 ±(99.9%) 41.978 MB/sec [Average]
[info]   (min, avg, max) = (352.882, 367.445, 381.003), stdev = 10.901
[info]   CI (99.9%): [325.468, 409.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   6852.552 ±(99.9%) 778.649 B/op [Average]
[info]   (min, avg, max) = (6648.005, 6852.552, 7086.728), stdev = 202.213
[info]   CI (99.9%): [6073.904, 7631.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.620 ±(99.9%) 5.342 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.620, 3.102), stdev = 1.387
[info]   CI (99.9%): [≈ 0, 5.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   11.539 ±(99.9%) 99.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.539, 57.696), stdev = 25.802
[info]   CI (99.9%): [≈ 0, 110.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   371.697 ±(99.9%) 1331.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.697, 673.503), stdev = 345.694
[info]   CI (99.9%): [≈ 0, 1702.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   6938.629 ±(99.9%) 24870.885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6938.629, 12663.477), stdev = 6458.890
[info]   CI (99.9%): [≈ 0, 31809.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:25:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3372.513 ops/s
[info] # Warmup Iteration   2: 9685.840 ops/s
[info] # Warmup Iteration   3: 10067.424 ops/s
[info] # Warmup Iteration   4: 10209.607 ops/s
[info] # Warmup Iteration   5: 10243.789 ops/s
[info] Iteration   1: 10246.470 ops/s
[info]                  ·gc.alloc.rate:                   1704.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              261675.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 311206.470 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10048.040 ops/s
[info]                  ·gc.alloc.rate:                   1668.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              261352.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211749.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10117.183 ops/s
[info]                  ·gc.alloc.rate:                   1660.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              258336.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210461.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10012.062 ops/s
[info]                  ·gc.alloc.rate:                   1685.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              265004.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 319336.675 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10060.367 ops/s
[info]                  ·gc.alloc.rate:                   1668.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              261123.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212049.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   10096.824 ±(99.9%) 353.452 ops/s [Average]
[info]   (min, avg, max) = (10012.062, 10096.824, 10246.470), stdev = 91.790
[info]   CI (99.9%): [9743.372, 10450.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1677.599 ±(99.9%) 67.076 MB/sec [Average]
[info]   (min, avg, max) = (1660.445, 1677.599, 1704.104), stdev = 17.420
[info]   CI (99.9%): [1610.523, 1744.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   261498.522 ±(99.9%) 9128.428 B/op [Average]
[info]   (min, avg, max) = (258336.692, 261498.522, 265004.109), stdev = 2370.624
[info]   CI (99.9%): [252370.094, 270626.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.594 ±(99.9%) 5.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.594, 3.272), stdev = 1.450
[info]   CI (99.9%): [≈ 0, 8.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1623.612 ±(99.9%) 1424.916 MB/sec [Average]
[info]   (min, avg, max) = (1352.114, 1623.612, 2031.276), stdev = 370.046
[info]   CI (99.9%): [198.696, 3048.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   252960.699 ±(99.9%) 219323.022 B/op [Average]
[info]   (min, avg, max) = (210461.296, 252960.699, 319336.675), stdev = 56957.492
[info]   CI (99.9%): [33637.678, 472283.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:25:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1474.203 ops/s
[info] # Warmup Iteration   2: 8589.974 ops/s
[info] # Warmup Iteration   3: 9348.938 ops/s
[info] # Warmup Iteration   4: 9157.139 ops/s
[info] # Warmup Iteration   5: 9378.780 ops/s
[info] Iteration   1: 9368.414 ops/s
[info]                  ·gc.alloc.rate:                   1441.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              242175.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226501.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 9411.291 ops/s
[info]                  ·gc.alloc.rate:                   1433.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              239705.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225689.469 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9213.904 ops/s
[info]                  ·gc.alloc.rate:                   1427.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              243877.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230602.534 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9389.808 ops/s
[info]                  ·gc.alloc.rate:                   1432.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              240112.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226553.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9395.590 ops/s
[info]                  ·gc.alloc.rate:                   1425.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              238821.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226520.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9355.802 ±(99.9%) 311.121 ops/s [Average]
[info]   (min, avg, max) = (9213.904, 9355.802, 9411.291), stdev = 80.797
[info]   CI (99.9%): [9044.681, 9666.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1432.135 ±(99.9%) 23.448 MB/sec [Average]
[info]   (min, avg, max) = (1425.674, 1432.135, 1441.406), stdev = 6.089
[info]   CI (99.9%): [1408.688, 1455.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   240938.251 ±(99.9%) 7903.846 B/op [Average]
[info]   (min, avg, max) = (238821.243, 240938.251, 243877.139), stdev = 2052.604
[info]   CI (99.9%): [233034.405, 248842.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.580 ±(99.9%) 15.294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.580, 10.443), stdev = 3.972
[info]   CI (99.9%): [≈ 0, 20.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1350.307 ±(99.9%) 6.285 MB/sec [Average]
[info]   (min, avg, max) = (1348.114, 1350.307, 1352.241), stdev = 1.632
[info]   CI (99.9%): [1344.022, 1356.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   227173.324 ±(99.9%) 7512.247 B/op [Average]
[info]   (min, avg, max) = (225689.469, 227173.324, 230602.534), stdev = 1950.907
[info]   CI (99.9%): [219661.077, 234685.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:24:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118917.799 ops/s
[info] # Warmup Iteration   2: 142645.007 ops/s
[info] # Warmup Iteration   3: 151103.553 ops/s
[info] # Warmup Iteration   4: 149003.184 ops/s
[info] # Warmup Iteration   5: 151578.298 ops/s
[info] Iteration   1: 150399.153 ops/s
[info]                  ·gc.alloc.rate:                   396.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              4154.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5353.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 150828.982 ops/s
[info]                  ·gc.alloc.rate:                   404.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              4217.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7034.391 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 151564.925 ops/s
[info]                  ·gc.alloc.rate:      394.419 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 150930.751 ops/s
[info]                  ·gc.alloc.rate:                   409.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              4271.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7029.358 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 151486.804 ops/s
[info]                  ·gc.alloc.rate:      394.360 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   151042.123 ±(99.9%) 1868.957 ops/s [Average]
[info]   (min, avg, max) = (150399.153, 151042.123, 151564.925), stdev = 485.362
[info]   CI (99.9%): [149173.166, 152911.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   399.902 ±(99.9%) 25.979 MB/sec [Average]
[info]   (min, avg, max) = (394.360, 399.902, 409.584), stdev = 6.747
[info]   CI (99.9%): [373.923, 425.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4167.031 ±(99.9%) 296.178 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4167.031, 4271.017), stdev = 76.916
[info]   CI (99.9%): [3870.854, 4463.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.593 ±(99.9%) 4.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.593, 2.779), stdev = 1.225
[info]   CI (99.9%): [≈ 0, 5.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.187 ±(99.9%) 49.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.187, 28.978), stdev = 12.769
[info]   CI (99.9%): [≈ 0, 55.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   371.955 ±(99.9%) 1332.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.955, 674.130), stdev = 345.973
[info]   CI (99.9%): [≈ 0, 1704.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3883.486 ±(99.9%) 13903.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3883.486, 7034.391), stdev = 3610.717
[info]   CI (99.9%): [≈ 0, 17787.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:24:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 942.332 ops/s
[info] # Warmup Iteration   2: 4718.381 ops/s
[info] # Warmup Iteration   3: 5174.012 ops/s
[info] # Warmup Iteration   4: 5392.823 ops/s
[info] # Warmup Iteration   5: 5331.223 ops/s
[info] Iteration   1: 5528.206 ops/s
[info]                  ·gc.alloc.rate:                   1429.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              407133.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383782.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5490.126 ops/s
[info]                  ·gc.alloc.rate:                   1417.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              406547.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386628.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5527.463 ops/s
[info]                  ·gc.alloc.rate:                   1421.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              404901.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 384231.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5495.105 ops/s
[info]                  ·gc.alloc.rate:                   1424.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              407970.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386849.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5500.218 ops/s
[info]                  ·gc.alloc.rate:                   1425.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              407828.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386879.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5508.224 ±(99.9%) 70.299 ops/s [Average]
[info]   (min, avg, max) = (5490.126, 5508.224, 5528.206), stdev = 18.257
[info]   CI (99.9%): [5437.924, 5578.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1423.826 ±(99.9%) 16.737 MB/sec [Average]
[info]   (min, avg, max) = (1417.971, 1423.826, 1429.763), stdev = 4.347
[info]   CI (99.9%): [1407.088, 1440.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   406876.120 ±(99.9%) 4785.275 B/op [Average]
[info]   (min, avg, max) = (404901.404, 406876.120, 407970.401), stdev = 1242.721
[info]   CI (99.9%): [402090.845, 411661.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.185 ±(99.9%) 10.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.185, 5.927), stdev = 2.650
[info]   CI (99.9%): [≈ 0, 11.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1349.625 ±(99.9%) 6.491 MB/sec [Average]
[info]   (min, avg, max) = (1347.761, 1349.625, 1351.956), stdev = 1.686
[info]   CI (99.9%): [1343.134, 1356.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   385674.336 ±(99.9%) 5904.539 B/op [Average]
[info]   (min, avg, max) = (383782.608, 385674.336, 386879.186), stdev = 1533.390
[info]   CI (99.9%): [379769.797, 391578.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:24:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6986.954 ops/s
[info] # Warmup Iteration   2: 19296.767 ops/s
[info] # Warmup Iteration   3: 19306.141 ops/s
[info] # Warmup Iteration   4: 20188.752 ops/s
[info] # Warmup Iteration   5: 19714.919 ops/s
[info] Iteration   1: 19458.879 ops/s
[info]                  ·gc.alloc.rate:                   1100.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              89036.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109157.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20225.755 ops/s
[info]                  ·gc.alloc.rate:                   1127.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              87742.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105059.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 20321.905 ops/s
[info]                  ·gc.alloc.rate:                   1110.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              86013.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52310.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20297.898 ops/s
[info]                  ·gc.alloc.rate:                   1123.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              87128.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104769.797 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20321.148 ops/s
[info]                  ·gc.alloc.rate:                   1107.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              85789.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52338.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   20125.117 ±(99.9%) 1442.075 ops/s [Average]
[info]   (min, avg, max) = (19458.879, 20125.117, 20321.905), stdev = 374.502
[info]   CI (99.9%): [18683.042, 21567.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1114.134 ±(99.9%) 42.942 MB/sec [Average]
[info]   (min, avg, max) = (1100.893, 1114.134, 1127.584), stdev = 11.152
[info]   CI (99.9%): [1071.192, 1157.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87142.201 ±(99.9%) 5112.949 B/op [Average]
[info]   (min, avg, max) = (85789.693, 87142.201, 89036.464), stdev = 1327.817
[info]   CI (99.9%): [82029.252, 92255.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.250 ±(99.9%) 18.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.250, 11.338), stdev = 4.717
[info]   CI (99.9%): [≈ 0, 21.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1080.460 ±(99.9%) 1422.832 MB/sec [Average]
[info]   (min, avg, max) = (675.507, 1080.460, 1351.124), stdev = 369.505
[info]   CI (99.9%): [≈ 0, 2503.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   84727.055 ±(99.9%) 114095.895 B/op [Average]
[info]   (min, avg, max) = (52310.148, 84727.055, 109157.074), stdev = 29630.342
[info]   CI (99.9%): [≈ 0, 198822.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:24:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8046.404 ops/s
[info] # Warmup Iteration   2: 21075.409 ops/s
[info] # Warmup Iteration   3: 22099.314 ops/s
[info] # Warmup Iteration   4: 22114.090 ops/s
[info] # Warmup Iteration   5: 21223.793 ops/s
[info] Iteration   1: 21849.024 ops/s
[info]                  ·gc.alloc.rate:                   1245.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              89715.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97122.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22259.974 ops/s
[info]                  ·gc.alloc.rate:                   1255.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              88795.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95376.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22133.501 ops/s
[info]                  ·gc.alloc.rate:                   1243.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              88433.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95990.390 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21703.254 ops/s
[info]                  ·gc.alloc.rate:                   1213.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              87996.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48958.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 22310.995 ops/s
[info]                  ·gc.alloc.rate:                   1260.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              88947.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95346.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   22051.350 ±(99.9%) 1018.411 ops/s [Average]
[info]   (min, avg, max) = (21703.254, 22051.350, 22310.995), stdev = 264.478
[info]   CI (99.9%): [21032.939, 23069.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1243.791 ±(99.9%) 71.013 MB/sec [Average]
[info]   (min, avg, max) = (1213.330, 1243.791, 1260.732), stdev = 18.442
[info]   CI (99.9%): [1172.778, 1314.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   88777.750 ±(99.9%) 2463.783 B/op [Average]
[info]   (min, avg, max) = (87996.693, 88777.750, 89715.717), stdev = 639.837
[info]   CI (99.9%): [86313.966, 91241.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.541 ±(99.9%) 11.739 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.541, 7.342), stdev = 3.049
[info]   CI (99.9%): [≈ 0, 15.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1214.709 ±(99.9%) 1161.663 MB/sec [Average]
[info]   (min, avg, max) = (675.051, 1214.709, 1351.432), stdev = 301.680
[info]   CI (99.9%): [53.046, 2376.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   86558.739 ±(99.9%) 80985.743 B/op [Average]
[info]   (min, avg, max) = (48958.022, 86558.739, 97122.361), stdev = 21031.740
[info]   CI (99.9%): [5572.996, 167544.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:23:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108258.997 ops/s
[info] # Warmup Iteration   2: 123913.385 ops/s
[info] # Warmup Iteration   3: 132439.274 ops/s
[info] # Warmup Iteration   4: 129205.882 ops/s
[info] # Warmup Iteration   5: 130917.960 ops/s
[info] Iteration   1: 132572.026 ops/s
[info]                  ·gc.alloc.rate:      293.095 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 126562.193 ops/s
[info]                  ·gc.alloc.rate:                   292.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              3633.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6362.085 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 131363.574 ops/s
[info]                  ·gc.alloc.rate:      290.411 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 131043.448 ops/s
[info]                  ·gc.alloc.rate:                   310.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              3724.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8088.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 132234.851 ops/s
[info]                  ·gc.alloc.rate:      292.454 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.958 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   130755.218 ±(99.9%) 9338.256 ops/s [Average]
[info]   (min, avg, max) = (126562.193, 130755.218, 132572.026), stdev = 2425.115
[info]   CI (99.9%): [121416.963, 140093.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   295.631 ±(99.9%) 31.307 MB/sec [Average]
[info]   (min, avg, max) = (290.411, 295.631, 310.066), stdev = 8.130
[info]   CI (99.9%): [264.324, 326.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3559.745 ±(99.9%) 436.805 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3559.745, 3724.488), stdev = 113.437
[info]   CI (99.9%): [3122.940, 3996.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.259), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   236.980 ±(99.9%) 1268.799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 236.980, 673.363), stdev = 329.503
[info]   CI (99.9%): [≈ 0, 1505.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2890.091 ±(99.9%) 15418.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2890.091, 8088.370), stdev = 4004.208
[info]   CI (99.9%): [≈ 0, 18308.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:23:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114570.112 ops/s
[info] # Warmup Iteration   2: 135637.350 ops/s
[info] # Warmup Iteration   3: 130375.605 ops/s
[info] # Warmup Iteration   4: 137866.134 ops/s
[info] # Warmup Iteration   5: 137847.596 ops/s
[info] Iteration   1: 138003.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 137224.699 ops/s
[info]                  ·gc.alloc.rate:      5.319 MB/sec
[info]                  ·gc.alloc.rate.norm: 61.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 137589.212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 131158.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 133899.072 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   135575.021 ±(99.9%) 11388.689 ops/s [Average]
[info]   (min, avg, max) = (131158.589, 135575.021, 138003.532), stdev = 2957.606
[info]   CI (99.9%): [124186.331, 146963.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.098 ±(99.9%) 9.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.098, 5.319), stdev = 2.361
[info]   CI (99.9%): [≈ 0, 10.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12.603 ±(99.9%) 104.240 B/op [Average]
[info]   (min, avg, max) = (0.003, 12.603, 61.004), stdev = 27.071
[info]   CI (99.9%): [≈ 0, 116.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:23:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9162.975 ops/s
[info] # Warmup Iteration   2: 21450.624 ops/s
[info] # Warmup Iteration   3: 22284.450 ops/s
[info] # Warmup Iteration   4: 21652.127 ops/s
[info] # Warmup Iteration   5: 22027.052 ops/s
[info] Iteration   1: 22014.572 ops/s
[info]                  ·gc.alloc.rate:                   1238.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              88548.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96338.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22373.200 ops/s
[info]                  ·gc.alloc.rate:                   1257.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              88481.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94862.906 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 22358.001 ops/s
[info]                  ·gc.alloc.rate:                   1249.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              88000.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95001.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22366.431 ops/s
[info]                  ·gc.alloc.rate:                   1248.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              87835.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95056.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22362.881 ops/s
[info]                  ·gc.alloc.rate:                   1246.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              87725.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47560.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   22295.017 ±(99.9%) 604.055 ops/s [Average]
[info]   (min, avg, max) = (22014.572, 22295.017, 22373.200), stdev = 156.871
[info]   CI (99.9%): [21690.962, 22899.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1248.136 ±(99.9%) 27.130 MB/sec [Average]
[info]   (min, avg, max) = (1238.286, 1248.136, 1257.889), stdev = 7.045
[info]   CI (99.9%): [1221.007, 1275.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   88118.244 ±(99.9%) 1447.454 B/op [Average]
[info]   (min, avg, max) = (87725.238, 88118.244, 88548.777), stdev = 375.899
[info]   CI (99.9%): [86670.790, 89565.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.762 ±(99.9%) 6.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.762, 4.393), stdev = 1.603
[info]   CI (99.9%): [≈ 0, 7.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1214.342 ±(99.9%) 1159.383 MB/sec [Average]
[info]   (min, avg, max) = (675.745, 1214.342, 1350.704), stdev = 301.088
[info]   CI (99.9%): [54.960, 2373.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85763.811 ±(99.9%) 82267.939 B/op [Average]
[info]   (min, avg, max) = (47560.261, 85763.811, 96338.128), stdev = 21364.723
[info]   CI (99.9%): [3495.871, 168031.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:22:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72304.356 ops/s
[info] # Warmup Iteration   2: 113193.719 ops/s
[info] # Warmup Iteration   3: 128401.750 ops/s
[info] # Warmup Iteration   4: 132082.770 ops/s
[info] # Warmup Iteration   5: 132211.262 ops/s
[info] Iteration   1: 131791.905 ops/s
[info]                  ·gc.alloc.rate:                   1730.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              20672.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16061.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 132105.661 ops/s
[info]                  ·gc.alloc.rate:                   1758.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              20949.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24062.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 131693.362 ops/s
[info]                  ·gc.alloc.rate:                   1738.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              20783.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16121.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 130888.344 ops/s
[info]                  ·gc.alloc.rate:                   1759.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              21157.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24362.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 131578.518 ops/s
[info]                  ·gc.alloc.rate:                   1734.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              20749.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16174.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   131611.558 ±(99.9%) 1730.097 ops/s [Average]
[info]   (min, avg, max) = (130888.344, 131611.558, 132105.661), stdev = 449.301
[info]   CI (99.9%): [129881.461, 133341.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1744.267 ±(99.9%) 51.937 MB/sec [Average]
[info]   (min, avg, max) = (1730.659, 1744.267, 1759.122), stdev = 13.488
[info]   CI (99.9%): [1692.330, 1796.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20862.449 ±(99.9%) 744.680 B/op [Average]
[info]   (min, avg, max) = (20672.506, 20862.449, 21157.272), stdev = 193.391
[info]   CI (99.9%): [20117.769, 21607.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.548 ±(99.9%) 0.804 B/op [Average]
[info]   (min, avg, max) = (0.249, 0.548, 0.751), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 1.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1618.114 ±(99.9%) 1421.765 MB/sec [Average]
[info]   (min, avg, max) = (1344.600, 1618.114, 2025.635), stdev = 369.228
[info]   CI (99.9%): [196.349, 3039.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19356.402 ±(99.9%) 17075.137 B/op [Average]
[info]   (min, avg, max) = (16061.078, 19356.402, 24362.669), stdev = 4434.359
[info]   CI (99.9%): [2281.265, 36431.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:22:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.824 ops/s
[info] # Warmup Iteration   2: 472381.287 ops/s
[info] # Warmup Iteration   3: 510032.446 ops/s
[info] # Warmup Iteration   4: 517705.632 ops/s
[info] # Warmup Iteration   5: 502119.178 ops/s
[info] Iteration   1: 516000.088 ops/s
[info]                  ·gc.alloc.rate:                   552.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1685.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2048.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 514059.920 ops/s
[info]                  ·gc.alloc.rate:      535.311 MB/sec
[info]                  ·gc.alloc.rate.norm: 1639.073 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 515698.441 ops/s
[info]                  ·gc.alloc.rate:                   549.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              1676.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2047.218 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 514643.060 ops/s
[info]                  ·gc.alloc.rate:                   547.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              1674.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2051.454 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 515821.118 ops/s
[info]                  ·gc.alloc.rate:                   556.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1696.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2044.658 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   515244.526 ±(99.9%) 3264.215 ops/s [Average]
[info]   (min, avg, max) = (514059.920, 515244.526, 516000.088), stdev = 847.706
[info]   CI (99.9%): [511980.310, 518508.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   548.063 ±(99.9%) 30.236 MB/sec [Average]
[info]   (min, avg, max) = (535.311, 548.063, 556.001), stdev = 7.852
[info]   CI (99.9%): [517.827, 578.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1674.301 ±(99.9%) 83.244 B/op [Average]
[info]   (min, avg, max) = (1639.073, 1674.301, 1696.692), stdev = 21.618
[info]   CI (99.9%): [1591.057, 1757.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.750 ±(99.9%) 6.322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.750, 3.687), stdev = 1.642
[info]   CI (99.9%): [≈ 0, 7.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   2.287 ±(99.9%) 19.287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.287, 11.247), stdev = 5.009
[info]   CI (99.9%): [≈ 0, 21.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   536.566 ±(99.9%) 1155.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.566, 671.348), stdev = 299.950
[info]   CI (99.9%): [≈ 0, 1691.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1638.279 ±(99.9%) 3526.530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1638.279, 2051.454), stdev = 915.829
[info]   CI (99.9%): [≈ 0, 5164.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:22:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136073.797 ops/s
[info] # Warmup Iteration   2: 290164.588 ops/s
[info] # Warmup Iteration   3: 308306.584 ops/s
[info] # Warmup Iteration   4: 308694.018 ops/s
[info] # Warmup Iteration   5: 309194.108 ops/s
[info] Iteration   1: 308400.174 ops/s
[info]                  ·gc.alloc.rate:                   454.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              2319.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3437.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 305466.396 ops/s
[info]                  ·gc.alloc.rate:                   458.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              2359.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3469.992 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 308919.098 ops/s
[info]                  ·gc.alloc.rate:      436.896 MB/sec
[info]                  ·gc.alloc.rate.norm: 2226.331 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 308652.732 ops/s
[info]                  ·gc.alloc.rate:                   451.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              2303.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3437.531 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 308573.659 ops/s
[info]                  ·gc.alloc.rate:                   453.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3438.322 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   308002.412 ±(99.9%) 5506.268 ops/s [Average]
[info]   (min, avg, max) = (305466.396, 308002.412, 308919.098), stdev = 1429.960
[info]   CI (99.9%): [302496.144, 313508.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   450.865 ±(99.9%) 31.415 MB/sec [Average]
[info]   (min, avg, max) = (436.896, 450.865, 458.077), stdev = 8.159
[info]   CI (99.9%): [419.450, 482.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2304.255 ±(99.9%) 187.243 B/op [Average]
[info]   (min, avg, max) = (2226.331, 2304.255, 2359.800), stdev = 48.626
[info]   CI (99.9%): [2117.012, 2491.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.192 ±(99.9%) 1.649 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.958), stdev = 0.428
[info]   CI (99.9%): [≈ 0, 1.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.987 ±(99.9%) 8.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.987, 4.934), stdev = 2.206
[info]   CI (99.9%): [≈ 0, 9.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.003 ±(99.9%) 1160.245 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.003, 674.078), stdev = 301.312
[info]   CI (99.9%): [≈ 0, 1699.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2756.579 ±(99.9%) 5933.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2756.579, 3469.992), stdev = 1541.038
[info]   CI (99.9%): [≈ 0, 8690.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:22:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 528478.114 ops/s
[info] # Warmup Iteration   2: 677297.820 ops/s
[info] # Warmup Iteration   3: 692188.181 ops/s
[info] # Warmup Iteration   4: 715034.131 ops/s
[info] # Warmup Iteration   5: 721155.182 ops/s
[info] Iteration   1: 722957.935 ops/s
[info]                  ·gc.alloc.rate:                   484.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              1054.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1469.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 715971.534 ops/s
[info]                  ·gc.alloc.rate:      465.787 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 720980.913 ops/s
[info]                  ·gc.alloc.rate:                   482.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              1052.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1473.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 721411.655 ops/s
[info]                  ·gc.alloc.rate:                   484.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1470.713 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 719794.102 ops/s
[info]                  ·gc.alloc.rate:                   483.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              1057.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1474.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   720223.228 ±(99.9%) 10137.897 ops/s [Average]
[info]   (min, avg, max) = (715971.534, 720223.228, 722957.935), stdev = 2632.780
[info]   CI (99.9%): [710085.331, 730361.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   480.044 ±(99.9%) 30.860 MB/sec [Average]
[info]   (min, avg, max) = (465.787, 480.044, 484.346), stdev = 8.014
[info]   CI (99.9%): [449.184, 510.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1049.068 ±(99.9%) 54.393 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1049.068, 1057.196), stdev = 14.126
[info]   CI (99.9%): [994.675, 1103.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.550 ±(99.9%) 4.643 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.550, 2.706), stdev = 1.206
[info]   CI (99.9%): [≈ 0, 5.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.200 ±(99.9%) 10.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.200, 5.907), stdev = 2.632
[info]   CI (99.9%): [≈ 0, 11.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   539.524 ±(99.9%) 1161.367 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.524, 674.821), stdev = 301.603
[info]   CI (99.9%): [≈ 0, 1700.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1177.356 ±(99.9%) 2534.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1177.356, 1474.002), stdev = 658.165
[info]   CI (99.9%): [≈ 0, 3711.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:21:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11481.512 ops/s
[info] # Warmup Iteration   2: 71258.639 ops/s
[info] # Warmup Iteration   3: 73436.018 ops/s
[info] # Warmup Iteration   4: 74561.788 ops/s
[info] # Warmup Iteration   5: 74142.700 ops/s
[info] Iteration   1: 75944.308 ops/s
[info]                  ·gc.alloc.rate:                   3105.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              64377.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56113.814 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 74644.237 ops/s
[info]                  ·gc.alloc.rate:                   3109.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              65560.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3390.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71490.307 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 75044.975 ops/s
[info]                  ·gc.alloc.rate:                   3098.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              64992.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56958.063 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 76013.085 ops/s
[info]                  ·gc.alloc.rate:                   3164.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              65537.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70368.489 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 75255.959 ops/s
[info]                  ·gc.alloc.rate:                   3107.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              65010.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56893.641 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   75380.513 ±(99.9%) 2268.462 ops/s [Average]
[info]   (min, avg, max) = (74644.237, 75380.513, 76013.085), stdev = 589.112
[info]   CI (99.9%): [73112.051, 77648.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3117.208 ±(99.9%) 103.765 MB/sec [Average]
[info]   (min, avg, max) = (3098.438, 3117.208, 3164.835), stdev = 26.947
[info]   CI (99.9%): [3013.444, 3220.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65095.532 ±(99.9%) 1871.887 B/op [Average]
[info]   (min, avg, max) = (64377.248, 65095.532, 65560.270), stdev = 486.123
[info]   CI (99.9%): [63223.646, 66967.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.306 ±(99.9%) 2.086 B/op [Average]
[info]   (min, avg, max) = (0.863, 1.306, 2.195), stdev = 0.542
[info]   CI (99.9%): [≈ 0, 3.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2986.174 ±(99.9%) 1434.701 MB/sec [Average]
[info]   (min, avg, max) = (2707.027, 2986.174, 3398.122), stdev = 372.587
[info]   CI (99.9%): [1551.473, 4420.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   62364.863 ±(99.9%) 30171.406 B/op [Average]
[info]   (min, avg, max) = (56113.814, 62364.863, 71490.307), stdev = 7835.418
[info]   CI (99.9%): [32193.457, 92536.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:21:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96779.074 ops/s
[info] # Warmup Iteration   2: 179579.973 ops/s
[info] # Warmup Iteration   3: 184405.070 ops/s
[info] # Warmup Iteration   4: 185898.035 ops/s
[info] # Warmup Iteration   5: 186011.636 ops/s
[info] Iteration   1: 186222.086 ops/s
[info]                  ·gc.alloc.rate:                   967.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              8176.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11392.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 185309.238 ops/s
[info]                  ·gc.alloc.rate:                   934.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              7932.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5725.194 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 186032.355 ops/s
[info]                  ·gc.alloc.rate:                   965.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              8168.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11418.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 186036.150 ops/s
[info]                  ·gc.alloc.rate:                   941.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              7964.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5714.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 185736.867 ops/s
[info]                  ·gc.alloc.rate:                   950.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              8055.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5723.754 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   185867.339 ±(99.9%) 1375.052 ops/s [Average]
[info]   (min, avg, max) = (185309.238, 185867.339, 186222.086), stdev = 357.097
[info]   CI (99.9%): [184492.287, 187242.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   951.761 ±(99.9%) 56.366 MB/sec [Average]
[info]   (min, avg, max) = (934.146, 951.761, 967.416), stdev = 14.638
[info]   CI (99.9%): [895.394, 1008.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8059.409 ±(99.9%) 433.676 B/op [Average]
[info]   (min, avg, max) = (7932.513, 8059.409, 8176.748), stdev = 112.624
[info]   CI (99.9%): [7625.733, 8493.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.141 ±(99.9%) 0.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.528), stdev = 0.230
[info]   CI (99.9%): [≈ 0, 1.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   944.510 ±(99.9%) 1421.163 MB/sec [Average]
[info]   (min, avg, max) = (674.209, 944.510, 1349.747), stdev = 369.072
[info]   CI (99.9%): [≈ 0, 2365.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7994.877 ±(99.9%) 11988.457 B/op [Average]
[info]   (min, avg, max) = (5714.679, 7994.877, 11418.394), stdev = 3113.364
[info]   CI (99.9%): [≈ 0, 19983.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:21:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.809 ops/s
[info] # Warmup Iteration   2: 584116.439 ops/s
[info] # Warmup Iteration   3: 611710.348 ops/s
[info] # Warmup Iteration   4: 601675.514 ops/s
[info] # Warmup Iteration   5: 609519.166 ops/s
[info] Iteration   1: 621462.664 ops/s
[info]                  ·gc.alloc.rate:      337.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 619218.027 ops/s
[info]                  ·gc.alloc.rate:                   347.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              881.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1705.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 621013.746 ops/s
[info]                  ·gc.alloc.rate:      337.980 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.679 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 618043.679 ops/s
[info]                  ·gc.alloc.rate:                   354.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              903.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1708.221 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 627207.295 ops/s
[info]                  ·gc.alloc.rate:      341.072 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   621389.082 ±(99.9%) 13600.884 ops/s [Average]
[info]   (min, avg, max) = (618043.679, 621389.082, 627207.295), stdev = 3532.106
[info]   CI (99.9%): [607788.198, 634989.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   343.766 ±(99.9%) 27.731 MB/sec [Average]
[info]   (min, avg, max) = (337.941, 343.766, 354.822), stdev = 7.202
[info]   CI (99.9%): [316.035, 371.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   870.806 ±(99.9%) 82.259 B/op [Average]
[info]   (min, avg, max) = (856.001, 870.806, 903.420), stdev = 21.363
[info]   CI (99.9%): [788.547, 953.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.803 ±(99.9%) 6.834 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 3.977), stdev = 1.775
[info]   CI (99.9%): [≈ 0, 7.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   2.044 ±(99.9%) 17.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.044, 10.127), stdev = 4.519
[info]   CI (99.9%): [≈ 0, 19.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   268.356 ±(99.9%) 1414.964 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.356, 670.911), stdev = 367.462
[info]   CI (99.9%): [≈ 0, 1683.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   682.644 ±(99.9%) 3599.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 682.644, 1708.221), stdev = 934.750
[info]   CI (99.9%): [≈ 0, 4282.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:21:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336423.476 ops/s
[info] # Warmup Iteration   2: 617479.204 ops/s
[info] # Warmup Iteration   3: 600076.439 ops/s
[info] # Warmup Iteration   4: 596974.107 ops/s
[info] # Warmup Iteration   5: 612739.923 ops/s
[info] Iteration   1: 628483.871 ops/s
[info]                  ·gc.alloc.rate:      466.288 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 616181.103 ops/s
[info]                  ·gc.alloc.rate:                   479.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              1225.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1718.313 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 620485.829 ops/s
[info]                  ·gc.alloc.rate:                   477.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              1210.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1708.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 622798.549 ops/s
[info]                  ·gc.alloc.rate:      462.166 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.032 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 622105.366 ops/s
[info]                  ·gc.alloc.rate:                   474.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1703.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   622010.944 ±(99.9%) 17095.411 ops/s [Average]
[info]   (min, avg, max) = (616181.103, 622010.944, 628483.871), stdev = 4439.624
[info]   CI (99.9%): [604915.533, 639106.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   471.987 ±(99.9%) 28.645 MB/sec [Average]
[info]   (min, avg, max) = (462.166, 471.987, 479.639), stdev = 7.439
[info]   CI (99.9%): [443.342, 500.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1194.499 ±(99.9%) 98.841 B/op [Average]
[info]   (min, avg, max) = (1168.009, 1194.499, 1225.135), stdev = 25.669
[info]   CI (99.9%): [1095.657, 1293.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 1.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.604), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.319 ±(99.9%) 2.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.319, 1.542), stdev = 0.684
[info]   CI (99.9%): [≈ 0, 2.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   403.920 ±(99.9%) 1419.837 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.920, 673.501), stdev = 368.727
[info]   CI (99.9%): [≈ 0, 1823.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1026.077 ±(99.9%) 3606.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1026.077, 1718.313), stdev = 936.691
[info]   CI (99.9%): [≈ 0, 4632.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:20:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 685696.310 ops/s
[info] # Warmup Iteration   2: 901674.829 ops/s
[info] # Warmup Iteration   3: 971967.066 ops/s
[info] # Warmup Iteration   4: 996194.711 ops/s
[info] # Warmup Iteration   5: 999203.262 ops/s
[info] Iteration   1: 997145.942 ops/s
[info]                  ·gc.alloc.rate:                   564.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              890.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1062.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 981367.733 ops/s
[info]                  ·gc.alloc.rate:                   555.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              891.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1080.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 999753.659 ops/s
[info]                  ·gc.alloc.rate:                   558.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              879.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1059.151 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1003414.932 ops/s
[info]                  ·gc.alloc.rate:                   570.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              894.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1055.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1003203.716 ops/s
[info]                  ·gc.alloc.rate:                   562.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              881.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1054.443 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   996977.196 ±(99.9%) 35060.243 ops/s [Average]
[info]   (min, avg, max) = (981367.733, 996977.196, 1003414.932), stdev = 9105.034
[info]   CI (99.9%): [961916.953, 1032037.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   562.122 ±(99.9%) 21.336 MB/sec [Average]
[info]   (min, avg, max) = (555.865, 562.122, 570.275), stdev = 5.541
[info]   CI (99.9%): [540.786, 583.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   887.499 ±(99.9%) 25.781 B/op [Average]
[info]   (min, avg, max) = (879.046, 887.499, 894.602), stdev = 6.695
[info]   CI (99.9%): [861.718, 913.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.608 ±(99.9%) 5.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 2.997), stdev = 1.336
[info]   CI (99.9%): [≈ 0, 5.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.975 ±(99.9%) 8.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.975, 4.807), stdev = 2.143
[info]   CI (99.9%): [≈ 0, 9.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.855 ±(99.9%) 2.133 MB/sec [Average]
[info]   (min, avg, max) = (672.006, 672.855, 673.420), stdev = 0.554
[info]   CI (99.9%): [670.722, 674.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1062.386 ±(99.9%) 40.190 B/op [Average]
[info]   (min, avg, max) = (1054.443, 1062.386, 1080.045), stdev = 10.437
[info]   CI (99.9%): [1022.196, 1102.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:20:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 809925.673 ops/s
[info] # Warmup Iteration   2: 1070362.128 ops/s
[info] # Warmup Iteration   3: 1070126.866 ops/s
[info] # Warmup Iteration   4: 1077255.617 ops/s
[info] # Warmup Iteration   5: 1074660.585 ops/s
[info] Iteration   1: 1076191.500 ops/s
[info]                  ·gc.alloc.rate:      0.287 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.419 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1076134.160 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1076113.684 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1074857.357 ops/s
[info]                  ·gc.alloc.rate:      0.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1077893.129 ops/s
[info]                  ·gc.alloc.rate:      0.150 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.219 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1076237.966 ±(99.9%) 4162.449 ops/s [Average]
[info]   (min, avg, max) = (1074857.357, 1076237.966, 1077893.129), stdev = 1080.975
[info]   CI (99.9%): [1072075.517, 1080400.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.088 ±(99.9%) 0.496 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.088, 0.287), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.128 ±(99.9%) 0.725 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.128, 0.419), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10500.177 ops/s
[info] # Warmup Iteration   2: 32826.239 ops/s
[info] # Warmup Iteration   3: 32080.683 ops/s
[info] # Warmup Iteration   4: 33174.293 ops/s
[info] # Warmup Iteration   5: 33390.851 ops/s
[info] Iteration   1: 33080.178 ops/s
[info]                  ·gc.alloc.rate:                   1719.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              81820.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96332.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 32942.584 ops/s
[info]                  ·gc.alloc.rate:                   1704.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              81455.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64539.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 33164.962 ops/s
[info]                  ·gc.alloc.rate:                   1742.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              82693.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96271.991 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33135.287 ops/s
[info]                  ·gc.alloc.rate:                   1726.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              82035.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64292.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 33399.825 ops/s
[info]                  ·gc.alloc.rate:                   1754.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              82705.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95798.777 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   33144.567 ±(99.9%) 640.302 ops/s [Average]
[info]   (min, avg, max) = (32942.584, 33144.567, 33399.825), stdev = 166.284
[info]   CI (99.9%): [32504.265, 33784.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1729.707 ±(99.9%) 75.687 MB/sec [Average]
[info]   (min, avg, max) = (1704.630, 1729.707, 1754.867), stdev = 19.656
[info]   CI (99.9%): [1654.020, 1805.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82141.902 ±(99.9%) 2115.672 B/op [Average]
[info]   (min, avg, max) = (81455.003, 82141.902, 82705.245), stdev = 549.433
[info]   CI (99.9%): [80026.230, 84257.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.373 ±(99.9%) 6.375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.373, 3.962), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 8.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1757.998 ±(99.9%) 1427.210 MB/sec [Average]
[info]   (min, avg, max) = (1350.635, 1757.998, 2032.690), stdev = 370.642
[info]   CI (99.9%): [330.788, 3185.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83446.902 ±(99.9%) 66902.468 B/op [Average]
[info]   (min, avg, max) = (64292.159, 83446.902, 96332.077), stdev = 17374.358
[info]   CI (99.9%): [16544.434, 150349.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:20:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50599.649 ops/s
[info] # Warmup Iteration   2: 118482.195 ops/s
[info] # Warmup Iteration   3: 120759.844 ops/s
[info] # Warmup Iteration   4: 122724.978 ops/s
[info] # Warmup Iteration   5: 122039.863 ops/s
[info] Iteration   1: 122494.998 ops/s
[info]                  ·gc.alloc.rate:                   1392.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              17888.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17339.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 122032.789 ops/s
[info]                  ·gc.alloc.rate:                   1379.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              17793.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17414.410 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 122631.897 ops/s
[info]                  ·gc.alloc.rate:                   1382.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              17742.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17346.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 122904.195 ops/s
[info]                  ·gc.alloc.rate:                   1397.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              17896.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17316.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 122793.773 ops/s
[info]                  ·gc.alloc.rate:                   1393.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              17866.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17349.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   122571.530 ±(99.9%) 1305.535 ops/s [Average]
[info]   (min, avg, max) = (122032.789, 122571.530, 122904.195), stdev = 339.043
[info]   CI (99.9%): [121265.995, 123877.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1388.961 ±(99.9%) 29.744 MB/sec [Average]
[info]   (min, avg, max) = (1379.476, 1388.961, 1397.397), stdev = 7.724
[info]   CI (99.9%): [1359.217, 1418.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17837.379 ±(99.9%) 258.016 B/op [Average]
[info]   (min, avg, max) = (17742.206, 17837.379, 17896.184), stdev = 67.006
[info]   CI (99.9%): [17579.363, 18095.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.534 ±(99.9%) 1.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.534, 1.067), stdev = 0.500
[info]   CI (99.9%): [≈ 0, 2.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1351.248 ±(99.9%) 6.100 MB/sec [Average]
[info]   (min, avg, max) = (1349.321, 1351.248, 1353.313), stdev = 1.584
[info]   CI (99.9%): [1345.149, 1357.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   17353.201 ±(99.9%) 140.960 B/op [Average]
[info]   (min, avg, max) = (17316.184, 17353.201, 17414.410), stdev = 36.607
[info]   CI (99.9%): [17212.241, 17494.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:19:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48606.499 ops/s
[info] # Warmup Iteration   2: 162572.074 ops/s
[info] # Warmup Iteration   3: 163735.578 ops/s
[info] # Warmup Iteration   4: 170594.520 ops/s
[info] # Warmup Iteration   5: 170924.100 ops/s
[info] Iteration   1: 170321.000 ops/s
[info]                  ·gc.alloc.rate:                   935.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              8644.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12458.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 170662.655 ops/s
[info]                  ·gc.alloc.rate:                   919.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              8482.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6217.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 170584.070 ops/s
[info]                  ·gc.alloc.rate:                   926.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              8544.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6219.647 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 170197.881 ops/s
[info]                  ·gc.alloc.rate:                   935.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              8646.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12470.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 170462.353 ops/s
[info]                  ·gc.alloc.rate:                   917.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              8465.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6227.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   170445.592 ±(99.9%) 729.229 ops/s [Average]
[info]   (min, avg, max) = (170197.881, 170445.592, 170662.655), stdev = 189.379
[info]   CI (99.9%): [169716.362, 171174.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   926.632 ±(99.9%) 32.400 MB/sec [Average]
[info]   (min, avg, max) = (917.108, 926.632, 935.243), stdev = 8.414
[info]   CI (99.9%): [894.232, 959.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8556.667 ±(99.9%) 331.652 B/op [Average]
[info]   (min, avg, max) = (8465.304, 8556.667, 8646.311), stdev = 86.129
[info]   CI (99.9%): [8225.015, 8888.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.308 ±(99.9%) 1.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.308, 0.962), stdev = 0.399
[info]   CI (99.9%): [≈ 0, 1.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.866 ±(99.9%) 1421.578 MB/sec [Average]
[info]   (min, avg, max) = (674.058, 943.866, 1348.618), stdev = 369.179
[info]   CI (99.9%): [≈ 0, 2365.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8718.688 ±(99.9%) 13168.248 B/op [Average]
[info]   (min, avg, max) = (6217.024, 8718.688, 12470.948), stdev = 3419.752
[info]   CI (99.9%): [≈ 0, 21886.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:19:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145441.459 ops/s
[info] # Warmup Iteration   2: 221753.114 ops/s
[info] # Warmup Iteration   3: 221879.523 ops/s
[info] # Warmup Iteration   4: 221512.176 ops/s
[info] # Warmup Iteration   5: 223568.583 ops/s
[info] Iteration   1: 224679.876 ops/s
[info]                  ·gc.alloc.rate:                   1039.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              7285.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4712.890 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 223406.604 ops/s
[info]                  ·gc.alloc.rate:                   1062.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              7480.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9474.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 224781.018 ops/s
[info]                  ·gc.alloc.rate:                   1040.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              7285.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4706.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 223547.113 ops/s
[info]                  ·gc.alloc.rate:                   1049.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              7385.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9473.502 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 222956.537 ops/s
[info]                  ·gc.alloc.rate:                   1043.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              7364.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4751.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   223874.230 ±(99.9%) 3127.786 ops/s [Average]
[info]   (min, avg, max) = (222956.537, 223874.230, 224781.018), stdev = 812.276
[info]   CI (99.9%): [220746.444, 227002.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1046.933 ±(99.9%) 35.740 MB/sec [Average]
[info]   (min, avg, max) = (1039.750, 1046.933, 1062.126), stdev = 9.281
[info]   CI (99.9%): [1011.194, 1082.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   7360.327 ±(99.9%) 312.600 B/op [Average]
[info]   (min, avg, max) = (7285.202, 7360.327, 7480.459), stdev = 81.181
[info]   CI (99.9%): [7047.727, 7672.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.147 ±(99.9%) 0.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.147, 0.440), stdev = 0.207
[info]   CI (99.9%): [≈ 0, 0.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   941.761 ±(99.9%) 1419.356 MB/sec [Average]
[info]   (min, avg, max) = (672.051, 941.761, 1345.790), stdev = 368.602
[info]   CI (99.9%): [≈ 0, 2361.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6623.776 ±(99.9%) 10019.745 B/op [Average]
[info]   (min, avg, max) = (4706.046, 6623.776, 9474.830), stdev = 2602.096
[info]   CI (99.9%): [≈ 0, 16643.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:19:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4676.532 ops/s
[info] # Warmup Iteration   2: 61544.400 ops/s
[info] # Warmup Iteration   3: 65796.359 ops/s
[info] # Warmup Iteration   4: 67465.112 ops/s
[info] # Warmup Iteration   5: 66752.321 ops/s
[info] Iteration   1: 66317.789 ops/s
[info]                  ·gc.alloc.rate:                   2615.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              62094.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64160.621 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 66645.875 ops/s
[info]                  ·gc.alloc.rate:                   2599.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              61402.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47956.432 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 67385.002 ops/s
[info]                  ·gc.alloc.rate:                   2670.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              62373.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63318.116 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 67364.718 ops/s
[info]                  ·gc.alloc.rate:                   2683.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              62682.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63419.425 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 67206.682 ops/s
[info]                  ·gc.alloc.rate:                   2678.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              62723.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63648.388 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   66984.013 ±(99.9%) 1840.170 ops/s [Average]
[info]   (min, avg, max) = (66317.789, 66984.013, 67385.002), stdev = 477.886
[info]   CI (99.9%): [65143.843, 68824.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2649.459 ±(99.9%) 149.397 MB/sec [Average]
[info]   (min, avg, max) = (2599.578, 2649.459, 2683.390), stdev = 38.798
[info]   CI (99.9%): [2500.062, 2798.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62255.136 ±(99.9%) 2082.037 B/op [Average]
[info]   (min, avg, max) = (61402.066, 62255.136, 62723.413), stdev = 540.698
[info]   CI (99.9%): [60173.099, 64337.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.568 ±(99.9%) 2.489 B/op [Average]
[info]   (min, avg, max) = (0.972, 1.568, 2.470), stdev = 0.646
[info]   CI (99.9%): [≈ 0, 4.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2575.316 ±(99.9%) 1173.317 MB/sec [Average]
[info]   (min, avg, max) = (2030.331, 2575.316, 2717.628), stdev = 304.707
[info]   CI (99.9%): [1401.999, 3748.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   60500.597 ±(99.9%) 27031.302 B/op [Average]
[info]   (min, avg, max) = (47956.432, 60500.597, 64160.621), stdev = 7019.943
[info]   CI (99.9%): [33469.295, 87531.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:18:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98100.113 ops/s
[info] # Warmup Iteration   2: 165967.252 ops/s
[info] # Warmup Iteration   3: 175664.092 ops/s
[info] # Warmup Iteration   4: 176678.869 ops/s
[info] # Warmup Iteration   5: 177158.388 ops/s
[info] Iteration   1: 176644.983 ops/s
[info]                  ·gc.alloc.rate:                   624.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              5565.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6003.377 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 175216.296 ops/s
[info]                  ·gc.alloc.rate:                   629.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              5655.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6055.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 176443.188 ops/s
[info]                  ·gc.alloc.rate:                   626.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              5584.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6013.322 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 177358.657 ops/s
[info]                  ·gc.alloc.rate:                   633.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              5625.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5985.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 178990.770 ops/s
[info]                  ·gc.alloc.rate:                   634.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              5583.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5930.528 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   176930.779 ±(99.9%) 5337.526 ops/s [Average]
[info]   (min, avg, max) = (175216.296, 176930.779, 178990.770), stdev = 1386.139
[info]   CI (99.9%): [171593.253, 182268.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   629.768 ±(99.9%) 17.758 MB/sec [Average]
[info]   (min, avg, max) = (624.462, 629.768, 634.944), stdev = 4.612
[info]   CI (99.9%): [612.009, 647.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5602.766 ±(99.9%) 141.165 B/op [Average]
[info]   (min, avg, max) = (5565.259, 5602.766, 5655.306), stdev = 36.660
[info]   CI (99.9%): [5461.601, 5743.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.135 ±(99.9%) 0.996 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.593), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.204 ±(99.9%) 8.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.204, 5.289), stdev = 2.305
[info]   CI (99.9%): [≈ 0, 10.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   674.113 ±(99.9%) 1.253 MB/sec [Average]
[info]   (min, avg, max) = (673.622, 674.113, 674.457), stdev = 0.326
[info]   CI (99.9%): [672.860, 675.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5997.452 ±(99.9%) 174.699 B/op [Average]
[info]   (min, avg, max) = (5930.528, 5997.452, 6055.011), stdev = 45.369
[info]   CI (99.9%): [5822.753, 6172.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:18:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265008.806 ops/s
[info] # Warmup Iteration   2: 630607.209 ops/s
[info] # Warmup Iteration   3: 675901.415 ops/s
[info] # Warmup Iteration   4: 661189.651 ops/s
[info] # Warmup Iteration   5: 663874.470 ops/s
[info] Iteration   1: 662850.417 ops/s
[info]                  ·gc.alloc.rate:                   684.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              1625.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1602.270 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 658580.007 ops/s
[info]                  ·gc.alloc.rate:                   680.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              1626.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1612.648 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 678661.126 ops/s
[info]                  ·gc.alloc.rate:                   701.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              1627.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1564.940 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 678466.305 ops/s
[info]                  ·gc.alloc.rate:                   705.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              1635.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1565.371 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 671012.147 ops/s
[info]                  ·gc.alloc.rate:                   703.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              1651.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1582.691 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   669914.000 ±(99.9%) 34933.515 ops/s [Average]
[info]   (min, avg, max) = (658580.007, 669914.000, 678661.126), stdev = 9072.123
[info]   CI (99.9%): [634980.486, 704847.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   695.177 ±(99.9%) 44.736 MB/sec [Average]
[info]   (min, avg, max) = (680.678, 695.177, 705.117), stdev = 11.618
[info]   CI (99.9%): [650.440, 739.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1633.327 ±(99.9%) 41.486 B/op [Average]
[info]   (min, avg, max) = (1625.779, 1633.327, 1651.421), stdev = 10.774
[info]   CI (99.9%): [1591.842, 1674.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.039 ±(99.9%) 0.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.145), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.743 ±(99.9%) 0.624 MB/sec [Average]
[info]   (min, avg, max) = (674.630, 674.743, 675.025), stdev = 0.162
[info]   CI (99.9%): [674.118, 675.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1585.584 ±(99.9%) 82.901 B/op [Average]
[info]   (min, avg, max) = (1564.940, 1585.584, 1612.648), stdev = 21.529
[info]   CI (99.9%): [1502.683, 1668.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:18:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 497825.283 ops/s
[info] # Warmup Iteration   2: 618601.585 ops/s
[info] # Warmup Iteration   3: 645934.714 ops/s
[info] # Warmup Iteration   4: 650840.281 ops/s
[info] # Warmup Iteration   5: 637420.860 ops/s
[info] Iteration   1: 639931.944 ops/s
[info]                  ·gc.alloc.rate:                   513.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              1262.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1661.293 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 642795.731 ops/s
[info]                  ·gc.alloc.rate:                   517.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              1267.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1653.892 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 648582.834 ops/s
[info]                  ·gc.alloc.rate:      498.532 MB/sec
[info]                  ·gc.alloc.rate.norm: 1209.692 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 646122.302 ops/s
[info]                  ·gc.alloc.rate:                   514.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              1254.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1643.729 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 600075.707 ops/s
[info]                  ·gc.alloc.rate:                                  483.491 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1268.361 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.283 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.741 B/op
[info]                  ·gc.churn.Compressed_Class_Space:                0.007 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm:           0.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    0.491 B/op
[info]                  ·gc.churn.PS_Old_Gen:                            0.023 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:                       0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     688.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                1806.481 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        63.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   635501.703 ±(99.9%) 77295.003 ops/s [Average]
[info]   (min, avg, max) = (600075.707, 635501.703, 648582.834), stdev = 20073.267
[info]   CI (99.9%): [558206.700, 712796.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   505.528 ±(99.9%) 55.369 MB/sec [Average]
[info]   (min, avg, max) = (483.491, 505.528, 517.780), stdev = 14.379
[info]   CI (99.9%): [450.159, 560.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1252.408 ±(99.9%) 94.561 B/op [Average]
[info]   (min, avg, max) = (1209.692, 1252.408, 1268.361), stdev = 24.557
[info]   CI (99.9%): [1157.848, 1346.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.057 ±(99.9%) 0.487 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.283), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.148 ±(99.9%) 1.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.741), stdev = 0.332
[info]   CI (99.9%): [≈ 0, 1.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space":
[info]   0.001 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.004 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.537 ±(99.9%) 4.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.537, 2.498), stdev = 1.099
[info]   CI (99.9%): [≈ 0, 4.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.322 ±(99.9%) 10.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.322, 6.116), stdev = 2.689
[info]   CI (99.9%): [≈ 0, 11.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen":
[info]   0.005 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen.norm":
[info]   0.012 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   542.827 ±(99.9%) 1168.692 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.827, 688.619), stdev = 303.506
[info]   CI (99.9%): [≈ 0, 1711.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1353.079 ±(99.9%) 2923.929 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1353.079, 1806.481), stdev = 759.335
[info]   CI (99.9%): [≈ 0, 4277.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   70.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 14.000, 63.000), stdev = 27.423
[info]   CI (99.9%): [70.000, 70.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:18:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 523950.936 ops/s
[info] # Warmup Iteration   2: 601214.802 ops/s
[info] # Warmup Iteration   3: 691831.979 ops/s
[info] # Warmup Iteration   4: 697438.738 ops/s
[info] # Warmup Iteration   5: 697661.849 ops/s
[info] Iteration   1: 697454.393 ops/s
[info]                  ·gc.alloc.rate:      0.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.183 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 694869.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 697394.861 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 601271.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 697101.731 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   677618.278 ±(99.9%) 164394.135 ops/s [Average]
[info]   (min, avg, max) = (601271.287, 677618.278, 697454.393), stdev = 42692.635
[info]   CI (99.9%): [513224.143, 842012.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.016 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.037 ±(99.9%) 0.315 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.037, 0.183), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:17:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106438.668 ops/s
[info] # Warmup Iteration   2: 321090.364 ops/s
[info] # Warmup Iteration   3: 332156.471 ops/s
[info] # Warmup Iteration   4: 346473.482 ops/s
[info] # Warmup Iteration   5: 349280.282 ops/s
[info] Iteration   1: 349016.803 ops/s
[info]                  ·gc.alloc.rate:                   977.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              4406.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6079.886 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 348688.533 ops/s
[info]                  ·gc.alloc.rate:                   953.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              4305.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3042.793 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 344191.750 ops/s
[info]                  ·gc.alloc.rate:                   964.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              4413.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6165.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 345270.026 ops/s
[info]                  ·gc.alloc.rate:                   945.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              4310.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3075.956 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 341977.159 ops/s
[info]                  ·gc.alloc.rate:                   935.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              4306.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3105.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   345828.854 ±(99.9%) 11578.973 ops/s [Average]
[info]   (min, avg, max) = (341977.159, 345828.854, 349016.803), stdev = 3007.023
[info]   CI (99.9%): [334249.881, 357407.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   955.386 ±(99.9%) 62.632 MB/sec [Average]
[info]   (min, avg, max) = (935.606, 955.386, 977.215), stdev = 16.265
[info]   CI (99.9%): [892.754, 1018.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4348.438 ±(99.9%) 216.129 B/op [Average]
[info]   (min, avg, max) = (4305.643, 4348.438, 4413.044), stdev = 56.128
[info]   CI (99.9%): [4132.309, 4564.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.170 ±(99.9%) 0.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.170, 0.563), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   943.924 ±(99.9%) 1420.688 MB/sec [Average]
[info]   (min, avg, max) = (674.047, 943.924, 1348.272), stdev = 368.948
[info]   CI (99.9%): [≈ 0, 2364.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4293.854 ±(99.9%) 6429.477 B/op [Average]
[info]   (min, avg, max) = (3042.793, 4293.854, 6165.066), stdev = 1669.715
[info]   CI (99.9%): [≈ 0, 10723.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:17:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3980.381 ops/s
[info] # Warmup Iteration   2: 9866.108 ops/s
[info] # Warmup Iteration   3: 10231.962 ops/s
[info] # Warmup Iteration   4: 10219.209 ops/s
[info] # Warmup Iteration   5: 10086.674 ops/s
[info] Iteration   1: 10241.722 ops/s
[info]                  ·gc.alloc.rate:                   1238.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              190339.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103434.796 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 10229.875 ops/s
[info]                  ·gc.alloc.rate:                   1254.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              192956.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207214.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10213.381 ops/s
[info]                  ·gc.alloc.rate:                   1243.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              191562.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207744.501 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10218.845 ops/s
[info]                  ·gc.alloc.rate:                   1254.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              193264.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207848.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10252.266 ops/s
[info]                  ·gc.alloc.rate:                   1257.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              193106.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207383.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   10231.218 ±(99.9%) 61.683 ops/s [Average]
[info]   (min, avg, max) = (10213.381, 10231.218, 10252.266), stdev = 16.019
[info]   CI (99.9%): [10169.535, 10292.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1249.742 ±(99.9%) 32.186 MB/sec [Average]
[info]   (min, avg, max) = (1238.455, 1249.742, 1257.602), stdev = 8.359
[info]   CI (99.9%): [1217.556, 1281.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   192245.886 ±(99.9%) 4864.250 B/op [Average]
[info]   (min, avg, max) = (190339.612, 192245.886, 193264.693), stdev = 1263.230
[info]   CI (99.9%): [187381.636, 197110.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.204 ±(99.9%) 8.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.204, 6.415), stdev = 2.268
[info]   CI (99.9%): [≈ 0, 11.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1213.731 ±(99.9%) 1163.967 MB/sec [Average]
[info]   (min, avg, max) = (673.004, 1213.731, 1350.584), stdev = 302.279
[info]   CI (99.9%): [49.764, 2377.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   186725.141 ±(99.9%) 179291.506 B/op [Average]
[info]   (min, avg, max) = (103434.796, 186725.141, 207848.056), stdev = 46561.435
[info]   CI (99.9%): [7433.635, 366016.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:17:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2280.561 ops/s
[info] # Warmup Iteration   2: 9552.122 ops/s
[info] # Warmup Iteration   3: 9991.239 ops/s
[info] # Warmup Iteration   4: 9695.127 ops/s
[info] # Warmup Iteration   5: 9730.688 ops/s
[info] Iteration   1: 9842.003 ops/s
[info]                  ·gc.alloc.rate:                   1120.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              179227.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107797.533 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 9805.922 ops/s
[info]                  ·gc.alloc.rate:                   1145.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              183731.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216386.401 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9986.225 ops/s
[info]                  ·gc.alloc.rate:                   1162.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              183267.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212591.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10133.121 ops/s
[info]                  ·gc.alloc.rate:                   1148.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              178455.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104857.600 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 9804.532 ops/s
[info]                  ·gc.alloc.rate:                   1137.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              182651.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216782.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9914.361 ±(99.9%) 551.590 ops/s [Average]
[info]   (min, avg, max) = (9804.532, 9914.361, 10133.121), stdev = 143.246
[info]   CI (99.9%): [9362.771, 10465.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1143.094 ±(99.9%) 59.096 MB/sec [Average]
[info]   (min, avg, max) = (1120.901, 1143.094, 1162.715), stdev = 15.347
[info]   CI (99.9%): [1083.998, 1202.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   181466.590 ±(99.9%) 9404.819 B/op [Average]
[info]   (min, avg, max) = (178455.110, 181466.590, 183731.700), stdev = 2442.402
[info]   CI (99.9%): [172061.771, 190871.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.639 ±(99.9%) 5.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.639, 3.341), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 8.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.429 ±(99.9%) 1423.007 MB/sec [Average]
[info]   (min, avg, max) = (674.174, 1079.429, 1350.489), stdev = 369.550
[info]   CI (99.9%): [≈ 0, 2502.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   171683.195 ±(99.9%) 229855.456 B/op [Average]
[info]   (min, avg, max) = (104857.600, 171683.195, 216782.690), stdev = 59692.732
[info]   CI (99.9%): [≈ 0, 401538.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:17:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180118.584 ops/s
[info] # Warmup Iteration   2: 253200.193 ops/s
[info] # Warmup Iteration   3: 259826.274 ops/s
[info] # Warmup Iteration   4: 261090.622 ops/s
[info] # Warmup Iteration   5: 260584.948 ops/s
[info] Iteration   1: 259469.446 ops/s
[info]                  ·gc.alloc.rate:                   1729.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              10489.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8166.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 262428.034 ops/s
[info]                  ·gc.alloc.rate:                   1772.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              10632.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12124.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 263597.976 ops/s
[info]                  ·gc.alloc.rate:                   1768.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              10558.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8057.984 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 260005.614 ops/s
[info]                  ·gc.alloc.rate:                   1758.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              10644.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12264.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 263490.380 ops/s
[info]                  ·gc.alloc.rate:                   1767.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              10557.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8077.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   261798.290 ±(99.9%) 7490.421 ops/s [Average]
[info]   (min, avg, max) = (259469.446, 261798.290, 263597.976), stdev = 1945.239
[info]   CI (99.9%): [254307.869, 269288.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1759.175 ±(99.9%) 67.523 MB/sec [Average]
[info]   (min, avg, max) = (1729.199, 1759.175, 1772.622), stdev = 17.535
[info]   CI (99.9%): [1691.653, 1826.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10576.538 ±(99.9%) 244.202 B/op [Average]
[info]   (min, avg, max) = (10489.146, 10576.538, 10644.526), stdev = 63.419
[info]   CI (99.9%): [10332.336, 10820.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.125 ±(99.9%) 0.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.252), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1619.035 ±(99.9%) 1422.429 MB/sec [Average]
[info]   (min, avg, max) = (1346.217, 1619.035, 2025.956), stdev = 369.400
[info]   CI (99.9%): [196.605, 3041.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9738.019 ±(99.9%) 8638.342 B/op [Average]
[info]   (min, avg, max) = (8057.984, 9738.019, 12264.011), stdev = 2243.350
[info]   CI (99.9%): [1099.676, 18376.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:16:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1720.060 ops/s
[info] # Warmup Iteration   2: 6985.114 ops/s
[info] # Warmup Iteration   3: 7607.726 ops/s
[info] # Warmup Iteration   4: 7587.362 ops/s
[info] # Warmup Iteration   5: 7808.073 ops/s
[info] Iteration   1: 7809.014 ops/s
[info]                  ·gc.alloc.rate:                   1410.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              284394.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 271708.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7811.118 ops/s
[info]                  ·gc.alloc.rate:                   1398.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              281689.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 271907.715 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7795.495 ops/s
[info]                  ·gc.alloc.rate:                   1400.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              282870.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272600.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7796.074 ops/s
[info]                  ·gc.alloc.rate:                   1402.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              283142.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272699.683 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7800.083 ops/s
[info]                  ·gc.alloc.rate:                   1398.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              282122.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272828.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7802.357 ±(99.9%) 28.086 ops/s [Average]
[info]   (min, avg, max) = (7795.495, 7802.357, 7811.118), stdev = 7.294
[info]   CI (99.9%): [7774.270, 7830.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1402.149 ±(99.9%) 19.998 MB/sec [Average]
[info]   (min, avg, max) = (1398.111, 1402.149, 1410.773), stdev = 5.194
[info]   CI (99.9%): [1382.151, 1422.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   282843.870 ±(99.9%) 4013.628 B/op [Average]
[info]   (min, avg, max) = (281689.843, 282843.870, 284394.290), stdev = 1042.326
[info]   CI (99.9%): [278830.242, 286857.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.882 ±(99.9%) 27.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.882, 16.808), stdev = 7.032
[info]   CI (99.9%): [≈ 0, 32.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1350.122 ±(99.9%) 6.040 MB/sec [Average]
[info]   (min, avg, max) = (1347.845, 1350.122, 1352.054), stdev = 1.569
[info]   CI (99.9%): [1344.081, 1356.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   272349.018 ±(99.9%) 1945.123 B/op [Average]
[info]   (min, avg, max) = (271708.850, 272349.018, 272828.670), stdev = 505.142
[info]   CI (99.9%): [270403.895, 274294.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:16:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9030.059 ops/s
[info] # Warmup Iteration   2: 23510.243 ops/s
[info] # Warmup Iteration   3: 24152.507 ops/s
[info] # Warmup Iteration   4: 24255.016 ops/s
[info] # Warmup Iteration   5: 24671.698 ops/s
[info] Iteration   1: 24835.054 ops/s
[info]                  ·gc.alloc.rate:                   1015.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              64352.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42723.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 24899.593 ops/s
[info]                  ·gc.alloc.rate:                   1039.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              65691.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85262.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24274.329 ops/s
[info]                  ·gc.alloc.rate:                   997.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              64671.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43750.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24795.769 ops/s
[info]                  ·gc.alloc.rate:                   1035.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              65753.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85704.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24480.703 ops/s
[info]                  ·gc.alloc.rate:                   1016.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              65347.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43424.793 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   24657.090 ±(99.9%) 1032.033 ops/s [Average]
[info]   (min, avg, max) = (24274.329, 24657.090, 24899.593), stdev = 268.016
[info]   CI (99.9%): [23625.057, 25689.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1020.804 ±(99.9%) 65.724 MB/sec [Average]
[info]   (min, avg, max) = (997.331, 1020.804, 1039.104), stdev = 17.068
[info]   CI (99.9%): [955.080, 1086.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   65163.277 ±(99.9%) 2403.937 B/op [Average]
[info]   (min, avg, max) = (64352.854, 65163.277, 65753.490), stdev = 624.295
[info]   CI (99.9%): [62759.340, 67567.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.375 ±(99.9%) 13.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.375, 7.928), stdev = 3.544
[info]   CI (99.9%): [≈ 0, 16.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   944.613 ±(99.9%) 1423.143 MB/sec [Average]
[info]   (min, avg, max) = (674.041, 944.613, 1350.267), stdev = 369.586
[info]   CI (99.9%): [≈ 0, 2367.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   60172.857 ±(99.9%) 88982.647 B/op [Average]
[info]   (min, avg, max) = (42723.203, 60172.857, 85704.175), stdev = 23108.511
[info]   CI (99.9%): [≈ 0, 149155.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:16:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11503.319 ops/s
[info] # Warmup Iteration   2: 28160.318 ops/s
[info] # Warmup Iteration   3: 28744.965 ops/s
[info] # Warmup Iteration   4: 28762.678 ops/s
[info] # Warmup Iteration   5: 28780.812 ops/s
[info] Iteration   1: 28824.368 ops/s
[info]                  ·gc.alloc.rate:                   1093.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              59734.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73614.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28610.074 ops/s
[info]                  ·gc.alloc.rate:                   1088.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              59871.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74165.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28556.751 ops/s
[info]                  ·gc.alloc.rate:                   1060.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              58455.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37189.535 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29798.012 ops/s
[info]                  ·gc.alloc.rate:                   1130.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              59691.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71317.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 29841.213 ops/s
[info]                  ·gc.alloc.rate:                   1104.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              58241.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35623.549 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   29126.084 ±(99.9%) 2468.872 ops/s [Average]
[info]   (min, avg, max) = (28556.751, 29126.084, 29841.213), stdev = 641.158
[info]   CI (99.9%): [26657.212, 31594.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1095.365 ±(99.9%) 97.242 MB/sec [Average]
[info]   (min, avg, max) = (1060.525, 1095.365, 1130.094), stdev = 25.253
[info]   CI (99.9%): [998.123, 1192.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   59198.918 ±(99.9%) 3014.811 B/op [Average]
[info]   (min, avg, max) = (58241.500, 59198.918, 59871.981), stdev = 782.937
[info]   CI (99.9%): [56184.107, 62213.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.805 ±(99.9%) 8.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.805, 5.683), stdev = 2.221
[info]   CI (99.9%): [≈ 0, 10.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.255 ±(99.9%) 1420.876 MB/sec [Average]
[info]   (min, avg, max) = (674.711, 1079.255, 1350.198), stdev = 368.997
[info]   CI (99.9%): [≈ 0, 2500.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   58382.104 ±(99.9%) 77386.030 B/op [Average]
[info]   (min, avg, max) = (35623.549, 58382.104, 74165.426), stdev = 20096.906
[info]   CI (99.9%): [≈ 0, 135768.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:15:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 287509.074 ops/s
[info] # Warmup Iteration   2: 364835.316 ops/s
[info] # Warmup Iteration   3: 376039.862 ops/s
[info] # Warmup Iteration   4: 376444.926 ops/s
[info] # Warmup Iteration   5: 379956.274 ops/s
[info] Iteration   1: 379646.783 ops/s
[info]                  ·gc.alloc.rate:                   700.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              2904.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2791.983 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 375177.719 ops/s
[info]                  ·gc.alloc.rate:                   695.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              2918.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2825.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 381325.026 ops/s
[info]                  ·gc.alloc.rate:                   703.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              2902.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2776.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 380577.578 ops/s
[info]                  ·gc.alloc.rate:                   711.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              2941.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2782.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 380586.055 ops/s
[info]                  ·gc.alloc.rate:                   705.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              2917.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2782.267 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   379462.632 ±(99.9%) 9504.168 ops/s [Average]
[info]   (min, avg, max) = (375177.719, 379462.632, 381325.026), stdev = 2468.202
[info]   CI (99.9%): [369958.464, 388966.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   703.167 ±(99.9%) 22.198 MB/sec [Average]
[info]   (min, avg, max) = (695.657, 703.167, 711.179), stdev = 5.765
[info]   CI (99.9%): [680.969, 725.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2916.968 ±(99.9%) 59.624 B/op [Average]
[info]   (min, avg, max) = (2902.576, 2916.968, 2941.436), stdev = 15.484
[info]   CI (99.9%): [2857.344, 2976.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.172), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.953 ±(99.9%) 1.285 MB/sec [Average]
[info]   (min, avg, max) = (672.663, 672.953, 673.380), stdev = 0.334
[info]   CI (99.9%): [671.668, 674.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2791.725 ±(99.9%) 74.897 B/op [Average]
[info]   (min, avg, max) = (2776.949, 2791.725, 2825.138), stdev = 19.450
[info]   CI (99.9%): [2716.829, 2866.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:15:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 406111.891 ops/s
[info] # Warmup Iteration   2: 512421.670 ops/s
[info] # Warmup Iteration   3: 535039.414 ops/s
[info] # Warmup Iteration   4: 535121.631 ops/s
[info] # Warmup Iteration   5: 534779.935 ops/s
[info] Iteration   1: 534824.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 534553.936 ops/s
[info]                  ·gc.alloc.rate:      0.937 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.758 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 534996.673 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 533294.439 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 535321.559 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   534598.193 ±(99.9%) 3004.322 ops/s [Average]
[info]   (min, avg, max) = (533294.439, 534598.193, 535321.559), stdev = 780.213
[info]   CI (99.9%): [531593.870, 537602.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.188 ±(99.9%) 1.613 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.188, 0.937), stdev = 0.419
[info]   CI (99.9%): [≈ 0, 1.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.552 ±(99.9%) 4.748 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.552, 2.758), stdev = 1.233
[info]   CI (99.9%): [≈ 0, 5.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:15:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10536.769 ops/s
[info] # Warmup Iteration   2: 26114.067 ops/s
[info] # Warmup Iteration   3: 27105.934 ops/s
[info] # Warmup Iteration   4: 27323.829 ops/s
[info] # Warmup Iteration   5: 27198.677 ops/s
[info] Iteration   1: 26818.228 ops/s
[info]                  ·gc.alloc.rate:                   1091.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              64077.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39504.364 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 26806.463 ops/s
[info]                  ·gc.alloc.rate:                   1119.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              65751.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79080.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26845.757 ops/s
[info]                  ·gc.alloc.rate:                   1096.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              64309.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39521.747 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27393.435 ops/s
[info]                  ·gc.alloc.rate:                   1133.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              65117.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77500.781 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26723.083 ops/s
[info]                  ·gc.alloc.rate:                   1126.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              66360.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79524.958 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   26917.393 ±(99.9%) 1039.751 ops/s [Average]
[info]   (min, avg, max) = (26723.083, 26917.393, 27393.435), stdev = 270.020
[info]   CI (99.9%): [25877.642, 27957.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1113.675 ±(99.9%) 71.426 MB/sec [Average]
[info]   (min, avg, max) = (1091.592, 1113.675, 1133.734), stdev = 18.549
[info]   CI (99.9%): [1042.249, 1185.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   65123.037 ±(99.9%) 3694.372 B/op [Average]
[info]   (min, avg, max) = (64077.196, 65123.037, 66360.480), stdev = 959.417
[info]   CI (99.9%): [61428.665, 68817.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.458 ±(99.9%) 3.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.458, 2.452), stdev = 1.012
[info]   CI (99.9%): [≈ 0, 5.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1078.617 ±(99.9%) 1423.996 MB/sec [Average]
[info]   (min, avg, max) = (672.980, 1078.617, 1350.011), stdev = 369.807
[info]   CI (99.9%): [≈ 0, 2502.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   63026.421 ±(99.9%) 82703.532 B/op [Average]
[info]   (min, avg, max) = (39504.364, 63026.421, 79524.958), stdev = 21477.844
[info]   CI (99.9%): [≈ 0, 145729.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:15:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8790.426 ops/s
[info] # Warmup Iteration   2: 29270.555 ops/s
[info] # Warmup Iteration   3: 30158.863 ops/s
[info] # Warmup Iteration   4: 30578.863 ops/s
[info] # Warmup Iteration   5: 29652.388 ops/s
[info] Iteration   1: 31022.447 ops/s
[info]                  ·gc.alloc.rate:                   1540.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              78151.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68330.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 30349.281 ops/s
[info]                  ·gc.alloc.rate:                   1507.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              78159.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69916.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 31188.714 ops/s
[info]                  ·gc.alloc.rate:                   1559.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              78703.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102171.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 30730.993 ops/s
[info]                  ·gc.alloc.rate:                   1515.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              77594.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69218.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 31060.807 ops/s
[info]                  ·gc.alloc.rate:                   1558.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              78972.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68552.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   30870.448 ±(99.9%) 1293.976 ops/s [Average]
[info]   (min, avg, max) = (30349.281, 30870.448, 31188.714), stdev = 336.041
[info]   CI (99.9%): [29576.472, 32164.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1535.996 ±(99.9%) 93.211 MB/sec [Average]
[info]   (min, avg, max) = (1507.029, 1535.996, 1559.509), stdev = 24.206
[info]   CI (99.9%): [1442.785, 1629.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   78316.593 ±(99.9%) 2067.390 B/op [Average]
[info]   (min, avg, max) = (77594.799, 78316.593, 78972.552), stdev = 536.895
[info]   CI (99.9%): [76249.203, 80383.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.700 ±(99.9%) 5.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.700, 3.238), stdev = 1.431
[info]   CI (99.9%): [≈ 0, 7.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1484.669 ±(99.9%) 1162.114 MB/sec [Average]
[info]   (min, avg, max) = (1346.631, 1484.669, 2024.522), stdev = 301.797
[info]   CI (99.9%): [322.555, 2646.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   75637.916 ±(99.9%) 57165.990 B/op [Average]
[info]   (min, avg, max) = (68330.293, 75637.916, 102171.788), stdev = 14845.826
[info]   CI (99.9%): [18471.927, 132803.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:14:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6423.459 ops/s
[info] # Warmup Iteration   2: 28858.553 ops/s
[info] # Warmup Iteration   3: 28927.743 ops/s
[info] # Warmup Iteration   4: 29438.817 ops/s
[info] # Warmup Iteration   5: 28132.333 ops/s
[info] Iteration   1: 29461.222 ops/s
[info]                  ·gc.alloc.rate:                   1342.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              71721.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72025.990 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 29697.092 ops/s
[info]                  ·gc.alloc.rate:                   1351.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              71609.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71491.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 29638.605 ops/s
[info]                  ·gc.alloc.rate:                   1355.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              71997.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71669.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 29705.462 ops/s
[info]                  ·gc.alloc.rate:                   1343.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              71193.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71578.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 29711.857 ops/s
[info]                  ·gc.alloc.rate:                   1328.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              70406.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35815.878 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   29642.848 ±(99.9%) 406.745 ops/s [Average]
[info]   (min, avg, max) = (29461.222, 29642.848, 29711.857), stdev = 105.630
[info]   CI (99.9%): [29236.103, 30049.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1344.439 ±(99.9%) 39.848 MB/sec [Average]
[info]   (min, avg, max) = (1328.865, 1344.439, 1355.744), stdev = 10.349
[info]   CI (99.9%): [1304.591, 1384.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71385.686 ±(99.9%) 2384.520 B/op [Average]
[info]   (min, avg, max) = (70406.183, 71385.686, 71997.396), stdev = 619.252
[info]   CI (99.9%): [69001.166, 73770.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.548 ±(99.9%) 7.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.548, 4.412), stdev = 1.847
[info]   CI (99.9%): [≈ 0, 8.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1214.774 ±(99.9%) 1159.762 MB/sec [Average]
[info]   (min, avg, max) = (675.998, 1214.774, 1350.947), stdev = 301.187
[info]   CI (99.9%): [55.011, 2374.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   64516.082 ±(99.9%) 61784.310 B/op [Average]
[info]   (min, avg, max) = (35815.878, 64516.082, 72025.990), stdev = 16045.189
[info]   CI (99.9%): [2731.771, 126300.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:14:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 352118.574 ops/s
[info] # Warmup Iteration   2: 425743.219 ops/s
[info] # Warmup Iteration   3: 441932.324 ops/s
[info] # Warmup Iteration   4: 444261.578 ops/s
[info] # Warmup Iteration   5: 443391.748 ops/s
[info] Iteration   1: 441947.166 ops/s
[info]                  ·gc.alloc.rate:                   1195.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              4259.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4792.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 442696.233 ops/s
[info]                  ·gc.alloc.rate:                   1168.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              4156.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2391.868 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 442193.188 ops/s
[info]                  ·gc.alloc.rate:                   1182.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              4207.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4789.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 436549.686 ops/s
[info]                  ·gc.alloc.rate:                   1168.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              4212.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4856.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 442761.049 ops/s
[info]                  ·gc.alloc.rate:                   1188.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              4224.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4790.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   441229.464 ±(99.9%) 10158.942 ops/s [Average]
[info]   (min, avg, max) = (436549.686, 441229.464, 442761.049), stdev = 2638.245
[info]   CI (99.9%): [431070.522, 451388.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1180.780 ±(99.9%) 46.073 MB/sec [Average]
[info]   (min, avg, max) = (1168.694, 1180.780, 1195.908), stdev = 11.965
[info]   CI (99.9%): [1134.707, 1226.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4212.076 ±(99.9%) 142.927 B/op [Average]
[info]   (min, avg, max) = (4156.361, 4212.076, 4259.448), stdev = 37.118
[info]   CI (99.9%): [4069.149, 4355.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.148 ±(99.9%) 0.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.296), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1211.641 ±(99.9%) 1160.138 MB/sec [Average]
[info]   (min, avg, max) = (672.690, 1211.641, 1347.439), stdev = 301.284
[info]   CI (99.9%): [51.503, 2371.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4323.837 ±(99.9%) 4160.152 B/op [Average]
[info]   (min, avg, max) = (2391.868, 4323.837, 4856.075), stdev = 1080.378
[info]   CI (99.9%): [163.685, 8483.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:14:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3021.237 ops/s
[info] # Warmup Iteration   2: 15422.310 ops/s
[info] # Warmup Iteration   3: 17550.698 ops/s
[info] # Warmup Iteration   4: 17631.218 ops/s
[info] # Warmup Iteration   5: 17327.955 ops/s
[info] Iteration   1: 17571.815 ops/s
[info]                  ·gc.alloc.rate:                   1694.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              151833.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120750.900 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17308.965 ops/s
[info]                  ·gc.alloc.rate:                   1690.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              153729.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184120.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17518.629 ops/s
[info]                  ·gc.alloc.rate:                   1707.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              153383.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121422.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17466.960 ops/s
[info]                  ·gc.alloc.rate:                   1703.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              153565.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182825.558 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17301.759 ops/s
[info]                  ·gc.alloc.rate:                   1673.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              152281.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123187.230 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   17433.626 ±(99.9%) 473.027 ops/s [Average]
[info]   (min, avg, max) = (17301.759, 17433.626, 17571.815), stdev = 122.844
[info]   CI (99.9%): [16960.599, 17906.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1694.018 ±(99.9%) 50.792 MB/sec [Average]
[info]   (min, avg, max) = (1673.705, 1694.018, 1707.145), stdev = 13.191
[info]   CI (99.9%): [1643.225, 1744.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   152958.737 ±(99.9%) 3259.746 B/op [Average]
[info]   (min, avg, max) = (151833.657, 152958.737, 153729.150), stdev = 846.546
[info]   CI (99.9%): [149698.991, 156218.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.875 ±(99.9%) 12.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.875, 7.503), stdev = 3.249
[info]   CI (99.9%): [≈ 0, 14.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1621.299 ±(99.9%) 1424.890 MB/sec [Average]
[info]   (min, avg, max) = (1347.852, 1621.299, 2028.584), stdev = 370.039
[info]   CI (99.9%): [196.409, 3046.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   146461.205 ±(99.9%) 130158.092 B/op [Average]
[info]   (min, avg, max) = (120750.900, 146461.205, 184120.085), stdev = 33801.643
[info]   CI (99.9%): [16303.114, 276619.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:14:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21844.578 ops/s
[info] # Warmup Iteration   2: 51331.847 ops/s
[info] # Warmup Iteration   3: 51463.333 ops/s
[info] # Warmup Iteration   4: 53780.126 ops/s
[info] # Warmup Iteration   5: 53077.622 ops/s
[info] Iteration   1: 52187.470 ops/s
[info]                  ·gc.alloc.rate:                   1204.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              36325.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40701.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 52375.640 ops/s
[info]                  ·gc.alloc.rate:                   1206.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              36254.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40572.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 53513.867 ops/s
[info]                  ·gc.alloc.rate:                   1209.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              35586.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19866.147 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 53465.494 ops/s
[info]                  ·gc.alloc.rate:                   1235.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              36375.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39783.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 53902.269 ops/s
[info]                  ·gc.alloc.rate:                   1242.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              36297.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39503.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   53088.948 ±(99.9%) 2923.261 ops/s [Average]
[info]   (min, avg, max) = (52187.470, 53088.948, 53902.269), stdev = 759.162
[info]   CI (99.9%): [50165.687, 56012.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1220.015 ±(99.9%) 69.031 MB/sec [Average]
[info]   (min, avg, max) = (1204.681, 1220.015, 1242.904), stdev = 17.927
[info]   CI (99.9%): [1150.985, 1289.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   36168.034 ±(99.9%) 1262.881 B/op [Average]
[info]   (min, avg, max) = (35586.587, 36168.034, 36375.152), stdev = 327.966
[info]   CI (99.9%): [34905.153, 37430.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.597 ±(99.9%) 6.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.597, 4.255), stdev = 1.580
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1216.000 ±(99.9%) 1163.651 MB/sec [Average]
[info]   (min, avg, max) = (675.418, 1216.000, 1352.665), stdev = 302.196
[info]   CI (99.9%): [52.349, 2379.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   36085.413 ±(99.9%) 34968.069 B/op [Average]
[info]   (min, avg, max) = (19866.147, 36085.413, 40701.504), stdev = 9081.097
[info]   CI (99.9%): [1117.343, 71053.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:13:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49062.791 ops/s
[info] # Warmup Iteration   2: 132933.603 ops/s
[info] # Warmup Iteration   3: 130544.177 ops/s
[info] # Warmup Iteration   4: 134406.722 ops/s
[info] # Warmup Iteration   5: 134254.600 ops/s
[info] Iteration   1: 129930.231 ops/s
[info]                  ·gc.alloc.rate:                   1151.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              13955.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16327.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 134899.024 ops/s
[info]                  ·gc.alloc.rate:                   1162.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              13566.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7865.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 134556.049 ops/s
[info]                  ·gc.alloc.rate:                   1173.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              13723.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15785.752 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 134444.061 ops/s
[info]                  ·gc.alloc.rate:                   1168.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              13676.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15814.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 134804.938 ops/s
[info]                  ·gc.alloc.rate:                   1156.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              13499.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7890.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   133726.861 ±(99.9%) 8202.989 ops/s [Average]
[info]   (min, avg, max) = (129930.231, 133726.861, 134899.024), stdev = 2130.290
[info]   CI (99.9%): [125523.871, 141929.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1162.376 ±(99.9%) 33.237 MB/sec [Average]
[info]   (min, avg, max) = (1151.824, 1162.376, 1173.053), stdev = 8.632
[info]   CI (99.9%): [1129.138, 1195.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13684.475 ±(99.9%) 674.610 B/op [Average]
[info]   (min, avg, max) = (13499.936, 13684.475, 13955.164), stdev = 175.194
[info]   CI (99.9%): [13009.865, 14359.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.348 ±(99.9%) 1.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.348, 1.009), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.495 ±(99.9%) 1422.254 MB/sec [Average]
[info]   (min, avg, max) = (674.066, 1079.495, 1350.772), stdev = 369.355
[info]   CI (99.9%): [≈ 0, 2501.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12736.638 ±(99.9%) 17100.029 B/op [Average]
[info]   (min, avg, max) = (7865.155, 12736.638, 16327.643), stdev = 4440.823
[info]   CI (99.9%): [≈ 0, 29836.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:13:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 631383.878 ops/s
[info] # Warmup Iteration   2: 796398.153 ops/s
[info] # Warmup Iteration   3: 851090.953 ops/s
[info] # Warmup Iteration   4: 796659.276 ops/s
[info] # Warmup Iteration   5: 820811.197 ops/s
[info] Iteration   1: 823326.043 ops/s
[info]                  ·gc.alloc.rate:                   900.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              1722.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1286.134 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 843973.940 ops/s
[info]                  ·gc.alloc.rate:                   947.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              1767.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2506.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 832821.997 ops/s
[info]                  ·gc.alloc.rate:                   913.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1727.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1270.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 638313.497 ops/s
[info]                  ·gc.alloc.rate:                   702.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              1733.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1657.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 638205.445 ops/s
[info]                  ·gc.alloc.rate:                   698.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1721.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1657.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   755328.185 ±(99.9%) 412474.082 ops/s [Average]
[info]   (min, avg, max) = (638205.445, 755328.185, 843973.940), stdev = 107118.209
[info]   CI (99.9%): [342854.103, 1167802.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   832.594 ±(99.9%) 469.576 MB/sec [Average]
[info]   (min, avg, max) = (698.228, 832.594, 947.598), stdev = 121.948
[info]   CI (99.9%): [363.018, 1302.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1734.420 ±(99.9%) 73.152 B/op [Average]
[info]   (min, avg, max) = (1721.912, 1734.420, 1767.401), stdev = 18.997
[info]   CI (99.9%): [1661.268, 1807.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.065 ±(99.9%) 0.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.233), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.509 ±(99.9%) 1157.094 MB/sec [Average]
[info]   (min, avg, max) = (671.651, 806.509, 1344.048), stdev = 300.494
[info]   CI (99.9%): [≈ 0, 1963.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1675.582 ±(99.9%) 1932.708 B/op [Average]
[info]   (min, avg, max) = (1270.150, 1675.582, 2506.834), stdev = 501.918
[info]   CI (99.9%): [≈ 0, 3608.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:13:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 596511.070 ops/s
[info] # Warmup Iteration   2: 928233.709 ops/s
[info] # Warmup Iteration   3: 951946.440 ops/s
[info] # Warmup Iteration   4: 954844.814 ops/s
[info] # Warmup Iteration   5: 954881.519 ops/s
[info] Iteration   1: 954195.110 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 938694.833 ops/s
[info]                  ·gc.alloc.rate:      5.195 MB/sec
[info]                  ·gc.alloc.rate.norm: 8.712 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 954704.180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 954288.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 954486.878 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.281 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   951273.932 ±(99.9%) 27087.933 ops/s [Average]
[info]   (min, avg, max) = (938694.833, 951273.932, 954704.180), stdev = 7034.650
[info]   CI (99.9%): [924185.999, 978361.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.073 ±(99.9%) 8.878 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.073, 5.195), stdev = 2.306
[info]   CI (99.9%): [≈ 0, 9.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.799 ±(99.9%) 14.889 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.799, 8.712), stdev = 3.867
[info]   CI (99.9%): [≈ 0, 16.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:12:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30581.804 ops/s
[info] # Warmup Iteration   2: 59077.486 ops/s
[info] # Warmup Iteration   3: 60136.837 ops/s
[info] # Warmup Iteration   4: 60524.265 ops/s
[info] # Warmup Iteration   5: 60732.622 ops/s
[info] Iteration   1: 62296.673 ops/s
[info]                  ·gc.alloc.rate:                   1368.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              34564.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34062.816 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 61661.793 ops/s
[info]                  ·gc.alloc.rate:                   1344.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              34304.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34447.552 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 62151.667 ops/s
[info]                  ·gc.alloc.rate:                   1352.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              34248.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34192.879 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 61710.102 ops/s
[info]                  ·gc.alloc.rate:                   1350.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              34456.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34470.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 61555.287 ops/s
[info]                  ·gc.alloc.rate:                   1362.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              34835.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34592.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   61875.104 ±(99.9%) 1261.369 ops/s [Average]
[info]   (min, avg, max) = (61555.287, 61875.104, 62296.673), stdev = 327.573
[info]   CI (99.9%): [60613.736, 63136.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1355.578 ±(99.9%) 37.203 MB/sec [Average]
[info]   (min, avg, max) = (1344.050, 1355.578, 1368.140), stdev = 9.661
[info]   CI (99.9%): [1318.375, 1392.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34481.830 ±(99.9%) 899.784 B/op [Average]
[info]   (min, avg, max) = (34248.721, 34481.830, 34835.440), stdev = 233.671
[info]   CI (99.9%): [33582.046, 35381.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.949 ±(99.9%) 4.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.949, 2.636), stdev = 1.142
[info]   CI (99.9%): [≈ 0, 5.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1350.492 ±(99.9%) 6.928 MB/sec [Average]
[info]   (min, avg, max) = (1348.290, 1350.492, 1353.065), stdev = 1.799
[info]   CI (99.9%): [1343.564, 1357.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34353.065 ±(99.9%) 838.386 B/op [Average]
[info]   (min, avg, max) = (34062.816, 34353.065, 34592.022), stdev = 217.726
[info]   CI (99.9%): [33514.679, 35191.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:12:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5670.764 ops/s
[info] # Warmup Iteration   2: 15824.081 ops/s
[info] # Warmup Iteration   3: 16174.914 ops/s
[info] # Warmup Iteration   4: 16258.766 ops/s
[info] # Warmup Iteration   5: 16139.390 ops/s
[info] Iteration   1: 16276.715 ops/s
[info]                  ·gc.alloc.rate:                   1448.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              140055.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130556.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16087.360 ops/s
[info]                  ·gc.alloc.rate:                   1436.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              140525.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132187.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15909.745 ops/s
[info]                  ·gc.alloc.rate:                   1420.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              140558.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133740.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16312.925 ops/s
[info]                  ·gc.alloc.rate:                   1440.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              139018.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130525.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16296.181 ops/s
[info]                  ·gc.alloc.rate:                   1452.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              140232.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130782.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16176.585 ±(99.9%) 672.713 ops/s [Average]
[info]   (min, avg, max) = (15909.745, 16176.585, 16312.925), stdev = 174.701
[info]   CI (99.9%): [15503.873, 16849.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1439.664 ±(99.9%) 46.888 MB/sec [Average]
[info]   (min, avg, max) = (1420.944, 1439.664, 1452.171), stdev = 12.177
[info]   CI (99.9%): [1392.776, 1486.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140078.153 ±(99.9%) 2419.202 B/op [Average]
[info]   (min, avg, max) = (139018.267, 140078.153, 140558.409), stdev = 628.259
[info]   CI (99.9%): [137658.951, 142497.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.222 ±(99.9%) 8.820 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.222, 6.038), stdev = 2.291
[info]   CI (99.9%): [≈ 0, 12.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1352.017 ±(99.9%) 6.377 MB/sec [Average]
[info]   (min, avg, max) = (1349.991, 1352.017, 1354.309), stdev = 1.656
[info]   CI (99.9%): [1345.641, 1358.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   131558.764 ±(99.9%) 5387.921 B/op [Average]
[info]   (min, avg, max) = (130525.733, 131558.764, 133740.887), stdev = 1399.226
[info]   CI (99.9%): [126170.844, 136946.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:12:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3985.671 ops/s
[info] # Warmup Iteration   2: 14384.707 ops/s
[info] # Warmup Iteration   3: 15820.759 ops/s
[info] # Warmup Iteration   4: 15474.509 ops/s
[info] # Warmup Iteration   5: 15821.808 ops/s
[info] Iteration   1: 15874.698 ops/s
[info]                  ·gc.alloc.rate:                   1266.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              125611.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133664.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15865.683 ops/s
[info]                  ·gc.alloc.rate:                   1264.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              125406.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133814.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 15539.524 ops/s
[info]                  ·gc.alloc.rate:                   1261.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              127809.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136713.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15891.992 ops/s
[info]                  ·gc.alloc.rate:                   1259.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              124754.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133751.987 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15604.876 ops/s
[info]                  ·gc.alloc.rate:                   1223.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              123369.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68122.505 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   15755.355 ±(99.9%) 650.950 ops/s [Average]
[info]   (min, avg, max) = (15539.524, 15755.355, 15891.992), stdev = 169.050
[info]   CI (99.9%): [15104.404, 16406.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1255.167 ±(99.9%) 68.988 MB/sec [Average]
[info]   (min, avg, max) = (1223.473, 1255.167, 1266.757), stdev = 17.916
[info]   CI (99.9%): [1186.179, 1324.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   125390.383 ±(99.9%) 6206.328 B/op [Average]
[info]   (min, avg, max) = (123369.109, 125390.383, 127809.583), stdev = 1611.764
[info]   CI (99.9%): [119184.055, 131596.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.665 ±(99.9%) 6.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.665, 4.199), stdev = 1.752
[info]   CI (99.9%): [≈ 0, 8.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1214.531 ±(99.9%) 1160.132 MB/sec [Average]
[info]   (min, avg, max) = (675.583, 1214.531, 1350.437), stdev = 301.283
[info]   CI (99.9%): [54.398, 2374.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   121213.300 ±(99.9%) 114389.374 B/op [Average]
[info]   (min, avg, max) = (68122.505, 121213.300, 136713.586), stdev = 29706.557
[info]   CI (99.9%): [6823.926, 235602.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 447050.502 ops/s
[info] # Warmup Iteration   2: 541554.048 ops/s
[info] # Warmup Iteration   3: 555831.277 ops/s
[info] # Warmup Iteration   4: 562804.916 ops/s
[info] # Warmup Iteration   5: 556178.898 ops/s
[info] Iteration   1: 563844.547 ops/s
[info]                  ·gc.alloc.rate:                   1499.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              4184.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3755.884 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 564648.272 ops/s
[info]                  ·gc.alloc.rate:                   1510.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              4210.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3752.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 561609.448 ops/s
[info]                  ·gc.alloc.rate:                   1516.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              4251.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5663.882 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 572037.688 ops/s
[info]                  ·gc.alloc.rate:                   1516.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              4173.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3711.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 572982.207 ops/s
[info]                  ·gc.alloc.rate:                   1530.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              4203.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3708.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   567024.433 ±(99.9%) 19795.051 ops/s [Average]
[info]   (min, avg, max) = (561609.448, 567024.433, 572982.207), stdev = 5140.712
[info]   CI (99.9%): [547229.381, 586819.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1514.636 ±(99.9%) 43.289 MB/sec [Average]
[info]   (min, avg, max) = (1499.187, 1514.636, 1530.113), stdev = 11.242
[info]   CI (99.9%): [1471.348, 1557.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4204.743 ±(99.9%) 116.367 B/op [Average]
[info]   (min, avg, max) = (4173.263, 4204.743, 4251.868), stdev = 30.220
[info]   CI (99.9%): [4088.376, 4321.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.070 ±(99.9%) 0.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.175), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1482.215 ±(99.9%) 1158.948 MB/sec [Average]
[info]   (min, avg, max) = (1345.607, 1482.215, 2020.606), stdev = 300.975
[info]   CI (99.9%): [323.268, 2641.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4118.472 ±(99.9%) 3327.699 B/op [Average]
[info]   (min, avg, max) = (3708.830, 4118.472, 5663.882), stdev = 864.193
[info]   CI (99.9%): [790.773, 7446.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:11:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2196.563 ops/s
[info] # Warmup Iteration   2: 11212.973 ops/s
[info] # Warmup Iteration   3: 11597.983 ops/s
[info] # Warmup Iteration   4: 11672.092 ops/s
[info] # Warmup Iteration   5: 11591.019 ops/s
[info] Iteration   1: 11705.208 ops/s
[info]                  ·gc.alloc.rate:                   1557.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              209395.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181270.740 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 11720.822 ops/s
[info]                  ·gc.alloc.rate:                   1579.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              212118.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 271737.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11936.073 ops/s
[info]                  ·gc.alloc.rate:                   1584.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              208889.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178114.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 11760.064 ops/s
[info]                  ·gc.alloc.rate:                   1564.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              209397.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180958.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 11839.434 ops/s
[info]                  ·gc.alloc.rate:                   1599.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              212676.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179839.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   11792.320 ±(99.9%) 368.464 ops/s [Average]
[info]   (min, avg, max) = (11705.208, 11792.320, 11936.073), stdev = 95.689
[info]   CI (99.9%): [11423.856, 12160.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1577.042 ±(99.9%) 64.217 MB/sec [Average]
[info]   (min, avg, max) = (1557.145, 1577.042, 1599.620), stdev = 16.677
[info]   CI (99.9%): [1512.825, 1641.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   210495.406 ±(99.9%) 6776.179 B/op [Average]
[info]   (min, avg, max) = (208889.165, 210495.406, 212676.548), stdev = 1759.752
[info]   CI (99.9%): [203719.227, 217271.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.222 ±(99.9%) 8.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.222, 5.571), stdev = 2.329
[info]   CI (99.9%): [≈ 0, 11.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1485.422 ±(99.9%) 1158.130 MB/sec [Average]
[info]   (min, avg, max) = (1348.000, 1485.422, 2023.433), stdev = 300.763
[info]   CI (99.9%): [327.292, 2643.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   198383.998 ±(99.9%) 157969.693 B/op [Average]
[info]   (min, avg, max) = (178114.761, 198383.998, 271737.088), stdev = 41024.228
[info]   CI (99.9%): [40414.305, 356353.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:11:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19119.539 ops/s
[info] # Warmup Iteration   2: 41834.201 ops/s
[info] # Warmup Iteration   3: 42296.884 ops/s
[info] # Warmup Iteration   4: 42253.891 ops/s
[info] # Warmup Iteration   5: 42498.432 ops/s
[info] Iteration   1: 42586.457 ops/s
[info]                  ·gc.alloc.rate:                   1367.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              50530.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49874.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 43404.108 ops/s
[info]                  ·gc.alloc.rate:                   1382.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              50102.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48985.560 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 42615.164 ops/s
[info]                  ·gc.alloc.rate:                   1366.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              50479.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49915.790 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 42842.129 ops/s
[info]                  ·gc.alloc.rate:                   1372.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              50429.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49700.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42897.007 ops/s
[info]                  ·gc.alloc.rate:                   1361.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              49954.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49661.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   42868.973 ±(99.9%) 1265.612 ops/s [Average]
[info]   (min, avg, max) = (42586.457, 42868.973, 43404.108), stdev = 328.675
[info]   CI (99.9%): [41603.361, 44134.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1370.008 ±(99.9%) 30.235 MB/sec [Average]
[info]   (min, avg, max) = (1361.295, 1370.008, 1382.058), stdev = 7.852
[info]   CI (99.9%): [1339.774, 1400.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   50299.357 ±(99.9%) 982.744 B/op [Average]
[info]   (min, avg, max) = (49954.658, 50299.357, 50530.783), stdev = 255.215
[info]   CI (99.9%): [49316.613, 51282.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.376 ±(99.9%) 3.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.376, 2.294), stdev = 0.998
[info]   CI (99.9%): [≈ 0, 5.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1351.674 ±(99.9%) 5.468 MB/sec [Average]
[info]   (min, avg, max) = (1349.723, 1351.674, 1353.294), stdev = 1.420
[info]   CI (99.9%): [1346.206, 1357.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   49627.486 ±(99.9%) 1444.319 B/op [Average]
[info]   (min, avg, max) = (48985.560, 49627.486, 49915.790), stdev = 375.085
[info]   CI (99.9%): [48183.167, 51071.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:11:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17416.373 ops/s
[info] # Warmup Iteration   2: 52804.640 ops/s
[info] # Warmup Iteration   3: 52582.496 ops/s
[info] # Warmup Iteration   4: 54534.701 ops/s
[info] # Warmup Iteration   5: 53970.258 ops/s
[info] Iteration   1: 54538.826 ops/s
[info]                  ·gc.alloc.rate:                   1482.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              42778.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38925.854 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 54332.306 ops/s
[info]                  ·gc.alloc.rate:                   1470.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              42583.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39106.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 54580.989 ops/s
[info]                  ·gc.alloc.rate:                   1488.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              42925.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38963.847 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 54207.377 ops/s
[info]                  ·gc.alloc.rate:                   1478.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              42934.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39260.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 54617.260 ops/s
[info]                  ·gc.alloc.rate:                   1489.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              42922.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39003.925 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   54455.351 ±(99.9%) 682.332 ops/s [Average]
[info]   (min, avg, max) = (54207.377, 54455.351, 54617.260), stdev = 177.199
[info]   CI (99.9%): [53773.020, 55137.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1481.818 ±(99.9%) 30.644 MB/sec [Average]
[info]   (min, avg, max) = (1470.155, 1481.818, 1489.321), stdev = 7.958
[info]   CI (99.9%): [1451.174, 1512.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   42828.954 ±(99.9%) 583.675 B/op [Average]
[info]   (min, avg, max) = (42583.837, 42828.954, 42934.490), stdev = 151.579
[info]   CI (99.9%): [42245.278, 43412.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.444 ±(99.9%) 4.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.444, 3.001), stdev = 1.091
[info]   CI (99.9%): [≈ 0, 5.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1351.137 ±(99.9%) 6.934 MB/sec [Average]
[info]   (min, avg, max) = (1348.672, 1351.137, 1353.351), stdev = 1.801
[info]   CI (99.9%): [1344.203, 1358.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39052.302 ±(99.9%) 518.992 B/op [Average]
[info]   (min, avg, max) = (38925.854, 39052.302, 39260.920), stdev = 134.780
[info]   CI (99.9%): [38533.311, 39571.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 779219.082 ops/s
[info] # Warmup Iteration   2: 985134.052 ops/s
[info] # Warmup Iteration   3: 949652.757 ops/s
[info] # Warmup Iteration   4: 991487.719 ops/s
[info] # Warmup Iteration   5: 1011780.119 ops/s
[info] Iteration   1: 1011916.210 ops/s
[info]                  ·gc.alloc.rate:                   959.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              1491.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2091.845 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1014531.558 ops/s
[info]                  ·gc.alloc.rate:                   946.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              1469.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1042.703 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1013320.354 ops/s
[info]                  ·gc.alloc.rate:                   941.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              1463.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1043.965 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1008890.225 ops/s
[info]                  ·gc.alloc.rate:                   950.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              1483.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2097.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1013823.694 ops/s
[info]                  ·gc.alloc.rate:                   937.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              1455.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1043.367 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1012496.408 ±(99.9%) 8593.840 ops/s [Average]
[info]   (min, avg, max) = (1008890.225, 1012496.408, 1014531.558), stdev = 2231.793
[info]   CI (99.9%): [1003902.568, 1021090.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   947.257 ±(99.9%) 31.481 MB/sec [Average]
[info]   (min, avg, max) = (937.849, 947.257, 959.056), stdev = 8.176
[info]   CI (99.9%): [915.776, 978.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1472.684 ±(99.9%) 56.881 B/op [Average]
[info]   (min, avg, max) = (1455.647, 1472.684, 1491.999), stdev = 14.772
[info]   CI (99.9%): [1415.803, 1529.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.130), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.963 ±(99.9%) 1417.833 MB/sec [Average]
[info]   (min, avg, max) = (671.947, 940.963, 1344.637), stdev = 368.207
[info]   CI (99.9%): [≈ 0, 2358.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1463.780 ±(99.9%) 2216.845 B/op [Average]
[info]   (min, avg, max) = (1042.703, 1463.780, 2097.021), stdev = 575.708
[info]   CI (99.9%): [≈ 0, 3680.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 853016.181 ops/s
[info] # Warmup Iteration   2: 1096512.839 ops/s
[info] # Warmup Iteration   3: 1133657.142 ops/s
[info] # Warmup Iteration   4: 1137233.099 ops/s
[info] # Warmup Iteration   5: 1138304.352 ops/s
[info] Iteration   1: 1138938.572 ops/s
[info]                  ·gc.alloc.rate:      1.195 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.652 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1111854.207 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1140230.841 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1139992.432 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1139629.837 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1134129.178 ±(99.9%) 47985.339 ops/s [Average]
[info]   (min, avg, max) = (1111854.207, 1134129.178, 1140230.841), stdev = 12461.640
[info]   CI (99.9%): [1086143.839, 1182114.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.239 ±(99.9%) 2.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.239, 1.195), stdev = 0.534
[info]   CI (99.9%): [≈ 0, 2.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.331 ±(99.9%) 2.844 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.331, 1.652), stdev = 0.739
[info]   CI (99.9%): [≈ 0, 3.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19841.608 ops/s
[info] # Warmup Iteration   2: 39477.434 ops/s
[info] # Warmup Iteration   3: 39754.992 ops/s
[info] # Warmup Iteration   4: 39560.762 ops/s
[info] # Warmup Iteration   5: 39112.890 ops/s
[info] Iteration   1: 39115.703 ops/s
[info]                  ·gc.alloc.rate:                   1206.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              48529.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27123.659 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 38863.560 ops/s
[info]                  ·gc.alloc.rate:                   1212.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              49124.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54625.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 39019.133 ops/s
[info]                  ·gc.alloc.rate:                   1211.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              48845.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54462.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39044.069 ops/s
[info]                  ·gc.alloc.rate:                   1232.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              49696.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54466.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 39671.913 ops/s
[info]                  ·gc.alloc.rate:                   1225.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              48629.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26809.656 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   39142.875 ±(99.9%) 1192.629 ops/s [Average]
[info]   (min, avg, max) = (38863.560, 39142.875, 39671.913), stdev = 309.722
[info]   CI (99.9%): [37950.246, 40335.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1217.796 ±(99.9%) 42.549 MB/sec [Average]
[info]   (min, avg, max) = (1206.156, 1217.796, 1232.790), stdev = 11.050
[info]   CI (99.9%): [1175.247, 1260.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   48965.167 ±(99.9%) 1803.511 B/op [Average]
[info]   (min, avg, max) = (48529.700, 48965.167, 49696.936), stdev = 468.366
[info]   CI (99.9%): [47161.656, 50768.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.670 ±(99.9%) 2.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 1.686), stdev = 0.704
[info]   CI (99.9%): [≈ 0, 3.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1080.089 ±(99.9%) 1424.157 MB/sec [Average]
[info]   (min, avg, max) = (674.131, 1080.089, 1351.112), stdev = 369.849
[info]   CI (99.9%): [≈ 0, 2504.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   43497.765 ±(99.9%) 58111.296 B/op [Average]
[info]   (min, avg, max) = (26809.656, 43497.765, 54625.978), stdev = 15091.319
[info]   CI (99.9%): [≈ 0, 101609.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74973.369 ops/s
[info] # Warmup Iteration   2: 120078.734 ops/s
[info] # Warmup Iteration   3: 125171.878 ops/s
[info] # Warmup Iteration   4: 123300.510 ops/s
[info] # Warmup Iteration   5: 125257.543 ops/s
[info] Iteration   1: 126548.299 ops/s
[info]                  ·gc.alloc.rate:                   1792.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              22301.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16723.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 126287.509 ops/s
[info]                  ·gc.alloc.rate:                   1814.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              22622.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25158.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 124100.890 ops/s
[info]                  ·gc.alloc.rate:                   1797.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              22793.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25644.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 124861.310 ops/s
[info]                  ·gc.alloc.rate:                   1794.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              22612.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17011.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 126329.263 ops/s
[info]                  ·gc.alloc.rate:                   1843.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              22963.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25257.943 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   125625.454 ±(99.9%) 4171.120 ops/s [Average]
[info]   (min, avg, max) = (124100.890, 125625.454, 126548.299), stdev = 1083.227
[info]   CI (99.9%): [121454.334, 129796.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1808.380 ±(99.9%) 82.224 MB/sec [Average]
[info]   (min, avg, max) = (1792.768, 1808.380, 1843.061), stdev = 21.353
[info]   CI (99.9%): [1726.155, 1890.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22658.781 ±(99.9%) 947.444 B/op [Average]
[info]   (min, avg, max) = (22301.445, 22658.781, 22963.362), stdev = 246.048
[info]   CI (99.9%): [21711.338, 23606.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.522 ±(99.9%) 1.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.522, 0.792), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 1.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1752.296 ±(99.9%) 1424.800 MB/sec [Average]
[info]   (min, avg, max) = (1344.331, 1752.296, 2027.227), stdev = 370.016
[info]   CI (99.9%): [327.496, 3177.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21959.189 ±(99.9%) 17916.990 B/op [Average]
[info]   (min, avg, max) = (16723.033, 21959.189, 25644.774), stdev = 4652.985
[info]   CI (99.9%): [4042.199, 39876.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.754 ops/s
[info] # Warmup Iteration   2: 340757.117 ops/s
[info] # Warmup Iteration   3: 350543.184 ops/s
[info] # Warmup Iteration   4: 353654.167 ops/s
[info] # Warmup Iteration   5: 354579.917 ops/s
[info] Iteration   1: 355634.819 ops/s
[info]                  ·gc.alloc.rate:                   726.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              3213.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2965.760 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 353756.418 ops/s
[info]                  ·gc.alloc.rate:                   729.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              3247.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2981.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 354611.236 ops/s
[info]                  ·gc.alloc.rate:                   732.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              3249.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2971.358 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 355187.793 ops/s
[info]                  ·gc.alloc.rate:                   733.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              3251.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2966.507 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 351852.029 ops/s
[info]                  ·gc.alloc.rate:                   719.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              3218.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2994.731 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   354208.459 ±(99.9%) 5747.960 ops/s [Average]
[info]   (min, avg, max) = (351852.029, 354208.459, 355634.819), stdev = 1492.727
[info]   CI (99.9%): [348460.499, 359956.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   728.196 ±(99.9%) 21.816 MB/sec [Average]
[info]   (min, avg, max) = (719.477, 728.196, 733.720), stdev = 5.665
[info]   CI (99.9%): [706.380, 750.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3236.214 ±(99.9%) 70.566 B/op [Average]
[info]   (min, avg, max) = (3213.712, 3236.214, 3251.783), stdev = 18.326
[info]   CI (99.9%): [3165.648, 3306.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.111 ±(99.9%) 0.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.277), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   669.622 ±(99.9%) 1.404 MB/sec [Average]
[info]   (min, avg, max) = (669.351, 669.622, 670.045), stdev = 0.365
[info]   CI (99.9%): [668.218, 671.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2975.958 ±(99.9%) 47.039 B/op [Average]
[info]   (min, avg, max) = (2965.760, 2975.958, 2994.731), stdev = 12.216
[info]   CI (99.9%): [2928.919, 3022.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:09:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111781.920 ops/s
[info] # Warmup Iteration   2: 238034.787 ops/s
[info] # Warmup Iteration   3: 246489.803 ops/s
[info] # Warmup Iteration   4: 247499.403 ops/s
[info] # Warmup Iteration   5: 237859.623 ops/s
[info] Iteration   1: 247197.524 ops/s
[info]                  ·gc.alloc.rate:                   556.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              3546.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4292.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 247791.895 ops/s
[info]                  ·gc.alloc.rate:                   559.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              3556.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4281.629 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 248481.894 ops/s
[info]                  ·gc.alloc.rate:                   563.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              3569.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4269.896 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 249320.291 ops/s
[info]                  ·gc.alloc.rate:      548.168 MB/sec
[info]                  ·gc.alloc.rate.norm: 3460.349 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 248611.695 ops/s
[info]                  ·gc.alloc.rate:                   571.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              3617.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4267.630 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   248280.660 ±(99.9%) 3130.046 ops/s [Average]
[info]   (min, avg, max) = (247197.524, 248280.660, 249320.291), stdev = 812.863
[info]   CI (99.9%): [245150.613, 251410.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   560.005 ±(99.9%) 32.943 MB/sec [Average]
[info]   (min, avg, max) = (548.168, 560.005, 571.440), stdev = 8.555
[info]   CI (99.9%): [527.063, 592.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3550.192 ±(99.9%) 220.375 B/op [Average]
[info]   (min, avg, max) = (3460.349, 3550.192, 3617.972), stdev = 57.231
[info]   CI (99.9%): [3329.818, 3770.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.216 ±(99.9%) 1.775 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 1.041), stdev = 0.461
[info]   CI (99.9%): [≈ 0, 1.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.378 ±(99.9%) 11.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.378, 6.627), stdev = 2.935
[info]   CI (99.9%): [≈ 0, 12.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.253 ±(99.9%) 1160.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.253, 674.120), stdev = 301.451
[info]   CI (99.9%): [≈ 0, 1700.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3422.242 ±(99.9%) 7366.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3422.242, 4292.054), stdev = 1913.116
[info]   CI (99.9%): [≈ 0, 10788.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 367095.909 ops/s
[info] # Warmup Iteration   2: 461848.913 ops/s
[info] # Warmup Iteration   3: 468312.013 ops/s
[info] # Warmup Iteration   4: 463643.372 ops/s
[info] # Warmup Iteration   5: 467863.780 ops/s
[info] Iteration   1: 480645.678 ops/s
[info]                  ·gc.alloc.rate:                   620.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              2031.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2207.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 483014.842 ops/s
[info]                  ·gc.alloc.rate:                   634.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              2066.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2194.427 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 482975.687 ops/s
[info]                  ·gc.alloc.rate:                   634.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              2066.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2194.577 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 483071.202 ops/s
[info]                  ·gc.alloc.rate:                   625.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              2037.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2191.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 481418.968 ops/s
[info]                  ·gc.alloc.rate:                   631.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              2063.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2199.555 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   482225.275 ±(99.9%) 4325.502 ops/s [Average]
[info]   (min, avg, max) = (480645.678, 482225.275, 483071.202), stdev = 1123.319
[info]   CI (99.9%): [477899.774, 486550.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   629.090 ±(99.9%) 22.995 MB/sec [Average]
[info]   (min, avg, max) = (620.579, 629.090, 634.215), stdev = 5.972
[info]   CI (99.9%): [606.095, 652.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2053.247 ±(99.9%) 65.948 B/op [Average]
[info]   (min, avg, max) = (2031.804, 2053.247, 2066.835), stdev = 17.127
[info]   CI (99.9%): [1987.298, 2119.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.573 ±(99.9%) 4.617 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.573, 2.717), stdev = 1.199
[info]   CI (99.9%): [≈ 0, 5.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.874 ±(99.9%) 15.116 B/op [Average]
[info]   (min, avg, max) = (0.068, 1.874, 8.895), stdev = 3.925
[info]   CI (99.9%): [≈ 0, 16.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.309 ±(99.9%) 2.357 MB/sec [Average]
[info]   (min, avg, max) = (672.736, 673.309, 674.219), stdev = 0.612
[info]   CI (99.9%): [670.953, 675.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2197.594 ±(99.9%) 23.662 B/op [Average]
[info]   (min, avg, max) = (2191.985, 2197.594, 2207.423), stdev = 6.145
[info]   CI (99.9%): [2173.931, 2221.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9127.226 ops/s
[info] # Warmup Iteration   2: 70516.346 ops/s
[info] # Warmup Iteration   3: 71449.411 ops/s
[info] # Warmup Iteration   4: 72753.102 ops/s
[info] # Warmup Iteration   5: 72345.753 ops/s
[info] Iteration   1: 73711.282 ops/s
[info]                  ·gc.alloc.rate:                   3065.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              65472.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57810.981 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 73604.318 ops/s
[info]                  ·gc.alloc.rate:                   3130.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              66931.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3390.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72469.746 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 72075.350 ops/s
[info]                  ·gc.alloc.rate:                   3041.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              66420.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59304.780 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 72597.381 ops/s
[info]                  ·gc.alloc.rate:                   3062.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              66393.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58936.187 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 72101.345 ops/s
[info]                  ·gc.alloc.rate:                   3057.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              66724.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74150.247 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   72817.935 ±(99.9%) 3062.439 ops/s [Average]
[info]   (min, avg, max) = (72075.350, 72817.935, 73711.282), stdev = 795.306
[info]   CI (99.9%): [69755.496, 75880.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3071.791 ±(99.9%) 132.346 MB/sec [Average]
[info]   (min, avg, max) = (3041.825, 3071.791, 3130.991), stdev = 34.370
[info]   CI (99.9%): [2939.445, 3204.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66388.281 ±(99.9%) 2150.418 B/op [Average]
[info]   (min, avg, max) = (65472.350, 66388.281, 66931.139), stdev = 558.457
[info]   CI (99.9%): [64237.863, 68538.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.068 ±(99.9%) 2.910 B/op [Average]
[info]   (min, avg, max) = (1.354, 2.068, 3.177), stdev = 0.756
[info]   CI (99.9%): [≈ 0, 4.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2985.931 ±(99.9%) 1433.941 MB/sec [Average]
[info]   (min, avg, max) = (2707.086, 2985.931, 3397.569), stdev = 372.390
[info]   CI (99.9%): [1551.990, 4419.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64534.388 ±(99.9%) 31004.709 B/op [Average]
[info]   (min, avg, max) = (57810.981, 64534.388, 74150.247), stdev = 8051.824
[info]   CI (99.9%): [33529.679, 95539.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52844.319 ops/s
[info] # Warmup Iteration   2: 122634.081 ops/s
[info] # Warmup Iteration   3: 121983.050 ops/s
[info] # Warmup Iteration   4: 126225.017 ops/s
[info] # Warmup Iteration   5: 126559.173 ops/s
[info] Iteration   1: 126577.129 ops/s
[info]                  ·gc.alloc.rate:                   713.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              8867.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8382.512 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 126508.739 ops/s
[info]                  ·gc.alloc.rate:                   712.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              8863.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8386.818 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 126671.092 ops/s
[info]                  ·gc.alloc.rate:                   710.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              8830.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8376.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 126158.061 ops/s
[info]                  ·gc.alloc.rate:                   702.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              8766.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8409.749 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 126388.567 ops/s
[info]                  ·gc.alloc.rate:                   712.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              8868.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8402.610 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   126460.718 ±(99.9%) 762.686 ops/s [Average]
[info]   (min, avg, max) = (126158.061, 126460.718, 126671.092), stdev = 198.067
[info]   CI (99.9%): [125698.032, 127223.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   710.180 ±(99.9%) 16.465 MB/sec [Average]
[info]   (min, avg, max) = (702.689, 710.180, 713.033), stdev = 4.276
[info]   CI (99.9%): [693.715, 726.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8839.323 ±(99.9%) 168.640 B/op [Average]
[info]   (min, avg, max) = (8766.037, 8839.323, 8868.163), stdev = 43.795
[info]   CI (99.9%): [8670.682, 9007.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.259 ±(99.9%) 1.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.259, 0.779), stdev = 0.318
[info]   CI (99.9%): [≈ 0, 1.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   674.201 ±(99.9%) 1.089 MB/sec [Average]
[info]   (min, avg, max) = (674.035, 674.201, 674.703), stdev = 0.283
[info]   CI (99.9%): [673.112, 675.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8391.556 ±(99.9%) 54.337 B/op [Average]
[info]   (min, avg, max) = (8376.094, 8391.556, 8409.749), stdev = 14.111
[info]   CI (99.9%): [8337.219, 8445.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.890 ops/s
[info] # Warmup Iteration   2: 196058.356 ops/s
[info] # Warmup Iteration   3: 201697.185 ops/s
[info] # Warmup Iteration   4: 207056.427 ops/s
[info] # Warmup Iteration   5: 206899.636 ops/s
[info] Iteration   1: 205266.065 ops/s
[info]                  ·gc.alloc.rate:                   168.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              1289.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3922.641 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 207013.193 ops/s
[info]                  ·gc.alloc.rate:      162.038 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 205261.971 ops/s
[info]                  ·gc.alloc.rate:      160.678 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 203060.171 ops/s
[info]                  ·gc.alloc.rate:                   170.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              1318.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3965.327 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 206822.584 ops/s
[info]                  ·gc.alloc.rate:      161.946 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   205484.797 ±(99.9%) 6119.367 ops/s [Average]
[info]   (min, avg, max) = (203060.171, 205484.797, 207013.193), stdev = 1589.180
[info]   CI (99.9%): [199365.430, 211604.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   164.579 ±(99.9%) 16.281 MB/sec [Average]
[info]   (min, avg, max) = (160.678, 164.579, 170.050), stdev = 4.228
[info]   CI (99.9%): [148.298, 180.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1260.762 ±(99.9%) 156.492 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1260.762, 1318.097), stdev = 40.640
[info]   CI (99.9%): [1104.270, 1417.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.032 ±(99.9%) 0.278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.161), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   204.619 ±(99.9%) 1078.897 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.619, 511.574), stdev = 280.186
[info]   CI (99.9%): [≈ 0, 1283.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1577.594 ±(99.9%) 8318.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1577.594, 3965.327), stdev = 2160.262
[info]   CI (99.9%): [≈ 0, 9895.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216382.504 ops/s
[info] # Warmup Iteration   2: 387504.028 ops/s
[info] # Warmup Iteration   3: 397338.625 ops/s
[info] # Warmup Iteration   4: 396174.439 ops/s
[info] # Warmup Iteration   5: 396412.675 ops/s
[info] Iteration   1: 390879.794 ops/s
[info]                  ·gc.alloc.rate:                   406.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              1637.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2711.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 395597.657 ops/s
[info]                  ·gc.alloc.rate:      388.414 MB/sec
[info]                  ·gc.alloc.rate.norm: 1545.070 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 395553.842 ops/s
[info]                  ·gc.alloc.rate:                   401.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              1596.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2679.631 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 396781.013 ops/s
[info]                  ·gc.alloc.rate:      389.223 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 396729.159 ops/s
[info]                  ·gc.alloc.rate:                   408.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              1620.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2674.224 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   395108.293 ±(99.9%) 9381.554 ops/s [Average]
[info]   (min, avg, max) = (390879.794, 395108.293, 396781.013), stdev = 2436.360
[info]   CI (99.9%): [385726.739, 404489.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   398.808 ±(99.9%) 36.576 MB/sec [Average]
[info]   (min, avg, max) = (388.414, 398.808, 408.422), stdev = 9.499
[info]   CI (99.9%): [362.233, 435.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1588.733 ±(99.9%) 165.143 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1588.733, 1637.484), stdev = 42.887
[info]   CI (99.9%): [1423.590, 1753.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.162 ±(99.9%) 1.398 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.812), stdev = 0.363
[info]   CI (99.9%): [≈ 0, 1.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.646 ±(99.9%) 5.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.646, 3.230), stdev = 1.445
[info]   CI (99.9%): [≈ 0, 6.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.195 ±(99.9%) 1420.802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.195, 673.980), stdev = 368.978
[info]   CI (99.9%): [≈ 0, 1824.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1613.107 ±(99.9%) 5670.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1613.107, 2711.682), stdev = 1472.628
[info]   CI (99.9%): [≈ 0, 7283.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:08:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348964.229 ops/s
[info] # Warmup Iteration   2: 423531.137 ops/s
[info] # Warmup Iteration   3: 435788.087 ops/s
[info] # Warmup Iteration   4: 443637.902 ops/s
[info] # Warmup Iteration   5: 439829.369 ops/s
[info] Iteration   1: 441829.820 ops/s
[info]                  ·gc.alloc.rate:                   354.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              1261.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1822.339 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 445551.451 ops/s
[info]                  ·gc.alloc.rate:      348.743 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 441019.402 ops/s
[info]                  ·gc.alloc.rate:                   363.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              1298.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2410.470 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 442868.390 ops/s
[info]                  ·gc.alloc.rate:      346.987 MB/sec
[info]                  ·gc.alloc.rate.norm: 1233.296 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 439393.069 ops/s
[info]                  ·gc.alloc.rate:                   365.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              1308.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2419.400 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   442132.426 ±(99.9%) 8836.755 ops/s [Average]
[info]   (min, avg, max) = (439393.069, 442132.426, 445551.451), stdev = 2294.877
[info]   CI (99.9%): [433295.672, 450969.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   355.759 ±(99.9%) 32.438 MB/sec [Average]
[info]   (min, avg, max) = (346.987, 355.759, 365.239), stdev = 8.424
[info]   CI (99.9%): [323.320, 388.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1266.663 ±(99.9%) 137.321 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1266.663, 1308.381), stdev = 35.662
[info]   CI (99.9%): [1129.342, 1403.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.514 ±(99.9%) 4.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.560), stdev = 1.144
[info]   CI (99.9%): [≈ 0, 4.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.842 ±(99.9%) 15.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.842, 9.171), stdev = 4.097
[info]   CI (99.9%): [≈ 0, 17.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   372.462 ±(99.9%) 1334.376 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372.462, 675.440), stdev = 346.533
[info]   CI (99.9%): [≈ 0, 1706.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1330.442 ±(99.9%) 4768.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1330.442, 2419.400), stdev = 1238.387
[info]   CI (99.9%): [≈ 0, 6099.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 359465.248 ops/s
[info] # Warmup Iteration   2: 459013.552 ops/s
[info] # Warmup Iteration   3: 442979.457 ops/s
[info] # Warmup Iteration   4: 467600.624 ops/s
[info] # Warmup Iteration   5: 467564.318 ops/s
[info] Iteration   1: 467848.462 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 467192.010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 467497.040 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 467292.727 ops/s
[info]                  ·gc.alloc.rate:      0.304 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 467284.208 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   467422.890 ±(99.9%) 1011.647 ops/s [Average]
[info]   (min, avg, max) = (467192.010, 467422.890, 467848.462), stdev = 262.722
[info]   CI (99.9%): [466411.242, 468434.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.061 ±(99.9%) 0.524 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.061, 0.304), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.206 ±(99.9%) 1.765 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.206, 1.026), stdev = 0.458
[info]   CI (99.9%): [≈ 0, 1.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11496.630 ops/s
[info] # Warmup Iteration   2: 25819.933 ops/s
[info] # Warmup Iteration   3: 26052.495 ops/s
[info] # Warmup Iteration   4: 26859.863 ops/s
[info] # Warmup Iteration   5: 26733.038 ops/s
[info] Iteration   1: 27002.680 ops/s
[info]                  ·gc.alloc.rate:                   1374.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              80133.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78664.555 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26953.776 ops/s
[info]                  ·gc.alloc.rate:                   1367.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              79796.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78843.518 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26997.229 ops/s
[info]                  ·gc.alloc.rate:                   1363.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              79488.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78756.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26911.940 ops/s
[info]                  ·gc.alloc.rate:                   1370.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              80173.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79083.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26928.397 ops/s
[info]                  ·gc.alloc.rate:                   1370.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              80107.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79114.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   26958.805 ±(99.9%) 155.793 ops/s [Average]
[info]   (min, avg, max) = (26911.940, 26958.805, 27002.680), stdev = 40.459
[info]   CI (99.9%): [26803.011, 27114.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1369.380 ±(99.9%) 16.598 MB/sec [Average]
[info]   (min, avg, max) = (1363.450, 1369.380, 1374.811), stdev = 4.310
[info]   CI (99.9%): [1352.782, 1385.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79940.037 ±(99.9%) 1129.775 B/op [Average]
[info]   (min, avg, max) = (79488.885, 79940.037, 80173.596), stdev = 293.399
[info]   CI (99.9%): [78810.262, 81069.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.485 ±(99.9%) 2.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.485, 1.214), stdev = 0.665
[info]   CI (99.9%): [≈ 0, 3.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1351.435 ±(99.9%) 6.216 MB/sec [Average]
[info]   (min, avg, max) = (1349.602, 1351.435, 1353.821), stdev = 1.614
[info]   CI (99.9%): [1345.219, 1357.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78892.517 ±(99.9%) 766.321 B/op [Average]
[info]   (min, avg, max) = (78664.555, 78892.517, 79114.304), stdev = 199.011
[info]   CI (99.9%): [78126.197, 79658.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2084.868 ops/s
[info] # Warmup Iteration   2: 7540.089 ops/s
[info] # Warmup Iteration   3: 7760.991 ops/s
[info] # Warmup Iteration   4: 7799.976 ops/s
[info] # Warmup Iteration   5: 7873.941 ops/s
[info] Iteration   1: 7862.653 ops/s
[info]                  ·gc.alloc.rate:                   1095.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              219294.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134938.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7747.670 ops/s
[info]                  ·gc.alloc.rate:                   1105.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              224644.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 273982.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7809.522 ops/s
[info]                  ·gc.alloc.rate:                   1101.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              222058.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272044.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7789.469 ops/s
[info]                  ·gc.alloc.rate:                   1084.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              219029.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136405.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7870.954 ops/s
[info]                  ·gc.alloc.rate:                   1109.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              221789.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 270235.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7816.053 ±(99.9%) 198.329 ops/s [Average]
[info]   (min, avg, max) = (7747.670, 7816.053, 7870.954), stdev = 51.506
[info]   CI (99.9%): [7617.724, 8014.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1099.278 ±(99.9%) 37.898 MB/sec [Average]
[info]   (min, avg, max) = (1084.189, 1099.278, 1109.150), stdev = 9.842
[info]   CI (99.9%): [1061.379, 1137.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   221363.323 ±(99.9%) 8855.833 B/op [Average]
[info]   (min, avg, max) = (219029.729, 221363.323, 224644.245), stdev = 2299.832
[info]   CI (99.9%): [212507.490, 230219.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.202 ±(99.9%) 16.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.202, 8.456), stdev = 4.212
[info]   CI (99.9%): [≈ 0, 20.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1079.820 ±(99.9%) 1424.168 MB/sec [Average]
[info]   (min, avg, max) = (674.138, 1079.820, 1351.422), stdev = 369.852
[info]   CI (99.9%): [≈ 0, 2503.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   217521.233 ±(99.9%) 287763.980 B/op [Average]
[info]   (min, avg, max) = (134938.824, 217521.233, 273982.761), stdev = 74731.392
[info]   CI (99.9%): [≈ 0, 505285.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:06:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1827.326 ops/s
[info] # Warmup Iteration   2: 7032.828 ops/s
[info] # Warmup Iteration   3: 7418.830 ops/s
[info] # Warmup Iteration   4: 7309.360 ops/s
[info] # Warmup Iteration   5: 7257.223 ops/s
[info] Iteration   1: 7332.057 ops/s
[info]                  ·gc.alloc.rate:                   972.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              208814.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144833.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7300.190 ops/s
[info]                  ·gc.alloc.rate:                   991.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              213877.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 290936.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7314.534 ops/s
[info]                  ·gc.alloc.rate:                   974.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              209650.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145189.651 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7332.037 ops/s
[info]                  ·gc.alloc.rate:                   971.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              208607.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144904.796 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7365.005 ops/s
[info]                  ·gc.alloc.rate:                   1004.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              214686.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 288582.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   7328.765 ±(99.9%) 93.412 ops/s [Average]
[info]   (min, avg, max) = (7300.190, 7328.765, 7365.005), stdev = 24.259
[info]   CI (99.9%): [7235.353, 7422.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   983.120 ±(99.9%) 55.842 MB/sec [Average]
[info]   (min, avg, max) = (971.868, 983.120, 1004.509), stdev = 14.502
[info]   CI (99.9%): [927.278, 1038.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   211127.228 ±(99.9%) 11244.092 B/op [Average]
[info]   (min, avg, max) = (208607.511, 211127.228, 214686.424), stdev = 2920.055
[info]   CI (99.9%): [199883.136, 222371.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.582 ±(99.9%) 18.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.582, 8.975), stdev = 4.905
[info]   CI (99.9%): [≈ 0, 22.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.851 ±(99.9%) 1423.366 MB/sec [Average]
[info]   (min, avg, max) = (674.765, 944.851, 1350.266), stdev = 369.644
[info]   CI (99.9%): [≈ 0, 2368.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   202889.275 ±(99.9%) 305377.650 B/op [Average]
[info]   (min, avg, max) = (144833.309, 202889.275, 290936.042), stdev = 79305.606
[info]   CI (99.9%): [≈ 0, 508266.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:06:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118760.842 ops/s
[info] # Warmup Iteration   2: 175028.545 ops/s
[info] # Warmup Iteration   3: 178461.210 ops/s
[info] # Warmup Iteration   4: 178736.075 ops/s
[info] # Warmup Iteration   5: 177806.068 ops/s
[info] Iteration   1: 180614.035 ops/s
[info]                  ·gc.alloc.rate:                   1778.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              15499.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11746.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 179733.117 ops/s
[info]                  ·gc.alloc.rate:                   1808.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              15835.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17714.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 180673.342 ops/s
[info]                  ·gc.alloc.rate:                   1804.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              15718.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17648.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 177790.789 ops/s
[info]                  ·gc.alloc.rate:                   1774.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              15711.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11970.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 178783.305 ops/s
[info]                  ·gc.alloc.rate:                   1812.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              15960.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17871.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   179518.917 ±(99.9%) 4757.305 ops/s [Average]
[info]   (min, avg, max) = (177790.789, 179518.917, 180673.342), stdev = 1235.457
[info]   CI (99.9%): [174761.613, 184276.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1795.755 ±(99.9%) 68.748 MB/sec [Average]
[info]   (min, avg, max) = (1774.690, 1795.755, 1812.768), stdev = 17.854
[info]   CI (99.9%): [1727.007, 1864.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15744.941 ±(99.9%) 657.987 B/op [Average]
[info]   (min, avg, max) = (15499.371, 15744.941, 15960.514), stdev = 170.877
[info]   CI (99.9%): [15086.954, 16402.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.029, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.255 ±(99.9%) 0.627 B/op [Average]
[info]   (min, avg, max) = (0.181, 0.255, 0.547), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1755.749 ±(99.9%) 1426.588 MB/sec [Average]
[info]   (min, avg, max) = (1347.709, 1755.749, 2029.761), stdev = 370.480
[info]   CI (99.9%): [329.161, 3182.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15390.047 ±(99.9%) 12422.671 B/op [Average]
[info]   (min, avg, max) = (11746.043, 15390.047, 17871.022), stdev = 3226.128
[info]   CI (99.9%): [2967.376, 27812.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1307.115 ops/s
[info] # Warmup Iteration   2: 6232.880 ops/s
[info] # Warmup Iteration   3: 7302.740 ops/s
[info] # Warmup Iteration   4: 7252.924 ops/s
[info] # Warmup Iteration   5: 7296.870 ops/s
[info] Iteration   1: 7210.950 ops/s
[info]                  ·gc.alloc.rate:                   1209.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              263963.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 294235.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7292.312 ops/s
[info]                  ·gc.alloc.rate:                   1212.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              261622.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145483.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7304.234 ops/s
[info]                  ·gc.alloc.rate:                   1223.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              263680.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 290633.233 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7304.570 ops/s
[info]                  ·gc.alloc.rate:                   1220.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              262973.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 290736.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7226.004 ops/s
[info]                  ·gc.alloc.rate:                   1216.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              264968.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 294204.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7267.614 ±(99.9%) 174.971 ops/s [Average]
[info]   (min, avg, max) = (7210.950, 7267.614, 7304.570), stdev = 45.439
[info]   CI (99.9%): [7092.643, 7442.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1216.356 ±(99.9%) 22.533 MB/sec [Average]
[info]   (min, avg, max) = (1209.276, 1216.356, 1223.582), stdev = 5.852
[info]   CI (99.9%): [1193.823, 1238.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   263441.741 ±(99.9%) 4789.098 B/op [Average]
[info]   (min, avg, max) = (261622.804, 263441.741, 264968.327), stdev = 1243.714
[info]   CI (99.9%): [258652.643, 268230.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.804 ±(99.9%) 9.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.804, 4.533), stdev = 2.470
[info]   CI (99.9%): [≈ 0, 11.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1214.099 ±(99.9%) 1162.493 MB/sec [Average]
[info]   (min, avg, max) = (674.054, 1214.099, 1350.511), stdev = 301.896
[info]   CI (99.9%): [51.606, 2376.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   263058.778 ±(99.9%) 253180.513 B/op [Average]
[info]   (min, avg, max) = (145483.810, 263058.778, 294235.107), stdev = 65750.175
[info]   CI (99.9%): [9878.265, 516239.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:06:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8415.449 ops/s
[info] # Warmup Iteration   2: 18973.915 ops/s
[info] # Warmup Iteration   3: 19160.760 ops/s
[info] # Warmup Iteration   4: 18627.921 ops/s
[info] # Warmup Iteration   5: 18821.212 ops/s
[info] Iteration   1: 18777.299 ops/s
[info]                  ·gc.alloc.rate:                   797.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              66869.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56557.558 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 19165.209 ops/s
[info]                  ·gc.alloc.rate:                   814.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              66906.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55409.885 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19378.837 ops/s
[info]                  ·gc.alloc.rate:                   822.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              66822.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54800.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 18790.732 ops/s
[info]                  ·gc.alloc.rate:                   803.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              67311.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56515.429 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 18421.475 ops/s
[info]                  ·gc.alloc.rate:                   812.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              69388.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115363.849 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18906.710 ±(99.9%) 1434.819 ops/s [Average]
[info]   (min, avg, max) = (18421.475, 18906.710, 19378.837), stdev = 372.618
[info]   CI (99.9%): [17471.892, 20341.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   810.228 ±(99.9%) 38.041 MB/sec [Average]
[info]   (min, avg, max) = (797.592, 810.228, 822.975), stdev = 9.879
[info]   CI (99.9%): [772.187, 848.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   67459.563 ±(99.9%) 4218.767 B/op [Average]
[info]   (min, avg, max) = (66822.634, 67459.563, 69388.089), stdev = 1095.600
[info]   CI (99.9%): [63240.797, 71678.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.208), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.953 ±(99.9%) 28.823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.953, 17.785), stdev = 7.485
[info]   CI (99.9%): [≈ 0, 33.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   809.866 ±(99.9%) 1163.350 MB/sec [Average]
[info]   (min, avg, max) = (674.597, 809.866, 1350.312), stdev = 302.118
[info]   CI (99.9%): [≈ 0, 1973.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   67729.541 ±(99.9%) 102576.816 B/op [Average]
[info]   (min, avg, max) = (54800.985, 67729.541, 115363.849), stdev = 26638.873
[info]   CI (99.9%): [≈ 0, 170306.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:05:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9606.928 ops/s
[info] # Warmup Iteration   2: 22517.718 ops/s
[info] # Warmup Iteration   3: 23122.566 ops/s
[info] # Warmup Iteration   4: 23746.128 ops/s
[info] # Warmup Iteration   5: 23542.501 ops/s
[info] Iteration   1: 23703.200 ops/s
[info]                  ·gc.alloc.rate:                   953.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              63306.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89522.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23812.618 ops/s
[info]                  ·gc.alloc.rate:                   935.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              61808.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44550.943 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 23792.843 ops/s
[info]                  ·gc.alloc.rate:                   964.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              63775.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89184.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23789.905 ops/s
[info]                  ·gc.alloc.rate:                   937.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              62013.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44641.821 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 23829.023 ops/s
[info]                  ·gc.alloc.rate:                   933.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              61699.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44568.770 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   23785.518 ±(99.9%) 187.423 ops/s [Average]
[info]   (min, avg, max) = (23703.200, 23785.518, 23829.023), stdev = 48.673
[info]   CI (99.9%): [23598.095, 23972.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   944.836 ±(99.9%) 51.586 MB/sec [Average]
[info]   (min, avg, max) = (933.974, 944.836, 964.303), stdev = 13.397
[info]   CI (99.9%): [893.250, 996.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   62520.809 ±(99.9%) 3668.279 B/op [Average]
[info]   (min, avg, max) = (61699.652, 62520.809, 63775.133), stdev = 952.640
[info]   CI (99.9%): [58852.530, 66189.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.826 ±(99.9%) 7.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.826, 4.131), stdev = 1.847
[info]   CI (99.9%): [≈ 0, 7.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.030 ±(99.9%) 1421.134 MB/sec [Average]
[info]   (min, avg, max) = (674.154, 944.030, 1348.498), stdev = 369.064
[info]   CI (99.9%): [≈ 0, 2365.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   62493.725 ±(99.9%) 94417.273 B/op [Average]
[info]   (min, avg, max) = (44550.943, 62493.725, 89522.834), stdev = 24519.866
[info]   CI (99.9%): [≈ 0, 156910.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:05:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237589.357 ops/s
[info] # Warmup Iteration   2: 300075.815 ops/s
[info] # Warmup Iteration   3: 309397.364 ops/s
[info] # Warmup Iteration   4: 309679.358 ops/s
[info] # Warmup Iteration   5: 315800.021 ops/s
[info] Iteration   1: 313202.755 ops/s
[info]                  ·gc.alloc.rate:                   735.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              3695.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3380.916 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 313028.816 ops/s
[info]                  ·gc.alloc.rate:                   731.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              3676.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3382.687 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 313091.047 ops/s
[info]                  ·gc.alloc.rate:                   726.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              3654.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3378.615 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 310173.084 ops/s
[info]                  ·gc.alloc.rate:                   726.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              3685.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3410.536 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 314446.260 ops/s
[info]                  ·gc.alloc.rate:                   733.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              3672.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3364.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   312788.393 ±(99.9%) 6060.778 ops/s [Average]
[info]   (min, avg, max) = (310173.084, 312788.393, 314446.260), stdev = 1573.965
[info]   CI (99.9%): [306727.615, 318849.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   730.642 ±(99.9%) 15.262 MB/sec [Average]
[info]   (min, avg, max) = (726.290, 730.642, 735.217), stdev = 3.963
[info]   CI (99.9%): [715.380, 745.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3676.864 ±(99.9%) 58.012 B/op [Average]
[info]   (min, avg, max) = (3654.813, 3676.864, 3695.066), stdev = 15.066
[info]   CI (99.9%): [3618.852, 3734.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.063 ±(99.9%) 0.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.106), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.311 ±(99.9%) 1.301 MB/sec [Average]
[info]   (min, avg, max) = (672.023, 672.311, 672.710), stdev = 0.338
[info]   CI (99.9%): [671.010, 673.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3383.373 ±(99.9%) 64.949 B/op [Average]
[info]   (min, avg, max) = (3364.112, 3383.373, 3410.536), stdev = 16.867
[info]   CI (99.9%): [3318.424, 3448.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265612.561 ops/s
[info] # Warmup Iteration   2: 289801.004 ops/s
[info] # Warmup Iteration   3: 325983.628 ops/s
[info] # Warmup Iteration   4: 327481.719 ops/s
[info] # Warmup Iteration   5: 337299.983 ops/s
[info] Iteration   1: 346960.487 ops/s
[info]                  ·gc.alloc.rate:      0.085 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.386 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 320751.594 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 329432.702 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 330685.088 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 347951.236 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   335156.221 ±(99.9%) 45695.321 ops/s [Average]
[info]   (min, avg, max) = (320751.594, 335156.221, 347951.236), stdev = 11866.930
[info]   CI (99.9%): [289460.901, 380851.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.017 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.017, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.078 ±(99.9%) 0.663 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.078, 0.386), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 0.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:05:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9549.496 ops/s
[info] # Warmup Iteration   2: 22469.679 ops/s
[info] # Warmup Iteration   3: 22643.571 ops/s
[info] # Warmup Iteration   4: 22547.462 ops/s
[info] # Warmup Iteration   5: 22203.569 ops/s
[info] Iteration   1: 22529.928 ops/s
[info]                  ·gc.alloc.rate:                   975.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              68152.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47091.458 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22606.451 ops/s
[info]                  ·gc.alloc.rate:                   984.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              68510.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93866.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22445.304 ops/s
[info]                  ·gc.alloc.rate:                   970.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              68014.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47267.658 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22456.267 ops/s
[info]                  ·gc.alloc.rate:                   984.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              68999.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94586.597 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22266.498 ops/s
[info]                  ·gc.alloc.rate:                   956.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              67648.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47718.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   22460.890 ±(99.9%) 487.098 ops/s [Average]
[info]   (min, avg, max) = (22266.498, 22460.890, 22606.451), stdev = 126.498
[info]   CI (99.9%): [21973.792, 22947.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   974.184 ±(99.9%) 43.726 MB/sec [Average]
[info]   (min, avg, max) = (956.957, 974.184, 984.391), stdev = 11.356
[info]   CI (99.9%): [930.458, 1017.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68264.990 ±(99.9%) 1977.130 B/op [Average]
[info]   (min, avg, max) = (67648.260, 68264.990, 68999.102), stdev = 513.454
[info]   CI (99.9%): [66287.860, 70242.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.453 ±(99.9%) 7.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.453, 4.348), stdev = 2.053
[info]   CI (99.9%): [≈ 0, 9.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   944.172 ±(99.9%) 1422.383 MB/sec [Average]
[info]   (min, avg, max) = (674.026, 944.172, 1349.441), stdev = 369.388
[info]   CI (99.9%): [≈ 0, 2366.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66106.047 ±(99.9%) 98856.015 B/op [Average]
[info]   (min, avg, max) = (47091.458, 66106.047, 94586.597), stdev = 25672.593
[info]   CI (99.9%): [≈ 0, 164962.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:04:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3525.163 ops/s
[info] # Warmup Iteration   2: 12514.341 ops/s
[info] # Warmup Iteration   3: 13068.288 ops/s
[info] # Warmup Iteration   4: 13235.135 ops/s
[info] # Warmup Iteration   5: 13271.593 ops/s
[info] Iteration   1: 12900.468 ops/s
[info]                  ·gc.alloc.rate:                   1230.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              150186.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164198.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 12996.502 ops/s
[info]                  ·gc.alloc.rate:                   1238.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              149933.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163066.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13124.242 ops/s
[info]                  ·gc.alloc.rate:                   1241.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              148869.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161635.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13132.701 ops/s
[info]                  ·gc.alloc.rate:                   1262.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              151321.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161736.960 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13201.979 ops/s
[info]                  ·gc.alloc.rate:                   1243.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              148236.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80485.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13071.178 ±(99.9%) 465.388 ops/s [Average]
[info]   (min, avg, max) = (12900.468, 13071.178, 13201.979), stdev = 120.860
[info]   CI (99.9%): [12605.791, 13536.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1243.169 ±(99.9%) 45.539 MB/sec [Average]
[info]   (min, avg, max) = (1230.797, 1243.169, 1262.574), stdev = 11.826
[info]   CI (99.9%): [1197.630, 1288.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   149709.511 ±(99.9%) 4617.637 B/op [Average]
[info]   (min, avg, max) = (148236.197, 149709.511, 151321.283), stdev = 1199.186
[info]   CI (99.9%): [145091.874, 154327.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.003 ±(99.9%) 5.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.003, 2.521), stdev = 1.374
[info]   CI (99.9%): [≈ 0, 6.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1212.855 ±(99.9%) 1157.819 MB/sec [Average]
[info]   (min, avg, max) = (674.985, 1212.855, 1349.479), stdev = 300.682
[info]   CI (99.9%): [55.036, 2370.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   146224.515 ±(99.9%) 141566.016 B/op [Average]
[info]   (min, avg, max) = (80485.593, 146224.515, 164198.079), stdev = 36764.245
[info]   CI (99.9%): [4658.499, 287790.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:04:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3852.588 ops/s
[info] # Warmup Iteration   2: 12183.618 ops/s
[info] # Warmup Iteration   3: 12829.461 ops/s
[info] # Warmup Iteration   4: 12740.814 ops/s
[info] # Warmup Iteration   5: 12889.269 ops/s
[info] Iteration   1: 12986.222 ops/s
[info]                  ·gc.alloc.rate:                   1132.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              137219.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81696.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 12905.194 ops/s
[info]                  ·gc.alloc.rate:                   1149.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              140242.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164406.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12502.207 ops/s
[info]                  ·gc.alloc.rate:                   1107.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              139453.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169814.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 12632.904 ops/s
[info]                  ·gc.alloc.rate:                   1107.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              137907.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84062.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 12874.700 ops/s
[info]                  ·gc.alloc.rate:                   1146.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              140221.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165046.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   12780.246 ±(99.9%) 784.377 ops/s [Average]
[info]   (min, avg, max) = (12502.207, 12780.246, 12986.222), stdev = 203.700
[info]   CI (99.9%): [11995.868, 13564.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1128.751 ±(99.9%) 79.157 MB/sec [Average]
[info]   (min, avg, max) = (1107.303, 1128.751, 1149.949), stdev = 20.557
[info]   CI (99.9%): [1049.593, 1207.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   139008.935 ±(99.9%) 5308.882 B/op [Average]
[info]   (min, avg, max) = (137219.551, 139008.935, 140242.378), stdev = 1378.700
[info]   CI (99.9%): [133700.053, 144317.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.032 ±(99.9%) 5.442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.032, 2.621), stdev = 1.413
[info]   CI (99.9%): [≈ 0, 6.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.139 ±(99.9%) 1422.499 MB/sec [Average]
[info]   (min, avg, max) = (673.965, 1079.139, 1349.848), stdev = 369.419
[info]   CI (99.9%): [≈ 0, 2501.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   133005.172 ±(99.9%) 176412.312 B/op [Average]
[info]   (min, avg, max) = (81696.737, 133005.172, 169814.971), stdev = 45813.717
[info]   CI (99.9%): [≈ 0, 309417.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:04:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187366.261 ops/s
[info] # Warmup Iteration   2: 258625.222 ops/s
[info] # Warmup Iteration   3: 264969.226 ops/s
[info] # Warmup Iteration   4: 266844.366 ops/s
[info] # Warmup Iteration   5: 266039.215 ops/s
[info] Iteration   1: 270463.588 ops/s
[info]                  ·gc.alloc.rate:                   1592.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              9268.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7826.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 263777.294 ops/s
[info]                  ·gc.alloc.rate:                   1570.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              9368.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8028.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 265363.945 ops/s
[info]                  ·gc.alloc.rate:                   1584.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              9396.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7988.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 267519.268 ops/s
[info]                  ·gc.alloc.rate:                   1627.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              9577.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11904.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 269431.426 ops/s
[info]                  ·gc.alloc.rate:                   1598.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              9339.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7890.905 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   267311.104 ±(99.9%) 10677.554 ops/s [Average]
[info]   (min, avg, max) = (263777.294, 267311.104, 270463.588), stdev = 2772.927
[info]   CI (99.9%): [256633.551, 277988.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1594.757 ±(99.9%) 82.679 MB/sec [Average]
[info]   (min, avg, max) = (1570.106, 1594.757, 1627.971), stdev = 21.471
[info]   CI (99.9%): [1512.079, 1677.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9390.028 ±(99.9%) 442.315 B/op [Average]
[info]   (min, avg, max) = (9268.758, 9390.028, 9577.179), stdev = 114.868
[info]   CI (99.9%): [8947.713, 9832.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.171 ±(99.9%) 0.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.370), stdev = 0.186
[info]   CI (99.9%): [≈ 0, 0.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1482.346 ±(99.9%) 1165.077 MB/sec [Average]
[info]   (min, avg, max) = (1345.065, 1482.346, 2023.580), stdev = 302.567
[info]   CI (99.9%): [317.269, 2647.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8727.858 ±(99.9%) 6844.843 B/op [Average]
[info]   (min, avg, max) = (7826.496, 8727.858, 11904.502), stdev = 1777.584
[info]   CI (99.9%): [1883.015, 15572.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 950.466 ops/s
[info] # Warmup Iteration   2: 9522.369 ops/s
[info] # Warmup Iteration   3: 11569.329 ops/s
[info] # Warmup Iteration   4: 11373.068 ops/s
[info] # Warmup Iteration   5: 11397.444 ops/s
[info] Iteration   1: 11547.740 ops/s
[info]                  ·gc.alloc.rate:                   1410.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              192218.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183750.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 11547.104 ops/s
[info]                  ·gc.alloc.rate:                   1408.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              192034.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183841.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11476.926 ops/s
[info]                  ·gc.alloc.rate:                   1415.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              194125.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185069.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 11613.795 ops/s
[info]                  ·gc.alloc.rate:                   1418.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              192247.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183067.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 11580.847 ops/s
[info]                  ·gc.alloc.rate:                   1417.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              192681.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183770.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   11553.282 ±(99.9%) 195.596 ops/s [Average]
[info]   (min, avg, max) = (11476.926, 11553.282, 11613.795), stdev = 50.796
[info]   CI (99.9%): [11357.687, 11748.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1414.081 ±(99.9%) 16.963 MB/sec [Average]
[info]   (min, avg, max) = (1408.738, 1414.081, 1418.476), stdev = 4.405
[info]   CI (99.9%): [1397.118, 1431.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   192661.758 ±(99.9%) 3280.771 B/op [Average]
[info]   (min, avg, max) = (192034.815, 192661.758, 194125.521), stdev = 852.006
[info]   CI (99.9%): [189380.987, 195942.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.837 ±(99.9%) 7.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.837, 5.658), stdev = 2.000
[info]   CI (99.9%): [≈ 0, 10.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1349.768 ±(99.9%) 6.228 MB/sec [Average]
[info]   (min, avg, max) = (1348.007, 1349.768, 1352.010), stdev = 1.617
[info]   CI (99.9%): [1343.541, 1355.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   183899.804 ±(99.9%) 2792.651 B/op [Average]
[info]   (min, avg, max) = (183067.504, 183899.804, 185069.690), stdev = 725.243
[info]   CI (99.9%): [181107.153, 186692.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:03:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14288.446 ops/s
[info] # Warmup Iteration   2: 28984.073 ops/s
[info] # Warmup Iteration   3: 29621.930 ops/s
[info] # Warmup Iteration   4: 29406.751 ops/s
[info] # Warmup Iteration   5: 29634.490 ops/s
[info] Iteration   1: 30539.249 ops/s
[info]                  ·gc.alloc.rate:                   1020.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              52603.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34741.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 30214.917 ops/s
[info]                  ·gc.alloc.rate:                   1025.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              53391.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70263.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 30203.731 ops/s
[info]                  ·gc.alloc.rate:                   1008.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              52530.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35163.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 29251.780 ops/s
[info]                  ·gc.alloc.rate:                   987.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              53133.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72648.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30010.987 ops/s
[info]                  ·gc.alloc.rate:                   1000.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              52486.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35422.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   30044.133 ±(99.9%) 1855.416 ops/s [Average]
[info]   (min, avg, max) = (29251.780, 30044.133, 30539.249), stdev = 481.846
[info]   CI (99.9%): [28188.717, 31899.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1008.350 ±(99.9%) 58.538 MB/sec [Average]
[info]   (min, avg, max) = (987.473, 1008.350, 1025.026), stdev = 15.202
[info]   CI (99.9%): [949.813, 1066.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   52828.958 ±(99.9%) 1572.312 B/op [Average]
[info]   (min, avg, max) = (52486.088, 52828.958, 53391.742), stdev = 408.324
[info]   CI (99.9%): [51256.646, 54401.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.657 ±(99.9%) 2.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.657, 1.120), stdev = 0.600
[info]   CI (99.9%): [≈ 0, 2.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   944.646 ±(99.9%) 1423.277 MB/sec [Average]
[info]   (min, avg, max) = (674.075, 944.646, 1350.153), stdev = 369.620
[info]   CI (99.9%): [≈ 0, 2367.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   49647.944 ±(99.9%) 76732.179 B/op [Average]
[info]   (min, avg, max) = (34741.976, 49647.944, 72648.035), stdev = 19927.103
[info]   CI (99.9%): [≈ 0, 126380.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33513.636 ops/s
[info] # Warmup Iteration   2: 70298.512 ops/s
[info] # Warmup Iteration   3: 72131.525 ops/s
[info] # Warmup Iteration   4: 71604.750 ops/s
[info] # Warmup Iteration   5: 71329.860 ops/s
[info] Iteration   1: 71269.591 ops/s
[info]                  ·gc.alloc.rate:                   1583.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              34985.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29803.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 70405.399 ops/s
[info]                  ·gc.alloc.rate:                   1588.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              35486.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45258.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 73122.934 ops/s
[info]                  ·gc.alloc.rate:                   1632.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              35151.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29119.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 73123.032 ops/s
[info]                  ·gc.alloc.rate:                   1632.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              35137.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29140.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 72309.880 ops/s
[info]                  ·gc.alloc.rate:                   1641.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              35733.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44242.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   72046.167 ±(99.9%) 4590.106 ops/s [Average]
[info]   (min, avg, max) = (70405.399, 72046.167, 73123.032), stdev = 1192.036
[info]   CI (99.9%): [67456.061, 76636.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1615.773 ±(99.9%) 105.365 MB/sec [Average]
[info]   (min, avg, max) = (1583.941, 1615.773, 1641.427), stdev = 27.363
[info]   CI (99.9%): [1510.408, 1721.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   35298.901 ±(99.9%) 1171.460 B/op [Average]
[info]   (min, avg, max) = (34985.213, 35298.901, 35733.469), stdev = 304.225
[info]   CI (99.9%): [34127.441, 36470.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.999 ±(99.9%) 1.467 B/op [Average]
[info]   (min, avg, max) = (0.465, 0.999, 1.379), stdev = 0.381
[info]   CI (99.9%): [≈ 0, 2.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1622.748 ±(99.9%) 1427.973 MB/sec [Average]
[info]   (min, avg, max) = (1349.355, 1622.748, 2032.307), stdev = 370.840
[info]   CI (99.9%): [194.775, 3050.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   35513.150 ±(99.9%) 32517.892 B/op [Average]
[info]   (min, avg, max) = (29119.942, 35513.150, 45258.528), stdev = 8444.793
[info]   CI (99.9%): [2995.258, 68031.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:03:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 358588.662 ops/s
[info] # Warmup Iteration   2: 472379.670 ops/s
[info] # Warmup Iteration   3: 491396.737 ops/s
[info] # Warmup Iteration   4: 491592.839 ops/s
[info] # Warmup Iteration   5: 492254.187 ops/s
[info] Iteration   1: 479634.134 ops/s
[info]                  ·gc.alloc.rate:                   675.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              2218.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2214.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 483793.187 ops/s
[info]                  ·gc.alloc.rate:                   678.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              2209.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2193.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 486888.353 ops/s
[info]                  ·gc.alloc.rate:                   689.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              2229.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2179.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 486214.001 ops/s
[info]                  ·gc.alloc.rate:                   684.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              2215.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2179.902 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 485499.647 ops/s
[info]                  ·gc.alloc.rate:                   688.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              2233.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2183.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   484405.864 ±(99.9%) 11188.962 ops/s [Average]
[info]   (min, avg, max) = (479634.134, 484405.864, 486888.353), stdev = 2905.738
[info]   CI (99.9%): [473216.903, 495594.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   683.508 ±(99.9%) 23.299 MB/sec [Average]
[info]   (min, avg, max) = (675.788, 683.508, 689.487), stdev = 6.051
[info]   CI (99.9%): [660.208, 706.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2221.137 ±(99.9%) 38.829 B/op [Average]
[info]   (min, avg, max) = (2209.017, 2221.137, 2233.764), stdev = 10.084
[info]   CI (99.9%): [2182.308, 2259.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.556 ±(99.9%) 4.606 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.556, 2.695), stdev = 1.196
[info]   CI (99.9%): [≈ 0, 5.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.823 ±(99.9%) 15.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.823, 8.846), stdev = 3.927
[info]   CI (99.9%): [≈ 0, 16.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.869 ±(99.9%) 2.104 MB/sec [Average]
[info]   (min, avg, max) = (673.309, 673.869, 674.606), stdev = 0.546
[info]   CI (99.9%): [671.765, 675.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2189.905 ±(99.9%) 56.614 B/op [Average]
[info]   (min, avg, max) = (2179.119, 2189.905, 2214.261), stdev = 14.703
[info]   CI (99.9%): [2133.291, 2246.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:02:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 469935.907 ops/s
[info] # Warmup Iteration   2: 634583.946 ops/s
[info] # Warmup Iteration   3: 678843.700 ops/s
[info] # Warmup Iteration   4: 676462.326 ops/s
[info] # Warmup Iteration   5: 678909.789 ops/s
[info] Iteration   1: 678376.895 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 671992.491 ops/s
[info]                  ·gc.alloc.rate:      1.986 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.651 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 678629.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 678392.486 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 678923.442 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   677262.924 ±(99.9%) 11377.109 ops/s [Average]
[info]   (min, avg, max) = (671992.491, 677262.924, 678923.442), stdev = 2954.599
[info]   CI (99.9%): [665885.815, 688640.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.397 ±(99.9%) 3.420 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.397, 1.986), stdev = 0.888
[info]   CI (99.9%): [≈ 0, 3.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.931 ±(99.9%) 8.009 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.931, 4.651), stdev = 2.080
[info]   CI (99.9%): [≈ 0, 8.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:02:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17936.379 ops/s
[info] # Warmup Iteration   2: 67077.321 ops/s
[info] # Warmup Iteration   3: 68514.147 ops/s
[info] # Warmup Iteration   4: 68964.731 ops/s
[info] # Warmup Iteration   5: 68414.652 ops/s
[info] Iteration   1: 68460.972 ops/s
[info]                  ·gc.alloc.rate:                   1514.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              34816.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31003.974 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 67890.315 ops/s
[info]                  ·gc.alloc.rate:                   1505.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              34905.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31278.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 67688.699 ops/s
[info]                  ·gc.alloc.rate:                   1514.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              35205.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47099.341 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 67938.845 ops/s
[info]                  ·gc.alloc.rate:                   1505.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              34870.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31326.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 68059.830 ops/s
[info]                  ·gc.alloc.rate:                   1508.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              34878.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31285.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   68007.732 ±(99.9%) 1103.420 ops/s [Average]
[info]   (min, avg, max) = (67688.699, 68007.732, 68460.972), stdev = 286.555
[info]   CI (99.9%): [66904.312, 69111.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1509.619 ±(99.9%) 18.010 MB/sec [Average]
[info]   (min, avg, max) = (1505.078, 1509.619, 1514.769), stdev = 4.677
[info]   CI (99.9%): [1491.609, 1527.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34935.482 ±(99.9%) 595.008 B/op [Average]
[info]   (min, avg, max) = (34816.789, 34935.482, 35205.793), stdev = 154.522
[info]   CI (99.9%): [34340.474, 35530.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.483 ±(99.9%) 2.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.483, 1.447), stdev = 0.683
[info]   CI (99.9%): [≈ 0, 3.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1485.805 ±(99.9%) 1162.925 MB/sec [Average]
[info]   (min, avg, max) = (1348.886, 1485.805, 2026.045), stdev = 302.008
[info]   CI (99.9%): [322.880, 2648.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34398.713 ±(99.9%) 27343.509 B/op [Average]
[info]   (min, avg, max) = (31003.974, 34398.713, 47099.341), stdev = 7101.022
[info]   CI (99.9%): [7055.204, 61742.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:02:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2194.465 ops/s
[info] # Warmup Iteration   2: 15053.911 ops/s
[info] # Warmup Iteration   3: 18019.499 ops/s
[info] # Warmup Iteration   4: 18749.541 ops/s
[info] # Warmup Iteration   5: 18417.152 ops/s
[info] Iteration   1: 18544.868 ops/s
[info]                  ·gc.alloc.rate:                   661.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              56157.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57154.967 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 18134.622 ops/s
[info]                  ·gc.alloc.rate:                   667.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              57971.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58504.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 18515.164 ops/s
[info]                  ·gc.alloc.rate:                   670.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              57001.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57301.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 18663.390 ops/s
[info]                  ·gc.alloc.rate:                   673.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              56817.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56846.784 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 18591.809 ops/s
[info]                  ·gc.alloc.rate:                   665.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              56365.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57063.826 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   18489.971 ±(99.9%) 794.686 ops/s [Average]
[info]   (min, avg, max) = (18134.622, 18489.971, 18663.390), stdev = 206.378
[info]   CI (99.9%): [17695.284, 19284.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   667.887 ±(99.9%) 17.783 MB/sec [Average]
[info]   (min, avg, max) = (661.559, 667.887, 673.667), stdev = 4.618
[info]   CI (99.9%): [650.104, 685.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56862.667 ±(99.9%) 2719.827 B/op [Average]
[info]   (min, avg, max) = (56157.256, 56862.667, 57971.341), stdev = 706.330
[info]   CI (99.9%): [54142.840, 59582.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.667 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.395), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.415 ±(99.9%) 56.596 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.415, 33.567), stdev = 14.698
[info]   CI (99.9%): [≈ 0, 64.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   673.890 ±(99.9%) 1.252 MB/sec [Average]
[info]   (min, avg, max) = (673.313, 673.890, 674.095), stdev = 0.325
[info]   CI (99.9%): [672.637, 675.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   57374.281 ±(99.9%) 2514.754 B/op [Average]
[info]   (min, avg, max) = (56846.784, 57374.281, 58504.737), stdev = 653.074
[info]   CI (99.9%): [54859.527, 59889.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:02:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8001.747 ops/s
[info] # Warmup Iteration   2: 18029.772 ops/s
[info] # Warmup Iteration   3: 18279.570 ops/s
[info] # Warmup Iteration   4: 19123.554 ops/s
[info] # Warmup Iteration   5: 18761.256 ops/s
[info] Iteration   1: 19135.058 ops/s
[info]                  ·gc.alloc.rate:                   556.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              45788.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55392.953 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18979.926 ops/s
[info]                  ·gc.alloc.rate:                   578.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              47989.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55845.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19208.927 ops/s
[info]                  ·gc.alloc.rate:      536.048 MB/sec
[info]                  ·gc.alloc.rate.norm: 43928.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19176.570 ops/s
[info]                  ·gc.alloc.rate:                   557.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              45756.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55271.655 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 19175.603 ops/s
[info]                  ·gc.alloc.rate:                   552.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              45383.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55271.655 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   19135.217 ±(99.9%) 349.166 ops/s [Average]
[info]   (min, avg, max) = (18979.926, 19135.217, 19208.927), stdev = 90.677
[info]   CI (99.9%): [18786.050, 19484.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   556.383 ±(99.9%) 58.938 MB/sec [Average]
[info]   (min, avg, max) = (536.048, 556.383, 578.966), stdev = 15.306
[info]   CI (99.9%): [497.445, 615.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   45769.183 ±(99.9%) 5602.637 B/op [Average]
[info]   (min, avg, max) = (43928.021, 45769.183, 47989.297), stdev = 1454.987
[info]   CI (99.9%): [40166.546, 51371.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.225 ±(99.9%) 1.935 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.225, 1.124), stdev = 0.503
[info]   CI (99.9%): [≈ 0, 2.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18.492 ±(99.9%) 159.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.492, 92.459), stdev = 41.349
[info]   CI (99.9%): [≈ 0, 177.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   538.755 ±(99.9%) 1159.710 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.755, 673.744), stdev = 301.173
[info]   CI (99.9%): [≈ 0, 1698.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44356.302 ±(99.9%) 95484.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44356.302, 55845.248), stdev = 24797.051
[info]   CI (99.9%): [≈ 0, 139840.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:01:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84143.758 ops/s
[info] # Warmup Iteration   2: 110079.759 ops/s
[info] # Warmup Iteration   3: 116600.131 ops/s
[info] # Warmup Iteration   4: 111620.473 ops/s
[info] # Warmup Iteration   5: 115364.231 ops/s
[info] Iteration   1: 116246.593 ops/s
[info]                  ·gc.alloc.rate:      291.940 MB/sec
[info]                  ·gc.alloc.rate.norm: 3953.258 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 114756.842 ops/s
[info]                  ·gc.alloc.rate:                   305.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              4184.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7016.331 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 115599.444 ops/s
[info]                  ·gc.alloc.rate:      290.220 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 115358.050 ops/s
[info]                  ·gc.alloc.rate:                   309.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              4218.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9206.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 115597.576 ops/s
[info]                  ·gc.alloc.rate:      290.330 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   115511.701 ±(99.9%) 2063.385 ops/s [Average]
[info]   (min, avg, max) = (114756.842, 115511.701, 116246.593), stdev = 535.855
[info]   CI (99.9%): [113448.316, 117575.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   297.351 ±(99.9%) 34.916 MB/sec [Average]
[info]   (min, avg, max) = (290.220, 297.351, 309.149), stdev = 9.068
[info]   CI (99.9%): [262.435, 332.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4052.093 ±(99.9%) 527.499 B/op [Average]
[info]   (min, avg, max) = (3952.004, 4052.093, 4218.274), stdev = 136.990
[info]   CI (99.9%): [3524.594, 4579.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   237.253 ±(99.9%) 1270.537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 237.253, 674.718), stdev = 329.955
[info]   CI (99.9%): [≈ 0, 1507.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3244.547 ±(99.9%) 17365.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3244.547, 9206.406), stdev = 4509.750
[info]   CI (99.9%): [≈ 0, 20609.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4900.123 ops/s
[info] # Warmup Iteration   2: 15457.567 ops/s
[info] # Warmup Iteration   3: 16650.406 ops/s
[info] # Warmup Iteration   4: 16619.365 ops/s
[info] # Warmup Iteration   5: 16400.242 ops/s
[info] Iteration   1: 16497.491 ops/s
[info]                  ·gc.alloc.rate:                   1033.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              98617.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128625.323 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16393.982 ops/s
[info]                  ·gc.alloc.rate:                   1025.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              98413.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64744.676 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16394.077 ops/s
[info]                  ·gc.alloc.rate:                   1040.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              99852.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129521.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16669.834 ops/s
[info]                  ·gc.alloc.rate:                   1023.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              96641.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63712.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16613.194 ops/s
[info]                  ·gc.alloc.rate:                   1019.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              96649.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63989.893 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   16513.715 ±(99.9%) 483.949 ops/s [Average]
[info]   (min, avg, max) = (16393.982, 16513.715, 16669.834), stdev = 125.680
[info]   CI (99.9%): [16029.766, 16997.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1028.467 ±(99.9%) 31.386 MB/sec [Average]
[info]   (min, avg, max) = (1019.959, 1028.467, 1040.063), stdev = 8.151
[info]   CI (99.9%): [997.081, 1059.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98035.010 ±(99.9%) 5323.780 B/op [Average]
[info]   (min, avg, max) = (96641.552, 98035.010, 99852.266), stdev = 1382.569
[info]   CI (99.9%): [92711.230, 103358.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.794 ±(99.9%) 4.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.794, 1.998), stdev = 1.087
[info]   CI (99.9%): [≈ 0, 4.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   944.328 ±(99.9%) 1420.790 MB/sec [Average]
[info]   (min, avg, max) = (674.427, 944.328, 1349.096), stdev = 368.975
[info]   CI (99.9%): [≈ 0, 2365.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   90118.656 ±(99.9%) 136944.310 B/op [Average]
[info]   (min, avg, max) = (63712.061, 90118.656, 129521.325), stdev = 35564.002
[info]   CI (99.9%): [≈ 0, 227062.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:01:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16921.503 ops/s
[info] # Warmup Iteration   2: 44175.807 ops/s
[info] # Warmup Iteration   3: 46261.949 ops/s
[info] # Warmup Iteration   4: 46885.999 ops/s
[info] # Warmup Iteration   5: 46559.718 ops/s
[info] Iteration   1: 46824.610 ops/s
[info]                  ·gc.alloc.rate:                   851.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              28630.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22680.748 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 47133.568 ops/s
[info]                  ·gc.alloc.rate:                   854.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              28539.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22532.084 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 46671.831 ops/s
[info]                  ·gc.alloc.rate:                   874.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              29470.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45510.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 46290.784 ops/s
[info]                  ·gc.alloc.rate:                   853.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              29034.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22942.342 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 46894.277 ops/s
[info]                  ·gc.alloc.rate:                   856.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              28764.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22669.738 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   46763.014 ±(99.9%) 1201.824 ops/s [Average]
[info]   (min, avg, max) = (46290.784, 46763.014, 47133.568), stdev = 312.110
[info]   CI (99.9%): [45561.190, 47964.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   858.297 ±(99.9%) 34.598 MB/sec [Average]
[info]   (min, avg, max) = (851.890, 858.297, 874.045), stdev = 8.985
[info]   CI (99.9%): [823.699, 892.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28887.834 ±(99.9%) 1445.688 B/op [Average]
[info]   (min, avg, max) = (28539.645, 28887.834, 29470.635), stdev = 375.441
[info]   CI (99.9%): [27442.146, 30333.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.982 ±(99.9%) 7.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.982, 4.212), stdev = 1.831
[info]   CI (99.9%): [≈ 0, 8.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   809.902 ±(99.9%) 1162.060 MB/sec [Average]
[info]   (min, avg, max) = (674.736, 809.902, 1349.748), stdev = 301.783
[info]   CI (99.9%): [≈ 0, 1971.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27267.017 ±(99.9%) 39273.928 B/op [Average]
[info]   (min, avg, max) = (22532.084, 27267.017, 45510.175), stdev = 10199.314
[info]   CI (99.9%): [≈ 0, 66540.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32049.508 ops/s
[info] # Warmup Iteration   2: 61650.873 ops/s
[info] # Warmup Iteration   3: 63329.063 ops/s
[info] # Warmup Iteration   4: 62983.024 ops/s
[info] # Warmup Iteration   5: 63369.598 ops/s
[info] Iteration   1: 63275.430 ops/s
[info]                  ·gc.alloc.rate:                   1069.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              26595.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33535.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 62285.755 ops/s
[info]                  ·gc.alloc.rate:                   1027.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              25970.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17049.879 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 63204.274 ops/s
[info]                  ·gc.alloc.rate:                   1058.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              26363.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33614.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 63621.147 ops/s
[info]                  ·gc.alloc.rate:                   1044.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              25826.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16701.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 62711.470 ops/s
[info]                  ·gc.alloc.rate:                   1056.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              26519.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33920.486 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   63019.615 ±(99.9%) 2014.594 ops/s [Average]
[info]   (min, avg, max) = (62285.755, 63019.615, 63621.147), stdev = 523.184
[info]   CI (99.9%): [61005.021, 65034.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1051.187 ±(99.9%) 61.007 MB/sec [Average]
[info]   (min, avg, max) = (1027.718, 1051.187, 1069.045), stdev = 15.843
[info]   CI (99.9%): [990.180, 1112.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   26255.115 ±(99.9%) 1309.058 B/op [Average]
[info]   (min, avg, max) = (25826.099, 26255.115, 26595.008), stdev = 339.958
[info]   CI (99.9%): [24946.057, 27564.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.729 ±(99.9%) 3.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 2.090), stdev = 1.016
[info]   CI (99.9%): [≈ 0, 4.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.801 ±(99.9%) 1423.135 MB/sec [Average]
[info]   (min, avg, max) = (674.697, 1079.801, 1351.285), stdev = 369.584
[info]   CI (99.9%): [≈ 0, 2502.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26964.386 ±(99.9%) 35470.256 B/op [Average]
[info]   (min, avg, max) = (16701.741, 26964.386, 33920.486), stdev = 9211.513
[info]   CI (99.9%): [≈ 0, 62434.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 01:00:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222412.542 ops/s
[info] # Warmup Iteration   2: 292082.461 ops/s
[info] # Warmup Iteration   3: 291964.405 ops/s
[info] # Warmup Iteration   4: 296200.409 ops/s
[info] # Warmup Iteration   5: 295661.267 ops/s
[info] Iteration   1: 296132.686 ops/s
[info]                  ·gc.alloc.rate:                   591.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              3142.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3579.277 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 302646.026 ops/s
[info]                  ·gc.alloc.rate:                   593.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              3084.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3498.775 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 303033.704 ops/s
[info]                  ·gc.alloc.rate:      580.633 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 301264.328 ops/s
[info]                  ·gc.alloc.rate:                   591.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              3091.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3514.648 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 302782.419 ops/s
[info]                  ·gc.alloc.rate:                   594.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              3089.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3493.684 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   301171.832 ±(99.9%) 11166.096 ops/s [Average]
[info]   (min, avg, max) = (296132.686, 301171.832, 303033.704), stdev = 2899.800
[info]   CI (99.9%): [290005.736, 312337.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   590.217 ±(99.9%) 21.106 MB/sec [Average]
[info]   (min, avg, max) = (580.633, 590.217, 594.277), stdev = 5.481
[info]   CI (99.9%): [569.112, 611.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3084.935 ±(99.9%) 174.057 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3084.935, 3142.853), stdev = 45.202
[info]   CI (99.9%): [2910.879, 3258.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.600 ±(99.9%) 5.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.956), stdev = 1.317
[info]   CI (99.9%): [≈ 0, 5.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.185 ±(99.9%) 26.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.185, 15.710), stdev = 7.002
[info]   CI (99.9%): [≈ 0, 30.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.179 ±(99.9%) 1158.473 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.179, 673.485), stdev = 300.852
[info]   CI (99.9%): [≈ 0, 1696.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2817.277 ±(99.9%) 6065.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2817.277, 3579.277), stdev = 1575.277
[info]   CI (99.9%): [≈ 0, 8883.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 01:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263956.506 ops/s
[info] # Warmup Iteration   2: 325606.109 ops/s
[info] # Warmup Iteration   3: 329301.740 ops/s
[info] # Warmup Iteration   4: 328244.290 ops/s
[info] # Warmup Iteration   5: 329087.456 ops/s
[info] Iteration   1: 327256.791 ops/s
[info]                  ·gc.alloc.rate:      8.584 MB/sec
[info]                  ·gc.alloc.rate.norm: 41.278 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 329120.933 ops/s
[info]                  ·gc.alloc.rate:      0.311 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.486 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 328693.900 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 328933.162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 329478.820 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   328696.721 ±(99.9%) 3290.525 ops/s [Average]
[info]   (min, avg, max) = (327256.791, 328696.721, 329478.820), stdev = 854.539
[info]   CI (99.9%): [325406.196, 331987.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.779 ±(99.9%) 14.657 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.779, 8.584), stdev = 3.806
[info]   CI (99.9%): [≈ 0, 16.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   8.554 ±(99.9%) 70.485 B/op [Average]
[info]   (min, avg, max) = (0.001, 8.554, 41.278), stdev = 18.305
[info]   CI (99.9%): [≈ 0, 79.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 01:00:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28250.886 ops/s
[info] # Warmup Iteration   2: 58720.278 ops/s
[info] # Warmup Iteration   3: 59789.545 ops/s
[info] # Warmup Iteration   4: 60729.447 ops/s
[info] # Warmup Iteration   5: 60559.461 ops/s
[info] Iteration   1: 60541.564 ops/s
[info]                  ·gc.alloc.rate:                   1099.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              28595.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17542.940 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 60539.700 ops/s
[info]                  ·gc.alloc.rate:                   1130.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              29370.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35086.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 60739.670 ops/s
[info]                  ·gc.alloc.rate:                   1119.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              29010.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34988.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 60804.168 ops/s
[info]                  ·gc.alloc.rate:                   1103.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              28557.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17483.738 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 60840.829 ops/s
[info]                  ·gc.alloc.rate:                   1129.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34964.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   60693.186 ±(99.9%) 554.090 ops/s [Average]
[info]   (min, avg, max) = (60539.700, 60693.186, 60840.829), stdev = 143.895
[info]   CI (99.9%): [60139.097, 61247.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1116.432 ±(99.9%) 55.316 MB/sec [Average]
[info]   (min, avg, max) = (1099.700, 1116.432, 1130.137), stdev = 14.365
[info]   CI (99.9%): [1061.115, 1171.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28951.755 ±(99.9%) 1407.754 B/op [Average]
[info]   (min, avg, max) = (28557.826, 28951.755, 29370.253), stdev = 365.589
[info]   CI (99.9%): [27544.001, 30359.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.539 ±(99.9%) 2.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.539, 1.079), stdev = 0.539
[info]   CI (99.9%): [≈ 0, 2.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1080.366 ±(99.9%) 1424.904 MB/sec [Average]
[info]   (min, avg, max) = (674.640, 1080.366, 1351.327), stdev = 370.043
[info]   CI (99.9%): [≈ 0, 2505.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28013.073 ±(99.9%) 36908.555 B/op [Average]
[info]   (min, avg, max) = (17483.738, 28013.073, 35086.460), stdev = 9585.034
[info]   CI (99.9%): [≈ 0, 64921.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68901.626 ops/s
[info] # Warmup Iteration   2: 146697.466 ops/s
[info] # Warmup Iteration   3: 154213.365 ops/s
[info] # Warmup Iteration   4: 152157.471 ops/s
[info] # Warmup Iteration   5: 153904.192 ops/s
[info] Iteration   1: 153234.891 ops/s
[info]                  ·gc.alloc.rate:                   1931.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              19833.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20788.844 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 154177.728 ops/s
[info]                  ·gc.alloc.rate:                   1937.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              19779.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20689.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 154166.856 ops/s
[info]                  ·gc.alloc.rate:                   1926.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              19667.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13812.444 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 153762.468 ops/s
[info]                  ·gc.alloc.rate:                   1948.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              19942.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20796.421 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 150611.920 ops/s
[info]                  ·gc.alloc.rate:                   1923.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21251.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   153190.773 ±(99.9%) 5745.750 ops/s [Average]
[info]   (min, avg, max) = (150611.920, 153190.773, 154177.728), stdev = 1492.153
[info]   CI (99.9%): [147445.023, 158936.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1933.430 ±(99.9%) 37.499 MB/sec [Average]
[info]   (min, avg, max) = (1923.538, 1933.430, 1948.143), stdev = 9.738
[info]   CI (99.9%): [1895.931, 1970.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19864.727 ±(99.9%) 634.129 B/op [Average]
[info]   (min, avg, max) = (19667.618, 19864.727, 20100.220), stdev = 164.681
[info]   CI (99.9%): [19230.598, 20498.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.555 ±(99.9%) 1.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.555, 1.063), stdev = 0.441
[info]   CI (99.9%): [≈ 0, 2.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1893.843 ±(99.9%) 1163.726 MB/sec [Average]
[info]   (min, avg, max) = (1353.266, 1893.843, 2033.685), stdev = 302.216
[info]   CI (99.9%): [730.117, 3057.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19467.753 ±(99.9%) 12202.256 B/op [Average]
[info]   (min, avg, max) = (13812.444, 19467.753, 21251.203), stdev = 3168.887
[info]   CI (99.9%): [7265.497, 31670.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:59:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.857 ops/s
[info] # Warmup Iteration   2: 717687.691 ops/s
[info] # Warmup Iteration   3: 762769.792 ops/s
[info] # Warmup Iteration   4: 765093.763 ops/s
[info] # Warmup Iteration   5: 767594.824 ops/s
[info] Iteration   1: 765807.989 ops/s
[info]                  ·gc.alloc.rate:                   443.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              911.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1378.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 762405.849 ops/s
[info]                  ·gc.alloc.rate:                   437.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              903.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1384.775 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 761724.939 ops/s
[info]                  ·gc.alloc.rate:      422.174 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 762073.491 ops/s
[info]                  ·gc.alloc.rate:                   443.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              915.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1383.995 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 761415.014 ops/s
[info]                  ·gc.alloc.rate:      421.843 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   762685.456 ±(99.9%) 6871.946 ops/s [Average]
[info]   (min, avg, max) = (761415.014, 762685.456, 765807.989), stdev = 1784.623
[info]   CI (99.9%): [755813.510, 769557.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   433.692 ±(99.9%) 41.935 MB/sec [Average]
[info]   (min, avg, max) = (421.843, 433.692, 443.333), stdev = 10.890
[info]   CI (99.9%): [391.756, 475.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   894.913 ±(99.9%) 82.110 B/op [Average]
[info]   (min, avg, max) = (872.001, 894.913, 915.434), stdev = 21.324
[info]   CI (99.9%): [812.803, 977.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.777 ±(99.9%) 6.646 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.865), stdev = 1.726
[info]   CI (99.9%): [≈ 0, 7.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.604 ±(99.9%) 13.719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.604, 7.977), stdev = 3.563
[info]   CI (99.9%): [≈ 0, 15.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.330 ±(99.9%) 1414.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.330, 670.877), stdev = 367.276
[info]   CI (99.9%): [≈ 0, 1816.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   829.478 ±(99.9%) 2915.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 829.478, 1384.775), stdev = 757.210
[info]   CI (99.9%): [≈ 0, 3745.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:59:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120128.315 ops/s
[info] # Warmup Iteration   2: 368267.306 ops/s
[info] # Warmup Iteration   3: 375712.409 ops/s
[info] # Warmup Iteration   4: 378615.119 ops/s
[info] # Warmup Iteration   5: 376414.716 ops/s
[info] Iteration   1: 374410.997 ops/s
[info]                  ·gc.alloc.rate:                   394.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              1660.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2833.815 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 376373.169 ops/s
[info]                  ·gc.alloc.rate:      375.544 MB/sec
[info]                  ·gc.alloc.rate.norm: 1570.353 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 376037.296 ops/s
[info]                  ·gc.alloc.rate:                   395.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              1655.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2821.451 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 374512.251 ops/s
[info]                  ·gc.alloc.rate:      373.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 378577.218 ops/s
[info]                  ·gc.alloc.rate:                   395.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              1646.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2802.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   375982.186 ±(99.9%) 6534.601 ops/s [Average]
[info]   (min, avg, max) = (374410.997, 375982.186, 378577.218), stdev = 1697.015
[info]   CI (99.9%): [369447.585, 382516.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   387.009 ±(99.9%) 44.799 MB/sec [Average]
[info]   (min, avg, max) = (373.068, 387.009, 395.993), stdev = 11.634
[info]   CI (99.9%): [342.210, 431.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1620.088 ±(99.9%) 180.061 B/op [Average]
[info]   (min, avg, max) = (1568.001, 1620.088, 1660.529), stdev = 46.761
[info]   CI (99.9%): [1440.027, 1800.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.229 ±(99.9%) 1.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 1.145), stdev = 0.512
[info]   CI (99.9%): [≈ 0, 2.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.958 ±(99.9%) 8.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.958, 4.792), stdev = 2.143
[info]   CI (99.9%): [≈ 0, 9.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.448 ±(99.9%) 1421.693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.448, 674.118), stdev = 369.209
[info]   CI (99.9%): [≈ 0, 1826.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1691.557 ±(99.9%) 5946.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1691.557, 2833.815), stdev = 1544.213
[info]   CI (99.9%): [≈ 0, 7637.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:59:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 872200.503 ops/s
[info] # Warmup Iteration   2: 1030113.212 ops/s
[info] # Warmup Iteration   3: 1120525.080 ops/s
[info] # Warmup Iteration   4: 1109874.027 ops/s
[info] # Warmup Iteration   5: 1119614.516 ops/s
[info] Iteration   1: 1112732.885 ops/s
[info]                  ·gc.alloc.rate:                   406.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              575.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 723.620 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1112036.478 ops/s
[info]                  ·gc.alloc.rate:                   403.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              571.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 954.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1121494.566 ops/s
[info]                  ·gc.alloc.rate:      387.586 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1117512.578 ops/s
[info]                  ·gc.alloc.rate:                   401.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              565.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 949.432 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1123236.702 ops/s
[info]                  ·gc.alloc.rate:      388.299 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1117402.642 ±(99.9%) 19387.002 ops/s [Average]
[info]   (min, avg, max) = (1112036.478, 1117402.642, 1123236.702), stdev = 5034.743
[info]   CI (99.9%): [1098015.639, 1136789.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   397.582 ±(99.9%) 34.620 MB/sec [Average]
[info]   (min, avg, max) = (387.586, 397.582, 406.729), stdev = 8.991
[info]   CI (99.9%): [362.963, 432.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   560.102 ±(99.9%) 58.147 B/op [Average]
[info]   (min, avg, max) = (544.000, 560.102, 575.393), stdev = 15.101
[info]   CI (99.9%): [501.955, 618.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.610 ±(99.9%) 4.732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.610, 2.800), stdev = 1.229
[info]   CI (99.9%): [≈ 0, 5.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.859 ±(99.9%) 6.664 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.859, 3.943), stdev = 1.731
[info]   CI (99.9%): [≈ 0, 7.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   371.919 ±(99.9%) 1332.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.919, 674.045), stdev = 345.938
[info]   CI (99.9%): [≈ 0, 1704.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   525.434 ±(99.9%) 1881.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 525.434, 954.121), stdev = 488.617
[info]   CI (99.9%): [≈ 0, 2406.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:58:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10921.697 ops/s
[info] # Warmup Iteration   2: 69297.359 ops/s
[info] # Warmup Iteration   3: 73289.983 ops/s
[info] # Warmup Iteration   4: 74673.464 ops/s
[info] # Warmup Iteration   5: 76241.726 ops/s
[info] Iteration   1: 76132.742 ops/s
[info]                  ·gc.alloc.rate:                   3043.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              62940.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3383.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69971.168 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 74525.701 ops/s
[info]                  ·gc.alloc.rate:                   3008.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              63533.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57271.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 73624.188 ops/s
[info]                  ·gc.alloc.rate:                   2974.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              63592.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58057.233 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 75108.078 ops/s
[info]                  ·gc.alloc.rate:                   3059.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              64106.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71218.131 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 75907.033 ops/s
[info]                  ·gc.alloc.rate:                   3063.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              63534.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56414.187 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   75059.548 ±(99.9%) 3953.987 ops/s [Average]
[info]   (min, avg, max) = (73624.188, 75059.548, 76132.742), stdev = 1026.838
[info]   CI (99.9%): [71105.561, 79013.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3029.989 ±(99.9%) 145.243 MB/sec [Average]
[info]   (min, avg, max) = (2974.520, 3029.989, 3063.646), stdev = 37.719
[info]   CI (99.9%): [2884.746, 3175.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63541.332 ±(99.9%) 1591.446 B/op [Average]
[info]   (min, avg, max) = (62940.282, 63541.332, 64106.362), stdev = 413.293
[info]   CI (99.9%): [61949.886, 65132.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.917 ±(99.9%) 1.840 B/op [Average]
[info]   (min, avg, max) = (1.319, 1.917, 2.590), stdev = 0.478
[info]   CI (99.9%): [0.077, 3.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2986.101 ±(99.9%) 1423.916 MB/sec [Average]
[info]   (min, avg, max) = (2712.331, 2986.101, 3398.424), stdev = 369.787
[info]   CI (99.9%): [1562.184, 4410.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   62586.348 ±(99.9%) 28290.075 B/op [Average]
[info]   (min, avg, max) = (56414.187, 62586.348, 71218.131), stdev = 7346.843
[info]   CI (99.9%): [34296.273, 90876.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:58:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99604.515 ops/s
[info] # Warmup Iteration   2: 233006.120 ops/s
[info] # Warmup Iteration   3: 251284.646 ops/s
[info] # Warmup Iteration   4: 252633.517 ops/s
[info] # Warmup Iteration   5: 251414.201 ops/s
[info] Iteration   1: 251628.964 ops/s
[info]                  ·gc.alloc.rate:                   1185.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              7416.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8443.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 253482.938 ops/s
[info]                  ·gc.alloc.rate:                   1171.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              7274.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4191.855 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 252015.798 ops/s
[info]                  ·gc.alloc.rate:                   1181.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              7380.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8436.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 252832.162 ops/s
[info]                  ·gc.alloc.rate:                   1194.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              7434.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8417.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 252805.354 ops/s
[info]                  ·gc.alloc.rate:                   1179.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              7344.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4211.440 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   252553.043 ±(99.9%) 2822.306 ops/s [Average]
[info]   (min, avg, max) = (251628.964, 252553.043, 253482.938), stdev = 732.944
[info]   CI (99.9%): [249730.737, 255375.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1182.651 ±(99.9%) 31.966 MB/sec [Average]
[info]   (min, avg, max) = (1171.734, 1182.651, 1194.467), stdev = 8.301
[info]   CI (99.9%): [1150.686, 1214.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7370.105 ±(99.9%) 245.080 B/op [Average]
[info]   (min, avg, max) = (7274.224, 7370.105, 7434.016), stdev = 63.647
[info]   CI (99.9%): [7125.024, 7615.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.078 ±(99.9%) 0.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.130), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1080.940 ±(99.9%) 1424.049 MB/sec [Average]
[info]   (min, avg, max) = (675.225, 1080.940, 1352.516), stdev = 369.821
[info]   CI (99.9%): [≈ 0, 2504.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6740.183 ±(99.9%) 8923.424 B/op [Average]
[info]   (min, avg, max) = (4191.855, 6740.183, 8443.389), stdev = 2317.385
[info]   CI (99.9%): [≈ 0, 15663.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:58:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.796 ops/s
[info] # Warmup Iteration   2: 1075417.764 ops/s
[info] # Warmup Iteration   3: 1134286.055 ops/s
[info] # Warmup Iteration   4: 1135929.947 ops/s
[info] # Warmup Iteration   5: 1132500.681 ops/s
[info] Iteration   1: 1139932.140 ops/s
[info]                  ·gc.alloc.rate:                   401.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              554.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 927.994 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1146375.344 ops/s
[info]                  ·gc.alloc.rate:      392.781 MB/sec
[info]                  ·gc.alloc.rate.norm: 539.187 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1113598.597 ops/s
[info]                  ·gc.alloc.rate:                   392.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              554.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 949.933 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1083266.034 ops/s
[info]                  ·gc.alloc.rate:      368.892 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1142042.022 ops/s
[info]                  ·gc.alloc.rate:                   405.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 924.465 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1125042.828 ±(99.9%) 102639.912 ops/s [Average]
[info]   (min, avg, max) = (1083266.034, 1125042.828, 1146375.344), stdev = 26655.259
[info]   CI (99.9%): [1022402.916, 1227682.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   392.267 ±(99.9%) 54.613 MB/sec [Average]
[info]   (min, avg, max) = (368.892, 392.267, 405.113), stdev = 14.183
[info]   CI (99.9%): [337.653, 446.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   548.648 ±(99.9%) 39.475 B/op [Average]
[info]   (min, avg, max) = (536.000, 548.648, 558.323), stdev = 10.252
[info]   CI (99.9%): [509.173, 588.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.741 ±(99.9%) 6.380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.705), stdev = 1.657
[info]   CI (99.9%): [≈ 0, 7.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.047 ±(99.9%) 9.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.047, 5.235), stdev = 2.341
[info]   CI (99.9%): [≈ 0, 10.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   403.032 ±(99.9%) 1416.717 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.032, 672.319), stdev = 367.917
[info]   CI (99.9%): [≈ 0, 1819.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   560.478 ±(99.9%) 1970.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 560.478, 949.933), stdev = 511.737
[info]   CI (99.9%): [≈ 0, 2530.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 416965.265 ops/s
[info] # Warmup Iteration   2: 867040.653 ops/s
[info] # Warmup Iteration   3: 915504.274 ops/s
[info] # Warmup Iteration   4: 916402.612 ops/s
[info] # Warmup Iteration   5: 913673.630 ops/s
[info] Iteration   1: 910728.380 ops/s
[info]                  ·gc.alloc.rate:                   557.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              964.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1164.444 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 903636.072 ops/s
[info]                  ·gc.alloc.rate:                   555.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              967.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1174.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 912888.937 ops/s
[info]                  ·gc.alloc.rate:      533.772 MB/sec
[info]                  ·gc.alloc.rate.norm: 920.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 908963.289 ops/s
[info]                  ·gc.alloc.rate:                   557.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              966.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1167.277 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 902384.519 ops/s
[info]                  ·gc.alloc.rate:                   545.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1175.780 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   907720.239 ±(99.9%) 17483.350 ops/s [Average]
[info]   (min, avg, max) = (902384.519, 907720.239, 912888.937), stdev = 4540.371
[info]   CI (99.9%): [890236.889, 925203.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   549.987 ±(99.9%) 40.254 MB/sec [Average]
[info]   (min, avg, max) = (533.772, 549.987, 557.918), stdev = 10.454
[info]   CI (99.9%): [509.733, 590.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   953.656 ±(99.9%) 76.712 B/op [Average]
[info]   (min, avg, max) = (920.000, 953.656, 967.023), stdev = 19.922
[info]   CI (99.9%): [876.944, 1030.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.196 ±(99.9%) 1.640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.957), stdev = 0.426
[info]   CI (99.9%): [≈ 0, 1.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.338 ±(99.9%) 2.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.338, 1.655), stdev = 0.736
[info]   CI (99.9%): [≈ 0, 3.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.203 ±(99.9%) 1160.675 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.203, 674.181), stdev = 301.424
[info]   CI (99.9%): [≈ 0, 1699.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   936.331 ±(99.9%) 2015.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 936.331, 1175.780), stdev = 523.446
[info]   CI (99.9%): [≈ 0, 2951.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:57:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1383863.323 ops/s
[info] # Warmup Iteration   2: 1681499.297 ops/s
[info] # Warmup Iteration   3: 1709641.796 ops/s
[info] # Warmup Iteration   4: 1770188.565 ops/s
[info] # Warmup Iteration   5: 1758961.997 ops/s
[info] Iteration   1: 1739752.686 ops/s
[info]                  ·gc.alloc.rate:                   606.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              548.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 609.249 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1804858.817 ops/s
[info]                  ·gc.alloc.rate:                   633.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              552.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 586.699 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1802006.210 ops/s
[info]                  ·gc.alloc.rate:                   638.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              557.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587.636 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1800312.790 ops/s
[info]                  ·gc.alloc.rate:                   630.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587.619 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1806616.503 ops/s
[info]                  ·gc.alloc.rate:                   634.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 585.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1790709.401 ±(99.9%) 110091.918 ops/s [Average]
[info]   (min, avg, max) = (1739752.686, 1790709.401, 1806616.503), stdev = 28590.521
[info]   CI (99.9%): [1680617.484, 1900801.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   628.703 ±(99.9%) 49.661 MB/sec [Average]
[info]   (min, avg, max) = (606.313, 628.703, 638.686), stdev = 12.897
[info]   CI (99.9%): [579.042, 678.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   552.576 ±(99.9%) 13.325 B/op [Average]
[info]   (min, avg, max) = (548.556, 552.576, 557.893), stdev = 3.461
[info]   CI (99.9%): [539.251, 565.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.608 ±(99.9%) 5.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 2.997), stdev = 1.336
[info]   CI (99.9%): [≈ 0, 5.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.550 ±(99.9%) 4.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.550, 2.712), stdev = 1.209
[info]   CI (99.9%): [≈ 0, 5.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.637 ±(99.9%) 2.013 MB/sec [Average]
[info]   (min, avg, max) = (672.119, 672.637, 673.397), stdev = 0.523
[info]   CI (99.9%): [670.624, 674.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   591.349 ±(99.9%) 38.672 B/op [Average]
[info]   (min, avg, max) = (585.542, 591.349, 609.249), stdev = 10.043
[info]   CI (99.9%): [552.677, 630.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:57:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1384440.351 ops/s
[info] # Warmup Iteration   2: 1879018.773 ops/s
[info] # Warmup Iteration   3: 1888219.861 ops/s
[info] # Warmup Iteration   4: 1888270.627 ops/s
[info] # Warmup Iteration   5: 1856395.895 ops/s
[info] Iteration   1: 1889790.129 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1890868.713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1869660.238 ops/s
[info]                  ·gc.alloc.rate:      2.390 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1880911.560 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1891602.623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1884566.653 ±(99.9%) 36125.651 ops/s [Average]
[info]   (min, avg, max) = (1869660.238, 1884566.653, 1891602.623), stdev = 9381.717
[info]   CI (99.9%): [1848441.001, 1920692.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.478 ±(99.9%) 4.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.478, 2.390), stdev = 1.069
[info]   CI (99.9%): [≈ 0, 4.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.403 ±(99.9%) 3.465 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.403, 2.012), stdev = 0.900
[info]   CI (99.9%): [≈ 0, 3.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:57:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15871.005 ops/s
[info] # Warmup Iteration   2: 39307.292 ops/s
[info] # Warmup Iteration   3: 40181.791 ops/s
[info] # Warmup Iteration   4: 40722.618 ops/s
[info] # Warmup Iteration   5: 40568.394 ops/s
[info] Iteration   1: 39926.474 ops/s
[info]                  ·gc.alloc.rate:                   1857.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              73210.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79825.484 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 40780.199 ops/s
[info]                  ·gc.alloc.rate:                   1881.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              72628.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78267.864 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41025.831 ops/s
[info]                  ·gc.alloc.rate:                   1878.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              72085.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51913.878 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 40813.885 ops/s
[info]                  ·gc.alloc.rate:                   1897.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              73189.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78345.871 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40817.444 ops/s
[info]                  ·gc.alloc.rate:                   1896.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              73138.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78457.619 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   40672.767 ±(99.9%) 1649.490 ops/s [Average]
[info]   (min, avg, max) = (39926.474, 40672.767, 41025.831), stdev = 428.367
[info]   CI (99.9%): [39023.277, 42322.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1882.402 ±(99.9%) 62.999 MB/sec [Average]
[info]   (min, avg, max) = (1857.361, 1882.402, 1897.666), stdev = 16.361
[info]   CI (99.9%): [1819.402, 1945.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72850.336 ±(99.9%) 1888.866 B/op [Average]
[info]   (min, avg, max) = (72085.050, 72850.336, 73210.119), stdev = 490.532
[info]   CI (99.9%): [70961.471, 74739.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.284 ±(99.9%) 4.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.284, 3.213), stdev = 1.219
[info]   CI (99.9%): [≈ 0, 5.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1894.364 ±(99.9%) 1165.208 MB/sec [Average]
[info]   (min, avg, max) = (1353.091, 1894.364, 2034.376), stdev = 302.601
[info]   CI (99.9%): [729.156, 3059.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   73362.143 ±(99.9%) 46234.609 B/op [Average]
[info]   (min, avg, max) = (51913.878, 73362.143, 79825.484), stdev = 12006.981
[info]   CI (99.9%): [27127.534, 119596.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18992.537 ops/s
[info] # Warmup Iteration   2: 36412.163 ops/s
[info] # Warmup Iteration   3: 38169.813 ops/s
[info] # Warmup Iteration   4: 38339.352 ops/s
[info] # Warmup Iteration   5: 38676.668 ops/s
[info] Iteration   1: 37854.061 ops/s
[info]                  ·gc.alloc.rate:                   725.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              30166.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28029.238 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 37679.433 ops/s
[info]                  ·gc.alloc.rate:                   730.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              30504.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28156.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 38638.379 ops/s
[info]                  ·gc.alloc.rate:                   738.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              30082.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27459.862 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 38631.179 ops/s
[info]                  ·gc.alloc.rate:                   735.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              29976.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27464.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 38811.451 ops/s
[info]                  ·gc.alloc.rate:                   747.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              30318.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27363.787 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   38322.901 ±(99.9%) 1988.872 ops/s [Average]
[info]   (min, avg, max) = (37679.433, 38322.901, 38811.451), stdev = 516.504
[info]   CI (99.9%): [36334.029, 40311.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   735.472 ±(99.9%) 32.353 MB/sec [Average]
[info]   (min, avg, max) = (725.405, 735.472, 747.497), stdev = 8.402
[info]   CI (99.9%): [703.119, 767.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   30209.893 ±(99.9%) 796.507 B/op [Average]
[info]   (min, avg, max) = (29976.789, 30209.893, 30504.741), stdev = 206.850
[info]   CI (99.9%): [29413.386, 31006.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.682 ±(99.9%) 2.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.682, 1.696), stdev = 0.711
[info]   CI (99.9%): [≈ 0, 3.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   674.168 ±(99.9%) 1.030 MB/sec [Average]
[info]   (min, avg, max) = (674.017, 674.168, 674.643), stdev = 0.268
[info]   CI (99.9%): [673.138, 675.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27694.685 ±(99.9%) 1418.626 B/op [Average]
[info]   (min, avg, max) = (27363.787, 27694.685, 28156.414), stdev = 368.413
[info]   CI (99.9%): [26276.060, 29113.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:56:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23300.208 ops/s
[info] # Warmup Iteration   2: 54074.508 ops/s
[info] # Warmup Iteration   3: 54568.573 ops/s
[info] # Warmup Iteration   4: 55905.789 ops/s
[info] # Warmup Iteration   5: 56155.146 ops/s
[info] Iteration   1: 55897.587 ops/s
[info]                  ·gc.alloc.rate:                   602.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              16981.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18962.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 54917.625 ops/s
[info]                  ·gc.alloc.rate:                   595.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              17057.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19319.441 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 55980.279 ops/s
[info]                  ·gc.alloc.rate:                   604.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              16988.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18952.312 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 55899.356 ops/s
[info]                  ·gc.alloc.rate:                   599.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              16890.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18980.109 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 56010.953 ops/s
[info]                  ·gc.alloc.rate:                   601.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              16900.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18941.825 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   55741.160 ±(99.9%) 1783.052 ops/s [Average]
[info]   (min, avg, max) = (54917.625, 55741.160, 56010.953), stdev = 463.053
[info]   CI (99.9%): [53958.109, 57524.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   600.708 ±(99.9%) 13.566 MB/sec [Average]
[info]   (min, avg, max) = (595.146, 600.708, 604.213), stdev = 3.523
[info]   CI (99.9%): [587.142, 614.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16963.697 ±(99.9%) 266.177 B/op [Average]
[info]   (min, avg, max) = (16890.379, 16963.697, 17057.569), stdev = 69.125
[info]   CI (99.9%): [16697.520, 17229.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.212 ±(99.9%) 1.783 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.212, 1.041), stdev = 0.463
[info]   CI (99.9%): [≈ 0, 1.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.978 ±(99.9%) 50.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.978, 29.306), stdev = 13.043
[info]   CI (99.9%): [≈ 0, 56.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.895 ±(99.9%) 1.244 MB/sec [Average]
[info]   (min, avg, max) = (673.319, 673.895, 674.064), stdev = 0.323
[info]   CI (99.9%): [672.651, 675.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19031.144 ±(99.9%) 622.949 B/op [Average]
[info]   (min, avg, max) = (18941.825, 19031.144, 19319.441), stdev = 161.778
[info]   CI (99.9%): [18408.195, 19654.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:56:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134369.951 ops/s
[info] # Warmup Iteration   2: 198854.031 ops/s
[info] # Warmup Iteration   3: 206079.875 ops/s
[info] # Warmup Iteration   4: 195533.340 ops/s
[info] # Warmup Iteration   5: 206920.110 ops/s
[info] Iteration   1: 205168.674 ops/s
[info]                  ·gc.alloc.rate:                   687.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              5275.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5171.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 198718.645 ops/s
[info]                  ·gc.alloc.rate:                   666.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              5279.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5333.781 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 207520.136 ops/s
[info]                  ·gc.alloc.rate:                   688.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              5222.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5107.759 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 205750.126 ops/s
[info]                  ·gc.alloc.rate:                   684.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              5236.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5146.348 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 207244.170 ops/s
[info]                  ·gc.alloc.rate:                   695.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              5280.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5109.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   204880.350 ±(99.9%) 13798.309 ops/s [Average]
[info]   (min, avg, max) = (198718.645, 204880.350, 207520.136), stdev = 3583.377
[info]   CI (99.9%): [191082.041, 218678.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   684.584 ±(99.9%) 41.441 MB/sec [Average]
[info]   (min, avg, max) = (666.673, 684.584, 695.289), stdev = 10.762
[info]   CI (99.9%): [643.143, 726.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5258.959 ±(99.9%) 105.505 B/op [Average]
[info]   (min, avg, max) = (5222.831, 5258.959, 5280.953), stdev = 27.399
[info]   CI (99.9%): [5153.454, 5364.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.560 ±(99.9%) 4.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.560, 2.737), stdev = 1.217
[info]   CI (99.9%): [≈ 0, 5.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.295 ±(99.9%) 35.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.295, 20.999), stdev = 9.339
[info]   CI (99.9%): [≈ 0, 40.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.341 ±(99.9%) 2.343 MB/sec [Average]
[info]   (min, avg, max) = (672.699, 673.341, 674.029), stdev = 0.609
[info]   CI (99.9%): [670.998, 675.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5173.711 ±(99.9%) 359.501 B/op [Average]
[info]   (min, avg, max) = (5107.759, 5173.711, 5333.781), stdev = 93.361
[info]   CI (99.9%): [4814.210, 5533.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:56:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6112.742 ops/s
[info] # Warmup Iteration   2: 22490.526 ops/s
[info] # Warmup Iteration   3: 24056.053 ops/s
[info] # Warmup Iteration   4: 23784.803 ops/s
[info] # Warmup Iteration   5: 24148.034 ops/s
[info] Iteration   1: 23738.148 ops/s
[info]                  ·gc.alloc.rate:                   1233.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              81785.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89390.861 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 24044.902 ops/s
[info]                  ·gc.alloc.rate:                   1230.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              80541.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88293.334 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24034.690 ops/s
[info]                  ·gc.alloc.rate:                   1207.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              79030.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44186.842 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24201.902 ops/s
[info]                  ·gc.alloc.rate:                   1230.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              80010.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87807.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24114.884 ops/s
[info]                  ·gc.alloc.rate:                   1236.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              80685.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88167.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   24026.905 ±(99.9%) 672.843 ops/s [Average]
[info]   (min, avg, max) = (23738.148, 24026.905, 24201.902), stdev = 174.735
[info]   CI (99.9%): [23354.062, 24699.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1227.419 ±(99.9%) 44.495 MB/sec [Average]
[info]   (min, avg, max) = (1207.197, 1227.419, 1236.033), stdev = 11.555
[info]   CI (99.9%): [1182.924, 1271.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80410.720 ±(99.9%) 3872.351 B/op [Average]
[info]   (min, avg, max) = (79030.917, 80410.720, 81785.174), stdev = 1005.637
[info]   CI (99.9%): [76538.369, 84283.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.815 ±(99.9%) 2.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.815, 1.363), stdev = 0.744
[info]   CI (99.9%): [≈ 0, 3.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1214.492 ±(99.9%) 1161.404 MB/sec [Average]
[info]   (min, avg, max) = (674.954, 1214.492, 1350.655), stdev = 301.613
[info]   CI (99.9%): [53.089, 2375.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   79569.169 ±(99.9%) 76197.133 B/op [Average]
[info]   (min, avg, max) = (44186.842, 79569.169, 89390.861), stdev = 19788.153
[info]   CI (99.9%): [3372.037, 155766.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:55:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24134.782 ops/s
[info] # Warmup Iteration   2: 45743.108 ops/s
[info] # Warmup Iteration   3: 45523.888 ops/s
[info] # Warmup Iteration   4: 46117.555 ops/s
[info] # Warmup Iteration   5: 46183.595 ops/s
[info] Iteration   1: 45976.007 ops/s
[info]                  ·gc.alloc.rate:                   705.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              24165.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23077.201 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 46340.073 ops/s
[info]                  ·gc.alloc.rate:                   708.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              24078.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22894.475 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 46272.788 ops/s
[info]                  ·gc.alloc.rate:                   708.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              24100.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22951.761 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 46012.912 ops/s
[info]                  ·gc.alloc.rate:                   698.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              23892.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23080.930 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 46089.602 ops/s
[info]                  ·gc.alloc.rate:                   706.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              24138.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23041.877 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   46138.276 ±(99.9%) 618.600 ops/s [Average]
[info]   (min, avg, max) = (45976.007, 46138.276, 46340.073), stdev = 160.649
[info]   CI (99.9%): [45519.676, 46756.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   705.695 ±(99.9%) 16.370 MB/sec [Average]
[info]   (min, avg, max) = (698.449, 705.695, 708.970), stdev = 4.251
[info]   CI (99.9%): [689.325, 722.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24075.113 ±(99.9%) 414.488 B/op [Average]
[info]   (min, avg, max) = (23892.147, 24075.113, 24165.599), stdev = 107.641
[info]   CI (99.9%): [23660.625, 24489.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.712 ±(99.9%) 4.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 2.848), stdev = 1.233
[info]   CI (99.9%): [≈ 0, 5.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   674.444 ±(99.9%) 1.441 MB/sec [Average]
[info]   (min, avg, max) = (673.974, 674.444, 674.734), stdev = 0.374
[info]   CI (99.9%): [673.004, 675.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23009.249 ±(99.9%) 318.105 B/op [Average]
[info]   (min, avg, max) = (22894.475, 23009.249, 23080.930), stdev = 82.611
[info]   CI (99.9%): [22691.144, 23327.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:55:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42664.724 ops/s
[info] # Warmup Iteration   2: 97715.290 ops/s
[info] # Warmup Iteration   3: 98526.835 ops/s
[info] # Warmup Iteration   4: 98425.203 ops/s
[info] # Warmup Iteration   5: 100530.411 ops/s
[info] Iteration   1: 100315.460 ops/s
[info]                  ·gc.alloc.rate:                   1411.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              22145.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21168.838 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 100629.129 ops/s
[info]                  ·gc.alloc.rate:                   1405.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              21984.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21118.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 100402.061 ops/s
[info]                  ·gc.alloc.rate:                   1403.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              22006.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21181.824 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 100387.209 ops/s
[info]                  ·gc.alloc.rate:                   1427.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              22385.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21200.443 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 100105.812 ops/s
[info]                  ·gc.alloc.rate:                   1423.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              22377.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21281.739 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   100367.934 ±(99.9%) 723.523 ops/s [Average]
[info]   (min, avg, max) = (100105.812, 100367.934, 100629.129), stdev = 187.897
[info]   CI (99.9%): [99644.411, 101091.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1414.222 ±(99.9%) 41.054 MB/sec [Average]
[info]   (min, avg, max) = (1403.709, 1414.222, 1427.635), stdev = 10.662
[info]   CI (99.9%): [1373.168, 1455.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22179.947 ±(99.9%) 747.513 B/op [Average]
[info]   (min, avg, max) = (21984.561, 22179.947, 22385.045), stdev = 194.127
[info]   CI (99.9%): [21432.434, 22927.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.522 ±(99.9%) 1.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.522, 0.980), stdev = 0.438
[info]   CI (99.9%): [≈ 0, 2.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1351.131 ±(99.9%) 6.588 MB/sec [Average]
[info]   (min, avg, max) = (1348.949, 1351.131, 1353.376), stdev = 1.711
[info]   CI (99.9%): [1344.543, 1357.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21190.337 ±(99.9%) 228.642 B/op [Average]
[info]   (min, avg, max) = (21118.841, 21190.337, 21281.739), stdev = 59.378
[info]   CI (99.9%): [20961.695, 21418.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:55:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126362.093 ops/s
[info] # Warmup Iteration   2: 173239.214 ops/s
[info] # Warmup Iteration   3: 174640.808 ops/s
[info] # Warmup Iteration   4: 178733.186 ops/s
[info] # Warmup Iteration   5: 178179.017 ops/s
[info] Iteration   1: 176457.269 ops/s
[info]                  ·gc.alloc.rate:                   584.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              5218.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6006.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 177892.467 ops/s
[info]                  ·gc.alloc.rate:      566.959 MB/sec
[info]                  ·gc.alloc.rate.norm: 5017.508 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 177687.324 ops/s
[info]                  ·gc.alloc.rate:                   588.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              5209.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5959.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 176395.567 ops/s
[info]                  ·gc.alloc.rate:                   588.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              5255.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6002.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 177423.027 ops/s
[info]                  ·gc.alloc.rate:                   580.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              5146.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5962.284 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   177171.131 ±(99.9%) 2696.365 ops/s [Average]
[info]   (min, avg, max) = (176395.567, 177171.131, 177892.467), stdev = 700.237
[info]   CI (99.9%): [174474.766, 179867.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   581.809 ±(99.9%) 34.675 MB/sec [Average]
[info]   (min, avg, max) = (566.959, 581.809, 588.931), stdev = 9.005
[info]   CI (99.9%): [547.135, 616.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5169.527 ±(99.9%) 360.442 B/op [Average]
[info]   (min, avg, max) = (5017.508, 5169.527, 5255.442), stdev = 93.606
[info]   CI (99.9%): [4809.085, 5529.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.608 ±(99.9%) 5.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 2.955), stdev = 1.313
[info]   CI (99.9%): [≈ 0, 5.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.421 ±(99.9%) 45.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.421, 26.366), stdev = 11.711
[info]   CI (99.9%): [≈ 0, 50.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.157 ±(99.9%) 1158.425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.157, 673.341), stdev = 300.839
[info]   CI (99.9%): [≈ 0, 1696.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4786.256 ±(99.9%) 10303.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4786.256, 6006.937), stdev = 2675.690
[info]   CI (99.9%): [≈ 0, 15089.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148032.731 ops/s
[info] # Warmup Iteration   2: 188330.544 ops/s
[info] # Warmup Iteration   3: 193054.822 ops/s
[info] # Warmup Iteration   4: 193142.792 ops/s
[info] # Warmup Iteration   5: 193019.244 ops/s
[info] Iteration   1: 193135.699 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 192897.354 ops/s
[info]                  ·gc.alloc.rate:      0.486 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.965 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 193016.286 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 193184.740 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 193000.031 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   193046.822 ±(99.9%) 440.655 ops/s [Average]
[info]   (min, avg, max) = (192897.354, 193046.822, 193184.740), stdev = 114.437
[info]   CI (99.9%): [192606.167, 193487.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.097 ±(99.9%) 0.836 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.097, 0.486), stdev = 0.217
[info]   CI (99.9%): [≈ 0, 0.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.795 ±(99.9%) 6.825 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.795, 3.965), stdev = 1.772
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:54:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40176.753 ops/s
[info] # Warmup Iteration   2: 66200.543 ops/s
[info] # Warmup Iteration   3: 67682.934 ops/s
[info] # Warmup Iteration   4: 67817.405 ops/s
[info] # Warmup Iteration   5: 68070.366 ops/s
[info] Iteration   1: 67773.470 ops/s
[info]                  ·gc.alloc.rate:                   1042.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              24204.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31310.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 67614.790 ops/s
[info]                  ·gc.alloc.rate:                   1017.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              23691.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15699.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 67313.091 ops/s
[info]                  ·gc.alloc.rate:                   1032.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              24152.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31555.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 67480.927 ops/s
[info]                  ·gc.alloc.rate:                   1014.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              23654.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15745.807 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 66860.405 ops/s
[info]                  ·gc.alloc.rate:                   1033.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              24329.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31800.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   67408.537 ±(99.9%) 1348.434 ops/s [Average]
[info]   (min, avg, max) = (66860.405, 67408.537, 67773.470), stdev = 350.184
[info]   CI (99.9%): [66060.103, 68756.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1028.060 ±(99.9%) 45.097 MB/sec [Average]
[info]   (min, avg, max) = (1014.048, 1028.060, 1042.152), stdev = 11.712
[info]   CI (99.9%): [982.963, 1073.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24006.366 ±(99.9%) 1200.093 B/op [Average]
[info]   (min, avg, max) = (23654.069, 24006.366, 24329.749), stdev = 311.660
[info]   CI (99.9%): [22806.272, 25206.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.583 ±(99.9%) 3.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 1.947), stdev = 0.870
[info]   CI (99.9%): [≈ 0, 3.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1079.537 ±(99.9%) 1422.803 MB/sec [Average]
[info]   (min, avg, max) = (674.526, 1079.537, 1350.645), stdev = 369.497
[info]   CI (99.9%): [≈ 0, 2502.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   25222.045 ±(99.9%) 33399.128 B/op [Average]
[info]   (min, avg, max) = (15699.102, 25222.045, 31800.214), stdev = 8673.647
[info]   CI (99.9%): [≈ 0, 58621.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:54:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7302.310 ops/s
[info] # Warmup Iteration   2: 23325.669 ops/s
[info] # Warmup Iteration   3: 23864.213 ops/s
[info] # Warmup Iteration   4: 23393.621 ops/s
[info] # Warmup Iteration   5: 23827.222 ops/s
[info] Iteration   1: 23979.394 ops/s
[info]                  ·gc.alloc.rate:                   1229.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              80695.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88423.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 23895.300 ops/s
[info]                  ·gc.alloc.rate:                   1224.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              80631.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88777.972 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 23502.309 ops/s
[info]                  ·gc.alloc.rate:                   1179.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              79021.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45142.252 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 23984.916 ops/s
[info]                  ·gc.alloc.rate:                   1226.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              80473.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88557.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24093.061 ops/s
[info]                  ·gc.alloc.rate:                   1219.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              79673.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88244.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   23890.996 ±(99.9%) 879.266 ops/s [Average]
[info]   (min, avg, max) = (23502.309, 23890.996, 24093.061), stdev = 228.343
[info]   CI (99.9%): [23011.730, 24770.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1215.795 ±(99.9%) 78.496 MB/sec [Average]
[info]   (min, avg, max) = (1179.909, 1215.795, 1229.298), stdev = 20.385
[info]   CI (99.9%): [1137.300, 1294.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80099.273 ±(99.9%) 2804.640 B/op [Average]
[info]   (min, avg, max) = (79021.398, 80099.273, 80695.447), stdev = 728.356
[info]   CI (99.9%): [77294.633, 82903.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.365 ±(99.9%) 3.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.365, 2.720), stdev = 0.962
[info]   CI (99.9%): [≈ 0, 5.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1213.772 ±(99.9%) 1161.822 MB/sec [Average]
[info]   (min, avg, max) = (674.042, 1213.772, 1350.523), stdev = 301.721
[info]   CI (99.9%): [51.950, 2375.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   79829.153 ±(99.9%) 74669.940 B/op [Average]
[info]   (min, avg, max) = (45142.252, 79829.153, 88777.972), stdev = 19391.546
[info]   CI (99.9%): [5159.213, 154499.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:54:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5647.346 ops/s
[info] # Warmup Iteration   2: 25901.933 ops/s
[info] # Warmup Iteration   3: 27145.978 ops/s
[info] # Warmup Iteration   4: 26823.676 ops/s
[info] # Warmup Iteration   5: 26336.299 ops/s
[info] Iteration   1: 27269.338 ops/s
[info]                  ·gc.alloc.rate:                   1093.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              63089.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77814.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 27140.785 ops/s
[info]                  ·gc.alloc.rate:                   1076.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              62454.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39092.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 27156.836 ops/s
[info]                  ·gc.alloc.rate:                   1105.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              64049.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78157.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27106.004 ops/s
[info]                  ·gc.alloc.rate:                   1093.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              63486.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78343.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27317.501 ops/s
[info]                  ·gc.alloc.rate:                   1081.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              62303.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38873.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   27198.093 ±(99.9%) 348.696 ops/s [Average]
[info]   (min, avg, max) = (27106.004, 27198.093, 27317.501), stdev = 90.555
[info]   CI (99.9%): [26849.396, 27546.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1089.949 ±(99.9%) 42.670 MB/sec [Average]
[info]   (min, avg, max) = (1076.842, 1089.949, 1105.049), stdev = 11.081
[info]   CI (99.9%): [1047.280, 1132.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   63076.559 ±(99.9%) 2789.407 B/op [Average]
[info]   (min, avg, max) = (62303.103, 63076.559, 64049.249), stdev = 724.400
[info]   CI (99.9%): [60287.153, 65865.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.444 ±(99.9%) 6.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.444, 3.619), stdev = 1.572
[info]   CI (99.9%): [≈ 0, 7.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1078.917 ±(99.9%) 1421.873 MB/sec [Average]
[info]   (min, avg, max) = (674.026, 1078.917, 1349.118), stdev = 369.256
[info]   CI (99.9%): [≈ 0, 2500.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   62456.241 ±(99.9%) 82516.675 B/op [Average]
[info]   (min, avg, max) = (38873.101, 62456.241, 78343.441), stdev = 21429.318
[info]   CI (99.9%): [≈ 0, 144972.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 433369.329 ops/s
[info] # Warmup Iteration   2: 505273.480 ops/s
[info] # Warmup Iteration   3: 534237.643 ops/s
[info] # Warmup Iteration   4: 537123.359 ops/s
[info] # Warmup Iteration   5: 538904.133 ops/s
[info] Iteration   1: 539526.588 ops/s
[info]                  ·gc.alloc.rate:                   1437.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              4193.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3922.371 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 534944.855 ops/s
[info]                  ·gc.alloc.rate:                   1421.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              4182.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3957.907 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 528708.088 ops/s
[info]                  ·gc.alloc.rate:                   1429.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              4255.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4007.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 538185.405 ops/s
[info]                  ·gc.alloc.rate:                   1441.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              4214.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3940.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 538662.330 ops/s
[info]                  ·gc.alloc.rate:                   1455.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              4252.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3941.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   536005.453 ±(99.9%) 17067.735 ops/s [Average]
[info]   (min, avg, max) = (528708.088, 536005.453, 539526.588), stdev = 4432.437
[info]   CI (99.9%): [518937.718, 553073.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1436.921 ±(99.9%) 48.816 MB/sec [Average]
[info]   (min, avg, max) = (1421.493, 1436.921, 1455.127), stdev = 12.677
[info]   CI (99.9%): [1388.105, 1485.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4219.892 ±(99.9%) 127.667 B/op [Average]
[info]   (min, avg, max) = (4182.845, 4219.892, 4255.726), stdev = 33.155
[info]   CI (99.9%): [4092.225, 4347.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.097 ±(99.9%) 0.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.244), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1346.325 ±(99.9%) 6.712 MB/sec [Average]
[info]   (min, avg, max) = (1344.435, 1346.325, 1348.733), stdev = 1.743
[info]   CI (99.9%): [1339.612, 1353.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3953.961 ±(99.9%) 124.905 B/op [Average]
[info]   (min, avg, max) = (3922.371, 3953.961, 4007.451), stdev = 32.438
[info]   CI (99.9%): [3829.056, 4078.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:53:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1117.370 ops/s
[info] # Warmup Iteration   2: 19703.504 ops/s
[info] # Warmup Iteration   3: 21924.963 ops/s
[info] # Warmup Iteration   4: 22220.458 ops/s
[info] # Warmup Iteration   5: 22165.988 ops/s
[info] Iteration   1: 22343.611 ops/s
[info]                  ·gc.alloc.rate:                   1678.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              118186.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142403.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 22349.027 ops/s
[info]                  ·gc.alloc.rate:                   1652.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              116386.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94992.457 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22199.386 ops/s
[info]                  ·gc.alloc.rate:                   1641.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              116381.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95715.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22461.746 ops/s
[info]                  ·gc.alloc.rate:                   1673.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              117266.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142075.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22247.447 ops/s
[info]                  ·gc.alloc.rate:                   1657.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              117290.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95706.357 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   22320.243 ±(99.9%) 391.288 ops/s [Average]
[info]   (min, avg, max) = (22199.386, 22320.243, 22461.746), stdev = 101.616
[info]   CI (99.9%): [21928.956, 22711.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1660.688 ±(99.9%) 58.313 MB/sec [Average]
[info]   (min, avg, max) = (1641.420, 1660.688, 1678.290), stdev = 15.144
[info]   CI (99.9%): [1602.375, 1719.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   117102.330 ±(99.9%) 2899.990 B/op [Average]
[info]   (min, avg, max) = (116381.677, 117102.330, 118186.393), stdev = 753.118
[info]   CI (99.9%): [114202.340, 120002.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.760 ±(99.9%) 7.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.760, 4.376), stdev = 1.906
[info]   CI (99.9%): [≈ 0, 9.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1620.209 ±(99.9%) 1422.224 MB/sec [Average]
[info]   (min, avg, max) = (1348.768, 1620.209, 2027.421), stdev = 369.347
[info]   CI (99.9%): [197.985, 3042.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   114178.637 ±(99.9%) 98644.731 B/op [Average]
[info]   (min, avg, max) = (94992.457, 114178.637, 142403.265), stdev = 25617.723
[info]   CI (99.9%): [15533.906, 212823.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:53:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34991.223 ops/s
[info] # Warmup Iteration   2: 67002.673 ops/s
[info] # Warmup Iteration   3: 69040.339 ops/s
[info] # Warmup Iteration   4: 69382.422 ops/s
[info] # Warmup Iteration   5: 66694.083 ops/s
[info] Iteration   1: 69384.855 ops/s
[info]                  ·gc.alloc.rate:                   1373.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              31162.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30611.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 69275.478 ops/s
[info]                  ·gc.alloc.rate:                   1363.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              30975.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30691.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 69210.473 ops/s
[info]                  ·gc.alloc.rate:                   1358.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              30877.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30734.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 69461.576 ops/s
[info]                  ·gc.alloc.rate:                   1374.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              31139.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30654.468 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 69355.673 ops/s
[info]                  ·gc.alloc.rate:                   1385.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              31434.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30717.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   69337.611 ±(99.9%) 375.068 ops/s [Average]
[info]   (min, avg, max) = (69210.473, 69337.611, 69461.576), stdev = 97.404
[info]   CI (99.9%): [68962.543, 69712.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1370.915 ±(99.9%) 40.496 MB/sec [Average]
[info]   (min, avg, max) = (1358.257, 1370.915, 1385.280), stdev = 10.517
[info]   CI (99.9%): [1330.419, 1411.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   31117.751 ±(99.9%) 819.161 B/op [Average]
[info]   (min, avg, max) = (30877.075, 31117.751, 31434.433), stdev = 212.733
[info]   CI (99.9%): [30298.591, 31936.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.472 ±(99.9%) 2.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.472, 1.415), stdev = 0.668
[info]   CI (99.9%): [≈ 0, 3.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1351.704 ±(99.9%) 6.725 MB/sec [Average]
[info]   (min, avg, max) = (1349.224, 1351.704, 1353.677), stdev = 1.747
[info]   CI (99.9%): [1344.978, 1358.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30681.837 ±(99.9%) 190.570 B/op [Average]
[info]   (min, avg, max) = (30611.608, 30681.837, 30734.438), stdev = 49.490
[info]   CI (99.9%): [30491.267, 30872.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:53:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75035.919 ops/s
[info] # Warmup Iteration   2: 143846.063 ops/s
[info] # Warmup Iteration   3: 147493.972 ops/s
[info] # Warmup Iteration   4: 143679.542 ops/s
[info] # Warmup Iteration   5: 146104.278 ops/s
[info] Iteration   1: 148528.513 ops/s
[info]                  ·gc.alloc.rate:                   1452.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              15386.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14304.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 147837.176 ops/s
[info]                  ·gc.alloc.rate:                   1442.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              15351.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14377.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 148270.315 ops/s
[info]                  ·gc.alloc.rate:                   1464.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              15539.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14346.717 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 143046.609 ops/s
[info]                  ·gc.alloc.rate:                   1408.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              15494.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14885.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 145578.220 ops/s
[info]                  ·gc.alloc.rate:                   1423.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              15389.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14637.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   146652.166 ±(99.9%) 8968.102 ops/s [Average]
[info]   (min, avg, max) = (143046.609, 146652.166, 148528.513), stdev = 2328.988
[info]   CI (99.9%): [137684.064, 155620.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1437.957 ±(99.9%) 86.452 MB/sec [Average]
[info]   (min, avg, max) = (1408.143, 1437.957, 1464.201), stdev = 22.451
[info]   CI (99.9%): [1351.504, 1524.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15432.211 ±(99.9%) 308.910 B/op [Average]
[info]   (min, avg, max) = (15351.834, 15432.211, 15539.140), stdev = 80.223
[info]   CI (99.9%): [15123.301, 15741.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.758 ±(99.9%) 0.958 B/op [Average]
[info]   (min, avg, max) = (0.450, 0.758, 1.108), stdev = 0.249
[info]   CI (99.9%): [≈ 0, 1.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1351.781 ±(99.9%) 5.640 MB/sec [Average]
[info]   (min, avg, max) = (1349.962, 1351.781, 1353.596), stdev = 1.465
[info]   CI (99.9%): [1346.141, 1357.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14510.290 ±(99.9%) 949.876 B/op [Average]
[info]   (min, avg, max) = (14304.250, 14510.290, 14885.010), stdev = 246.680
[info]   CI (99.9%): [13560.414, 15460.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 785914.945 ops/s
[info] # Warmup Iteration   2: 1054447.105 ops/s
[info] # Warmup Iteration   3: 1062931.798 ops/s
[info] # Warmup Iteration   4: 1048157.074 ops/s
[info] # Warmup Iteration   5: 1042845.709 ops/s
[info] Iteration   1: 1024131.266 ops/s
[info]                  ·gc.alloc.rate:                   871.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1339.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1034.963 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1023255.860 ops/s
[info]                  ·gc.alloc.rate:                   864.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              1329.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1035.790 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1019261.900 ops/s
[info]                  ·gc.alloc.rate:                   883.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              1363.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2079.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1046678.313 ops/s
[info]                  ·gc.alloc.rate:                   884.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              1330.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1012.664 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1047099.653 ops/s
[info]                  ·gc.alloc.rate:                   883.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1012.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1032085.398 ±(99.9%) 52517.619 ops/s [Average]
[info]   (min, avg, max) = (1019261.900, 1032085.398, 1047099.653), stdev = 13638.659
[info]   CI (99.9%): [979567.779, 1084603.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   877.523 ±(99.9%) 34.924 MB/sec [Average]
[info]   (min, avg, max) = (864.498, 877.523, 884.878), stdev = 9.070
[info]   CI (99.9%): [842.599, 912.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1338.315 ±(99.9%) 56.815 B/op [Average]
[info]   (min, avg, max) = (1328.491, 1338.315, 1363.619), stdev = 14.755
[info]   CI (99.9%): [1281.500, 1395.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.025 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.064), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   808.112 ±(99.9%) 1159.624 MB/sec [Average]
[info]   (min, avg, max) = (673.347, 808.112, 1346.826), stdev = 301.151
[info]   CI (99.9%): [≈ 0, 1967.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1235.098 ±(99.9%) 1818.860 B/op [Average]
[info]   (min, avg, max) = (1012.254, 1235.098, 2079.818), stdev = 472.352
[info]   CI (99.9%): [≈ 0, 3053.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:52:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 924214.145 ops/s
[info] # Warmup Iteration   2: 1128064.552 ops/s
[info] # Warmup Iteration   3: 1184954.626 ops/s
[info] # Warmup Iteration   4: 1188904.998 ops/s
[info] # Warmup Iteration   5: 1189200.405 ops/s
[info] Iteration   1: 1187604.120 ops/s
[info]                  ·gc.alloc.rate:      1.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.372 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1188923.241 ops/s
[info]                  ·gc.alloc.rate:      0.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1189624.617 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1189747.868 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1189774.804 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1189134.930 ±(99.9%) 3556.960 ops/s [Average]
[info]   (min, avg, max) = (1187604.120, 1189134.930, 1189774.804), stdev = 923.731
[info]   CI (99.9%): [1185577.970, 1192691.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.208 ±(99.9%) 1.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.208, 1.035), stdev = 0.463
[info]   CI (99.9%): [≈ 0, 1.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.275 ±(99.9%) 2.361 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.275, 1.372), stdev = 0.613
[info]   CI (99.9%): [≈ 0, 2.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:52:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42243.946 ops/s
[info] # Warmup Iteration   2: 115616.907 ops/s
[info] # Warmup Iteration   3: 118362.260 ops/s
[info] # Warmup Iteration   4: 118073.009 ops/s
[info] # Warmup Iteration   5: 117752.788 ops/s
[info] Iteration   1: 117740.959 ops/s
[info]                  ·gc.alloc.rate:                   1370.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              18325.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18039.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 118661.496 ops/s
[info]                  ·gc.alloc.rate:                   1371.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              18184.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17900.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 119736.866 ops/s
[info]                  ·gc.alloc.rate:                   1400.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              18406.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17757.189 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 118346.822 ops/s
[info]                  ·gc.alloc.rate:                   1373.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              18268.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17974.424 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 117494.066 ops/s
[info]                  ·gc.alloc.rate:                   1363.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              18265.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18122.588 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   118396.042 ±(99.9%) 3397.194 ops/s [Average]
[info]   (min, avg, max) = (117494.066, 118396.042, 119736.866), stdev = 882.240
[info]   CI (99.9%): [114998.848, 121793.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1375.837 ±(99.9%) 54.942 MB/sec [Average]
[info]   (min, avg, max) = (1363.243, 1375.837, 1400.402), stdev = 14.268
[info]   CI (99.9%): [1320.895, 1430.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   18290.054 ±(99.9%) 316.970 B/op [Average]
[info]   (min, avg, max) = (18184.411, 18290.054, 18406.628), stdev = 82.316
[info]   CI (99.9%): [17973.085, 18607.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.609 ±(99.9%) 2.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.609, 1.657), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 3.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1350.845 ±(99.9%) 5.000 MB/sec [Average]
[info]   (min, avg, max) = (1349.347, 1350.845, 1352.600), stdev = 1.298
[info]   CI (99.9%): [1345.845, 1355.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17958.863 ±(99.9%) 536.775 B/op [Average]
[info]   (min, avg, max) = (17757.189, 17958.863, 18122.588), stdev = 139.399
[info]   CI (99.9%): [17422.088, 18495.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:52:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7458.107 ops/s
[info] # Warmup Iteration   2: 37008.843 ops/s
[info] # Warmup Iteration   3: 37503.409 ops/s
[info] # Warmup Iteration   4: 36493.219 ops/s
[info] # Warmup Iteration   5: 38450.256 ops/s
[info] Iteration   1: 37961.594 ops/s
[info]                  ·gc.alloc.rate:                   1405.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              58274.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55897.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38429.262 ops/s
[info]                  ·gc.alloc.rate:                   1410.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              57780.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55244.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 38287.185 ops/s
[info]                  ·gc.alloc.rate:                   1401.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              57604.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55503.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 38024.916 ops/s
[info]                  ·gc.alloc.rate:                   1402.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              58074.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55913.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 38212.532 ops/s
[info]                  ·gc.alloc.rate:                   1408.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              58042.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55693.597 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   38183.098 ±(99.9%) 736.628 ops/s [Average]
[info]   (min, avg, max) = (37961.594, 38183.098, 38429.262), stdev = 191.300
[info]   CI (99.9%): [37446.470, 38919.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1405.838 ±(99.9%) 15.423 MB/sec [Average]
[info]   (min, avg, max) = (1401.195, 1405.838, 1410.721), stdev = 4.005
[info]   CI (99.9%): [1390.415, 1421.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   57955.182 ±(99.9%) 1013.849 B/op [Average]
[info]   (min, avg, max) = (57604.254, 57955.182, 58274.561), stdev = 263.293
[info]   CI (99.9%): [56941.333, 58969.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.374 ±(99.9%) 2.973 B/op [Average]
[info]   (min, avg, max) = (0.853, 1.374, 2.585), stdev = 0.772
[info]   CI (99.9%): [≈ 0, 4.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1349.928 ±(99.9%) 5.927 MB/sec [Average]
[info]   (min, avg, max) = (1348.082, 1349.928, 1351.966), stdev = 1.539
[info]   CI (99.9%): [1344.001, 1355.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   55650.587 ±(99.9%) 1087.045 B/op [Average]
[info]   (min, avg, max) = (55244.209, 55650.587, 55913.760), stdev = 282.302
[info]   CI (99.9%): [54563.542, 56737.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:51:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 560074.894 ops/s
[info] # Warmup Iteration   2: 704248.516 ops/s
[info] # Warmup Iteration   3: 698823.762 ops/s
[info] # Warmup Iteration   4: 711910.592 ops/s
[info] # Warmup Iteration   5: 724296.544 ops/s
[info] Iteration   1: 724013.712 ops/s
[info]                  ·gc.alloc.rate:                   1445.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              3143.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2925.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 724364.400 ops/s
[info]                  ·gc.alloc.rate:                   1442.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              3135.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2925.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 725356.770 ops/s
[info]                  ·gc.alloc.rate:                   1469.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              3188.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2923.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 726866.238 ops/s
[info]                  ·gc.alloc.rate:                   1446.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              3130.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2919.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 715392.245 ops/s
[info]                  ·gc.alloc.rate:                   1450.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              3190.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2969.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   723198.673 ±(99.9%) 17335.591 ops/s [Average]
[info]   (min, avg, max) = (715392.245, 723198.673, 726866.238), stdev = 4501.998
[info]   CI (99.9%): [705863.082, 740534.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1450.879 ±(99.9%) 41.053 MB/sec [Average]
[info]   (min, avg, max) = (1442.811, 1450.879, 1469.343), stdev = 10.661
[info]   CI (99.9%): [1409.827, 1491.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3157.612 ±(99.9%) 113.219 B/op [Average]
[info]   (min, avg, max) = (3130.897, 3157.612, 3190.455), stdev = 29.403
[info]   CI (99.9%): [3044.394, 3270.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.063 ±(99.9%) 0.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.180), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1347.382 ±(99.9%) 6.587 MB/sec [Average]
[info]   (min, avg, max) = (1345.435, 1347.382, 1349.658), stdev = 1.711
[info]   CI (99.9%): [1340.795, 1353.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2932.383 ±(99.9%) 79.451 B/op [Average]
[info]   (min, avg, max) = (2919.322, 2932.383, 2969.050), stdev = 20.633
[info]   CI (99.9%): [2852.932, 3011.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:51:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 949.557 ops/s
[info] # Warmup Iteration   2: 26359.606 ops/s
[info] # Warmup Iteration   3: 29017.807 ops/s
[info] # Warmup Iteration   4: 29340.138 ops/s
[info] # Warmup Iteration   5: 28904.089 ops/s
[info] Iteration   1: 28858.095 ops/s
[info]                  ·gc.alloc.rate:                   2109.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              115096.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110379.289 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 29369.124 ops/s
[info]                  ·gc.alloc.rate:                   2133.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              114328.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108602.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 29384.951 ops/s
[info]                  ·gc.alloc.rate:                   2132.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              114254.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108703.425 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 29613.901 ops/s
[info]                  ·gc.alloc.rate:                   2150.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              114242.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107972.883 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 29428.882 ops/s
[info]                  ·gc.alloc.rate:                   2163.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              115696.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108815.499 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   29330.991 ±(99.9%) 1085.065 ops/s [Average]
[info]   (min, avg, max) = (28858.095, 29330.991, 29613.901), stdev = 281.788
[info]   CI (99.9%): [28245.926, 30416.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2137.870 ±(99.9%) 77.187 MB/sec [Average]
[info]   (min, avg, max) = (2109.968, 2137.870, 2163.036), stdev = 20.045
[info]   CI (99.9%): [2060.683, 2215.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114723.659 ±(99.9%) 2505.945 B/op [Average]
[info]   (min, avg, max) = (114242.776, 114723.659, 115696.796), stdev = 650.786
[info]   CI (99.9%): [112217.714, 117229.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.559 ±(99.9%) 4.901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.559, 3.346), stdev = 1.273
[info]   CI (99.9%): [≈ 0, 6.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2029.150 ±(99.9%) 16.766 MB/sec [Average]
[info]   (min, avg, max) = (2023.492, 2029.150, 2034.385), stdev = 4.354
[info]   CI (99.9%): [2012.384, 2045.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   108894.620 ±(99.9%) 3434.572 B/op [Average]
[info]   (min, avg, max) = (107972.883, 108894.620, 110379.289), stdev = 891.947
[info]   CI (99.9%): [105460.048, 112329.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:51:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134950.838 ops/s
[info] # Warmup Iteration   2: 322128.580 ops/s
[info] # Warmup Iteration   3: 342975.025 ops/s
[info] # Warmup Iteration   4: 336324.937 ops/s
[info] # Warmup Iteration   5: 338764.666 ops/s
[info] Iteration   1: 343456.835 ops/s
[info]                  ·gc.alloc.rate:                   978.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              4483.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3089.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 341913.073 ops/s
[info]                  ·gc.alloc.rate:                   978.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              4502.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6200.994 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 343117.069 ops/s
[info]                  ·gc.alloc.rate:                   973.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              4466.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3093.735 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 342965.491 ops/s
[info]                  ·gc.alloc.rate:                   970.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              4453.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3096.688 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 342824.244 ops/s
[info]                  ·gc.alloc.rate:                   985.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              4523.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6198.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   342855.343 ±(99.9%) 2221.445 ops/s [Average]
[info]   (min, avg, max) = (341913.073, 342855.343, 343456.835), stdev = 576.902
[info]   CI (99.9%): [340633.897, 345076.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   977.127 ±(99.9%) 21.602 MB/sec [Average]
[info]   (min, avg, max) = (970.346, 977.127, 985.115), stdev = 5.610
[info]   CI (99.9%): [955.525, 998.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4485.736 ±(99.9%) 107.822 B/op [Average]
[info]   (min, avg, max) = (4453.626, 4485.736, 4523.535), stdev = 28.001
[info]   CI (99.9%): [4377.914, 4593.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.172 ±(99.9%) 0.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.172, 0.287), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.135 ±(99.9%) 1422.365 MB/sec [Average]
[info]   (min, avg, max) = (674.055, 944.135, 1349.966), stdev = 369.384
[info]   CI (99.9%): [≈ 0, 2366.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4335.889 ±(99.9%) 6552.420 B/op [Average]
[info]   (min, avg, max) = (3089.138, 4335.889, 6200.994), stdev = 1701.643
[info]   CI (99.9%): [≈ 0, 10888.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1080778.693 ops/s
[info] # Warmup Iteration   2: 1425139.143 ops/s
[info] # Warmup Iteration   3: 1473310.880 ops/s
[info] # Warmup Iteration   4: 1471736.842 ops/s
[info] # Warmup Iteration   5: 1465516.046 ops/s
[info] Iteration   1: 1344496.665 ops/s
[info]                  ·gc.alloc.rate:                                  800.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             937.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.278 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.326 B/op
[info]                  ·gc.churn.Compressed_Class_Space:                0.005 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm:           0.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    0.146 B/op
[info]                  ·gc.churn.PS_Old_Gen:                            0.015 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:                       0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     905.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                1060.460 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        63.000 ms
[info] Iteration   2: 1435244.721 ops/s
[info]                  ·gc.alloc.rate:                   854.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              937.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 737.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1452793.953 ops/s
[info]                  ·gc.alloc.rate:                   872.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              945.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1457358.713 ops/s
[info]                  ·gc.alloc.rate:                   871.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              940.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 725.876 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1450641.271 ops/s
[info]                  ·gc.alloc.rate:                   882.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              957.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1458.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1428107.065 ±(99.9%) 182799.530 ops/s [Average]
[info]   (min, avg, max) = (1344496.665, 1428107.065, 1457358.713), stdev = 47472.458
[info]   CI (99.9%): [1245307.534, 1610906.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   856.311 ±(99.9%) 126.701 MB/sec [Average]
[info]   (min, avg, max) = (800.270, 856.311, 882.796), stdev = 32.904
[info]   CI (99.9%): [729.610, 983.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   943.728 ±(99.9%) 33.018 B/op [Average]
[info]   (min, avg, max) = (937.020, 943.728, 957.778), stdev = 8.575
[info]   CI (99.9%): [910.709, 976.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.056 ±(99.9%) 0.479 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.278), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.065 ±(99.9%) 0.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.326), stdev = 0.146
[info]   CI (99.9%): [≈ 0, 0.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space":
[info]   0.001 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.056 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen":
[info]   0.003 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   853.228 ±(99.9%) 1126.610 MB/sec [Average]
[info]   (min, avg, max) = (672.029, 853.228, 1344.317), stdev = 292.577
[info]   CI (99.9%): [≈ 0, 1979.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   942.012 ±(99.9%) 1240.655 B/op [Average]
[info]   (min, avg, max) = (725.876, 942.012, 1458.498), stdev = 322.194
[info]   CI (99.9%): [≈ 0, 2182.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 13.600, 63.000), stdev = 27.619
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:50:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1269813.040 ops/s
[info] # Warmup Iteration   2: 1569934.813 ops/s
[info] # Warmup Iteration   3: 1632522.954 ops/s
[info] # Warmup Iteration   4: 1634203.510 ops/s
[info] # Warmup Iteration   5: 1634082.751 ops/s
[info] Iteration   1: 1635330.502 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1634177.328 ops/s
[info]                  ·gc.alloc.rate:      0.076 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.073 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1634930.977 ops/s
[info]                  ·gc.alloc.rate:      0.008 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1632111.378 ops/s
[info]                  ·gc.alloc.rate:      0.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.191 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1640916.966 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1635493.430 ±(99.9%) 12614.612 ops/s [Average]
[info]   (min, avg, max) = (1632111.378, 1635493.430, 1640916.966), stdev = 3275.975
[info]   CI (99.9%): [1622878.818, 1648108.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.056 ±(99.9%) 0.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.056, 0.198), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.054 ±(99.9%) 0.316 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.054, 0.191), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:50:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83621.391 ops/s
[info] # Warmup Iteration   2: 220032.396 ops/s
[info] # Warmup Iteration   3: 218697.696 ops/s
[info] # Warmup Iteration   4: 219610.176 ops/s
[info] # Warmup Iteration   5: 224735.271 ops/s
[info] Iteration   1: 225550.671 ops/s
[info]                  ·gc.alloc.rate:                   1494.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              10428.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9417.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 222612.583 ops/s
[info]                  ·gc.alloc.rate:                   1471.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              10407.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9546.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 219652.730 ops/s
[info]                  ·gc.alloc.rate:                   1457.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              10443.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9681.726 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 224330.790 ops/s
[info]                  ·gc.alloc.rate:                   1488.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              10446.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9487.303 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 219817.735 ops/s
[info]                  ·gc.alloc.rate:                   1488.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              10659.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14535.402 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   222392.902 ±(99.9%) 10172.408 ops/s [Average]
[info]   (min, avg, max) = (219652.730, 222392.902, 225550.671), stdev = 2641.742
[info]   CI (99.9%): [212220.494, 232565.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1480.171 ±(99.9%) 58.797 MB/sec [Average]
[info]   (min, avg, max) = (1457.359, 1480.171, 1494.150), stdev = 15.269
[info]   CI (99.9%): [1421.374, 1538.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10477.144 ±(99.9%) 397.119 B/op [Average]
[info]   (min, avg, max) = (10407.640, 10477.144, 10659.539), stdev = 103.131
[info]   CI (99.9%): [10080.025, 10874.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.239 ±(99.9%) 1.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.239, 0.894), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1486.479 ±(99.9%) 1169.507 MB/sec [Average]
[info]   (min, avg, max) = (1349.328, 1486.479, 2029.782), stdev = 303.717
[info]   CI (99.9%): [316.972, 2655.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10533.625 ±(99.9%) 8622.239 B/op [Average]
[info]   (min, avg, max) = (9417.484, 10533.625, 14535.402), stdev = 2239.168
[info]   CI (99.9%): [1911.386, 19155.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:50:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28216.894 ops/s
[info] # Warmup Iteration   2: 56022.270 ops/s
[info] # Warmup Iteration   3: 56319.152 ops/s
[info] # Warmup Iteration   4: 57389.494 ops/s
[info] # Warmup Iteration   5: 57908.813 ops/s
[info] Iteration   1: 57958.815 ops/s
[info]                  ·gc.alloc.rate:                   1052.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              28589.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18278.495 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 57099.502 ops/s
[info]                  ·gc.alloc.rate:                   1062.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              29279.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37127.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 57424.591 ops/s
[info]                  ·gc.alloc.rate:                   1040.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              28524.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18467.338 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 57611.654 ops/s
[info]                  ·gc.alloc.rate:                   1058.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              28904.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36851.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 57627.221 ops/s
[info]                  ·gc.alloc.rate:                   1039.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              28401.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18438.360 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   57544.357 ±(99.9%) 1210.675 ops/s [Average]
[info]   (min, avg, max) = (57099.502, 57544.357, 57958.815), stdev = 314.408
[info]   CI (99.9%): [56333.682, 58755.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1050.750 ±(99.9%) 39.142 MB/sec [Average]
[info]   (min, avg, max) = (1039.693, 1050.750, 1062.124), stdev = 10.165
[info]   CI (99.9%): [1011.608, 1089.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   28739.894 ±(99.9%) 1363.163 B/op [Average]
[info]   (min, avg, max) = (28401.684, 28739.894, 29279.289), stdev = 354.009
[info]   CI (99.9%): [27376.732, 30103.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.227 ±(99.9%) 1.959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.227, 1.137), stdev = 0.509
[info]   CI (99.9%): [≈ 0, 2.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   943.610 ±(99.9%) 1421.810 MB/sec [Average]
[info]   (min, avg, max) = (673.089, 943.610, 1349.368), stdev = 369.240
[info]   CI (99.9%): [≈ 0, 2365.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25832.511 ±(99.9%) 39220.046 B/op [Average]
[info]   (min, avg, max) = (18278.495, 25832.511, 37127.159), stdev = 10185.321
[info]   CI (99.9%): [≈ 0, 65052.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17941.090 ops/s
[info] # Warmup Iteration   2: 58046.187 ops/s
[info] # Warmup Iteration   3: 58152.283 ops/s
[info] # Warmup Iteration   4: 58177.199 ops/s
[info] # Warmup Iteration   5: 59333.169 ops/s
[info] Iteration   1: 59526.182 ops/s
[info]                  ·gc.alloc.rate:                   700.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              18519.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17806.207 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57347.027 ops/s
[info]                  ·gc.alloc.rate:                   682.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              18746.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18482.667 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 58977.705 ops/s
[info]                  ·gc.alloc.rate:                   694.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              18524.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17971.627 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 57863.077 ops/s
[info]                  ·gc.alloc.rate:                   685.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              18651.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18317.874 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 59020.193 ops/s
[info]                  ·gc.alloc.rate:                   706.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              18854.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17958.536 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   58546.837 ±(99.9%) 3484.727 ops/s [Average]
[info]   (min, avg, max) = (57347.027, 58546.837, 59526.182), stdev = 904.973
[info]   CI (99.9%): [55062.110, 62031.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   694.024 ±(99.9%) 38.389 MB/sec [Average]
[info]   (min, avg, max) = (682.956, 694.024, 706.878), stdev = 9.970
[info]   CI (99.9%): [655.635, 732.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18659.099 ±(99.9%) 556.100 B/op [Average]
[info]   (min, avg, max) = (18519.087, 18659.099, 18854.033), stdev = 144.417
[info]   CI (99.9%): [18102.999, 19215.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.443 ±(99.9%) 2.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.443, 1.651), stdev = 0.718
[info]   CI (99.9%): [≈ 0, 3.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.399 ±(99.9%) 0.674 MB/sec [Average]
[info]   (min, avg, max) = (673.291, 673.399, 673.709), stdev = 0.175
[info]   CI (99.9%): [672.724, 674.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18107.382 ±(99.9%) 1083.046 B/op [Average]
[info]   (min, avg, max) = (17806.207, 18107.382, 18482.667), stdev = 281.264
[info]   CI (99.9%): [17024.336, 19190.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:49:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44365.104 ops/s
[info] # Warmup Iteration   2: 63862.076 ops/s
[info] # Warmup Iteration   3: 64053.165 ops/s
[info] # Warmup Iteration   4: 66151.744 ops/s
[info] # Warmup Iteration   5: 66352.747 ops/s
[info] Iteration   1: 66520.620 ops/s
[info]                  ·gc.alloc.rate:                   741.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              17538.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15918.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 66823.071 ops/s
[info]                  ·gc.alloc.rate:                   746.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              17587.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15845.915 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 66908.821 ops/s
[info]                  ·gc.alloc.rate:                   743.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              17496.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15810.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 66931.988 ops/s
[info]                  ·gc.alloc.rate:                   751.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              17681.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15804.687 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 66789.328 ops/s
[info]                  ·gc.alloc.rate:                   745.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              17574.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15837.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   66794.766 ±(99.9%) 632.214 ops/s [Average]
[info]   (min, avg, max) = (66520.620, 66794.766, 66931.988), stdev = 164.184
[info]   CI (99.9%): [66162.552, 67426.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   745.784 ±(99.9%) 15.425 MB/sec [Average]
[info]   (min, avg, max) = (741.079, 745.784, 751.874), stdev = 4.006
[info]   CI (99.9%): [730.359, 761.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17575.796 ±(99.9%) 265.420 B/op [Average]
[info]   (min, avg, max) = (17496.488, 17575.796, 17681.682), stdev = 68.929
[info]   CI (99.9%): [17310.376, 17841.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.295 ±(99.9%) 1.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.295, 0.493), stdev = 0.269
[info]   CI (99.9%): [≈ 0, 1.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.261 ±(99.9%) 1.280 MB/sec [Average]
[info]   (min, avg, max) = (671.983, 672.261, 672.647), stdev = 0.332
[info]   CI (99.9%): [670.981, 673.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15843.228 ±(99.9%) 174.627 B/op [Average]
[info]   (min, avg, max) = (15804.687, 15843.228, 15918.081), stdev = 45.350
[info]   CI (99.9%): [15668.601, 16017.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:49:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8845.793 ops/s
[info] # Warmup Iteration   2: 34150.011 ops/s
[info] # Warmup Iteration   3: 34514.880 ops/s
[info] # Warmup Iteration   4: 34148.559 ops/s
[info] # Warmup Iteration   5: 34947.692 ops/s
[info] Iteration   1: 35282.528 ops/s
[info]                  ·gc.alloc.rate:                   1615.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              72081.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90186.986 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 35217.253 ops/s
[info]                  ·gc.alloc.rate:                   1597.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              71390.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60283.519 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 35162.564 ops/s
[info]                  ·gc.alloc.rate:                   1593.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              71331.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60435.712 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 35166.359 ops/s
[info]                  ·gc.alloc.rate:                   1607.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              71950.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90765.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 35318.063 ops/s
[info]                  ·gc.alloc.rate:                   1613.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              71892.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60305.810 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   35229.353 ±(99.9%) 267.283 ops/s [Average]
[info]   (min, avg, max) = (35162.564, 35229.353, 35318.063), stdev = 69.413
[info]   CI (99.9%): [34962.071, 35496.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1605.466 ±(99.9%) 37.312 MB/sec [Average]
[info]   (min, avg, max) = (1593.534, 1605.466, 1615.674), stdev = 9.690
[info]   CI (99.9%): [1568.153, 1642.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71729.275 ±(99.9%) 1323.794 B/op [Average]
[info]   (min, avg, max) = (71331.192, 71729.275, 72081.592), stdev = 343.785
[info]   CI (99.9%): [70405.481, 73053.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.047 ±(99.9%) 8.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.047, 4.658), stdev = 2.122
[info]   CI (99.9%): [≈ 0, 10.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1620.340 ±(99.9%) 1422.003 MB/sec [Average]
[info]   (min, avg, max) = (1348.793, 1620.340, 2028.233), stdev = 369.290
[info]   CI (99.9%): [198.337, 3042.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   72395.423 ±(99.9%) 63561.170 B/op [Average]
[info]   (min, avg, max) = (60283.519, 72395.423, 90765.087), stdev = 16506.634
[info]   CI (99.9%): [8834.252, 135956.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:49:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61353.800 ops/s
[info] # Warmup Iteration   2: 112237.126 ops/s
[info] # Warmup Iteration   3: 115209.859 ops/s
[info] # Warmup Iteration   4: 114320.862 ops/s
[info] # Warmup Iteration   5: 114886.222 ops/s
[info] Iteration   1: 115655.477 ops/s
[info]                  ·gc.alloc.rate:                   528.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              7200.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9160.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 116285.225 ops/s
[info]                  ·gc.alloc.rate:      512.425 MB/sec
[info]                  ·gc.alloc.rate.norm: 6936.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 116213.631 ops/s
[info]                  ·gc.alloc.rate:                   524.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              7107.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9120.562 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 115250.695 ops/s
[info]                  ·gc.alloc.rate:                   523.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              7150.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9196.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 115718.093 ops/s
[info]                  ·gc.alloc.rate:                   532.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              7241.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9159.887 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   115824.624 ±(99.9%) 1648.185 ops/s [Average]
[info]   (min, avg, max) = (115250.695, 115824.624, 116285.225), stdev = 428.028
[info]   CI (99.9%): [114176.439, 117472.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   524.447 ±(99.9%) 29.165 MB/sec [Average]
[info]   (min, avg, max) = (512.425, 524.447, 532.409), stdev = 7.574
[info]   CI (99.9%): [495.282, 553.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7127.203 ±(99.9%) 455.368 B/op [Average]
[info]   (min, avg, max) = (6936.004, 7127.203, 7241.548), stdev = 118.258
[info]   CI (99.9%): [6671.834, 7582.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.164 ±(99.9%) 1.372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.164, 0.802), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.239 ±(99.9%) 18.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.239, 10.911), stdev = 4.850
[info]   CI (99.9%): [≈ 0, 20.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   538.664 ±(99.9%) 1159.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.664, 673.563), stdev = 301.122
[info]   CI (99.9%): [≈ 0, 1698.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7327.526 ±(99.9%) 15773.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7327.526, 9196.679), stdev = 4096.300
[info]   CI (99.9%): [≈ 0, 23100.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110358.530 ops/s
[info] # Warmup Iteration   2: 229034.373 ops/s
[info] # Warmup Iteration   3: 234110.542 ops/s
[info] # Warmup Iteration   4: 238864.106 ops/s
[info] # Warmup Iteration   5: 235497.215 ops/s
[info] Iteration   1: 235637.765 ops/s
[info]                  ·gc.alloc.rate:      349.649 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 236516.537 ops/s
[info]                  ·gc.alloc.rate:                   367.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              2444.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4481.568 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 236553.921 ops/s
[info]                  ·gc.alloc.rate:      351.064 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 238534.647 ops/s
[info]                  ·gc.alloc.rate:                   366.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              2416.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4443.472 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 237784.432 ops/s
[info]                  ·gc.alloc.rate:      352.883 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   237005.461 ±(99.9%) 4415.134 ops/s [Average]
[info]   (min, avg, max) = (235637.765, 237005.461, 238534.647), stdev = 1146.596
[info]   CI (99.9%): [232590.326, 241420.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   357.442 ±(99.9%) 33.249 MB/sec [Average]
[info]   (min, avg, max) = (349.649, 357.442, 367.350), stdev = 8.635
[info]   CI (99.9%): [324.193, 390.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2373.941 ±(99.9%) 203.595 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2373.941, 2444.760), stdev = 52.873
[info]   CI (99.9%): [2170.346, 2577.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.196 ±(99.9%) 1.685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.978), stdev = 0.437
[info]   CI (99.9%): [≈ 0, 1.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.291 ±(99.9%) 11.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.291, 6.455), stdev = 2.887
[info]   CI (99.9%): [≈ 0, 12.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   269.354 ±(99.9%) 1420.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.354, 673.401), stdev = 368.828
[info]   CI (99.9%): [≈ 0, 1689.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1785.008 ±(99.9%) 9411.975 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1785.008, 4481.568), stdev = 2444.260
[info]   CI (99.9%): [≈ 0, 11196.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576689.068 ops/s
[info] # Warmup Iteration   2: 680174.324 ops/s
[info] # Warmup Iteration   3: 684646.606 ops/s
[info] # Warmup Iteration   4: 728263.645 ops/s
[info] # Warmup Iteration   5: 724443.609 ops/s
[info] Iteration   1: 735365.255 ops/s
[info]                  ·gc.alloc.rate:                   936.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              2004.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1438.440 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 740625.538 ops/s
[info]                  ·gc.alloc.rate:                   956.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              2033.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2853.780 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 740932.044 ops/s
[info]                  ·gc.alloc.rate:                   937.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              1991.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1426.293 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 748897.949 ops/s
[info]                  ·gc.alloc.rate:                   960.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              2019.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2822.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 752733.362 ops/s
[info]                  ·gc.alloc.rate:                   948.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              1983.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1403.923 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   743710.830 ±(99.9%) 26899.552 ops/s [Average]
[info]   (min, avg, max) = (735365.255, 743710.830, 752733.362), stdev = 6985.728
[info]   CI (99.9%): [716811.278, 770610.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   948.001 ±(99.9%) 42.551 MB/sec [Average]
[info]   (min, avg, max) = (936.222, 948.001, 960.632), stdev = 11.050
[info]   CI (99.9%): [905.450, 990.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2006.431 ±(99.9%) 77.599 B/op [Average]
[info]   (min, avg, max) = (1983.767, 2006.431, 2033.438), stdev = 20.152
[info]   CI (99.9%): [1928.832, 2084.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.079 ±(99.9%) 0.424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.265), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.074 ±(99.9%) 1415.594 MB/sec [Average]
[info]   (min, avg, max) = (671.319, 940.074, 1342.811), stdev = 367.625
[info]   CI (99.9%): [≈ 0, 2355.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1988.926 ±(99.9%) 2985.257 B/op [Average]
[info]   (min, avg, max) = (1403.923, 1988.926, 2853.780), stdev = 775.262
[info]   CI (99.9%): [≈ 0, 4974.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:48:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 636116.741 ops/s
[info] # Warmup Iteration   2: 765425.494 ops/s
[info] # Warmup Iteration   3: 803729.958 ops/s
[info] # Warmup Iteration   4: 799082.348 ops/s
[info] # Warmup Iteration   5: 804116.294 ops/s
[info] Iteration   1: 798813.223 ops/s
[info]                  ·gc.alloc.rate:      0.249 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.491 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 799415.202 ops/s
[info]                  ·gc.alloc.rate:      0.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.068 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 803262.363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 794723.374 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 804101.950 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   800063.222 ±(99.9%) 14541.246 ops/s [Average]
[info]   (min, avg, max) = (794723.374, 800063.222, 804101.950), stdev = 3776.315
[info]   CI (99.9%): [785521.977, 814604.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.057 ±(99.9%) 0.417 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.057, 0.249), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.112 ±(99.9%) 0.823 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.112, 0.491), stdev = 0.214
[info]   CI (99.9%): [≈ 0, 0.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84152.494 ops/s
[info] # Warmup Iteration   2: 177083.543 ops/s
[info] # Warmup Iteration   3: 185816.985 ops/s
[info] # Warmup Iteration   4: 185330.657 ops/s
[info] # Warmup Iteration   5: 185691.621 ops/s
[info] Iteration   1: 187632.510 ops/s
[info]                  ·gc.alloc.rate:      607.398 MB/sec
[info]                  ·gc.alloc.rate.norm: 5096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 186333.557 ops/s
[info]                  ·gc.alloc.rate:                   616.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5688.325 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 186728.965 ops/s
[info]                  ·gc.alloc.rate:                   621.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5676.324 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 186717.692 ops/s
[info]                  ·gc.alloc.rate:                   617.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              5204.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5679.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 187347.538 ops/s
[info]                  ·gc.alloc.rate:                   623.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              5238.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5660.431 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   186952.052 ±(99.9%) 2025.399 ops/s [Average]
[info]   (min, avg, max) = (186333.557, 186952.052, 187632.510), stdev = 525.990
[info]   CI (99.9%): [184926.653, 188977.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   617.303 ±(99.9%) 24.077 MB/sec [Average]
[info]   (min, avg, max) = (607.398, 617.303, 623.485), stdev = 6.253
[info]   CI (99.9%): [593.227, 641.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5197.730 ±(99.9%) 228.128 B/op [Average]
[info]   (min, avg, max) = (5096.003, 5197.730, 5240.797), stdev = 59.244
[info]   CI (99.9%): [4969.602, 5425.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.035 ±(99.9%) 0.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.175), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   538.818 ±(99.9%) 1159.846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.818, 673.685), stdev = 301.208
[info]   CI (99.9%): [≈ 0, 1698.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4540.891 ±(99.9%) 9774.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4540.891, 5688.325), stdev = 2538.455
[info]   CI (99.9%): [≈ 0, 14315.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:47:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50901.323 ops/s
[info] # Warmup Iteration   2: 113258.996 ops/s
[info] # Warmup Iteration   3: 109609.538 ops/s
[info] # Warmup Iteration   4: 116627.160 ops/s
[info] # Warmup Iteration   5: 116935.226 ops/s
[info] Iteration   1: 116725.395 ops/s
[info]                  ·gc.alloc.rate:                   1326.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              17893.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18188.695 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 117448.886 ops/s
[info]                  ·gc.alloc.rate:                   1309.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              17553.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9042.295 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 117174.115 ops/s
[info]                  ·gc.alloc.rate:                   1320.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              17737.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18136.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 117242.815 ops/s
[info]                  ·gc.alloc.rate:                   1318.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              17703.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18144.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 116656.817 ops/s
[info]                  ·gc.alloc.rate:                   1311.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              17691.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18252.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   117049.606 ±(99.9%) 1322.253 ops/s [Average]
[info]   (min, avg, max) = (116656.817, 117049.606, 117448.886), stdev = 343.385
[info]   CI (99.9%): [115727.353, 118371.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1317.324 ±(99.9%) 26.938 MB/sec [Average]
[info]   (min, avg, max) = (1309.785, 1317.324, 1326.737), stdev = 6.996
[info]   CI (99.9%): [1290.386, 1344.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17715.826 ±(99.9%) 467.857 B/op [Average]
[info]   (min, avg, max) = (17553.869, 17715.826, 17893.555), stdev = 121.501
[info]   CI (99.9%): [17247.968, 18183.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.280 ±(99.9%) 1.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.280, 0.562), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1215.523 ±(99.9%) 1164.192 MB/sec [Average]
[info]   (min, avg, max) = (674.692, 1215.523, 1352.693), stdev = 302.337
[info]   CI (99.9%): [51.330, 2379.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16352.951 ±(99.9%) 15737.740 B/op [Average]
[info]   (min, avg, max) = (9042.295, 16352.951, 18252.750), stdev = 4087.041
[info]   CI (99.9%): [615.211, 32090.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:47:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55112.277 ops/s
[info] # Warmup Iteration   2: 158839.249 ops/s
[info] # Warmup Iteration   3: 160186.957 ops/s
[info] # Warmup Iteration   4: 162081.512 ops/s
[info] # Warmup Iteration   5: 167522.122 ops/s
[info] Iteration   1: 167960.610 ops/s
[info]                  ·gc.alloc.rate:                   904.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              8477.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6310.594 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 167731.188 ops/s
[info]                  ·gc.alloc.rate:                   921.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              8646.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12644.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 167079.221 ops/s
[info]                  ·gc.alloc.rate:                   902.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              8502.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6350.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 167349.978 ops/s
[info]                  ·gc.alloc.rate:                   904.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              8504.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6339.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 167104.185 ops/s
[info]                  ·gc.alloc.rate:                   916.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              8631.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12704.727 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   167445.036 ±(99.9%) 1499.695 ops/s [Average]
[info]   (min, avg, max) = (167079.221, 167445.036, 167960.610), stdev = 389.466
[info]   CI (99.9%): [165945.341, 168944.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   909.857 ±(99.9%) 32.704 MB/sec [Average]
[info]   (min, avg, max) = (902.500, 909.857, 921.264), stdev = 8.493
[info]   CI (99.9%): [877.153, 942.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8552.379 ±(99.9%) 307.652 B/op [Average]
[info]   (min, avg, max) = (8477.121, 8552.379, 8646.235), stdev = 79.896
[info]   CI (99.9%): [8244.727, 8860.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.196 ±(99.9%) 0.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.392), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.609 ±(99.9%) 1422.312 MB/sec [Average]
[info]   (min, avg, max) = (673.482, 943.609, 1349.159), stdev = 369.370
[info]   CI (99.9%): [≈ 0, 2365.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8870.012 ±(99.9%) 13374.503 B/op [Average]
[info]   (min, avg, max) = (6310.594, 8870.012, 12704.727), stdev = 3473.316
[info]   CI (99.9%): [≈ 0, 22244.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:47:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 344875.459 ops/s
[info] # Warmup Iteration   2: 436942.145 ops/s
[info] # Warmup Iteration   3: 454456.156 ops/s
[info] # Warmup Iteration   4: 453961.690 ops/s
[info] # Warmup Iteration   5: 451289.870 ops/s
[info] Iteration   1: 451301.555 ops/s
[info]                  ·gc.alloc.rate:                   892.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              3113.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2346.364 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 451382.013 ops/s
[info]                  ·gc.alloc.rate:                   918.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              3204.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4687.261 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 451454.944 ops/s
[info]                  ·gc.alloc.rate:                   894.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              3118.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2343.231 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 439228.667 ops/s
[info]                  ·gc.alloc.rate:                   870.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              3120.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2408.445 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 445369.612 ops/s
[info]                  ·gc.alloc.rate:                   879.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              3108.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2375.215 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   447747.358 ±(99.9%) 20897.594 ops/s [Average]
[info]   (min, avg, max) = (439228.667, 447747.358, 451454.944), stdev = 5427.039
[info]   CI (99.9%): [426849.764, 468644.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   891.277 ±(99.9%) 70.244 MB/sec [Average]
[info]   (min, avg, max) = (870.823, 891.277, 918.885), stdev = 18.242
[info]   CI (99.9%): [821.033, 961.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3133.239 ±(99.9%) 154.140 B/op [Average]
[info]   (min, avg, max) = (3108.303, 3133.239, 3204.322), stdev = 40.030
[info]   CI (99.9%): [2979.098, 3287.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.161 ±(99.9%) 0.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.161, 0.363), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.589 ±(99.9%) 1157.117 MB/sec [Average]
[info]   (min, avg, max) = (672.028, 806.589, 1344.139), stdev = 300.500
[info]   CI (99.9%): [≈ 0, 1963.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2832.103 ±(99.9%) 3994.652 B/op [Average]
[info]   (min, avg, max) = (2343.231, 2832.103, 4687.261), stdev = 1037.398
[info]   CI (99.9%): [≈ 0, 6826.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5846.931 ops/s
[info] # Warmup Iteration   2: 56716.619 ops/s
[info] # Warmup Iteration   3: 62159.546 ops/s
[info] # Warmup Iteration   4: 62894.065 ops/s
[info] # Warmup Iteration   5: 62727.605 ops/s
[info] Iteration   1: 63347.592 ops/s
[info]                  ·gc.alloc.rate:                   2514.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              62489.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67161.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 64192.728 ops/s
[info]                  ·gc.alloc.rate:                   2534.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              62135.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49772.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 63256.574 ops/s
[info]                  ·gc.alloc.rate:                   2512.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              62513.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67431.661 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 63131.482 ops/s
[info]                  ·gc.alloc.rate:                   2494.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              62200.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50733.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 63283.419 ops/s
[info]                  ·gc.alloc.rate:                   2527.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              62852.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67559.215 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   63442.359 ±(99.9%) 1643.258 ops/s [Average]
[info]   (min, avg, max) = (63131.482, 63442.359, 64192.728), stdev = 426.749
[info]   CI (99.9%): [61799.101, 65085.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2516.676 ±(99.9%) 58.031 MB/sec [Average]
[info]   (min, avg, max) = (2494.955, 2516.676, 2534.104), stdev = 15.070
[info]   CI (99.9%): [2458.645, 2574.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62437.992 ±(99.9%) 1102.739 B/op [Average]
[info]   (min, avg, max) = (62135.156, 62437.992, 62852.068), stdev = 286.378
[info]   CI (99.9%): [61335.253, 63540.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.238 ±(99.9%) 3.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.238, 2.072), stdev = 0.783
[info]   CI (99.9%): [≈ 0, 4.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2438.832 ±(99.9%) 1428.631 MB/sec [Average]
[info]   (min, avg, max) = (2029.903, 2438.832, 2716.509), stdev = 371.011
[info]   CI (99.9%): [1010.201, 3867.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   60531.507 ±(99.9%) 36158.963 B/op [Average]
[info]   (min, avg, max) = (49772.368, 60531.507, 67559.215), stdev = 9390.368
[info]   CI (99.9%): [24372.544, 96690.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:46:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95823.556 ops/s
[info] # Warmup Iteration   2: 175429.930 ops/s
[info] # Warmup Iteration   3: 177440.486 ops/s
[info] # Warmup Iteration   4: 177972.276 ops/s
[info] # Warmup Iteration   5: 178568.365 ops/s
[info] Iteration   1: 180395.534 ops/s
[info]                  ·gc.alloc.rate:                   630.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              5503.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5875.499 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 179603.596 ops/s
[info]                  ·gc.alloc.rate:                   626.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              5492.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5907.405 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 178335.124 ops/s
[info]                  ·gc.alloc.rate:                   630.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              5563.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5949.367 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 177262.192 ops/s
[info]                  ·gc.alloc.rate:                   638.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              5671.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5985.576 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 178650.806 ops/s
[info]                  ·gc.alloc.rate:                   625.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              5509.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5938.879 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   178849.450 ±(99.9%) 4629.785 ops/s [Average]
[info]   (min, avg, max) = (177262.192, 178849.450, 180395.534), stdev = 1202.341
[info]   CI (99.9%): [174219.665, 183479.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   630.396 ±(99.9%) 20.007 MB/sec [Average]
[info]   (min, avg, max) = (625.425, 630.396, 638.705), stdev = 5.196
[info]   CI (99.9%): [610.389, 650.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5547.953 ±(99.9%) 286.920 B/op [Average]
[info]   (min, avg, max) = (5492.139, 5547.953, 5671.949), stdev = 74.512
[info]   CI (99.9%): [5261.033, 5834.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.354), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.764 ±(99.9%) 5.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.764, 3.087), stdev = 1.337
[info]   CI (99.9%): [≈ 0, 5.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   673.976 ±(99.9%) 1.340 MB/sec [Average]
[info]   (min, avg, max) = (673.381, 673.976, 674.231), stdev = 0.348
[info]   CI (99.9%): [672.636, 675.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5931.345 ±(99.9%) 161.252 B/op [Average]
[info]   (min, avg, max) = (5875.499, 5931.345, 5985.576), stdev = 41.877
[info]   CI (99.9%): [5770.094, 6092.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:46:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190135.599 ops/s
[info] # Warmup Iteration   2: 396517.661 ops/s
[info] # Warmup Iteration   3: 404491.972 ops/s
[info] # Warmup Iteration   4: 401763.707 ops/s
[info] # Warmup Iteration   5: 405929.803 ops/s
[info] Iteration   1: 402402.468 ops/s
[info]                  ·gc.alloc.rate:                   416.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              1627.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2634.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 404351.982 ops/s
[info]                  ·gc.alloc.rate:      399.017 MB/sec
[info]                  ·gc.alloc.rate.norm: 1553.083 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 402298.667 ops/s
[info]                  ·gc.alloc.rate:                   420.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              1645.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2634.705 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 392040.943 ops/s
[info]                  ·gc.alloc.rate:                   404.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              1625.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2706.410 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 397067.025 ops/s
[info]                  ·gc.alloc.rate:      391.510 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   399632.217 ±(99.9%) 19374.908 ops/s [Average]
[info]   (min, avg, max) = (392040.943, 399632.217, 404351.982), stdev = 5031.602
[info]   CI (99.9%): [380257.309, 419007.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   406.411 ±(99.9%) 45.998 MB/sec [Average]
[info]   (min, avg, max) = (391.510, 406.411, 420.555), stdev = 11.945
[info]   CI (99.9%): [360.414, 452.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1600.759 ±(99.9%) 172.077 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1600.759, 1645.451), stdev = 44.688
[info]   CI (99.9%): [1428.682, 1772.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.150 ±(99.9%) 1.290 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.749), stdev = 0.335
[info]   CI (99.9%): [≈ 0, 1.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.586 ±(99.9%) 5.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.586, 2.932), stdev = 1.311
[info]   CI (99.9%): [≈ 0, 5.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.168 ±(99.9%) 1420.710 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.168, 674.188), stdev = 368.954
[info]   CI (99.9%): [≈ 0, 1824.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1595.034 ±(99.9%) 5607.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1595.034, 2706.410), stdev = 1456.357
[info]   CI (99.9%): [≈ 0, 7202.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:46:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 802254.521 ops/s
[info] # Warmup Iteration   2: 1009593.085 ops/s
[info] # Warmup Iteration   3: 1052608.673 ops/s
[info] # Warmup Iteration   4: 1054836.230 ops/s
[info] # Warmup Iteration   5: 1059280.023 ops/s
[info] Iteration   1: 1059058.711 ops/s
[info]                  ·gc.alloc.rate:                   806.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              1198.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1000.876 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1058443.975 ops/s
[info]                  ·gc.alloc.rate:                   817.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              1216.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2001.882 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1054410.599 ops/s
[info]                  ·gc.alloc.rate:                   805.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1201.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1004.252 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1060432.662 ops/s
[info]                  ·gc.alloc.rate:                   807.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              1197.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 997.569 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1059409.558 ops/s
[info]                  ·gc.alloc.rate:                   804.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              1194.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 998.506 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1058351.101 ±(99.9%) 8925.299 ops/s [Average]
[info]   (min, avg, max) = (1054410.599, 1058351.101, 1060432.662), stdev = 2317.872
[info]   CI (99.9%): [1049425.801, 1067276.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   808.173 ±(99.9%) 21.331 MB/sec [Average]
[info]   (min, avg, max) = (804.445, 808.173, 817.909), stdev = 5.540
[info]   CI (99.9%): [786.842, 829.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1201.872 ±(99.9%) 32.022 B/op [Average]
[info]   (min, avg, max) = (1194.930, 1201.872, 1216.108), stdev = 8.316
[info]   CI (99.9%): [1169.850, 1233.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.043 ±(99.9%) 0.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.186), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.354 ±(99.9%) 1160.318 MB/sec [Average]
[info]   (min, avg, max) = (672.059, 807.354, 1346.391), stdev = 301.331
[info]   CI (99.9%): [≈ 0, 1967.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1200.617 ±(99.9%) 1724.812 B/op [Average]
[info]   (min, avg, max) = (997.569, 1200.617, 2001.882), stdev = 447.928
[info]   CI (99.9%): [≈ 0, 2925.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 921861.195 ops/s
[info] # Warmup Iteration   2: 1109255.274 ops/s
[info] # Warmup Iteration   3: 1155549.847 ops/s
[info] # Warmup Iteration   4: 1154423.738 ops/s
[info] # Warmup Iteration   5: 1146793.164 ops/s
[info] Iteration   1: 1153140.163 ops/s
[info]                  ·gc.alloc.rate:      0.293 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.399 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1145611.987 ops/s
[info]                  ·gc.alloc.rate:      1.669 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.293 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1157738.665 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1158015.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1157457.508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1154392.771 ±(99.9%) 20410.521 ops/s [Average]
[info]   (min, avg, max) = (1145611.987, 1154392.771, 1158015.532), stdev = 5300.547
[info]   CI (99.9%): [1133982.250, 1174803.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.392 ±(99.9%) 2.790 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.392, 1.669), stdev = 0.725
[info]   CI (99.9%): [≈ 0, 3.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.539 ±(99.9%) 3.835 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.539, 2.293), stdev = 0.996
[info]   CI (99.9%): [≈ 0, 4.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:45:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122638.307 ops/s
[info] # Warmup Iteration   2: 297222.312 ops/s
[info] # Warmup Iteration   3: 302725.113 ops/s
[info] # Warmup Iteration   4: 304981.411 ops/s
[info] # Warmup Iteration   5: 304155.211 ops/s
[info] Iteration   1: 299317.497 ops/s
[info]                  ·gc.alloc.rate:                   833.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              4380.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3544.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 299568.654 ops/s
[info]                  ·gc.alloc.rate:                   840.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              4414.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3541.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 299925.854 ops/s
[info]                  ·gc.alloc.rate:                   856.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              4492.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7078.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 299707.816 ops/s
[info]                  ·gc.alloc.rate:                   835.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              4386.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3543.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 297662.855 ops/s
[info]                  ·gc.alloc.rate:                   835.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              4420.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3567.915 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   299236.535 ±(99.9%) 3492.532 ops/s [Average]
[info]   (min, avg, max) = (297662.855, 299236.535, 299925.854), stdev = 906.999
[info]   CI (99.9%): [295744.003, 302729.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   840.047 ±(99.9%) 35.915 MB/sec [Average]
[info]   (min, avg, max) = (833.009, 840.047, 856.063), stdev = 9.327
[info]   CI (99.9%): [804.132, 875.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4419.015 ±(99.9%) 171.900 B/op [Average]
[info]   (min, avg, max) = (4380.971, 4419.015, 4492.691), stdev = 44.642
[info]   CI (99.9%): [4247.115, 4590.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.087 ±(99.9%) 0.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.218), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   809.223 ±(99.9%) 1161.406 MB/sec [Average]
[info]   (min, avg, max) = (673.982, 809.223, 1348.765), stdev = 301.614
[info]   CI (99.9%): [≈ 0, 1970.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4255.244 ±(99.9%) 6077.263 B/op [Average]
[info]   (min, avg, max) = (3541.683, 4255.244, 7078.431), stdev = 1578.246
[info]   CI (99.9%): [≈ 0, 10332.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:45:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1490.952 ops/s
[info] # Warmup Iteration   2: 4571.490 ops/s
[info] # Warmup Iteration   3: 4661.235 ops/s
[info] # Warmup Iteration   4: 4760.544 ops/s
[info] # Warmup Iteration   5: 4743.025 ops/s
[info] Iteration   1: 4789.625 ops/s
[info]                  ·gc.alloc.rate:                   876.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              287839.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220724.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4776.857 ops/s
[info]                  ·gc.alloc.rate:                   890.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              293585.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 442868.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4767.820 ops/s
[info]                  ·gc.alloc.rate:                   862.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              284785.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222072.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4785.436 ops/s
[info]                  ·gc.alloc.rate:                   874.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              287585.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221237.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4800.690 ops/s
[info]                  ·gc.alloc.rate:                   873.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              286369.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220764.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4784.086 ±(99.9%) 48.136 ops/s [Average]
[info]   (min, avg, max) = (4767.820, 4784.086, 4800.690), stdev = 12.501
[info]   CI (99.9%): [4735.950, 4832.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   875.628 ±(99.9%) 38.776 MB/sec [Average]
[info]   (min, avg, max) = (862.764, 875.628, 890.945), stdev = 10.070
[info]   CI (99.9%): [836.851, 914.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   288033.131 ±(99.9%) 12825.990 B/op [Average]
[info]   (min, avg, max) = (284785.979, 288033.131, 293585.519), stdev = 3330.869
[info]   CI (99.9%): [275207.141, 300859.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.840 ±(99.9%) 32.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.840, 20.518), stdev = 8.377
[info]   CI (99.9%): [≈ 0, 39.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   806.990 ±(99.9%) 1155.901 MB/sec [Average]
[info]   (min, avg, max) = (671.877, 806.990, 1343.975), stdev = 300.184
[info]   CI (99.9%): [≈ 0, 1962.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   265533.231 ±(99.9%) 381733.563 B/op [Average]
[info]   (min, avg, max) = (220724.044, 265533.231, 442868.641), stdev = 99134.994
[info]   CI (99.9%): [≈ 0, 647266.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 646.292 ops/s
[info] # Warmup Iteration   2: 4432.662 ops/s
[info] # Warmup Iteration   3: 4589.547 ops/s
[info] # Warmup Iteration   4: 4742.240 ops/s
[info] # Warmup Iteration   5: 4675.162 ops/s
[info] Iteration   1: 4734.040 ops/s
[info]                  ·gc.alloc.rate:                   829.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              275655.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222844.541 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4734.320 ops/s
[info]                  ·gc.alloc.rate:                   835.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              277762.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222955.243 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4736.098 ops/s
[info]                  ·gc.alloc.rate:                   836.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              278163.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222908.176 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4597.160 ops/s
[info]                  ·gc.alloc.rate:                   829.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              283868.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 459521.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4723.248 ops/s
[info]                  ·gc.alloc.rate:                   830.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              276745.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223807.174 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4704.973 ±(99.9%) 232.897 ops/s [Average]
[info]   (min, avg, max) = (4597.160, 4704.973, 4736.098), stdev = 60.483
[info]   CI (99.9%): [4472.076, 4937.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   832.292 ±(99.9%) 14.589 MB/sec [Average]
[info]   (min, avg, max) = (829.099, 832.292, 836.952), stdev = 3.789
[info]   CI (99.9%): [817.703, 846.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   278439.273 ±(99.9%) 12271.484 B/op [Average]
[info]   (min, avg, max) = (275655.730, 278439.273, 283868.358), stdev = 3186.865
[info]   CI (99.9%): [266167.790, 290710.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.425 ±(99.9%) 12.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.425, 7.127), stdev = 3.187
[info]   CI (99.9%): [≈ 0, 13.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   805.122 ±(99.9%) 1155.958 MB/sec [Average]
[info]   (min, avg, max) = (670.341, 805.122, 1342.133), stdev = 300.199
[info]   CI (99.9%): [≈ 0, 1961.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   270407.361 ±(99.9%) 407085.631 B/op [Average]
[info]   (min, avg, max) = (222844.541, 270407.361, 459521.670), stdev = 105718.846
[info]   CI (99.9%): [≈ 0, 677492.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21745.616 ops/s
[info] # Warmup Iteration   2: 33953.181 ops/s
[info] # Warmup Iteration   3: 34818.284 ops/s
[info] # Warmup Iteration   4: 34599.956 ops/s
[info] # Warmup Iteration   5: 33960.425 ops/s
[info] Iteration   1: 34539.150 ops/s
[info]                  ·gc.alloc.rate:                   590.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              26923.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30385.149 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 34885.536 ops/s
[info]                  ·gc.alloc.rate:      571.716 MB/sec
[info]                  ·gc.alloc.rate.norm: 25800.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 35444.041 ops/s
[info]                  ·gc.alloc.rate:                   596.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29579.847 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 35292.666 ops/s
[info]                  ·gc.alloc.rate:                   594.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              26512.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29705.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 35115.486 ops/s
[info]                  ·gc.alloc.rate:                   595.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              26682.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29824.543 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   35055.376 ±(99.9%) 1369.978 ops/s [Average]
[info]   (min, avg, max) = (34539.150, 35055.376, 35444.041), stdev = 355.779
[info]   CI (99.9%): [33685.398, 36425.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   589.787 ±(99.9%) 39.810 MB/sec [Average]
[info]   (min, avg, max) = (571.716, 589.787, 596.666), stdev = 10.339
[info]   CI (99.9%): [549.977, 629.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26483.033 ±(99.9%) 1612.380 B/op [Average]
[info]   (min, avg, max) = (25800.013, 26483.033, 26923.648), stdev = 418.730
[info]   CI (99.9%): [24870.654, 28095.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.987 ±(99.9%) 8.450 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.987, 4.912), stdev = 2.194
[info]   CI (99.9%): [≈ 0, 9.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44.960 ±(99.9%) 385.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.960, 223.867), stdev = 100.013
[info]   CI (99.9%): [≈ 0, 430.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   532.860 ±(99.9%) 1147.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.860, 666.685), stdev = 297.878
[info]   CI (99.9%): [≈ 0, 1679.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23899.017 ±(99.9%) 51458.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23899.017, 30385.149), stdev = 13363.498
[info]   CI (99.9%): [≈ 0, 75357.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:44:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 654.597 ops/s
[info] # Warmup Iteration   2: 3467.042 ops/s
[info] # Warmup Iteration   3: 3809.229 ops/s
[info] # Warmup Iteration   4: 3943.525 ops/s
[info] # Warmup Iteration   5: 3934.238 ops/s
[info] Iteration   1: 3983.329 ops/s
[info]                  ·gc.alloc.rate:                   957.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              378322.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 530603.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4003.605 ops/s
[info]                  ·gc.alloc.rate:                   955.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              375629.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264042.171 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4071.244 ops/s
[info]                  ·gc.alloc.rate:                   991.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              383114.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 519525.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4019.070 ops/s
[info]                  ·gc.alloc.rate:                   961.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              376675.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263448.199 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4074.523 ops/s
[info]                  ·gc.alloc.rate:                   975.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              376773.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259828.695 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   4030.354 ±(99.9%) 157.325 ops/s [Average]
[info]   (min, avg, max) = (3983.329, 4030.354, 4074.523), stdev = 40.857
[info]   CI (99.9%): [3873.029, 4187.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   968.396 ±(99.9%) 57.983 MB/sec [Average]
[info]   (min, avg, max) = (955.488, 968.396, 991.427), stdev = 15.058
[info]   CI (99.9%): [910.414, 1026.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   378103.130 ±(99.9%) 11404.870 B/op [Average]
[info]   (min, avg, max) = (375629.186, 378103.130, 383114.553), stdev = 2961.809
[info]   CI (99.9%): [366698.260, 389508.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11.476 ±(99.9%) 82.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.476, 49.337), stdev = 21.449
[info]   CI (99.9%): [≈ 0, 94.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   940.947 ±(99.9%) 1416.194 MB/sec [Average]
[info]   (min, avg, max) = (671.644, 940.947, 1344.432), stdev = 367.781
[info]   CI (99.9%): [≈ 0, 2357.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   367489.492 ±(99.9%) 554137.367 B/op [Average]
[info]   (min, avg, max) = (259828.695, 367489.492, 530603.138), stdev = 143907.714
[info]   CI (99.9%): [≈ 0, 921626.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:44:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7443.524 ops/s
[info] # Warmup Iteration   2: 13348.026 ops/s
[info] # Warmup Iteration   3: 14296.601 ops/s
[info] # Warmup Iteration   4: 14271.682 ops/s
[info] # Warmup Iteration   5: 14258.156 ops/s
[info] Iteration   1: 14278.514 ops/s
[info]                  ·gc.alloc.rate:                   768.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              84718.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148023.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14292.702 ops/s
[info]                  ·gc.alloc.rate:                   755.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              83166.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73976.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14223.950 ops/s
[info]                  ·gc.alloc.rate:                   762.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              84328.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74334.943 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14294.076 ops/s
[info]                  ·gc.alloc.rate:                   762.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              83989.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74039.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 14256.898 ops/s
[info]                  ·gc.alloc.rate:                   760.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              83924.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74231.239 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14269.228 ±(99.9%) 113.198 ops/s [Average]
[info]   (min, avg, max) = (14223.950, 14269.228, 14294.076), stdev = 29.397
[info]   CI (99.9%): [14156.029, 14382.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   761.806 ±(99.9%) 18.328 MB/sec [Average]
[info]   (min, avg, max) = (755.309, 761.806, 768.461), stdev = 4.760
[info]   CI (99.9%): [743.478, 780.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   84025.406 ±(99.9%) 2214.568 B/op [Average]
[info]   (min, avg, max) = (83166.084, 84025.406, 84718.880), stdev = 575.116
[info]   CI (99.9%): [81810.839, 86239.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.589 ±(99.9%) 25.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.589, 16.062), stdev = 6.689
[info]   CI (99.9%): [≈ 0, 30.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   806.258 ±(99.9%) 1154.697 MB/sec [Average]
[info]   (min, avg, max) = (671.847, 806.258, 1342.683), stdev = 299.871
[info]   CI (99.9%): [≈ 0, 1960.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   88921.069 ±(99.9%) 127224.497 B/op [Average]
[info]   (min, avg, max) = (73976.138, 88921.069, 148023.893), stdev = 33039.798
[info]   CI (99.9%): [≈ 0, 216145.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7672.379 ops/s
[info] # Warmup Iteration   2: 16398.808 ops/s
[info] # Warmup Iteration   3: 16520.886 ops/s
[info] # Warmup Iteration   4: 16835.797 ops/s
[info] # Warmup Iteration   5: 16864.132 ops/s
[info] Iteration   1: 16888.824 ops/s
[info]                  ·gc.alloc.rate:                   867.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              80846.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62506.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16821.305 ops/s
[info]                  ·gc.alloc.rate:                   882.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              82589.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125642.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16742.651 ops/s
[info]                  ·gc.alloc.rate:                   859.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              80738.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63148.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16824.578 ops/s
[info]                  ·gc.alloc.rate:                   860.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              80466.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62841.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16763.732 ops/s
[info]                  ·gc.alloc.rate:                   854.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              80189.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63163.462 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16808.218 ±(99.9%) 221.322 ops/s [Average]
[info]   (min, avg, max) = (16742.651, 16808.218, 16888.824), stdev = 57.477
[info]   CI (99.9%): [16586.896, 17029.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   864.638 ±(99.9%) 42.756 MB/sec [Average]
[info]   (min, avg, max) = (854.052, 864.638, 882.597), stdev = 11.104
[info]   CI (99.9%): [821.883, 907.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   80966.190 ±(99.9%) 3629.977 B/op [Average]
[info]   (min, avg, max) = (80189.480, 80966.190, 82589.734), stdev = 942.694
[info]   CI (99.9%): [77336.213, 84596.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.556 ±(99.9%) 6.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.556, 3.895), stdev = 1.629
[info]   CI (99.9%): [≈ 0, 7.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   805.923 ±(99.9%) 1155.409 MB/sec [Average]
[info]   (min, avg, max) = (670.581, 805.923, 1342.678), stdev = 300.056
[info]   CI (99.9%): [≈ 0, 1961.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   75460.304 ±(99.9%) 108025.171 B/op [Average]
[info]   (min, avg, max) = (62506.129, 75460.304, 125642.153), stdev = 28053.794
[info]   CI (99.9%): [≈ 0, 183485.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:43:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174127.352 ops/s
[info] # Warmup Iteration   2: 223374.605 ops/s
[info] # Warmup Iteration   3: 230261.418 ops/s
[info] # Warmup Iteration   4: 237865.692 ops/s
[info] # Warmup Iteration   5: 236277.591 ops/s
[info] Iteration   1: 238104.447 ops/s
[info]                  ·gc.alloc.rate:                   855.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              5650.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4407.521 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 238303.628 ops/s
[info]                  ·gc.alloc.rate:                   855.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              5652.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4399.220 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 237879.486 ops/s
[info]                  ·gc.alloc.rate:                   860.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              5695.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4407.244 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 237940.302 ops/s
[info]                  ·gc.alloc.rate:                   875.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              5790.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8812.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 238580.274 ops/s
[info]                  ·gc.alloc.rate:                                  859.750 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5673.146 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.424 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.799 B/op
[info]                  ·gc.churn.Compressed_Class_Space:                0.012 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm:           0.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    1.099 B/op
[info]                  ·gc.churn.PS_Old_Gen:                            0.037 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:                       0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     973.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                6425.287 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        83.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   238161.627 ±(99.9%) 1101.459 ops/s [Average]
[info]   (min, avg, max) = (237879.486, 238161.627, 238580.274), stdev = 286.046
[info]   CI (99.9%): [237060.168, 239263.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   861.408 ±(99.9%) 31.531 MB/sec [Average]
[info]   (min, avg, max) = (855.083, 861.408, 875.386), stdev = 8.188
[info]   CI (99.9%): [829.878, 892.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5692.623 ±(99.9%) 222.891 B/op [Average]
[info]   (min, avg, max) = (5650.988, 5692.623, 5790.891), stdev = 57.884
[info]   CI (99.9%): [5469.732, 5915.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.085 ±(99.9%) 0.730 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.424), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 0.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.560 ±(99.9%) 4.820 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.560, 2.799), stdev = 1.252
[info]   CI (99.9%): [≈ 0, 5.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space":
[info]   0.002 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.016 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.166), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.412 ±(99.9%) 1.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.412, 1.099), stdev = 0.466
[info]   CI (99.9%): [≈ 0, 2.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen":
[info]   0.007 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen.norm":
[info]   0.048 ±(99.9%) 0.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.241), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   861.016 ±(99.9%) 1136.178 MB/sec [Average]
[info]   (min, avg, max) = (666.124, 861.016, 1332.109), stdev = 295.062
[info]   CI (99.9%): [≈ 0, 1997.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5690.300 ±(99.9%) 7517.462 B/op [Average]
[info]   (min, avg, max) = (4399.220, 5690.300, 8812.229), stdev = 1952.261
[info]   CI (99.9%): [≈ 0, 13207.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   89.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 17.800, 83.000), stdev = 36.451
[info]   CI (99.9%): [89.000, 89.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:43:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203720.177 ops/s
[info] # Warmup Iteration   2: 259898.716 ops/s
[info] # Warmup Iteration   3: 268077.764 ops/s
[info] # Warmup Iteration   4: 268352.489 ops/s
[info] # Warmup Iteration   5: 268682.684 ops/s
[info] Iteration   1: 267338.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 268106.663 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 267022.089 ops/s
[info]                  ·gc.alloc.rate:      0.732 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.316 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 268819.753 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 268795.410 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   268016.497 ±(99.9%) 3168.598 ops/s [Average]
[info]   (min, avg, max) = (267022.089, 268016.497, 268819.753), stdev = 822.875
[info]   CI (99.9%): [264847.899, 271185.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.147 ±(99.9%) 1.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.147, 0.732), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 1.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.864 ±(99.9%) 7.429 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.864, 4.316), stdev = 1.929
[info]   CI (99.9%): [≈ 0, 8.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:43:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7805.234 ops/s
[info] # Warmup Iteration   2: 15138.363 ops/s
[info] # Warmup Iteration   3: 15686.053 ops/s
[info] # Warmup Iteration   4: 15754.386 ops/s
[info] # Warmup Iteration   5: 15754.636 ops/s
[info] Iteration   1: 15770.023 ops/s
[info]                  ·gc.alloc.rate:                   839.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              83755.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67011.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 15946.787 ops/s
[info]                  ·gc.alloc.rate:                   842.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              83145.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66271.528 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 15921.195 ops/s
[info]                  ·gc.alloc.rate:                   854.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              84524.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132816.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16168.337 ops/s
[info]                  ·gc.alloc.rate:                   860.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              83798.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65426.577 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 15956.887 ops/s
[info]                  ·gc.alloc.rate:                   845.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              83391.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66357.253 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15952.646 ±(99.9%) 547.670 ops/s [Average]
[info]   (min, avg, max) = (15770.023, 15952.646, 16168.337), stdev = 142.228
[info]   CI (99.9%): [15404.976, 16500.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   848.547 ±(99.9%) 34.959 MB/sec [Average]
[info]   (min, avg, max) = (839.233, 848.547, 860.897), stdev = 9.079
[info]   CI (99.9%): [813.588, 883.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   83723.103 ±(99.9%) 2012.287 B/op [Average]
[info]   (min, avg, max) = (83145.903, 83723.103, 84524.486), stdev = 522.584
[info]   CI (99.9%): [81710.816, 85735.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.442 ±(99.9%) 16.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.442, 10.132), stdev = 4.392
[info]   CI (99.9%): [≈ 0, 19.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   806.217 ±(99.9%) 1156.478 MB/sec [Average]
[info]   (min, avg, max) = (671.410, 806.217, 1343.470), stdev = 300.334
[info]   CI (99.9%): [≈ 0, 1962.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   79576.672 ±(99.9%) 114624.310 B/op [Average]
[info]   (min, avg, max) = (65426.577, 79576.672, 132816.993), stdev = 29767.569
[info]   CI (99.9%): [≈ 0, 194200.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1117194.741 ops/s
[info] # Warmup Iteration   2: 1326600.804 ops/s
[info] # Warmup Iteration   3: 1336148.302 ops/s
[info] # Warmup Iteration   4: 1353848.278 ops/s
[info] # Warmup Iteration   5: 1356740.196 ops/s
[info] Iteration   1: 1356079.156 ops/s
[info]                  ·gc.alloc.rate:      55.138 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1353479.176 ops/s
[info]                  ·gc.alloc.rate:      55.031 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1228063.610 ops/s
[info]                  ·gc.alloc.rate:                   80.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              103.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 655.636 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1356257.930 ops/s
[info]                  ·gc.alloc.rate:      55.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1355942.909 ops/s
[info]                  ·gc.alloc.rate:      55.422 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.337 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1329964.556 ±(99.9%) 219393.194 ops/s [Average]
[info]   (min, avg, max) = (1228063.610, 1329964.556, 1356257.930), stdev = 56975.716
[info]   CI (99.9%): [1110571.362, 1549357.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   60.223 ±(99.9%) 43.368 MB/sec [Average]
[info]   (min, avg, max) = (55.031, 60.223, 80.369), stdev = 11.263
[info]   CI (99.9%): [16.855, 103.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   71.870 ±(99.9%) 67.037 B/op [Average]
[info]   (min, avg, max) = (64.000, 71.870, 103.011), stdev = 17.409
[info]   CI (99.9%): [4.833, 138.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.305 ±(99.9%) 880.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.305, 511.525), stdev = 228.761
[info]   CI (99.9%): [≈ 0, 983.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   131.127 ±(99.9%) 1129.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 131.127, 655.636), stdev = 293.209
[info]   CI (99.9%): [≈ 0, 1260.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:42:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15568.755 ops/s
[info] # Warmup Iteration   2: 79444.031 ops/s
[info] # Warmup Iteration   3: 80338.283 ops/s
[info] # Warmup Iteration   4: 82892.258 ops/s
[info] # Warmup Iteration   5: 82452.511 ops/s
[info] Iteration   1: 82856.704 ops/s
[info]                  ·gc.alloc.rate:                   3504.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              66581.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3388.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64372.705 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 82531.158 ops/s
[info]                  ·gc.alloc.rate:                   3533.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              67384.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3394.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64733.343 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 83003.380 ops/s
[info]                  ·gc.alloc.rate:                   3552.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              67371.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64443.418 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 82471.959 ops/s
[info]                  ·gc.alloc.rate:                   3531.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              67409.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64921.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 82165.476 ops/s
[info]                  ·gc.alloc.rate:                   3519.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              67434.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65201.856 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   82605.735 ±(99.9%) 1274.780 ops/s [Average]
[info]   (min, avg, max) = (82165.476, 82605.735, 83003.380), stdev = 331.056
[info]   CI (99.9%): [81330.956, 83880.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3528.382 ±(99.9%) 68.328 MB/sec [Average]
[info]   (min, avg, max) = (3504.513, 3528.382, 3552.574), stdev = 17.745
[info]   CI (99.9%): [3460.054, 3596.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67236.037 ±(99.9%) 1413.050 B/op [Average]
[info]   (min, avg, max) = (66581.009, 67236.037, 67434.223), stdev = 366.964
[info]   CI (99.9%): [65822.987, 68649.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.505 ±(99.9%) 3.632 B/op [Average]
[info]   (min, avg, max) = (0.397, 1.505, 2.768), stdev = 0.943
[info]   CI (99.9%): [≈ 0, 5.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3397.079 ±(99.9%) 23.252 MB/sec [Average]
[info]   (min, avg, max) = (3388.278, 3397.079, 3403.445), stdev = 6.039
[info]   CI (99.9%): [3373.826, 3420.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64734.474 ±(99.9%) 1318.317 B/op [Average]
[info]   (min, avg, max) = (64372.705, 64734.474, 65201.856), stdev = 342.363
[info]   CI (99.9%): [63416.157, 66052.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:42:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 685750.647 ops/s
[info] # Warmup Iteration   2: 1608432.679 ops/s
[info] # Warmup Iteration   3: 1678223.167 ops/s
[info] # Warmup Iteration   4: 1690860.026 ops/s
[info] # Warmup Iteration   5: 1698149.040 ops/s
[info] Iteration   1: 1685115.561 ops/s
[info]                  ·gc.alloc.rate:                   923.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1259.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1683609.543 ops/s
[info]                  ·gc.alloc.rate:                   898.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              840.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 630.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1682141.539 ops/s
[info]                  ·gc.alloc.rate:                   905.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              846.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 630.730 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1682731.303 ops/s
[info]                  ·gc.alloc.rate:                   920.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              861.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1261.714 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1693340.173 ops/s
[info]                  ·gc.alloc.rate:                   903.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              839.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 627.207 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1685387.624 ±(99.9%) 17653.400 ops/s [Average]
[info]   (min, avg, max) = (1682141.539, 1685387.624, 1693340.173), stdev = 4584.532
[info]   CI (99.9%): [1667734.224, 1703041.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   910.264 ±(99.9%) 42.082 MB/sec [Average]
[info]   (min, avg, max) = (898.794, 910.264, 923.201), stdev = 10.928
[info]   CI (99.9%): [868.182, 952.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   850.099 ±(99.9%) 42.685 B/op [Average]
[info]   (min, avg, max) = (839.605, 850.099, 862.468), stdev = 11.085
[info]   CI (99.9%): [807.415, 892.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.963 ±(99.9%) 1421.465 MB/sec [Average]
[info]   (min, avg, max) = (674.062, 943.963, 1348.776), stdev = 369.150
[info]   CI (99.9%): [≈ 0, 2365.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   881.816 ±(99.9%) 1331.067 B/op [Average]
[info]   (min, avg, max) = (627.207, 881.816, 1261.714), stdev = 345.674
[info]   CI (99.9%): [≈ 0, 2212.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1239744.373 ops/s
[info] # Warmup Iteration   2: 1911689.441 ops/s
[info] # Warmup Iteration   3: 2018023.107 ops/s
[info] # Warmup Iteration   4: 2009753.749 ops/s
[info] # Warmup Iteration   5: 2020461.050 ops/s
[info] Iteration   1: 2029150.360 ops/s
[info]                  ·gc.alloc.rate:      567.257 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2022897.287 ops/s
[info]                  ·gc.alloc.rate:                   581.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              452.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2006965.279 ops/s
[info]                  ·gc.alloc.rate:                   577.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              452.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 528.654 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2017587.629 ops/s
[info]                  ·gc.alloc.rate:                   588.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              458.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525.848 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2009505.088 ops/s
[info]                  ·gc.alloc.rate:                   577.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              452.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 527.470 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2017221.129 ±(99.9%) 35468.768 ops/s [Average]
[info]   (min, avg, max) = (2006965.279, 2017221.129, 2029150.360), stdev = 9211.126
[info]   CI (99.9%): [1981752.361, 2052689.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   578.363 ±(99.9%) 29.253 MB/sec [Average]
[info]   (min, avg, max) = (567.257, 578.363, 588.278), stdev = 7.597
[info]   CI (99.9%): [549.111, 607.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   451.292 ±(99.9%) 26.621 B/op [Average]
[info]   (min, avg, max) = (440.000, 451.292, 458.976), stdev = 6.913
[info]   CI (99.9%): [424.671, 477.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.537 ±(99.9%) 4.447 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.537, 2.602), stdev = 1.155
[info]   CI (99.9%): [≈ 0, 4.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.418 ±(99.9%) 3.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.418, 2.024), stdev = 0.898
[info]   CI (99.9%): [≈ 0, 3.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   539.263 ±(99.9%) 1160.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.263, 674.867), stdev = 301.457
[info]   CI (99.9%): [≈ 0, 1700.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   421.396 ±(99.9%) 907.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 421.396, 528.654), stdev = 235.572
[info]   CI (99.9%): [≈ 0, 1328.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1442948.635 ops/s
[info] # Warmup Iteration   2: 2091489.623 ops/s
[info] # Warmup Iteration   3: 2124126.107 ops/s
[info] # Warmup Iteration   4: 2123714.919 ops/s
[info] # Warmup Iteration   5: 2123461.526 ops/s
[info] Iteration   1: 2123510.944 ops/s
[info]                  ·gc.alloc.rate:      21.586 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2124148.572 ops/s
[info]                  ·gc.alloc.rate:      21.591 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2121368.060 ops/s
[info]                  ·gc.alloc.rate:      21.560 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2124192.910 ops/s
[info]                  ·gc.alloc.rate:      21.590 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2124015.201 ops/s
[info]                  ·gc.alloc.rate:      21.591 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2123447.138 ±(99.9%) 4595.642 ops/s [Average]
[info]   (min, avg, max) = (2121368.060, 2123447.138, 2124192.910), stdev = 1193.474
[info]   CI (99.9%): [2118851.496, 2128042.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   21.583 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (21.560, 21.583, 21.591), stdev = 0.013
[info]   CI (99.9%): [21.532, 21.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:41:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17448.578 ops/s
[info] # Warmup Iteration   2: 47017.799 ops/s
[info] # Warmup Iteration   3: 48123.444 ops/s
[info] # Warmup Iteration   4: 48961.149 ops/s
[info] # Warmup Iteration   5: 49036.012 ops/s
[info] Iteration   1: 49047.841 ops/s
[info]                  ·gc.alloc.rate:                   2040.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              65496.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65001.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 49210.203 ops/s
[info]                  ·gc.alloc.rate:                   2031.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              64992.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64852.903 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 48374.815 ops/s
[info]                  ·gc.alloc.rate:                   1999.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              65047.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66069.694 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 48181.799 ops/s
[info]                  ·gc.alloc.rate:                   2003.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              65451.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66377.827 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 48272.654 ops/s
[info]                  ·gc.alloc.rate:                   2021.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              65913.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66350.449 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   48617.463 ±(99.9%) 1830.718 ops/s [Average]
[info]   (min, avg, max) = (48181.799, 48617.463, 49210.203), stdev = 475.432
[info]   CI (99.9%): [46786.745, 50448.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2019.490 ±(99.9%) 68.223 MB/sec [Average]
[info]   (min, avg, max) = (1999.370, 2019.490, 2040.724), stdev = 17.717
[info]   CI (99.9%): [1951.267, 2087.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   65380.348 ±(99.9%) 1446.563 B/op [Average]
[info]   (min, avg, max) = (64992.060, 65380.348, 65913.738), stdev = 375.668
[info]   CI (99.9%): [63933.785, 66826.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.485 ±(99.9%) 4.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.485, 2.709), stdev = 1.110
[info]   CI (99.9%): [≈ 0, 5.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2030.168 ±(99.9%) 14.490 MB/sec [Average]
[info]   (min, avg, max) = (2025.302, 2030.168, 2034.791), stdev = 3.763
[info]   CI (99.9%): [2015.678, 2044.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65730.499 ±(99.9%) 2868.574 B/op [Average]
[info]   (min, avg, max) = (64852.903, 65730.499, 66377.827), stdev = 744.960
[info]   CI (99.9%): [62861.925, 68599.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:41:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167656.115 ops/s
[info] # Warmup Iteration   2: 818971.123 ops/s
[info] # Warmup Iteration   3: 877489.510 ops/s
[info] # Warmup Iteration   4: 870973.708 ops/s
[info] # Warmup Iteration   5: 865332.251 ops/s
[info] Iteration   1: 874609.907 ops/s
[info]                  ·gc.alloc.rate:                   2757.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              4962.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4852.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 876432.336 ops/s
[info]                  ·gc.alloc.rate:                   2766.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              4967.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4851.982 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 881192.897 ops/s
[info]                  ·gc.alloc.rate:                   2807.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              5013.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4835.179 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 877803.045 ops/s
[info]                  ·gc.alloc.rate:                   2798.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              5017.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4862.680 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 874380.816 ops/s
[info]                  ·gc.alloc.rate:                   2786.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              5015.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4887.763 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   876883.800 ±(99.9%) 10728.841 ops/s [Average]
[info]   (min, avg, max) = (874380.816, 876883.800, 881192.897), stdev = 2786.246
[info]   CI (99.9%): [866154.959, 887612.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2783.151 ±(99.9%) 81.448 MB/sec [Average]
[info]   (min, avg, max) = (2757.163, 2783.151, 2807.660), stdev = 21.152
[info]   CI (99.9%): [2701.703, 2864.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4995.404 ±(99.9%) 107.595 B/op [Average]
[info]   (min, avg, max) = (4962.520, 4995.404, 5017.481), stdev = 27.942
[info]   CI (99.9%): [4887.809, 5103.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.167), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.127 ±(99.9%) 0.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.300), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2706.569 ±(99.9%) 29.311 MB/sec [Average]
[info]   (min, avg, max) = (2696.023, 2706.569, 2715.133), stdev = 7.612
[info]   CI (99.9%): [2677.258, 2735.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4858.016 ±(99.9%) 74.449 B/op [Average]
[info]   (min, avg, max) = (4835.179, 4858.016, 4887.763), stdev = 19.334
[info]   CI (99.9%): [4783.567, 4932.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.673 ops/s
[info] # Warmup Iteration   2: 4177869.426 ops/s
[info] # Warmup Iteration   3: 4760525.529 ops/s
[info] # Warmup Iteration   4: 4814876.785 ops/s
[info] # Warmup Iteration   5: 4837049.022 ops/s
[info] Iteration   1: 4817916.158 ops/s
[info]                  ·gc.alloc.rate:                   304.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              99.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4830424.979 ops/s
[info]                  ·gc.alloc.rate:      294.609 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4814817.972 ops/s
[info]                  ·gc.alloc.rate:                   309.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219.277 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4838131.647 ops/s
[info]                  ·gc.alloc.rate:      295.075 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4821350.955 ops/s
[info]                  ·gc.alloc.rate:                   308.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218.979 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   4824528.342 ±(99.9%) 36930.480 ops/s [Average]
[info]   (min, avg, max) = (4814817.972, 4824528.342, 4838131.647), stdev = 9590.728
[info]   CI (99.9%): [4787597.862, 4861458.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   302.518 ±(99.9%) 28.112 MB/sec [Average]
[info]   (min, avg, max) = (294.609, 302.518, 309.640), stdev = 7.301
[info]   CI (99.9%): [274.406, 330.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98.705 ±(99.9%) 9.859 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.705, 101.234), stdev = 2.560
[info]   CI (99.9%): [88.846, 108.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.803 ±(99.9%) 6.900 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 4.008), stdev = 1.792
[info]   CI (99.9%): [≈ 0, 7.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.262 ±(99.9%) 2.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.262, 1.309), stdev = 0.585
[info]   CI (99.9%): [≈ 0, 2.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   370.588 ±(99.9%) 1326.478 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.588, 670.702), stdev = 344.482
[info]   CI (99.9%): [≈ 0, 1697.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   121.077 ±(99.9%) 433.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 121.077, 219.277), stdev = 112.548
[info]   CI (99.9%): [≈ 0, 554.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:40:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44978.162 ops/s
[info] # Warmup Iteration   2: 918576.107 ops/s
[info] # Warmup Iteration   3: 978489.452 ops/s
[info] # Warmup Iteration   4: 990817.561 ops/s
[info] # Warmup Iteration   5: 990826.210 ops/s
[info] Iteration   1: 999977.389 ops/s
[info]                  ·gc.alloc.rate:                   1168.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              1838.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2121.876 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 998338.716 ops/s
[info]                  ·gc.alloc.rate:                   1177.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              1857.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2125.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1000743.863 ops/s
[info]                  ·gc.alloc.rate:                   1149.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              1807.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1060.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 998072.149 ops/s
[info]                  ·gc.alloc.rate:                   1165.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              1837.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2127.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1000969.785 ops/s
[info]                  ·gc.alloc.rate:                   1185.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              1863.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2123.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   999620.380 ±(99.9%) 5184.176 ops/s [Average]
[info]   (min, avg, max) = (998072.149, 999620.380, 1000969.785), stdev = 1346.314
[info]   CI (99.9%): [994436.204, 1004804.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1169.114 ±(99.9%) 52.639 MB/sec [Average]
[info]   (min, avg, max) = (1149.215, 1169.114, 1185.149), stdev = 13.670
[info]   CI (99.9%): [1116.475, 1221.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1840.981 ±(99.9%) 84.211 B/op [Average]
[info]   (min, avg, max) = (1807.615, 1840.981, 1863.828), stdev = 21.869
[info]   CI (99.9%): [1756.770, 1925.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.085 ±(99.9%) 0.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.197), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1213.903 ±(99.9%) 1161.404 MB/sec [Average]
[info]   (min, avg, max) = (674.363, 1213.903, 1350.023), stdev = 301.613
[info]   CI (99.9%): [52.499, 2375.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1911.745 ±(99.9%) 1831.927 B/op [Average]
[info]   (min, avg, max) = (1060.715, 1911.745, 2127.582), stdev = 475.746
[info]   CI (99.9%): [79.818, 3743.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:40:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5550450.918 ops/s
[info] # Warmup Iteration   2: 7973603.030 ops/s
[info] # Warmup Iteration   3: 8864376.007 ops/s
[info] # Warmup Iteration   4: 8633781.848 ops/s
[info] # Warmup Iteration   5: 8773476.446 ops/s
[info] Iteration   1: 8856663.081 ops/s
[info]                  ·gc.alloc.rate:                   410.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.912 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8632253.682 ops/s
[info]                  ·gc.alloc.rate:                   412.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              75.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122.912 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8885348.044 ops/s
[info]                  ·gc.alloc.rate:      406.429 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8798502.988 ops/s
[info]                  ·gc.alloc.rate:                   423.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              75.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8780088.145 ops/s
[info]                  ·gc.alloc.rate:                   416.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.727 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8790571.188 ±(99.9%) 378207.099 ops/s [Average]
[info]   (min, avg, max) = (8632253.682, 8790571.188, 8885348.044), stdev = 98219.183
[info]   CI (99.9%): [8412364.089, 9168778.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   413.765 ±(99.9%) 24.632 MB/sec [Average]
[info]   (min, avg, max) = (406.429, 413.765, 423.258), stdev = 6.397
[info]   CI (99.9%): [389.133, 438.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.093 ±(99.9%) 6.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 74.093, 75.695), stdev = 1.558
[info]   CI (99.9%): [68.092, 80.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.579 ±(99.9%) 4.827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.821), stdev = 1.254
[info]   CI (99.9%): [≈ 0, 5.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.104 ±(99.9%) 0.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.505), stdev = 0.224
[info]   CI (99.9%): [≈ 0, 0.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.665 ±(99.9%) 1123.764 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.665, 674.236), stdev = 291.838
[info]   CI (99.9%): [≈ 0, 1630.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   91.026 ±(99.9%) 202.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.026, 122.912), stdev = 52.579
[info]   CI (99.9%): [≈ 0, 293.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:40:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6869.381 ops/s
[info] # Warmup Iteration   2: 259198.583 ops/s
[info] # Warmup Iteration   3: 499842.138 ops/s
[info] # Warmup Iteration   4: 517497.095 ops/s
[info] # Warmup Iteration   5: 515232.325 ops/s
[info] Iteration   1: 517411.737 ops/s
[info]                  ·gc.alloc.rate:                   2462.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              7490.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6159.858 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 517354.233 ops/s
[info]                  ·gc.alloc.rate:                   2473.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              7523.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8227.734 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 519202.722 ops/s
[info]                  ·gc.alloc.rate:                   2468.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              7482.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6157.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 517457.832 ops/s
[info]                  ·gc.alloc.rate:                   2513.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              7645.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8249.365 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 508151.959 ops/s
[info]                  ·gc.alloc.rate:                   2444.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              7570.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6306.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   515915.697 ±(99.9%) 16978.442 ops/s [Average]
[info]   (min, avg, max) = (508151.959, 515915.697, 519202.722), stdev = 4409.247
[info]   CI (99.9%): [498937.255, 532894.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2472.181 ±(99.9%) 98.228 MB/sec [Average]
[info]   (min, avg, max) = (2444.011, 2472.181, 2513.291), stdev = 25.510
[info]   CI (99.9%): [2373.953, 2570.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7542.509 ±(99.9%) 259.368 B/op [Average]
[info]   (min, avg, max) = (7482.344, 7542.509, 7645.637), stdev = 67.357
[info]   CI (99.9%): [7283.141, 7801.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.190 ±(99.9%) 0.384 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.190, 0.317), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2301.638 ±(99.9%) 1429.796 MB/sec [Average]
[info]   (min, avg, max) = (2024.688, 2301.638, 2711.750), stdev = 371.314
[info]   CI (99.9%): [871.841, 3731.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7020.043 ±(99.9%) 4289.623 B/op [Average]
[info]   (min, avg, max) = (6157.011, 7020.043, 8249.365), stdev = 1114.001
[info]   CI (99.9%): [2730.419, 11309.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1564.915 ops/s
[info] # Warmup Iteration   2: 4342.237 ops/s
[info] # Warmup Iteration   3: 4430.757 ops/s
[info] # Warmup Iteration   4: 4529.700 ops/s
[info] # Warmup Iteration   5: 4434.382 ops/s
[info] Iteration   1: 4444.669 ops/s
[info]                  ·gc.alloc.rate:                   2088.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              739538.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 717328.813 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4545.302 ops/s
[info]                  ·gc.alloc.rate:                   2136.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              739799.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 702317.618 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4564.799 ops/s
[info]                  ·gc.alloc.rate:                   2169.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              748005.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 700084.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4539.073 ops/s
[info]                  ·gc.alloc.rate:                   2146.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              744030.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 704901.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4536.570 ops/s
[info]                  ·gc.alloc.rate:                   2158.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              748797.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 705905.615 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4526.083 ±(99.9%) 180.357 ops/s [Average]
[info]   (min, avg, max) = (4444.669, 4526.083, 4564.799), stdev = 46.838
[info]   CI (99.9%): [4345.726, 4706.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2139.803 ±(99.9%) 120.482 MB/sec [Average]
[info]   (min, avg, max) = (2088.303, 2139.803, 2169.438), stdev = 31.289
[info]   CI (99.9%): [2019.320, 2260.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   744034.406 ±(99.9%) 16850.473 B/op [Average]
[info]   (min, avg, max) = (739538.897, 744034.406, 748797.876), stdev = 4376.014
[info]   CI (99.9%): [727183.933, 760884.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.187), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   46.397 ±(99.9%) 105.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.397, 66.332), stdev = 27.473
[info]   CI (99.9%): [≈ 0, 152.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2030.511 ±(99.9%) 14.018 MB/sec [Average]
[info]   (min, avg, max) = (2025.587, 2030.511, 2034.395), stdev = 3.640
[info]   CI (99.9%): [2016.493, 2044.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   706107.577 ±(99.9%) 25691.125 B/op [Average]
[info]   (min, avg, max) = (700084.086, 706107.577, 717328.813), stdev = 6671.903
[info]   CI (99.9%): [680416.452, 731798.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:39:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 824.484 ops/s
[info] # Warmup Iteration   2: 5580.562 ops/s
[info] # Warmup Iteration   3: 6064.151 ops/s
[info] # Warmup Iteration   4: 6203.955 ops/s
[info] # Warmup Iteration   5: 6105.047 ops/s
[info] Iteration   1: 6195.959 ops/s
[info]                  ·gc.alloc.rate:                   2203.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              559814.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 514221.806 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6208.323 ops/s
[info]                  ·gc.alloc.rate:                   2206.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              559408.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 513819.125 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6211.014 ops/s
[info]                  ·gc.alloc.rate:                   2220.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              562660.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 514246.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6167.738 ops/s
[info]                  ·gc.alloc.rate:                   2205.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              562660.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 518678.824 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6079.522 ops/s
[info]                  ·gc.alloc.rate:                   2203.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              570314.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 701087.795 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   6172.511 ±(99.9%) 210.772 ops/s [Average]
[info]   (min, avg, max) = (6079.522, 6172.511, 6211.014), stdev = 54.737
[info]   CI (99.9%): [5961.739, 6383.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2207.911 ±(99.9%) 26.389 MB/sec [Average]
[info]   (min, avg, max) = (2203.828, 2207.911, 2220.007), stdev = 6.853
[info]   CI (99.9%): [2181.522, 2234.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   562971.731 ±(99.9%) 16870.266 B/op [Average]
[info]   (min, avg, max) = (559408.764, 562971.731, 570314.685), stdev = 4381.154
[info]   CI (99.9%): [546101.465, 579841.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.298 ±(99.9%) 14.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.298, 10.548), stdev = 3.730
[info]   CI (99.9%): [≈ 0, 19.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2164.435 ±(99.9%) 1172.635 MB/sec [Average]
[info]   (min, avg, max) = (2024.425, 2164.435, 2709.166), stdev = 304.530
[info]   CI (99.9%): [991.800, 3337.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   552410.732 ±(99.9%) 320130.477 B/op [Average]
[info]   (min, avg, max) = (513819.125, 552410.732, 701087.795), stdev = 83136.868
[info]   CI (99.9%): [232280.255, 872541.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:39:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36105.447 ops/s
[info] # Warmup Iteration   2: 46221.760 ops/s
[info] # Warmup Iteration   3: 45530.468 ops/s
[info] # Warmup Iteration   4: 46970.963 ops/s
[info] # Warmup Iteration   5: 46443.421 ops/s
[info] Iteration   1: 47353.866 ops/s
[info]                  ·gc.alloc.rate:                   779.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              25917.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22361.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 46965.802 ops/s
[info]                  ·gc.alloc.rate:                   773.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              25912.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22545.701 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 46272.655 ops/s
[info]                  ·gc.alloc.rate:                   788.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              26807.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45721.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 47349.456 ops/s
[info]                  ·gc.alloc.rate:                   784.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              26077.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22318.607 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 47340.021 ops/s
[info]                  ·gc.alloc.rate:                   780.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              25956.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22322.850 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   47056.360 ±(99.9%) 1803.312 ops/s [Average]
[info]   (min, avg, max) = (46272.655, 47056.360, 47353.866), stdev = 468.315
[info]   CI (99.9%): [45253.048, 48859.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   781.244 ±(99.9%) 21.590 MB/sec [Average]
[info]   (min, avg, max) = (773.180, 781.244, 788.144), stdev = 5.607
[info]   CI (99.9%): [759.654, 802.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26134.457 ±(99.9%) 1471.721 B/op [Average]
[info]   (min, avg, max) = (25912.357, 26134.457, 26807.668), stdev = 382.201
[info]   CI (99.9%): [24662.736, 27606.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.280 ±(99.9%) 1.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.280, 0.708), stdev = 0.383
[info]   CI (99.9%): [≈ 0, 1.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.488 ±(99.9%) 1157.475 MB/sec [Average]
[info]   (min, avg, max) = (671.390, 806.488, 1344.203), stdev = 300.593
[info]   CI (99.9%): [≈ 0, 1963.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27053.887 ±(99.9%) 40184.560 B/op [Average]
[info]   (min, avg, max) = (22318.607, 27053.887, 45721.276), stdev = 10435.803
[info]   CI (99.9%): [≈ 0, 67238.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2131.963 ops/s
[info] # Warmup Iteration   2: 4589.604 ops/s
[info] # Warmup Iteration   3: 4651.708 ops/s
[info] # Warmup Iteration   4: 4773.207 ops/s
[info] # Warmup Iteration   5: 4758.340 ops/s
[info] Iteration   1: 4761.318 ops/s
[info]                  ·gc.alloc.rate:                   883.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              292132.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 446118.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4789.948 ops/s
[info]                  ·gc.alloc.rate:                   861.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              282987.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221708.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4788.982 ops/s
[info]                  ·gc.alloc.rate:                   854.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              280914.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221755.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4776.531 ops/s
[info]                  ·gc.alloc.rate:                   860.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              283459.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222312.157 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4772.533 ops/s
[info]                  ·gc.alloc.rate:                   874.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              288415.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 444843.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4777.862 ±(99.9%) 46.111 ops/s [Average]
[info]   (min, avg, max) = (4761.318, 4777.862, 4789.948), stdev = 11.975
[info]   CI (99.9%): [4731.751, 4823.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   866.918 ±(99.9%) 45.601 MB/sec [Average]
[info]   (min, avg, max) = (854.660, 866.918, 883.539), stdev = 11.842
[info]   CI (99.9%): [821.317, 912.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   285581.826 ±(99.9%) 17640.943 B/op [Average]
[info]   (min, avg, max) = (280914.347, 285581.826, 292132.055), stdev = 4581.297
[info]   CI (99.9%): [267940.883, 303222.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.496 ±(99.9%) 22.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.496, 13.762), stdev = 5.754
[info]   CI (99.9%): [≈ 0, 27.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   944.525 ±(99.9%) 1422.428 MB/sec [Average]
[info]   (min, avg, max) = (674.673, 944.525, 1349.262), stdev = 369.400
[info]   CI (99.9%): [≈ 0, 2366.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   311347.660 ±(99.9%) 471501.661 B/op [Average]
[info]   (min, avg, max) = (221708.931, 311347.660, 446118.223), stdev = 122447.484
[info]   CI (99.9%): [≈ 0, 782849.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f6a7f336/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1475.077 ops/s
[info] # Warmup Iteration   2: 4524.417 ops/s
[info] # Warmup Iteration   3: 5059.902 ops/s
[info] # Warmup Iteration   4: 5056.038 ops/s
[info] # Warmup Iteration   5: 5117.235 ops/s
[info] Iteration   1: 5094.994 ops/s
[info]                  ·gc.alloc.rate:                   264.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              81730.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158027.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5129.116 ops/s
[info]                  ·gc.alloc.rate:      257.232 MB/sec
[info]                  ·gc.alloc.rate.norm: 78921.477 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5066.231 ops/s
[info]                  ·gc.alloc.rate:                   269.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              83613.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209632.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5129.619 ops/s
[info]                  ·gc.alloc.rate:      257.041 MB/sec
[info]                  ·gc.alloc.rate.norm: 78869.438 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5132.128 ops/s
[info]                  ·gc.alloc.rate:      257.186 MB/sec
[info]                  ·gc.alloc.rate.norm: 78869.080 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5110.418 ±(99.9%) 111.934 ops/s [Average]
[info]   (min, avg, max) = (5066.231, 5110.418, 5132.128), stdev = 29.069
[info]   CI (99.9%): [4998.483, 5222.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   261.037 ±(99.9%) 21.427 MB/sec [Average]
[info]   (min, avg, max) = (257.041, 261.037, 269.174), stdev = 5.564
[info]   CI (99.9%): [239.610, 282.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   80400.836 ±(99.9%) 8385.660 B/op [Average]
[info]   (min, avg, max) = (78869.080, 80400.836, 83613.592), stdev = 2177.729
[info]   CI (99.9%): [72015.177, 88786.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.010 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.202 ±(99.9%) 17.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.202, 9.542), stdev = 4.517
[info]   CI (99.9%): [≈ 0, 20.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   237.276 ±(99.9%) 1270.696 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 237.276, 674.860), stdev = 329.996
[info]   CI (99.9%): [≈ 0, 1507.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   73531.915 ±(99.9%) 394026.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73531.915, 209632.423), stdev = 102327.441
[info]   CI (99.9%): [≈ 0, 467558.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:38:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5092.589 ops/s
[info] # Warmup Iteration   2: 5912.122 ops/s
[info] # Warmup Iteration   3: 6103.908 ops/s
[info] # Warmup Iteration   4: 6530.936 ops/s
[info] # Warmup Iteration   5: 6519.818 ops/s
[info] Iteration   1: 6538.872 ops/s
[info]                  ·gc.alloc.rate:      174.766 MB/sec
[info]                  ·gc.alloc.rate.norm: 42072.082 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6539.830 ops/s
[info]                  ·gc.alloc.rate:      174.830 MB/sec
[info]                  ·gc.alloc.rate.norm: 42072.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6521.945 ops/s
[info]                  ·gc.alloc.rate:                   185.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              44786.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123456.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6548.105 ops/s
[info]                  ·gc.alloc.rate:      175.077 MB/sec
[info]                  ·gc.alloc.rate.norm: 42072.072 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6550.141 ops/s
[info]                  ·gc.alloc.rate:      175.779 MB/sec
[info]                  ·gc.alloc.rate.norm: 42234.966 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6539.779 ±(99.9%) 42.860 ops/s [Average]
[info]   (min, avg, max) = (6521.945, 6539.779, 6550.141), stdev = 11.131
[info]   CI (99.9%): [6496.919, 6582.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   177.211 ±(99.9%) 18.130 MB/sec [Average]
[info]   (min, avg, max) = (174.766, 177.211, 185.603), stdev = 4.708
[info]   CI (99.9%): [159.081, 195.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42647.539 ±(99.9%) 4612.309 B/op [Average]
[info]   (min, avg, max) = (42072.062, 42647.539, 44786.514), stdev = 1197.802
[info]   CI (99.9%): [38035.231, 47259.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.491 ±(99.9%) 12.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.491, 7.454), stdev = 3.334
[info]   CI (99.9%): [≈ 0, 14.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.325 ±(99.9%) 881.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.325, 511.624), stdev = 228.805
[info]   CI (99.9%): [≈ 0, 983.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24691.288 ±(99.9%) 212599.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24691.288, 123456.442), stdev = 55211.399
[info]   CI (99.9%): [≈ 0, 237290.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4911.819 ops/s
[info] # Warmup Iteration   2: 6447.424 ops/s
[info] # Warmup Iteration   3: 6556.865 ops/s
[info] # Warmup Iteration   4: 6590.774 ops/s
[info] # Warmup Iteration   5: 6612.071 ops/s
[info] Iteration   1: 6619.913 ops/s
[info]                  ·gc.alloc.rate:      128.492 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6547.568 ops/s
[info]                  ·gc.alloc.rate:                   134.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              32322.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122966.311 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6631.608 ops/s
[info]                  ·gc.alloc.rate:      128.725 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6613.334 ops/s
[info]                  ·gc.alloc.rate:      128.365 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6594.331 ops/s
[info]                  ·gc.alloc.rate:      129.926 MB/sec
[info]                  ·gc.alloc.rate.norm: 31011.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6601.351 ±(99.9%) 126.918 ops/s [Average]
[info]   (min, avg, max) = (6547.568, 6601.351, 6631.608), stdev = 32.960
[info]   CI (99.9%): [6474.433, 6728.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   130.003 ±(99.9%) 9.985 MB/sec [Average]
[info]   (min, avg, max) = (128.365, 130.003, 134.508), stdev = 2.593
[info]   CI (99.9%): [120.018, 139.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30997.896 ±(99.9%) 2951.757 B/op [Average]
[info]   (min, avg, max) = (30552.062, 30997.896, 32322.279), stdev = 766.562
[info]   CI (99.9%): [28046.139, 33949.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   102.344 ±(99.9%) 881.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.344, 511.720), stdev = 228.848
[info]   CI (99.9%): [≈ 0, 983.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   24593.262 ±(99.9%) 211755.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24593.262, 122966.311), stdev = 54992.206
[info]   CI (99.9%): [≈ 0, 236348.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2898.527 ops/s
[info] # Warmup Iteration   2: 6400.127 ops/s
[info] # Warmup Iteration   3: 7226.780 ops/s
[info] # Warmup Iteration   4: 7308.078 ops/s
[info] # Warmup Iteration   5: 7121.968 ops/s
[info] Iteration   1: 7381.757 ops/s
[info]                  ·gc.alloc.rate:                   1395.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              297419.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287744.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7393.654 ops/s
[info]                  ·gc.alloc.rate:                   1396.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              297322.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287560.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7396.297 ops/s
[info]                  ·gc.alloc.rate:                   1395.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              297057.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287585.929 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7365.286 ops/s
[info]                  ·gc.alloc.rate:                   1376.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              294236.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 288938.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7359.039 ops/s
[info]                  ·gc.alloc.rate:                   1387.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              296705.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 289458.828 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7379.207 ±(99.9%) 64.083 ops/s [Average]
[info]   (min, avg, max) = (7359.039, 7379.207, 7396.297), stdev = 16.642
[info]   CI (99.9%): [7315.123, 7443.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1390.396 ±(99.9%) 32.578 MB/sec [Average]
[info]   (min, avg, max) = (1376.908, 1390.396, 1396.612), stdev = 8.460
[info]   CI (99.9%): [1357.818, 1422.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   296548.149 ±(99.9%) 5090.099 B/op [Average]
[info]   (min, avg, max) = (294236.011, 296548.149, 297419.905), stdev = 1321.883
[info]   CI (99.9%): [291458.049, 301638.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.010 ±(99.9%) 0.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.135 ±(99.9%) 8.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.135, 4.448), stdev = 2.134
[info]   CI (99.9%): [≈ 0, 10.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1351.511 ±(99.9%) 4.894 MB/sec [Average]
[info]   (min, avg, max) = (1349.973, 1351.511, 1353.286), stdev = 1.271
[info]   CI (99.9%): [1346.617, 1356.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   288257.622 ±(99.9%) 3393.576 B/op [Average]
[info]   (min, avg, max) = (287560.802, 288257.622, 289458.828), stdev = 881.301
[info]   CI (99.9%): [284864.046, 291651.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.732 ops/s
[info] # Warmup Iteration   2: 16199.103 ops/s
[info] # Warmup Iteration   3: 17231.402 ops/s
[info] # Warmup Iteration   4: 17225.486 ops/s
[info] # Warmup Iteration   5: 17109.118 ops/s
[info] Iteration   1: 17094.535 ops/s
[info]                  ·gc.alloc.rate:                   412.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              37973.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61756.699 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16632.754 ops/s
[info]                  ·gc.alloc.rate:      389.679 MB/sec
[info]                  ·gc.alloc.rate.norm: 36872.597 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16694.141 ops/s
[info]                  ·gc.alloc.rate:                   404.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              38089.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     377.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63239.865 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16737.622 ops/s
[info]                  ·gc.alloc.rate:      397.495 MB/sec
[info]                  ·gc.alloc.rate.norm: 37376.856 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17241.490 ops/s
[info]                  ·gc.alloc.rate:                   403.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              36812.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61108.662 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   16880.108 ±(99.9%) 1041.538 ops/s [Average]
[info]   (min, avg, max) = (16632.754, 16880.108, 17241.490), stdev = 270.484
[info]   CI (99.9%): [15838.571, 17921.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   401.416 ±(99.9%) 32.575 MB/sec [Average]
[info]   (min, avg, max) = (389.679, 401.416, 412.476), stdev = 8.460
[info]   CI (99.9%): [368.840, 433.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   37424.779 ±(99.9%) 2298.203 B/op [Average]
[info]   (min, avg, max) = (36812.054, 37424.779, 38089.248), stdev = 596.836
[info]   CI (99.9%): [35126.576, 39722.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.806 ±(99.9%) 6.892 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.806, 4.007), stdev = 1.790
[info]   CI (99.9%): [≈ 0, 7.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   75.928 ±(99.9%) 649.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.928, 377.742), stdev = 168.721
[info]   CI (99.9%): [≈ 0, 725.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.256 ±(99.9%) 1413.989 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.256, 670.869), stdev = 367.209
[info]   CI (99.9%): [≈ 0, 1816.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   37221.045 ±(99.9%) 130871.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37221.045, 63239.865), stdev = 33986.791
[info]   CI (99.9%): [≈ 0, 168092.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:37:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3860.842 ops/s
[info] # Warmup Iteration   2: 14191.464 ops/s
[info] # Warmup Iteration   3: 14748.885 ops/s
[info] # Warmup Iteration   4: 14940.677 ops/s
[info] # Warmup Iteration   5: 14776.348 ops/s
[info] Iteration   1: 14682.654 ops/s
[info]                  ·gc.alloc.rate:                   384.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              41163.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72190.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14982.217 ops/s
[info]                  ·gc.alloc.rate:      374.348 MB/sec
[info]                  ·gc.alloc.rate.norm: 39326.986 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14929.237 ops/s
[info]                  ·gc.alloc.rate:                   391.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              41311.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71000.625 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14988.890 ops/s
[info]                  ·gc.alloc.rate:      374.516 MB/sec
[info]                  ·gc.alloc.rate.norm: 39326.591 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14973.211 ops/s
[info]                  ·gc.alloc.rate:                   386.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              40624.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70787.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14911.242 ±(99.9%) 500.150 ops/s [Average]
[info]   (min, avg, max) = (14682.654, 14911.242, 14988.890), stdev = 129.887
[info]   CI (99.9%): [14411.092, 15411.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   382.228 ±(99.9%) 29.486 MB/sec [Average]
[info]   (min, avg, max) = (374.348, 382.228, 391.819), stdev = 7.658
[info]   CI (99.9%): [352.742, 411.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   40350.825 ±(99.9%) 3731.883 B/op [Average]
[info]   (min, avg, max) = (39326.591, 40350.825, 41311.842), stdev = 969.158
[info]   CI (99.9%): [36618.942, 44082.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.308 ±(99.9%) 2.652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.308, 1.540), stdev = 0.689
[info]   CI (99.9%): [≈ 0, 2.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   32.481 ±(99.9%) 279.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.481, 162.403), stdev = 72.629
[info]   CI (99.9%): [≈ 0, 312.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.044 ±(99.9%) 1420.271 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.044, 673.440), stdev = 368.840
[info]   CI (99.9%): [≈ 0, 1824.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42795.584 ±(99.9%) 150446.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42795.584, 72190.013), stdev = 39070.500
[info]   CI (99.9%): [≈ 0, 193242.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:37:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17111.969 ops/s
[info] # Warmup Iteration   2: 20399.897 ops/s
[info] # Warmup Iteration   3: 20751.606 ops/s
[info] # Warmup Iteration   4: 20703.508 ops/s
[info] # Warmup Iteration   5: 20890.976 ops/s
[info] Iteration   1: 19810.996 ops/s
[info]                  ·gc.alloc.rate:                   350.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              27834.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40641.250 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 20587.963 ops/s
[info]                  ·gc.alloc.rate:      345.638 MB/sec
[info]                  ·gc.alloc.rate.norm: 26421.036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20802.890 ops/s
[info]                  ·gc.alloc.rate:                   365.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              27639.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50949.697 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20888.286 ops/s
[info]                  ·gc.alloc.rate:      350.037 MB/sec
[info]                  ·gc.alloc.rate.norm: 26376.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20669.439 ops/s
[info]                  ·gc.alloc.rate:                   370.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              28208.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51277.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   20551.915 ±(99.9%) 1656.456 ops/s [Average]
[info]   (min, avg, max) = (19810.996, 20551.915, 20888.286), stdev = 430.176
[info]   CI (99.9%): [18895.459, 22208.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   356.372 ±(99.9%) 41.637 MB/sec [Average]
[info]   (min, avg, max) = (345.638, 356.372, 370.418), stdev = 10.813
[info]   CI (99.9%): [314.735, 398.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   27295.906 ±(99.9%) 3251.882 B/op [Average]
[info]   (min, avg, max) = (26376.023, 27295.906, 28208.774), stdev = 844.504
[info]   CI (99.9%): [24044.024, 30547.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.606 ±(99.9%) 5.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.606, 3.030), stdev = 1.355
[info]   CI (99.9%): [≈ 0, 5.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46.153 ±(99.9%) 397.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.153, 230.766), stdev = 103.202
[info]   CI (99.9%): [≈ 0, 443.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   371.690 ±(99.9%) 1331.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.690, 673.412), stdev = 345.665
[info]   CI (99.9%): [≈ 0, 1702.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28573.683 ±(99.9%) 101781.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28573.683, 51277.466), stdev = 26432.388
[info]   CI (99.9%): [≈ 0, 130355.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172.672 ops/s
[info] # Warmup Iteration   2: 2893.215 ops/s
[info] # Warmup Iteration   3: 3426.018 ops/s
[info] # Warmup Iteration   4: 3384.721 ops/s
[info] # Warmup Iteration   5: 3481.229 ops/s
[info] Iteration   1: 3420.554 ops/s
[info]                  ·gc.alloc.rate:                   2040.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              938907.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 931369.594 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3422.364 ops/s
[info]                  ·gc.alloc.rate:                   2039.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              937774.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 621242.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3451.925 ops/s
[info]                  ·gc.alloc.rate:                   2083.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              949906.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 924526.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3396.508 ops/s
[info]                  ·gc.alloc.rate:                   2050.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              950268.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 940879.407 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3410.415 ops/s
[info]                  ·gc.alloc.rate:                   2072.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              956435.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 938248.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   3420.353 ±(99.9%) 78.638 ops/s [Average]
[info]   (min, avg, max) = (3396.508, 3420.353, 3451.925), stdev = 20.422
[info]   CI (99.9%): [3341.715, 3498.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2057.242 ±(99.9%) 75.724 MB/sec [Average]
[info]   (min, avg, max) = (2039.517, 2057.242, 2083.234), stdev = 19.665
[info]   CI (99.9%): [1981.518, 2132.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   946658.493 ±(99.9%) 30936.140 B/op [Average]
[info]   (min, avg, max) = (937774.586, 946658.493, 956435.437), stdev = 8034.017
[info]   CI (99.9%): [915722.353, 977594.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.758 ±(99.9%) 20.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.758, 9.643), stdev = 5.257
[info]   CI (99.9%): [≈ 0, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1893.218 ±(99.9%) 1167.006 MB/sec [Average]
[info]   (min, avg, max) = (1351.107, 1893.218, 2032.987), stdev = 303.068
[info]   CI (99.9%): [726.212, 3060.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   871253.144 ±(99.9%) 538724.312 B/op [Average]
[info]   (min, avg, max) = (621242.223, 871253.144, 940879.407), stdev = 139904.993
[info]   CI (99.9%): [332528.831, 1409977.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:36:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3473.740 ops/s
[info] # Warmup Iteration   2: 8974.628 ops/s
[info] # Warmup Iteration   3: 9589.909 ops/s
[info] # Warmup Iteration   4: 9585.220 ops/s
[info] # Warmup Iteration   5: 9553.288 ops/s
[info] Iteration   1: 9538.917 ops/s
[info]                  ·gc.alloc.rate:                   1747.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              288317.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334212.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9454.400 ops/s
[info]                  ·gc.alloc.rate:                   1713.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              285287.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224995.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9633.731 ops/s
[info]                  ·gc.alloc.rate:                   1745.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              285194.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 331570.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9602.533 ops/s
[info]                  ·gc.alloc.rate:                   1766.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              289492.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 332967.913 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9598.461 ops/s
[info]                  ·gc.alloc.rate:                   1738.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              285058.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222253.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   9565.608 ±(99.9%) 273.390 ops/s [Average]
[info]   (min, avg, max) = (9454.400, 9565.608, 9633.731), stdev = 70.998
[info]   CI (99.9%): [9292.219, 9838.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1742.155 ±(99.9%) 73.644 MB/sec [Average]
[info]   (min, avg, max) = (1713.444, 1742.155, 1766.411), stdev = 19.125
[info]   CI (99.9%): [1668.511, 1815.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   286670.190 ±(99.9%) 8022.764 B/op [Average]
[info]   (min, avg, max) = (285058.766, 286670.190, 289492.135), stdev = 2083.486
[info]   CI (99.9%): [278647.427, 294692.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.134 ±(99.9%) 28.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.134, 17.003), stdev = 7.374
[info]   CI (99.9%): [≈ 0, 34.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1758.576 ±(99.9%) 1424.536 MB/sec [Average]
[info]   (min, avg, max) = (1351.330, 1758.576, 2031.690), stdev = 369.947
[info]   CI (99.9%): [334.040, 3183.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   289199.889 ±(99.9%) 230565.133 B/op [Average]
[info]   (min, avg, max) = (222253.115, 289199.889, 334212.306), stdev = 59877.033
[info]   CI (99.9%): [58634.756, 519765.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:36:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.896 ops/s
[info] # Warmup Iteration   2: 49047.583 ops/s
[info] # Warmup Iteration   3: 50404.941 ops/s
[info] # Warmup Iteration   4: 51060.324 ops/s
[info] # Warmup Iteration   5: 52030.344 ops/s
[info] Iteration   1: 52258.949 ops/s
[info]                  ·gc.alloc.rate:      488.418 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 50322.988 ops/s
[info]                  ·gc.alloc.rate:                   492.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              15384.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21000.270 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 52536.281 ops/s
[info]                  ·gc.alloc.rate:                   511.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              15331.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20095.462 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 52582.001 ops/s
[info]                  ·gc.alloc.rate:                   505.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              15122.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20078.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 52681.200 ops/s
[info]                  ·gc.alloc.rate:      492.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   52076.284 ±(99.9%) 3821.986 ops/s [Average]
[info]   (min, avg, max) = (50322.988, 52076.284, 52681.200), stdev = 992.558
[info]   CI (99.9%): [48254.297, 55898.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   497.944 ±(99.9%) 38.437 MB/sec [Average]
[info]   (min, avg, max) = (488.418, 497.944, 511.710), stdev = 9.982
[info]   CI (99.9%): [459.507, 536.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15052.437 ±(99.9%) 1254.605 B/op [Average]
[info]   (min, avg, max) = (14712.008, 15052.437, 15384.017), stdev = 325.817
[info]   CI (99.9%): [13797.832, 16307.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.725 ±(99.9%) 6.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.624), stdev = 1.621
[info]   CI (99.9%): [≈ 0, 6.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   22.662 ±(99.9%) 195.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.662, 113.312), stdev = 50.675
[info]   CI (99.9%): [≈ 0, 217.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.621 ±(99.9%) 1415.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.621, 671.661), stdev = 367.541
[info]   CI (99.9%): [≈ 0, 1817.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   12234.800 ±(99.9%) 43031.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12234.800, 21000.270), stdev = 11175.018
[info]   CI (99.9%): [≈ 0, 55265.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f6a7f336/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 16310.640 ops/s
[info] # Warmup Iteration   2: 39680.976 ops/s
[info] # Warmup Iteration   3: 41186.598 ops/s
[info] # Warmup Iteration   4: 39231.917 ops/s
[info] # Warmup Iteration   5: 41339.956 ops/s
[info] Iteration   1: 40446.141 ops/s
[info]                  ·gc.alloc.rate:                   595.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              23162.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26218.936 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41326.182 ops/s
[info]                  ·gc.alloc.rate:                   615.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              23447.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25673.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 41432.269 ops/s
[info]                  ·gc.alloc.rate:                   614.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              23341.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25607.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 41221.985 ops/s
[info]                  ·gc.alloc.rate:                   613.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              23440.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25713.358 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41148.081 ops/s
[info]                  ·gc.alloc.rate:                   614.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              23491.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25758.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   41114.931 ±(99.9%) 1497.759 ops/s [Average]
[info]   (min, avg, max) = (40446.141, 41114.931, 41432.269), stdev = 388.963
[info]   CI (99.9%): [39617.172, 42612.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   610.671 ±(99.9%) 33.523 MB/sec [Average]
[info]   (min, avg, max) = (595.139, 610.671, 615.597), stdev = 8.706
[info]   CI (99.9%): [577.148, 644.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23376.747 ±(99.9%) 507.509 B/op [Average]
[info]   (min, avg, max) = (23162.371, 23376.747, 23491.653), stdev = 131.799
[info]   CI (99.9%): [22869.237, 23884.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.271 ±(99.9%) 2.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.271, 1.311), stdev = 0.582
[info]   CI (99.9%): [≈ 0, 2.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.524 ±(99.9%) 87.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.524, 51.032), stdev = 22.648
[info]   CI (99.9%): [≈ 0, 97.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.756 ±(99.9%) 1.277 MB/sec [Average]
[info]   (min, avg, max) = (673.437, 673.756, 674.168), stdev = 0.332
[info]   CI (99.9%): [672.479, 675.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25794.357 ±(99.9%) 938.816 B/op [Average]
[info]   (min, avg, max) = (25607.117, 25794.357, 26218.936), stdev = 243.808
[info]   CI (99.9%): [24855.541, 26733.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59889.870 ops/s
[info] # Warmup Iteration   2: 83305.389 ops/s
[info] # Warmup Iteration   3: 85342.012 ops/s
[info] # Warmup Iteration   4: 84086.195 ops/s
[info] # Warmup Iteration   5: 85363.799 ops/s
[info] Iteration   1: 85578.071 ops/s
[info]                  ·gc.alloc.rate:                   659.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              12136.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12373.373 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 85002.578 ops/s
[info]                  ·gc.alloc.rate:                   652.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              12073.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12443.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 85829.604 ops/s
[info]                  ·gc.alloc.rate:                   662.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              12147.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12325.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 86133.202 ops/s
[info]                  ·gc.alloc.rate:                   660.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              12078.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12269.172 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 85327.832 ops/s
[info]                  ·gc.alloc.rate:                   666.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              12298.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12385.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   85574.258 ±(99.9%) 1684.165 ops/s [Average]
[info]   (min, avg, max) = (85002.578, 85574.258, 86133.202), stdev = 437.372
[info]   CI (99.9%): [83890.093, 87258.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   660.401 ±(99.9%) 20.695 MB/sec [Average]
[info]   (min, avg, max) = (652.003, 660.401, 666.713), stdev = 5.374
[info]   CI (99.9%): [639.706, 681.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12146.984 ±(99.9%) 351.397 B/op [Average]
[info]   (min, avg, max) = (12073.761, 12146.984, 12298.957), stdev = 91.257
[info]   CI (99.9%): [11795.587, 12498.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.673 ±(99.9%) 5.658 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.673, 3.301), stdev = 1.469
[info]   CI (99.9%): [≈ 0, 6.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12.373 ±(99.9%) 104.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.373, 60.717), stdev = 27.026
[info]   CI (99.9%): [≈ 0, 116.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   671.937 ±(99.9%) 2.160 MB/sec [Average]
[info]   (min, avg, max) = (671.387, 671.937, 672.701), stdev = 0.561
[info]   CI (99.9%): [669.777, 674.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12359.370 ±(99.9%) 253.474 B/op [Average]
[info]   (min, avg, max) = (12269.172, 12359.370, 12443.993), stdev = 65.826
[info]   CI (99.9%): [12105.896, 12612.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:35:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63930.155 ops/s
[info] # Warmup Iteration   2: 91050.002 ops/s
[info] # Warmup Iteration   3: 92026.695 ops/s
[info] # Warmup Iteration   4: 92233.231 ops/s
[info] # Warmup Iteration   5: 92191.869 ops/s
[info] Iteration   1: 92355.786 ops/s
[info]                  ·gc.alloc.rate:      0.007 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.117 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 92154.612 ops/s
[info]                  ·gc.alloc.rate:      0.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 92111.950 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 92418.231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 92239.894 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   92256.095 ±(99.9%) 500.456 ops/s [Average]
[info]   (min, avg, max) = (92111.950, 92256.095, 92418.231), stdev = 129.967
[info]   CI (99.9%): [91755.639, 92756.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.002 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.029 ±(99.9%) 0.191 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.029, 0.117), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:35:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 962.450 ops/s
[info] # Warmup Iteration   2: 6774.167 ops/s
[info] # Warmup Iteration   3: 7441.280 ops/s
[info] # Warmup Iteration   4: 7358.848 ops/s
[info] # Warmup Iteration   5: 7385.011 ops/s
[info] Iteration   1: 7446.355 ops/s
[info]                  ·gc.alloc.rate:                   2205.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              466164.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 428143.899 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7459.269 ops/s
[info]                  ·gc.alloc.rate:                   2197.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              463648.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 428017.452 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7459.604 ops/s
[info]                  ·gc.alloc.rate:                   2206.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              465583.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 428439.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7354.509 ops/s
[info]                  ·gc.alloc.rate:                   2192.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              469144.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 435053.555 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7417.706 ops/s
[info]                  ·gc.alloc.rate:                   2210.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              469029.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431725.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   7427.489 ±(99.9%) 170.247 ops/s [Average]
[info]   (min, avg, max) = (7354.509, 7427.489, 7459.604), stdev = 44.213
[info]   CI (99.9%): [7257.241, 7597.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2202.323 ±(99.9%) 28.317 MB/sec [Average]
[info]   (min, avg, max) = (2192.318, 2202.323, 2210.377), stdev = 7.354
[info]   CI (99.9%): [2174.006, 2230.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   466714.108 ±(99.9%) 9081.326 B/op [Average]
[info]   (min, avg, max) = (463648.643, 466714.108, 469144.724), stdev = 2358.392
[info]   CI (99.9%): [457632.782, 475795.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.653 ±(99.9%) 9.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.653, 4.455), stdev = 2.422
[info]   CI (99.9%): [≈ 0, 11.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2030.351 ±(99.9%) 14.136 MB/sec [Average]
[info]   (min, avg, max) = (2025.337, 2030.351, 2034.573), stdev = 3.671
[info]   CI (99.9%): [2016.215, 2044.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   430275.801 ±(99.9%) 11860.029 B/op [Average]
[info]   (min, avg, max) = (428017.452, 430275.801, 435053.555), stdev = 3080.012
[info]   CI (99.9%): [418415.772, 442135.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1652803.167 ops/s
[info] # Warmup Iteration   2: 8032552.086 ops/s
[info] # Warmup Iteration   3: 7915075.649 ops/s
[info] # Warmup Iteration   4: 8522160.680 ops/s
[info] # Warmup Iteration   5: 8541883.709 ops/s
[info] Iteration   1: 8646168.080 ops/s
[info]                  ·gc.alloc.rate:                   4711.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              857.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4748.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 864.651 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8501940.163 ops/s
[info]                  ·gc.alloc.rate:                   4612.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              853.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 755.022 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8589847.910 ops/s
[info]                  ·gc.alloc.rate:                   4685.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              858.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4763.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 872.811 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8653858.025 ops/s
[info]                  ·gc.alloc.rate:                   4693.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              853.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4085.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 742.967 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8605815.002 ops/s
[info]                  ·gc.alloc.rate:                   4694.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              858.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4769.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 872.337 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   8599525.836 ±(99.9%) 234096.233 ops/s [Average]
[info]   (min, avg, max) = (8501940.163, 8599525.836, 8653858.025), stdev = 60794.048
[info]   CI (99.9%): [8365429.603, 8833622.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4679.453 ±(99.9%) 149.101 MB/sec [Average]
[info]   (min, avg, max) = (4612.221, 4679.453, 4711.198), stdev = 38.721
[info]   CI (99.9%): [4530.352, 4828.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   856.506 ±(99.9%) 10.142 B/op [Average]
[info]   (min, avg, max) = (853.547, 856.506, 858.751), stdev = 2.634
[info]   CI (99.9%): [846.364, 866.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.025, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.021 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.021, 0.027), stdev = 0.004
[info]   CI (99.9%): [0.005, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   4488.973 ±(99.9%) 1430.475 MB/sec [Average]
[info]   (min, avg, max) = (4078.899, 4488.973, 4769.147), stdev = 371.490
[info]   CI (99.9%): [3058.497, 5919.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   821.558 ±(99.9%) 255.901 B/op [Average]
[info]   (min, avg, max) = (742.967, 821.558, 872.811), stdev = 66.457
[info]   CI (99.9%): [565.657, 1077.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.666 ops/s
[info] # Warmup Iteration   2: 35426736.790 ops/s
[info] # Warmup Iteration   3: 34895678.637 ops/s
[info] # Warmup Iteration   4: 32122262.694 ops/s
[info] # Warmup Iteration   5: 30471004.317 ops/s
[info] Iteration   1: 32294813.372 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32288601.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 32195172.437 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 32203396.648 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32181678.215 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   32232732.505 ±(99.9%) 209615.399 ops/s [Average]
[info]   (min, avg, max) = (32181678.215, 32232732.505, 32294813.372), stdev = 54436.454
[info]   CI (99.9%): [32023117.106, 32442347.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:34:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1146571.966 ops/s
[info] # Warmup Iteration   2: 9704293.731 ops/s
[info] # Warmup Iteration   3: 10101222.521 ops/s
[info] # Warmup Iteration   4: 9974816.247 ops/s
[info] # Warmup Iteration   5: 10103562.580 ops/s
[info] Iteration   1: 10162221.125 ops/s
[info]                  ·gc.alloc.rate:                   3643.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              564.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3390.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525.237 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 10050960.689 ops/s
[info]                  ·gc.alloc.rate:                   3607.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              564.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 531.764 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10100898.863 ops/s
[info]                  ·gc.alloc.rate:                   3625.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              564.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.776 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10010957.984 ops/s
[info]                  ·gc.alloc.rate:                   3596.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              565.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 535.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9873413.548 ops/s
[info]                  ·gc.alloc.rate:                   3547.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              565.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 542.580 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   10039690.442 ±(99.9%) 418998.974 ops/s [Average]
[info]   (min, avg, max) = (9873413.548, 10039690.442, 10162221.125), stdev = 108812.703
[info]   CI (99.9%): [9620691.468, 10458689.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3603.839 ±(99.9%) 139.653 MB/sec [Average]
[info]   (min, avg, max) = (3547.254, 3603.839, 3643.021), stdev = 36.268
[info]   CI (99.9%): [3464.185, 3743.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   564.979 ±(99.9%) 1.726 B/op [Average]
[info]   (min, avg, max) = (564.290, 564.979, 565.511), stdev = 0.448
[info]   CI (99.9%): [563.253, 566.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.117, 0.125), stdev = 0.011
[info]   CI (99.9%): [0.073, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.018, 0.020), stdev = 0.002
[info]   CI (99.9%): [0.011, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   3398.747 ±(99.9%) 21.786 MB/sec [Average]
[info]   (min, avg, max) = (3390.897, 3398.747, 3404.439), stdev = 5.658
[info]   CI (99.9%): [3376.961, 3420.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   532.879 ±(99.9%) 24.958 B/op [Average]
[info]   (min, avg, max) = (525.237, 532.879, 542.580), stdev = 6.482
[info]   CI (99.9%): [507.921, 557.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:34:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30549552.363 ops/s
[info] # Warmup Iteration   2: 41795903.476 ops/s
[info] # Warmup Iteration   3: 45408371.441 ops/s
[info] # Warmup Iteration   4: 45394529.359 ops/s
[info] # Warmup Iteration   5: 45358948.978 ops/s
[info] Iteration   1: 45352423.182 ops/s
[info]                  ·gc.alloc.rate:      1.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 45308213.864 ops/s
[info]                  ·gc.alloc.rate:      0.661 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 45392811.471 ops/s
[info]                  ·gc.alloc.rate:      0.057 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 45416065.025 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 45386164.549 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   45371135.618 ±(99.9%) 161356.056 ops/s [Average]
[info]   (min, avg, max) = (45308213.864, 45371135.618, 45416065.025), stdev = 41903.655
[info]   CI (99.9%): [45209779.562, 45532491.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   0.344 ±(99.9%) 1.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.344, 1.003), stdev = 0.462
[info]   CI (99.9%): [≈ 0, 2.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.012 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.012, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12391775.673 ops/s
[info] # Warmup Iteration   2: 23138961.598 ops/s
[info] # Warmup Iteration   3: 23941217.313 ops/s
[info] # Warmup Iteration   4: 24604392.031 ops/s
[info] # Warmup Iteration   5: 24369067.859 ops/s
[info] Iteration   1: 24351816.959 ops/s
[info]                  ·gc.alloc.rate:                   891.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              57.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.656 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 24326111.156 ops/s
[info]                  ·gc.alloc.rate:                   879.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 24768779.784 ops/s
[info]                  ·gc.alloc.rate:                   903.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              57.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24704735.470 ops/s
[info]                  ·gc.alloc.rate:                   913.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              58.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24688748.994 ops/s
[info]                  ·gc.alloc.rate:                   894.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              57.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   24568038.472 ±(99.9%) 814196.651 ops/s [Average]
[info]   (min, avg, max) = (24326111.156, 24568038.472, 24768779.784), stdev = 211444.285
[info]   CI (99.9%): [23753841.821, 25382235.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   896.429 ±(99.9%) 49.968 MB/sec [Average]
[info]   (min, avg, max) = (879.093, 896.429, 913.846), stdev = 12.977
[info]   CI (99.9%): [846.461, 946.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   57.434 ±(99.9%) 2.045 B/op [Average]
[info]   (min, avg, max) = (56.885, 57.434, 58.224), stdev = 0.531
[info]   CI (99.9%): [55.389, 59.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   809.133 ±(99.9%) 1160.367 MB/sec [Average]
[info]   (min, avg, max) = (673.999, 809.133, 1348.192), stdev = 301.344
[info]   CI (99.9%): [≈ 0, 1969.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   51.797 ±(99.9%) 73.418 B/op [Average]
[info]   (min, avg, max) = (42.836, 51.797, 85.897), stdev = 19.066
[info]   CI (99.9%): [≈ 0, 125.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1485856.753 ops/s
[info] # Warmup Iteration   2: 7785744.444 ops/s
[info] # Warmup Iteration   3: 7923839.072 ops/s
[info] # Warmup Iteration   4: 8006610.471 ops/s
[info] # Warmup Iteration   5: 7929899.570 ops/s
[info] Iteration   1: 7970653.522 ops/s
[info]                  ·gc.alloc.rate:                   3563.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              703.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3391.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 669.784 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7936903.525 ops/s
[info]                  ·gc.alloc.rate:                   3562.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              706.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 673.543 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7962437.203 ops/s
[info]                  ·gc.alloc.rate:                   3574.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              706.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 672.190 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7991622.950 ops/s
[info]                  ·gc.alloc.rate:                   3587.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              706.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 670.266 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7819261.734 ops/s
[info]                  ·gc.alloc.rate:                   3512.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              707.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 685.168 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   7936175.787 ±(99.9%) 262735.487 ops/s [Average]
[info]   (min, avg, max) = (7819261.734, 7936175.787, 7991622.950), stdev = 68231.571
[info]   CI (99.9%): [7673440.300, 8198911.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3560.102 ±(99.9%) 109.774 MB/sec [Average]
[info]   (min, avg, max) = (3512.326, 3560.102, 3587.101), stdev = 28.508
[info]   CI (99.9%): [3450.328, 3669.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   706.115 ±(99.9%) 5.184 B/op [Average]
[info]   (min, avg, max) = (703.742, 706.115, 707.082), stdev = 1.346
[info]   CI (99.9%): [700.930, 711.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.013 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.013, 0.025), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3398.944 ±(99.9%) 18.780 MB/sec [Average]
[info]   (min, avg, max) = (3391.960, 3398.944, 3403.469), stdev = 4.877
[info]   CI (99.9%): [3380.164, 3417.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   674.190 ±(99.9%) 24.334 B/op [Average]
[info]   (min, avg, max) = (669.784, 674.190, 685.168), stdev = 6.319
[info]   CI (99.9%): [649.856, 698.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:33:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6161250.551 ops/s
[info] # Warmup Iteration   2: 14845628.103 ops/s
[info] # Warmup Iteration   3: 15358515.468 ops/s
[info] # Warmup Iteration   4: 15544045.694 ops/s
[info] # Warmup Iteration   5: 15501961.645 ops/s
[info] Iteration   1: 15366466.428 ops/s
[info]                  ·gc.alloc.rate:                   1288.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              132.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137.960 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15515100.423 ops/s
[info]                  ·gc.alloc.rate:                   1293.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              131.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15455462.731 ops/s
[info]                  ·gc.alloc.rate:                   1272.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              129.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.716 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 15487115.956 ops/s
[info]                  ·gc.alloc.rate:                   1297.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              131.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 15518738.175 ops/s
[info]                  ·gc.alloc.rate:                   1302.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              132.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   15468576.743 ±(99.9%) 240648.442 ops/s [Average]
[info]   (min, avg, max) = (15366466.428, 15468576.743, 15518738.175), stdev = 62495.636
[info]   CI (99.9%): [15227928.301, 15709225.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1291.146 ±(99.9%) 44.550 MB/sec [Average]
[info]   (min, avg, max) = (1272.571, 1291.146, 1302.868), stdev = 11.569
[info]   CI (99.9%): [1246.596, 1335.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   131.376 ±(99.9%) 4.006 B/op [Average]
[info]   (min, avg, max) = (129.609, 131.376, 132.119), stdev = 1.040
[info]   CI (99.9%): [127.370, 135.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.011), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1214.117 ±(99.9%) 1161.175 MB/sec [Average]
[info]   (min, avg, max) = (674.690, 1214.117, 1351.041), stdev = 301.554
[info]   CI (99.9%): [52.942, 2375.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   123.526 ±(99.9%) 117.996 B/op [Average]
[info]   (min, avg, max) = (68.716, 123.526, 137.960), stdev = 30.643
[info]   CI (99.9%): [5.531, 241.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.695 ops/s
[info] # Warmup Iteration   2: 40027274.018 ops/s
[info] # Warmup Iteration   3: 43205206.268 ops/s
[info] # Warmup Iteration   4: 43224462.734 ops/s
[info] # Warmup Iteration   5: 43537474.888 ops/s
[info] Iteration   1: 43724426.355 ops/s
[info]                  ·gc.alloc.rate:                   912.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 43594808.627 ops/s
[info]                  ·gc.alloc.rate:                   927.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 43698654.446 ops/s
[info]                  ·gc.alloc.rate:                   912.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 43720008.932 ops/s
[info]                  ·gc.alloc.rate:                   906.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 43403833.487 ops/s
[info]                  ·gc.alloc.rate:                   915.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   43628346.369 ±(99.9%) 524124.232 ops/s [Average]
[info]   (min, avg, max) = (43403833.487, 43628346.369, 43724426.355), stdev = 136113.399
[info]   CI (99.9%): [43104222.137, 44152470.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   915.072 ±(99.9%) 29.773 MB/sec [Average]
[info]   (min, avg, max) = (906.859, 915.072, 927.611), stdev = 7.732
[info]   CI (99.9%): [885.298, 944.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   33.013 ±(99.9%) 1.279 B/op [Average]
[info]   (min, avg, max) = (32.648, 33.013, 33.478), stdev = 0.332
[info]   CI (99.9%): [31.734, 34.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   937.680 ±(99.9%) 1413.256 MB/sec [Average]
[info]   (min, avg, max) = (669.399, 937.680, 1340.039), stdev = 367.018
[info]   CI (99.9%): [≈ 0, 2350.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   33.856 ±(99.9%) 51.375 B/op [Average]
[info]   (min, avg, max) = (24.101, 33.856, 48.601), stdev = 13.342
[info]   CI (99.9%): [≈ 0, 85.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3019856.373 ops/s
[info] # Warmup Iteration   2: 12192024.478 ops/s
[info] # Warmup Iteration   3: 12374128.336 ops/s
[info] # Warmup Iteration   4: 12398186.556 ops/s
[info] # Warmup Iteration   5: 12393097.306 ops/s
[info] Iteration   1: 12239016.413 ops/s
[info]                  ·gc.alloc.rate:                   2505.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              322.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347.915 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12444223.858 ops/s
[info]                  ·gc.alloc.rate:                   2520.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              318.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256.957 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12431302.834 ops/s
[info]                  ·gc.alloc.rate:                   2572.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              325.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.945 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343.501 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12263840.283 ops/s
[info]                  ·gc.alloc.rate:                   2512.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              322.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 261.371 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12379032.888 ops/s
[info]                  ·gc.alloc.rate:                   2561.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              325.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 345.546 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   12351483.255 ±(99.9%) 365613.764 ops/s [Average]
[info]   (min, avg, max) = (12239016.413, 12351483.255, 12444223.858), stdev = 94948.733
[info]   CI (99.9%): [11985869.492, 12717097.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2534.370 ±(99.9%) 117.356 MB/sec [Average]
[info]   (min, avg, max) = (2505.079, 2534.370, 2572.568), stdev = 30.477
[info]   CI (99.9%): [2417.014, 2651.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   322.920 ±(99.9%) 11.088 B/op [Average]
[info]   (min, avg, max) = (318.715, 322.920, 325.659), stdev = 2.880
[info]   CI (99.9%): [311.832, 334.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.010 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.016), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2441.084 ±(99.9%) 1429.350 MB/sec [Average]
[info]   (min, avg, max) = (2032.393, 2441.084, 2717.631), stdev = 371.198
[info]   CI (99.9%): [1011.734, 3870.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   311.058 ±(99.9%) 182.612 B/op [Average]
[info]   (min, avg, max) = (256.957, 311.058, 347.915), stdev = 47.424
[info]   CI (99.9%): [128.446, 493.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:32:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22458746.186 ops/s
[info] # Warmup Iteration   2: 43380643.100 ops/s
[info] # Warmup Iteration   3: 47955293.587 ops/s
[info] # Warmup Iteration   4: 47032285.329 ops/s
[info] # Warmup Iteration   5: 41049715.904 ops/s
[info] Iteration   1: 41112721.561 ops/s
[info]                  ·gc.alloc.rate:                   855.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 41032977.909 ops/s
[info]                  ·gc.alloc.rate:                   849.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.832 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 41332715.308 ops/s
[info]                  ·gc.alloc.rate:                   884.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 40147747.403 ops/s
[info]                  ·gc.alloc.rate:                   832.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.401 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41186565.753 ops/s
[info]                  ·gc.alloc.rate:                   853.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.733 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   40962545.587 ±(99.9%) 1804695.666 ops/s [Average]
[info]   (min, avg, max) = (40147747.403, 40962545.587, 41332715.308), stdev = 468673.733
[info]   CI (99.9%): [39157849.921, 42767241.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   854.952 ±(99.9%) 72.623 MB/sec [Average]
[info]   (min, avg, max) = (832.587, 854.952, 884.693), stdev = 18.860
[info]   CI (99.9%): [782.329, 927.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.847 ±(99.9%) 1.833 B/op [Average]
[info]   (min, avg, max) = (32.571, 32.847, 33.692), stdev = 0.476
[info]   CI (99.9%): [31.014, 34.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   808.395 ±(99.9%) 1158.841 MB/sec [Average]
[info]   (min, avg, max) = (673.334, 808.395, 1346.745), stdev = 300.947
[info]   CI (99.9%): [≈ 0, 1967.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.017 ±(99.9%) 43.645 B/op [Average]
[info]   (min, avg, max) = (25.733, 31.017, 51.288), stdev = 11.335
[info]   CI (99.9%): [≈ 0, 74.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27685047.467 ops/s
[info] # Warmup Iteration   2: 53695836.749 ops/s
[info] # Warmup Iteration   3: 56140289.481 ops/s
[info] # Warmup Iteration   4: 56054042.437 ops/s
[info] # Warmup Iteration   5: 55644374.057 ops/s
[info] Iteration   1: 56178078.133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 56148351.960 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 56181241.892 ops/s
[info]                  ·gc.alloc.rate:      0.005 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 55924257.742 ops/s
[info]                  ·gc.alloc.rate:      0.441 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 55855901.543 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   56057566.254 ±(99.9%) 598092.632 ops/s [Average]
[info]   (min, avg, max) = (55855901.543, 56057566.254, 56181241.892), stdev = 155322.757
[info]   CI (99.9%): [55459473.622, 56655658.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.089 ±(99.9%) 0.757 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.089, 0.441), stdev = 0.196
[info]   CI (99.9%): [≈ 0, 0.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15226124.520 ops/s
[info] # Warmup Iteration   2: 21748250.899 ops/s
[info] # Warmup Iteration   3: 22895573.912 ops/s
[info] # Warmup Iteration   4: 22648815.594 ops/s
[info] # Warmup Iteration   5: 23010033.562 ops/s
[info] Iteration   1: 22986693.986 ops/s
[info]                  ·gc.alloc.rate:                   978.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              66.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22596825.800 ops/s
[info]                  ·gc.alloc.rate:                   942.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              65.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.908 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 22695892.185 ops/s
[info]                  ·gc.alloc.rate:                   939.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              65.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22977638.744 ops/s
[info]                  ·gc.alloc.rate:                   968.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              66.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22484669.043 ops/s
[info]                  ·gc.alloc.rate:                   929.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              65.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   22748343.952 ±(99.9%) 870918.782 ops/s [Average]
[info]   (min, avg, max) = (22484669.043, 22748343.952, 22986693.986), stdev = 226174.842
[info]   CI (99.9%): [21877425.170, 23619262.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   951.550 ±(99.9%) 80.442 MB/sec [Average]
[info]   (min, avg, max) = (929.152, 951.550, 978.404), stdev = 20.891
[info]   CI (99.9%): [871.108, 1031.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   65.826 ±(99.9%) 3.136 B/op [Average]
[info]   (min, avg, max) = (65.067, 65.826, 66.970), stdev = 0.814
[info]   CI (99.9%): [62.691, 68.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.146), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.004 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   943.078 ±(99.9%) 1421.770 MB/sec [Average]
[info]   (min, avg, max) = (673.183, 943.078, 1347.991), stdev = 369.229
[info]   CI (99.9%): [≈ 0, 2364.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   65.057 ±(99.9%) 95.643 B/op [Average]
[info]   (min, avg, max) = (46.704, 65.057, 92.268), stdev = 24.838
[info]   CI (99.9%): [≈ 0, 160.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 847095.678 ops/s
[info] # Warmup Iteration   2: 2367319.017 ops/s
[info] # Warmup Iteration   3: 2539036.243 ops/s
[info] # Warmup Iteration   4: 2563704.623 ops/s
[info] # Warmup Iteration   5: 2559990.453 ops/s
[info] Iteration   1: 2545456.223 ops/s
[info]                  ·gc.alloc.rate:                   1929.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1243.868 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2526941.286 ops/s
[info]                  ·gc.alloc.rate:                   1901.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 836.838 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2542441.345 ops/s
[info]                  ·gc.alloc.rate:                   1914.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              1185.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1249.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2564806.522 ops/s
[info]                  ·gc.alloc.rate:                   1943.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1241.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2523363.241 ops/s
[info]                  ·gc.alloc.rate:                   1927.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              1202.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1263.664 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2540601.724 ±(99.9%) 63756.810 ops/s [Average]
[info]   (min, avg, max) = (2523363.241, 2540601.724, 2564806.522), stdev = 16557.441
[info]   CI (99.9%): [2476844.913, 2604358.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1923.216 ±(99.9%) 61.637 MB/sec [Average]
[info]   (min, avg, max) = (1901.267, 1923.216, 1943.540), stdev = 16.007
[info]   CI (99.9%): [1861.579, 1984.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1191.473 ±(99.9%) 27.618 B/op [Average]
[info]   (min, avg, max) = (1184.286, 1191.473, 1202.079), stdev = 7.172
[info]   CI (99.9%): [1163.856, 1219.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.033, 0.052), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1884.328 ±(99.9%) 1164.413 MB/sec [Average]
[info]   (min, avg, max) = (1343.470, 1884.328, 2025.999), stdev = 302.394
[info]   CI (99.9%): [719.915, 3048.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1166.968 ±(99.9%) 711.423 B/op [Average]
[info]   (min, avg, max) = (836.838, 1166.968, 1263.664), stdev = 184.754
[info]   CI (99.9%): [455.545, 1878.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:31:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122693.109 ops/s
[info] # Warmup Iteration   2: 164504.590 ops/s
[info] # Warmup Iteration   3: 165388.635 ops/s
[info] # Warmup Iteration   4: 167514.871 ops/s
[info] # Warmup Iteration   5: 168427.178 ops/s
[info] Iteration   1: 168167.094 ops/s
[info]                  ·gc.alloc.rate:                   3218.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              30126.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3382.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31660.453 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 165818.147 ops/s
[info]                  ·gc.alloc.rate:                   3148.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              29888.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25730.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 168296.477 ops/s
[info]                  ·gc.alloc.rate:                   3221.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              30133.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3393.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31739.164 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 167138.987 ops/s
[info]                  ·gc.alloc.rate:                   3173.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              29890.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25598.279 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 168888.623 ops/s
[info]                  ·gc.alloc.rate:                   3233.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              30137.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31693.859 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   167661.866 ±(99.9%) 4651.006 ops/s [Average]
[info]   (min, avg, max) = (165818.147, 167661.866, 168888.623), stdev = 1207.851
[info]   CI (99.9%): [163010.860, 172312.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3199.234 ±(99.9%) 139.660 MB/sec [Average]
[info]   (min, avg, max) = (3148.530, 3199.234, 3233.672), stdev = 36.269
[info]   CI (99.9%): [3059.573, 3338.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   30035.500 ±(99.9%) 513.336 B/op [Average]
[info]   (min, avg, max) = (29888.447, 30035.500, 30137.520), stdev = 133.312
[info]   CI (99.9%): [29522.164, 30548.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.939 ±(99.9%) 1.643 B/op [Average]
[info]   (min, avg, max) = (0.388, 0.939, 1.568), stdev = 0.427
[info]   CI (99.9%): [≈ 0, 2.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   3120.956 ±(99.9%) 1429.523 MB/sec [Average]
[info]   (min, avg, max) = (2710.510, 3120.956, 3400.662), stdev = 371.243
[info]   CI (99.9%): [1691.433, 4550.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29284.430 ±(99.9%) 12726.863 B/op [Average]
[info]   (min, avg, max) = (25598.279, 29284.430, 31739.164), stdev = 3305.126
[info]   CI (99.9%): [16557.566, 42011.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:31:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2743.473 ops/s
[info] # Warmup Iteration   2: 27524.314 ops/s
[info] # Warmup Iteration   3: 34474.352 ops/s
[info] # Warmup Iteration   4: 34840.752 ops/s
[info] # Warmup Iteration   5: 34587.519 ops/s
[info] Iteration   1: 35400.365 ops/s
[info]                  ·gc.alloc.rate:                   2507.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              111507.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90068.737 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 35420.539 ops/s
[info]                  ·gc.alloc.rate:                   2536.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              112694.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120190.342 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35112.226 ops/s
[info]                  ·gc.alloc.rate:                   2514.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              112730.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121450.051 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35168.107 ops/s
[info]                  ·gc.alloc.rate:                   2518.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              112698.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91028.226 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34653.280 ops/s
[info]                  ·gc.alloc.rate:                   2509.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              113999.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123345.865 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   35150.903 ±(99.9%) 1193.631 ops/s [Average]
[info]   (min, avg, max) = (34653.280, 35150.903, 35420.539), stdev = 309.982
[info]   CI (99.9%): [33957.272, 36344.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2517.377 ±(99.9%) 44.412 MB/sec [Average]
[info]   (min, avg, max) = (2507.583, 2517.377, 2536.675), stdev = 11.534
[info]   CI (99.9%): [2472.965, 2561.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   112726.178 ±(99.9%) 3395.169 B/op [Average]
[info]   (min, avg, max) = (111507.396, 112726.178, 113999.944), stdev = 881.715
[info]   CI (99.9%): [109331.010, 116121.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.415 ±(99.9%) 8.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.415, 4.665), stdev = 2.139
[info]   CI (99.9%): [≈ 0, 10.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2437.920 ±(99.9%) 1435.241 MB/sec [Average]
[info]   (min, avg, max) = (2025.470, 2437.920, 2715.617), stdev = 372.728
[info]   CI (99.9%): [1002.678, 3873.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   109216.644 ±(99.9%) 65776.564 B/op [Average]
[info]   (min, avg, max) = (90068.737, 109216.644, 123345.865), stdev = 17081.965
[info]   CI (99.9%): [43440.080, 174993.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43259.647 ops/s
[info] # Warmup Iteration   2: 118475.113 ops/s
[info] # Warmup Iteration   3: 119925.115 ops/s
[info] # Warmup Iteration   4: 122400.346 ops/s
[info] # Warmup Iteration   5: 122318.520 ops/s
[info] Iteration   1: 121402.800 ops/s
[info]                  ·gc.alloc.rate:                   990.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              12845.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8739.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 116996.170 ops/s
[info]                  ·gc.alloc.rate:                   981.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              13208.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18137.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 122231.829 ops/s
[info]                  ·gc.alloc.rate:                   1002.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              12914.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8680.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 122862.522 ops/s
[info]                  ·gc.alloc.rate:                   1020.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              13069.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17279.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 122722.752 ops/s
[info]                  ·gc.alloc.rate:                   1001.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              12848.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8653.915 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   121243.214 ±(99.9%) 9402.867 ops/s [Average]
[info]   (min, avg, max) = (116996.170, 121243.214, 122862.522), stdev = 2441.895
[info]   CI (99.9%): [111840.347, 130646.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   999.401 ±(99.9%) 55.698 MB/sec [Average]
[info]   (min, avg, max) = (981.636, 999.401, 1020.098), stdev = 14.465
[info]   CI (99.9%): [943.702, 1055.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12977.345 ±(99.9%) 608.467 B/op [Average]
[info]   (min, avg, max) = (12845.985, 12977.345, 13208.367), stdev = 158.017
[info]   CI (99.9%): [12368.877, 13585.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.269 ±(99.9%) 1.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 1.067), stdev = 0.462
[info]   CI (99.9%): [≈ 0, 2.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.874 ±(99.9%) 1421.633 MB/sec [Average]
[info]   (min, avg, max) = (674.012, 943.874, 1348.670), stdev = 369.193
[info]   CI (99.9%): [≈ 0, 2365.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12298.074 ±(99.9%) 19054.330 B/op [Average]
[info]   (min, avg, max) = (8653.915, 12298.074, 18137.143), stdev = 4948.349
[info]   CI (99.9%): [≈ 0, 31352.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 266445.494 ops/s
[info] # Warmup Iteration   2: 395436.569 ops/s
[info] # Warmup Iteration   3: 404197.538 ops/s
[info] # Warmup Iteration   4: 406413.154 ops/s
[info] # Warmup Iteration   5: 402884.376 ops/s
[info] Iteration   1: 407948.694 ops/s
[info]                  ·gc.alloc.rate:                   1614.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              6227.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5186.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 402741.223 ops/s
[info]                  ·gc.alloc.rate:                   1608.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              6287.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5258.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 410944.976 ops/s
[info]                  ·gc.alloc.rate:                   1645.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              6302.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7740.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 412130.765 ops/s
[info]                  ·gc.alloc.rate:                   1640.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              6266.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5151.264 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 414749.781 ops/s
[info]                  ·gc.alloc.rate:                   1664.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              6315.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5123.809 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   409703.088 ±(99.9%) 17693.119 ops/s [Average]
[info]   (min, avg, max) = (402741.223, 409703.088, 414749.781), stdev = 4594.847
[info]   CI (99.9%): [392009.969, 427396.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1634.774 ±(99.9%) 89.075 MB/sec [Average]
[info]   (min, avg, max) = (1608.900, 1634.774, 1664.541), stdev = 23.132
[info]   CI (99.9%): [1545.699, 1723.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6279.709 ±(99.9%) 132.587 B/op [Average]
[info]   (min, avg, max) = (6227.546, 6279.709, 6315.122), stdev = 34.432
[info]   CI (99.9%): [6147.122, 6412.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.192 ±(99.9%) 0.673 B/op [Average]
[info]   (min, avg, max) = (0.079, 0.192, 0.478), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1482.044 ±(99.9%) 1160.601 MB/sec [Average]
[info]   (min, avg, max) = (1344.134, 1482.044, 2021.194), stdev = 301.404
[info]   CI (99.9%): [321.443, 2642.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5691.987 ±(99.9%) 4413.461 B/op [Average]
[info]   (min, avg, max) = (5123.809, 5691.987, 7740.319), stdev = 1146.162
[info]   CI (99.9%): [1278.526, 10105.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:30:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 317423.726 ops/s
[info] # Warmup Iteration   2: 424317.812 ops/s
[info] # Warmup Iteration   3: 449529.178 ops/s
[info] # Warmup Iteration   4: 455126.354 ops/s
[info] # Warmup Iteration   5: 451046.691 ops/s
[info] Iteration   1: 457962.133 ops/s
[info]                  ·gc.alloc.rate:                   1297.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              4459.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2309.815 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 456962.097 ops/s
[info]                  ·gc.alloc.rate:                   1308.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              4507.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4629.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 456096.562 ops/s
[info]                  ·gc.alloc.rate:                   1314.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              4538.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4641.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 456982.477 ops/s
[info]                  ·gc.alloc.rate:                   1302.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              4486.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4636.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 452505.375 ops/s
[info]                  ·gc.alloc.rate:                   1306.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              4541.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4687.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   456101.729 ±(99.9%) 8148.194 ops/s [Average]
[info]   (min, avg, max) = (452505.375, 456101.729, 457962.133), stdev = 2116.060
[info]   CI (99.9%): [447953.535, 464249.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1305.939 ±(99.9%) 25.362 MB/sec [Average]
[info]   (min, avg, max) = (1297.270, 1305.939, 1314.962), stdev = 6.586
[info]   CI (99.9%): [1280.577, 1331.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4506.600 ±(99.9%) 134.560 B/op [Average]
[info]   (min, avg, max) = (4459.013, 4506.600, 4541.517), stdev = 34.945
[info]   CI (99.9%): [4372.041, 4641.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.187 ±(99.9%) 0.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.359), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1211.024 ±(99.9%) 1160.305 MB/sec [Average]
[info]   (min, avg, max) = (672.000, 1211.024, 1347.981), stdev = 301.327
[info]   CI (99.9%): [50.719, 2371.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   4180.885 ±(99.9%) 4028.551 B/op [Average]
[info]   (min, avg, max) = (2309.815, 4180.885, 4687.038), stdev = 1046.202
[info]   CI (99.9%): [152.334, 8209.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18318.213 ops/s
[info] # Warmup Iteration   2: 63088.950 ops/s
[info] # Warmup Iteration   3: 67616.284 ops/s
[info] # Warmup Iteration   4: 68766.575 ops/s
[info] # Warmup Iteration   5: 68223.269 ops/s
[info] Iteration   1: 68243.755 ops/s
[info]                  ·gc.alloc.rate:                   1200.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              27694.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31123.767 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 68258.415 ops/s
[info]                  ·gc.alloc.rate:                   1178.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              27176.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15559.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 67813.144 ops/s
[info]                  ·gc.alloc.rate:                   1183.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              27482.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31322.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 67426.303 ops/s
[info]                  ·gc.alloc.rate:                   1181.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              27570.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31518.233 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 69183.470 ops/s
[info]                  ·gc.alloc.rate:                   1206.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              27441.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30733.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   68185.018 ±(99.9%) 2524.802 ops/s [Average]
[info]   (min, avg, max) = (67426.303, 68185.018, 69183.470), stdev = 655.683
[info]   CI (99.9%): [65660.215, 70709.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1190.040 ±(99.9%) 47.601 MB/sec [Average]
[info]   (min, avg, max) = (1178.510, 1190.040, 1206.026), stdev = 12.362
[info]   CI (99.9%): [1142.439, 1237.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   27472.996 ±(99.9%) 739.540 B/op [Average]
[info]   (min, avg, max) = (27176.479, 27472.996, 27694.639), stdev = 192.056
[info]   CI (99.9%): [26733.457, 28212.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.674 ±(99.9%) 2.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 1.458), stdev = 0.552
[info]   CI (99.9%): [≈ 0, 2.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1214.860 ±(99.9%) 1162.666 MB/sec [Average]
[info]   (min, avg, max) = (674.734, 1214.860, 1350.681), stdev = 301.941
[info]   CI (99.9%): [52.194, 2377.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28051.287 ±(99.9%) 26913.023 B/op [Average]
[info]   (min, avg, max) = (15559.376, 28051.287, 31518.233), stdev = 6989.227
[info]   CI (99.9%): [1138.264, 54964.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151568.671 ops/s
[info] # Warmup Iteration   2: 294031.222 ops/s
[info] # Warmup Iteration   3: 310130.370 ops/s
[info] # Warmup Iteration   4: 312984.288 ops/s
[info] # Warmup Iteration   5: 312007.994 ops/s
[info] Iteration   1: 312944.944 ops/s
[info]                  ·gc.alloc.rate:                   2183.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              10980.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10152.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 310451.734 ops/s
[info]                  ·gc.alloc.rate:                   2153.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              10916.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10250.526 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 310419.348 ops/s
[info]                  ·gc.alloc.rate:                   2153.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              10915.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10269.064 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 308038.933 ops/s
[info]                  ·gc.alloc.rate:                   2164.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              11062.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10367.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 313536.589 ops/s
[info]                  ·gc.alloc.rate:                   2201.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              11050.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10198.692 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   311078.310 ±(99.9%) 8522.046 ops/s [Average]
[info]   (min, avg, max) = (308038.933, 311078.310, 313536.589), stdev = 2213.148
[info]   CI (99.9%): [302556.264, 319600.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2171.133 ±(99.9%) 80.012 MB/sec [Average]
[info]   (min, avg, max) = (2153.128, 2171.133, 2201.157), stdev = 20.779
[info]   CI (99.9%): [2091.121, 2251.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10985.402 ±(99.9%) 270.503 B/op [Average]
[info]   (min, avg, max) = (10915.923, 10985.402, 11062.867), stdev = 70.249
[info]   CI (99.9%): [10714.899, 11255.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.274 ±(99.9%) 0.739 B/op [Average]
[info]   (min, avg, max) = (0.105, 0.274, 0.528), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 1.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2025.224 ±(99.9%) 20.296 MB/sec [Average]
[info]   (min, avg, max) = (2018.443, 2025.224, 2031.523), stdev = 5.271
[info]   CI (99.9%): [2004.927, 2045.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10247.571 ±(99.9%) 311.535 B/op [Average]
[info]   (min, avg, max) = (10152.492, 10247.571, 10367.080), stdev = 80.905
[info]   CI (99.9%): [9936.036, 10559.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:29:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175102.284 ops/s
[info] # Warmup Iteration   2: 484292.795 ops/s
[info] # Warmup Iteration   3: 486733.948 ops/s
[info] # Warmup Iteration   4: 492061.276 ops/s
[info] # Warmup Iteration   5: 481852.987 ops/s
[info] Iteration   1: 484373.696 ops/s
[info]                  ·gc.alloc.rate:                   1276.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              4147.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4380.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 485134.280 ops/s
[info]                  ·gc.alloc.rate:                   1254.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              4068.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2188.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 493303.286 ops/s
[info]                  ·gc.alloc.rate:                   1289.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              4115.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4304.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 493908.648 ops/s
[info]                  ·gc.alloc.rate:                   1311.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              4180.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4302.619 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 493819.905 ops/s
[info]                  ·gc.alloc.rate:                   1287.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              4104.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4307.588 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   490107.963 ±(99.9%) 18869.446 ops/s [Average]
[info]   (min, avg, max) = (484373.696, 490107.963, 493908.648), stdev = 4900.335
[info]   CI (99.9%): [471238.517, 508977.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1283.932 ±(99.9%) 81.010 MB/sec [Average]
[info]   (min, avg, max) = (1254.203, 1283.932, 1311.818), stdev = 21.038
[info]   CI (99.9%): [1202.922, 1364.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4123.517 ±(99.9%) 164.404 B/op [Average]
[info]   (min, avg, max) = (4068.809, 4123.517, 4180.804), stdev = 42.695
[info]   CI (99.9%): [3959.113, 4287.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.080 ±(99.9%) 0.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.199), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1214.567 ±(99.9%) 1162.581 MB/sec [Average]
[info]   (min, avg, max) = (674.483, 1214.567, 1351.306), stdev = 301.919
[info]   CI (99.9%): [51.986, 2377.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3896.788 ±(99.9%) 3680.227 B/op [Average]
[info]   (min, avg, max) = (2188.117, 3896.788, 4380.908), stdev = 955.743
[info]   CI (99.9%): [216.561, 7577.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:29:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 915304.653 ops/s
[info] # Warmup Iteration   2: 1283079.106 ops/s
[info] # Warmup Iteration   3: 1305755.442 ops/s
[info] # Warmup Iteration   4: 1329080.611 ops/s
[info] # Warmup Iteration   5: 1317395.745 ops/s
[info] Iteration   1: 1328581.991 ops/s
[info]                  ·gc.alloc.rate:                   2674.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              3167.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2699.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3196.792 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1318857.929 ops/s
[info]                  ·gc.alloc.rate:                   2653.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              3166.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2421.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1327587.049 ops/s
[info]                  ·gc.alloc.rate:                   2697.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              3198.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3212.520 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1318904.420 ops/s
[info]                  ·gc.alloc.rate:                   2682.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              3201.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3238.470 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1326931.697 ops/s
[info]                  ·gc.alloc.rate:                   2697.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              3199.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3222.700 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1324172.617 ±(99.9%) 18737.376 ops/s [Average]
[info]   (min, avg, max) = (1318857.929, 1324172.617, 1328581.991), stdev = 4866.037
[info]   CI (99.9%): [1305435.241, 1342909.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2681.220 ±(99.9%) 69.986 MB/sec [Average]
[info]   (min, avg, max) = (2653.835, 2681.220, 2697.628), stdev = 18.175
[info]   CI (99.9%): [2611.234, 2751.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3186.743 ±(99.9%) 69.383 B/op [Average]
[info]   (min, avg, max) = (3166.726, 3186.743, 3201.556), stdev = 18.019
[info]   CI (99.9%): [3117.360, 3256.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.114 ±(99.9%) 0.159 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.114, 0.149), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2573.655 ±(99.9%) 1172.875 MB/sec [Average]
[info]   (min, avg, max) = (2028.904, 2573.655, 2716.812), stdev = 304.592
[info]   CI (99.9%): [1400.780, 3746.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3058.300 ±(99.9%) 1373.042 B/op [Average]
[info]   (min, avg, max) = (2421.017, 3058.300, 3238.470), stdev = 356.575
[info]   CI (99.9%): [1685.258, 4431.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25993.934 ops/s
[info] # Warmup Iteration   2: 103476.592 ops/s
[info] # Warmup Iteration   3: 107728.655 ops/s
[info] # Warmup Iteration   4: 107904.653 ops/s
[info] # Warmup Iteration   5: 108611.790 ops/s
[info] Iteration   1: 108576.802 ops/s
[info]                  ·gc.alloc.rate:                   3652.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              52958.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4067.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58968.218 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 108273.271 ops/s
[info]                  ·gc.alloc.rate:                   3631.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              52789.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49363.663 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 106543.172 ops/s
[info]                  ·gc.alloc.rate:                   3589.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              53031.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50224.115 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 107922.295 ops/s
[info]                  ·gc.alloc.rate:                   3622.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              52826.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49620.869 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 107815.618 ops/s
[info]                  ·gc.alloc.rate:                   3617.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              52806.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49686.329 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   107826.231 ±(99.9%) 2994.345 ops/s [Average]
[info]   (min, avg, max) = (106543.172, 107826.231, 108576.802), stdev = 777.622
[info]   CI (99.9%): [104831.886, 110820.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3622.618 ±(99.9%) 88.681 MB/sec [Average]
[info]   (min, avg, max) = (3589.236, 3622.618, 3652.725), stdev = 23.030
[info]   CI (99.9%): [3533.937, 3711.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52882.252 ±(99.9%) 410.504 B/op [Average]
[info]   (min, avg, max) = (52789.607, 52882.252, 53031.010), stdev = 106.607
[info]   CI (99.9%): [52471.748, 53292.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.166), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.340 ±(99.9%) 3.090 B/op [Average]
[info]   (min, avg, max) = (0.603, 1.340, 2.460), stdev = 0.802
[info]   CI (99.9%): [≈ 0, 4.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3533.692 ±(99.9%) 1148.573 MB/sec [Average]
[info]   (min, avg, max) = (3395.545, 3533.692, 4067.242), stdev = 298.281
[info]   CI (99.9%): [2385.119, 4682.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   51572.639 ±(99.9%) 15965.117 B/op [Average]
[info]   (min, avg, max) = (49363.663, 51572.639, 58968.218), stdev = 4146.090
[info]   CI (99.9%): [35607.522, 67537.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176233.117 ops/s
[info] # Warmup Iteration   2: 329343.162 ops/s
[info] # Warmup Iteration   3: 352238.835 ops/s
[info] # Warmup Iteration   4: 351851.787 ops/s
[info] # Warmup Iteration   5: 353264.598 ops/s
[info] Iteration   1: 351367.538 ops/s
[info]                  ·gc.alloc.rate:                   566.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3019.589 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 353002.296 ops/s
[info]                  ·gc.alloc.rate:                   564.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              2516.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3008.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 351578.253 ops/s
[info]                  ·gc.alloc.rate:                   559.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              2503.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3020.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 351346.403 ops/s
[info]                  ·gc.alloc.rate:      545.276 MB/sec
[info]                  ·gc.alloc.rate.norm: 2442.888 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 353761.604 ops/s
[info]                  ·gc.alloc.rate:                   570.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              2539.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3002.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   352211.219 ±(99.9%) 4257.463 ops/s [Average]
[info]   (min, avg, max) = (351346.403, 352211.219, 353761.604), stdev = 1105.650
[info]   CI (99.9%): [347953.756, 356468.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   561.171 ±(99.9%) 37.876 MB/sec [Average]
[info]   (min, avg, max) = (545.276, 561.171, 570.803), stdev = 9.836
[info]   CI (99.9%): [523.295, 599.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2507.789 ±(99.9%) 151.173 B/op [Average]
[info]   (min, avg, max) = (2442.888, 2507.789, 2539.621), stdev = 39.259
[info]   CI (99.9%): [2356.615, 2658.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.437), stdev = 0.193
[info]   CI (99.9%): [≈ 0, 0.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.410 ±(99.9%) 3.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.410, 1.958), stdev = 0.866
[info]   CI (99.9%): [≈ 0, 3.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   539.659 ±(99.9%) 1161.656 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.659, 674.768), stdev = 301.678
[info]   CI (99.9%): [≈ 0, 1701.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2410.221 ±(99.9%) 5188.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2410.221, 3020.741), stdev = 1347.377
[info]   CI (99.9%): [≈ 0, 7598.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:28:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 322628.831 ops/s
[info] # Warmup Iteration   2: 750956.609 ops/s
[info] # Warmup Iteration   3: 784384.318 ops/s
[info] # Warmup Iteration   4: 801963.725 ops/s
[info] # Warmup Iteration   5: 783093.603 ops/s
[info] Iteration   1: 816614.029 ops/s
[info]                  ·gc.alloc.rate:                   611.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              1179.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1299.255 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 824428.175 ops/s
[info]                  ·gc.alloc.rate:                   610.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              1166.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1286.927 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 825084.704 ops/s
[info]                  ·gc.alloc.rate:                   612.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              1167.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1285.868 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 824978.053 ops/s
[info]                  ·gc.alloc.rate:                   609.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              1163.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1286.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 826657.813 ops/s
[info]                  ·gc.alloc.rate:                   613.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              1167.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1283.476 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   823552.555 ±(99.9%) 15273.521 ops/s [Average]
[info]   (min, avg, max) = (816614.029, 823552.555, 826657.813), stdev = 3966.485
[info]   CI (99.9%): [808279.033, 838826.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   611.551 ±(99.9%) 5.066 MB/sec [Average]
[info]   (min, avg, max) = (609.652, 611.551, 613.163), stdev = 1.316
[info]   CI (99.9%): [606.485, 616.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1168.817 ±(99.9%) 24.246 B/op [Average]
[info]   (min, avg, max) = (1163.229, 1168.817, 1179.634), stdev = 6.297
[info]   CI (99.9%): [1144.571, 1193.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.241 ±(99.9%) 1.856 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.241, 1.103), stdev = 0.482
[info]   CI (99.9%): [≈ 0, 2.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.465 ±(99.9%) 3.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 2.126), stdev = 0.929
[info]   CI (99.9%): [≈ 0, 4.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.077 ±(99.9%) 0.431 MB/sec [Average]
[info]   (min, avg, max) = (673.975, 674.077, 674.230), stdev = 0.112
[info]   CI (99.9%): [673.646, 674.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1288.320 ±(99.9%) 24.051 B/op [Average]
[info]   (min, avg, max) = (1283.476, 1288.320, 1299.255), stdev = 6.246
[info]   CI (99.9%): [1264.269, 1312.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:28:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1463634.235 ops/s
[info] # Warmup Iteration   2: 1910257.434 ops/s
[info] # Warmup Iteration   3: 1875112.570 ops/s
[info] # Warmup Iteration   4: 1946612.882 ops/s
[info] # Warmup Iteration   5: 1980408.642 ops/s
[info] Iteration   1: 1976644.496 ops/s
[info]                  ·gc.alloc.rate:                   952.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              758.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1069.741 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1983290.280 ops/s
[info]                  ·gc.alloc.rate:                   942.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 533.404 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1982792.685 ops/s
[info]                  ·gc.alloc.rate:                   937.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 533.522 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1969346.967 ops/s
[info]                  ·gc.alloc.rate:                   945.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1074.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1983135.258 ops/s
[info]                  ·gc.alloc.rate:                   931.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              739.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 533.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   1979041.937 ±(99.9%) 23470.928 ops/s [Average]
[info]   (min, avg, max) = (1969346.967, 1979041.937, 1983290.280), stdev = 6095.325
[info]   CI (99.9%): [1955571.010, 2002512.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   942.044 ±(99.9%) 31.611 MB/sec [Average]
[info]   (min, avg, max) = (931.208, 942.044, 952.816), stdev = 8.209
[info]   CI (99.9%): [910.433, 973.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.178 ±(99.9%) 30.947 B/op [Average]
[info]   (min, avg, max) = (739.031, 749.178, 758.299), stdev = 8.037
[info]   CI (99.9%): [718.231, 780.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.027 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.100), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.904 ±(99.9%) 1417.379 MB/sec [Average]
[info]   (min, avg, max) = (672.042, 940.904, 1344.148), stdev = 368.089
[info]   CI (99.9%): [≈ 0, 2358.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   748.882 ±(99.9%) 1135.907 B/op [Average]
[info]   (min, avg, max) = (533.404, 748.882, 1074.307), stdev = 294.991
[info]   CI (99.9%): [≈ 0, 1884.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1653385.854 ops/s
[info] # Warmup Iteration   2: 2129856.708 ops/s
[info] # Warmup Iteration   3: 2164977.022 ops/s
[info] # Warmup Iteration   4: 2159303.890 ops/s
[info] # Warmup Iteration   5: 2164009.528 ops/s
[info] Iteration   1: 2162893.299 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2160286.356 ops/s
[info]                  ·gc.alloc.rate:      1.458 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2162851.922 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2161566.399 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2163284.475 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2162176.490 ±(99.9%) 4771.720 ops/s [Average]
[info]   (min, avg, max) = (2160286.356, 2162176.490, 2163284.475), stdev = 1239.201
[info]   CI (99.9%): [2157404.770, 2166948.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.292 ±(99.9%) 2.510 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.292, 1.458), stdev = 0.652
[info]   CI (99.9%): [≈ 0, 2.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.213 ±(99.9%) 1.829 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.213, 1.062), stdev = 0.475
[info]   CI (99.9%): [≈ 0, 2.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241574.415 ops/s
[info] # Warmup Iteration   2: 419185.785 ops/s
[info] # Warmup Iteration   3: 438312.317 ops/s
[info] # Warmup Iteration   4: 444991.693 ops/s
[info] # Warmup Iteration   5: 436769.738 ops/s
[info] Iteration   1: 429219.426 ops/s
[info]                  ·gc.alloc.rate:                   636.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              2334.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2468.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 435145.941 ops/s
[info]                  ·gc.alloc.rate:      640.889 MB/sec
[info]                  ·gc.alloc.rate.norm: 2317.914 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 444012.149 ops/s
[info]                  ·gc.alloc.rate:                   649.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              2302.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2385.891 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 440827.136 ops/s
[info]                  ·gc.alloc.rate:                   660.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              2359.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2404.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 441619.009 ops/s
[info]                  ·gc.alloc.rate:                   654.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              2331.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2400.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   438164.732 ±(99.9%) 22970.657 ops/s [Average]
[info]   (min, avg, max) = (429219.426, 438164.732, 444012.149), stdev = 5965.407
[info]   CI (99.9%): [415194.075, 461135.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   648.353 ±(99.9%) 37.631 MB/sec [Average]
[info]   (min, avg, max) = (636.571, 648.353, 660.741), stdev = 9.773
[info]   CI (99.9%): [610.722, 685.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2329.133 ±(99.9%) 81.865 B/op [Average]
[info]   (min, avg, max) = (2302.053, 2329.133, 2359.285), stdev = 21.260
[info]   CI (99.9%): [2247.269, 2410.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.075 ±(99.9%) 0.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.149), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   538.550 ±(99.9%) 1159.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.550, 673.370), stdev = 301.059
[info]   CI (99.9%): [≈ 0, 1697.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1931.719 ±(99.9%) 4159.963 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1931.719, 2468.258), stdev = 1080.329
[info]   CI (99.9%): [≈ 0, 6091.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:27:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19326.150 ops/s
[info] # Warmup Iteration   2: 56684.568 ops/s
[info] # Warmup Iteration   3: 57152.524 ops/s
[info] # Warmup Iteration   4: 58790.174 ops/s
[info] # Warmup Iteration   5: 57550.414 ops/s
[info] Iteration   1: 59376.075 ops/s
[info]                  ·gc.alloc.rate:                   1897.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              50277.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53749.585 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 59334.547 ops/s
[info]                  ·gc.alloc.rate:                   1892.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              50188.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35904.933 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 59269.014 ops/s
[info]                  ·gc.alloc.rate:                   1903.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              50541.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53960.678 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 59301.577 ops/s
[info]                  ·gc.alloc.rate:                   1917.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              50889.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53983.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 59181.719 ops/s
[info]                  ·gc.alloc.rate:                   1928.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              51287.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54155.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   59292.586 ±(99.9%) 283.350 ops/s [Average]
[info]   (min, avg, max) = (59181.719, 59292.586, 59376.075), stdev = 73.585
[info]   CI (99.9%): [59009.236, 59575.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1907.632 ±(99.9%) 57.081 MB/sec [Average]
[info]   (min, avg, max) = (1892.256, 1907.632, 1928.180), stdev = 14.824
[info]   CI (99.9%): [1850.550, 1964.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   50637.034 ±(99.9%) 1750.998 B/op [Average]
[info]   (min, avg, max) = (50188.470, 50637.034, 51287.861), stdev = 454.729
[info]   CI (99.9%): [48886.036, 52388.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.105 ±(99.9%) 2.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.105, 1.657), stdev = 0.676
[info]   CI (99.9%): [≈ 0, 3.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1896.751 ±(99.9%) 1168.960 MB/sec [Average]
[info]   (min, avg, max) = (1353.724, 1896.751, 2035.976), stdev = 303.575
[info]   CI (99.9%): [727.792, 3065.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   50350.806 ±(99.9%) 31100.771 B/op [Average]
[info]   (min, avg, max) = (35904.933, 50350.806, 54155.139), stdev = 8076.771
[info]   CI (99.9%): [19250.035, 81451.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28524.603 ops/s
[info] # Warmup Iteration   2: 80937.760 ops/s
[info] # Warmup Iteration   3: 87578.876 ops/s
[info] # Warmup Iteration   4: 88848.068 ops/s
[info] # Warmup Iteration   5: 88757.386 ops/s
[info] Iteration   1: 88834.297 ops/s
[info]                  ·gc.alloc.rate:                   1623.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              28767.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23887.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 88434.241 ops/s
[info]                  ·gc.alloc.rate:                   1625.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              28922.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24007.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 88477.984 ops/s
[info]                  ·gc.alloc.rate:                   1639.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              29158.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36033.987 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 88794.078 ops/s
[info]                  ·gc.alloc.rate:                   1630.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              28905.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23956.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 88523.423 ops/s
[info]                  ·gc.alloc.rate:                   1653.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              29386.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36037.888 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   88612.805 ±(99.9%) 720.310 ops/s [Average]
[info]   (min, avg, max) = (88434.241, 88612.805, 88834.297), stdev = 187.062
[info]   CI (99.9%): [87892.494, 89333.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1634.284 ±(99.9%) 47.470 MB/sec [Average]
[info]   (min, avg, max) = (1623.270, 1634.284, 1653.323), stdev = 12.328
[info]   CI (99.9%): [1586.814, 1681.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   29028.089 ±(99.9%) 942.011 B/op [Average]
[info]   (min, avg, max) = (28767.010, 29028.089, 29386.046), stdev = 244.637
[info]   CI (99.9%): [28086.078, 29970.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.592 ±(99.9%) 2.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.592, 1.481), stdev = 0.672
[info]   CI (99.9%): [≈ 0, 3.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1620.300 ±(99.9%) 1428.474 MB/sec [Average]
[info]   (min, avg, max) = (1347.919, 1620.300, 2027.570), stdev = 370.970
[info]   CI (99.9%): [191.826, 3048.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28784.711 ±(99.9%) 25489.613 B/op [Average]
[info]   (min, avg, max) = (23887.332, 28784.711, 36037.888), stdev = 6619.572
[info]   CI (99.9%): [3295.098, 54274.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92499.039 ops/s
[info] # Warmup Iteration   2: 159436.313 ops/s
[info] # Warmup Iteration   3: 161295.067 ops/s
[info] # Warmup Iteration   4: 162132.476 ops/s
[info] # Warmup Iteration   5: 158115.113 ops/s
[info] Iteration   1: 162620.269 ops/s
[info]                  ·gc.alloc.rate:                   2545.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              24636.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19589.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 164172.750 ops/s
[info]                  ·gc.alloc.rate:                   2594.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              24877.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25914.417 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 164790.667 ops/s
[info]                  ·gc.alloc.rate:                   2632.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              25149.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25865.591 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 163460.211 ops/s
[info]                  ·gc.alloc.rate:                   2586.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              24903.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19582.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 163000.097 ops/s
[info]                  ·gc.alloc.rate:                   2606.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              25169.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26223.727 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   163608.799 ±(99.9%) 3381.472 ops/s [Average]
[info]   (min, avg, max) = (162620.269, 163608.799, 164790.667), stdev = 878.158
[info]   CI (99.9%): [160227.327, 166990.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2593.090 ±(99.9%) 123.486 MB/sec [Average]
[info]   (min, avg, max) = (2545.160, 2593.090, 2632.933), stdev = 32.069
[info]   CI (99.9%): [2469.604, 2716.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24947.400 ±(99.9%) 846.578 B/op [Average]
[info]   (min, avg, max) = (24636.902, 24947.400, 25169.764), stdev = 219.854
[info]   CI (99.9%): [24100.822, 25793.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.083), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.722 ±(99.9%) 0.697 B/op [Average]
[info]   (min, avg, max) = (0.398, 0.722, 0.806), stdev = 0.181
[info]   CI (99.9%): [0.024, 1.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2436.726 ±(99.9%) 1434.696 MB/sec [Average]
[info]   (min, avg, max) = (2023.681, 2436.726, 2715.589), stdev = 372.586
[info]   CI (99.9%): [1002.030, 3871.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23434.976 ±(99.9%) 13541.528 B/op [Average]
[info]   (min, avg, max) = (19582.108, 23434.976, 26223.727), stdev = 3516.692
[info]   CI (99.9%): [9893.448, 36976.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3188.383 ops/s
[info] # Warmup Iteration   2: 31261.235 ops/s
[info] # Warmup Iteration   3: 33348.331 ops/s
[info] # Warmup Iteration   4: 34000.304 ops/s
[info] # Warmup Iteration   5: 33283.346 ops/s
[info] Iteration   1: 33388.789 ops/s
[info]                  ·gc.alloc.rate:                   2153.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              101557.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2699.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127288.511 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 33176.981 ops/s
[info]                  ·gc.alloc.rate:                   2137.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              101385.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96205.576 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 33453.887 ops/s
[info]                  ·gc.alloc.rate:                   2154.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              101344.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95503.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33968.675 ops/s
[info]                  ·gc.alloc.rate:                   2186.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              101317.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94194.377 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33945.652 ops/s
[info]                  ·gc.alloc.rate:                   2198.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              101945.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94353.618 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   33586.797 ±(99.9%) 1360.631 ops/s [Average]
[info]   (min, avg, max) = (33176.981, 33586.797, 33968.675), stdev = 353.351
[info]   CI (99.9%): [32226.166, 34947.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2166.045 ±(99.9%) 98.466 MB/sec [Average]
[info]   (min, avg, max) = (2137.019, 2166.045, 2198.727), stdev = 25.571
[info]   CI (99.9%): [2067.579, 2264.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   101510.204 ±(99.9%) 1004.410 B/op [Average]
[info]   (min, avg, max) = (101317.745, 101510.204, 101945.797), stdev = 260.842
[info]   CI (99.9%): [100505.794, 102514.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.756 ±(99.9%) 3.155 B/op [Average]
[info]   (min, avg, max) = (0.965, 1.756, 2.938), stdev = 0.819
[info]   CI (99.9%): [≈ 0, 4.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2165.032 ±(99.9%) 1150.991 MB/sec [Average]
[info]   (min, avg, max) = (2027.844, 2165.032, 2699.714), stdev = 298.909
[info]   CI (99.9%): [1014.041, 3316.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   101509.046 ±(99.9%) 55584.246 B/op [Average]
[info]   (min, avg, max) = (94194.377, 101509.046, 127288.511), stdev = 14435.052
[info]   CI (99.9%): [45924.800, 157093.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36662.183 ops/s
[info] # Warmup Iteration   2: 129933.020 ops/s
[info] # Warmup Iteration   3: 129596.095 ops/s
[info] # Warmup Iteration   4: 132527.664 ops/s
[info] # Warmup Iteration   5: 133180.543 ops/s
[info] Iteration   1: 133766.384 ops/s
[info]                  ·gc.alloc.rate:                   836.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              9844.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7931.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 134796.020 ops/s
[info]                  ·gc.alloc.rate:                   851.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              9940.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7870.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 133522.680 ops/s
[info]                  ·gc.alloc.rate:                   846.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              9979.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7946.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 133617.254 ops/s
[info]                  ·gc.alloc.rate:                   862.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              10164.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15880.739 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 132223.317 ops/s
[info]                  ·gc.alloc.rate:                   829.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              9870.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8028.275 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   133585.131 ±(99.9%) 3528.424 ops/s [Average]
[info]   (min, avg, max) = (132223.317, 133585.131, 134796.020), stdev = 916.321
[info]   CI (99.9%): [130056.707, 137113.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   845.291 ±(99.9%) 50.356 MB/sec [Average]
[info]   (min, avg, max) = (829.276, 845.291, 862.984), stdev = 13.077
[info]   CI (99.9%): [794.935, 895.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9959.772 ±(99.9%) 486.528 B/op [Average]
[info]   (min, avg, max) = (9844.092, 9959.772, 10164.239), stdev = 126.350
[info]   CI (99.9%): [9473.244, 10446.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.245 ±(99.9%) 1.635 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.245, 0.981), stdev = 0.425
[info]   CI (99.9%): [≈ 0, 1.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   808.967 ±(99.9%) 1161.036 MB/sec [Average]
[info]   (min, avg, max) = (673.944, 808.967, 1348.338), stdev = 301.517
[info]   CI (99.9%): [≈ 0, 1970.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9531.569 ±(99.9%) 13668.774 B/op [Average]
[info]   (min, avg, max) = (7870.931, 9531.569, 15880.739), stdev = 3549.737
[info]   CI (99.9%): [≈ 0, 23200.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312581.847 ops/s
[info] # Warmup Iteration   2: 411630.299 ops/s
[info] # Warmup Iteration   3: 430546.456 ops/s
[info] # Warmup Iteration   4: 423599.516 ops/s
[info] # Warmup Iteration   5: 424913.513 ops/s
[info] Iteration   1: 433868.786 ops/s
[info]                  ·gc.alloc.rate:                   498.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              1808.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2440.566 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 430588.491 ops/s
[info]                  ·gc.alloc.rate:                   489.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              1788.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2459.251 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 426712.948 ops/s
[info]                  ·gc.alloc.rate:      470.599 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 432727.088 ops/s
[info]                  ·gc.alloc.rate:                   500.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              1820.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2444.634 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 431321.999 ops/s
[info]                  ·gc.alloc.rate:                   489.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              1784.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2452.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   431043.863 ±(99.9%) 10519.904 ops/s [Average]
[info]   (min, avg, max) = (426712.948, 431043.863, 433868.786), stdev = 2731.986
[info]   CI (99.9%): [420523.958, 441563.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   489.581 ±(99.9%) 45.396 MB/sec [Average]
[info]   (min, avg, max) = (470.599, 489.581, 500.351), stdev = 11.789
[info]   CI (99.9%): [444.185, 534.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1787.618 ±(99.9%) 124.237 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1787.618, 1820.014), stdev = 32.264
[info]   CI (99.9%): [1663.382, 1911.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.618 ±(99.9%) 5.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.618, 3.092), stdev = 1.383
[info]   CI (99.9%): [≈ 0, 5.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.260 ±(99.9%) 19.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.260, 11.300), stdev = 5.053
[info]   CI (99.9%): [≈ 0, 21.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   537.927 ±(99.9%) 1157.930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.927, 672.846), stdev = 300.711
[info]   CI (99.9%): [≈ 0, 1695.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1959.386 ±(99.9%) 4217.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1959.386, 2459.251), stdev = 1095.354
[info]   CI (99.9%): [≈ 0, 6177.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 331299.392 ops/s
[info] # Warmup Iteration   2: 443210.422 ops/s
[info] # Warmup Iteration   3: 447793.427 ops/s
[info] # Warmup Iteration   4: 448013.680 ops/s
[info] # Warmup Iteration   5: 446115.304 ops/s
[info] Iteration   1: 444062.271 ops/s
[info]                  ·gc.alloc.rate:      6.579 MB/sec
[info]                  ·gc.alloc.rate.norm: 23.323 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 446909.817 ops/s
[info]                  ·gc.alloc.rate:      4.545 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 447398.432 ops/s
[info]                  ·gc.alloc.rate:      4.718 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.599 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 447379.863 ops/s
[info]                  ·gc.alloc.rate:      4.548 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 447420.755 ops/s
[info]                  ·gc.alloc.rate:      4.548 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   446634.228 ±(99.9%) 5596.535 ops/s [Average]
[info]   (min, avg, max) = (444062.271, 446634.228, 447420.755), stdev = 1453.402
[info]   CI (99.9%): [441037.693, 452230.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.988 ±(99.9%) 3.438 MB/sec [Average]
[info]   (min, avg, max) = (4.545, 4.988, 6.579), stdev = 0.893
[info]   CI (99.9%): [1.550, 8.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17.585 ±(99.9%) 12.392 B/op [Average]
[info]   (min, avg, max) = (16.001, 17.585, 23.323), stdev = 3.218
[info]   CI (99.9%): [5.193, 29.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:25:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11975.840 ops/s
[info] # Warmup Iteration   2: 62166.841 ops/s
[info] # Warmup Iteration   3: 67518.049 ops/s
[info] # Warmup Iteration   4: 68782.272 ops/s
[info] # Warmup Iteration   5: 69038.977 ops/s
[info] Iteration   1: 69065.752 ops/s
[info]                  ·gc.alloc.rate:                   1191.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              27165.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15361.749 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 66335.485 ops/s
[info]                  ·gc.alloc.rate:                   1196.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              28381.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31988.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 68880.219 ops/s
[info]                  ·gc.alloc.rate:                   1210.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              27648.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30823.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 69035.505 ops/s
[info]                  ·gc.alloc.rate:                   1205.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              27484.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30776.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 69015.130 ops/s
[info]                  ·gc.alloc.rate:                   1184.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              27021.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15396.554 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   68466.418 ±(99.9%) 4595.131 ops/s [Average]
[info]   (min, avg, max) = (66335.485, 68466.418, 69065.752), stdev = 1193.341
[info]   CI (99.9%): [63871.287, 73061.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1197.716 ±(99.9%) 39.382 MB/sec [Average]
[info]   (min, avg, max) = (1184.740, 1197.716, 1210.156), stdev = 10.228
[info]   CI (99.9%): [1158.333, 1237.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   27540.352 ±(99.9%) 2047.740 B/op [Average]
[info]   (min, avg, max) = (27021.893, 27540.352, 28381.192), stdev = 531.792
[info]   CI (99.9%): [25492.612, 29588.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.381 ±(99.9%) 3.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.903), stdev = 0.851
[info]   CI (99.9%): [≈ 0, 3.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1079.266 ±(99.9%) 1422.648 MB/sec [Average]
[info]   (min, avg, max) = (674.051, 1079.266, 1349.847), stdev = 369.457
[info]   CI (99.9%): [≈ 0, 2501.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   24869.302 ±(99.9%) 33411.554 B/op [Average]
[info]   (min, avg, max) = (15361.749, 24869.302, 31988.151), stdev = 8676.875
[info]   CI (99.9%): [≈ 0, 58280.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:25:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 511873.257 ops/s
[info] # Warmup Iteration   2: 2812907.443 ops/s
[info] # Warmup Iteration   3: 2881325.400 ops/s
[info] # Warmup Iteration   4: 2889044.000 ops/s
[info] # Warmup Iteration   5: 2862220.775 ops/s
[info] Iteration   1: 2853818.097 ops/s
[info]                  ·gc.alloc.rate:                   3569.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              1969.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3378.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1863.664 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2827047.922 ops/s
[info]                  ·gc.alloc.rate:                   3538.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              1970.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3386.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1885.747 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2872794.438 ops/s
[info]                  ·gc.alloc.rate:                   3594.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              1969.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3393.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1859.434 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2885161.643 ops/s
[info]                  ·gc.alloc.rate:                   3611.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              1970.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1854.009 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2889385.065 ops/s
[info]                  ·gc.alloc.rate:                   3615.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1969.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1852.759 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2865641.433 ±(99.9%) 98647.427 ops/s [Average]
[info]   (min, avg, max) = (2827047.922, 2865641.433, 2889385.065), stdev = 25618.424
[info]   CI (99.9%): [2766994.006, 2964288.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3585.864 ±(99.9%) 123.464 MB/sec [Average]
[info]   (min, avg, max) = (3538.136, 3585.864, 3615.001), stdev = 32.063
[info]   CI (99.9%): [3462.399, 3709.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1969.700 ±(99.9%) 1.917 B/op [Average]
[info]   (min, avg, max) = (1969.109, 1969.700, 1970.246), stdev = 0.498
[info]   CI (99.9%): [1967.783, 1971.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.057 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.057, 0.080), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3391.669 ±(99.9%) 34.848 MB/sec [Average]
[info]   (min, avg, max) = (3378.797, 3391.669, 3400.988), stdev = 9.050
[info]   CI (99.9%): [3356.822, 3426.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1863.122 ±(99.9%) 51.526 B/op [Average]
[info]   (min, avg, max) = (1852.759, 1863.122, 1885.747), stdev = 13.381
[info]   CI (99.9%): [1811.597, 1914.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.712 ops/s
[info] # Warmup Iteration   2: 706178.023 ops/s
[info] # Warmup Iteration   3: 717475.591 ops/s
[info] # Warmup Iteration   4: 735893.590 ops/s
[info] # Warmup Iteration   5: 749138.640 ops/s
[info] Iteration   1: 744527.527 ops/s
[info]                  ·gc.alloc.rate:                   467.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              988.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1418.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 740103.849 ops/s
[info]                  ·gc.alloc.rate:                   463.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              985.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1426.516 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 741570.892 ops/s
[info]                  ·gc.alloc.rate:                   462.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              981.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1420.854 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 739773.245 ops/s
[info]                  ·gc.alloc.rate:      454.944 MB/sec
[info]                  ·gc.alloc.rate.norm: 968.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 742625.960 ops/s
[info]                  ·gc.alloc.rate:                   456.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              968.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1418.811 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   741720.294 ±(99.9%) 7488.240 ops/s [Average]
[info]   (min, avg, max) = (739773.245, 741720.294, 744527.527), stdev = 1944.672
[info]   CI (99.9%): [734232.054, 749208.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   461.055 ±(99.9%) 20.127 MB/sec [Average]
[info]   (min, avg, max) = (454.944, 461.055, 467.745), stdev = 5.227
[info]   CI (99.9%): [440.928, 481.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   978.300 ±(99.9%) 37.682 B/op [Average]
[info]   (min, avg, max) = (968.001, 978.300, 988.682), stdev = 9.786
[info]   CI (99.9%): [940.617, 1015.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.831 ±(99.9%) 7.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.831, 4.121), stdev = 1.839
[info]   CI (99.9%): [≈ 0, 7.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.767 ±(99.9%) 15.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.767, 8.762), stdev = 3.910
[info]   CI (99.9%): [≈ 0, 16.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   536.136 ±(99.9%) 1154.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.136, 670.910), stdev = 299.710
[info]   CI (99.9%): [≈ 0, 1690.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1136.846 ±(99.9%) 2447.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1136.846, 1426.516), stdev = 635.525
[info]   CI (99.9%): [≈ 0, 3584.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13119.498 ops/s
[info] # Warmup Iteration   2: 227241.991 ops/s
[info] # Warmup Iteration   3: 291639.927 ops/s
[info] # Warmup Iteration   4: 311825.178 ops/s
[info] # Warmup Iteration   5: 303452.493 ops/s
[info] Iteration   1: 311777.791 ops/s
[info]                  ·gc.alloc.rate:                   605.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              3058.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3404.719 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 310012.638 ops/s
[info]                  ·gc.alloc.rate:                   589.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              2992.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3422.409 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 312499.285 ops/s
[info]                  ·gc.alloc.rate:                   588.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              2964.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3395.176 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 309982.054 ops/s
[info]                  ·gc.alloc.rate:      581.368 MB/sec
[info]                  ·gc.alloc.rate.norm: 2952.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 308594.416 ops/s
[info]                  ·gc.alloc.rate:                   587.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              2997.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3438.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   310573.237 ±(99.9%) 6008.767 ops/s [Average]
[info]   (min, avg, max) = (308594.416, 310573.237, 312499.285), stdev = 1560.458
[info]   CI (99.9%): [304564.470, 316582.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   590.542 ±(99.9%) 35.041 MB/sec [Average]
[info]   (min, avg, max) = (581.368, 590.542, 605.804), stdev = 9.100
[info]   CI (99.9%): [555.501, 625.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2992.946 ±(99.9%) 158.134 B/op [Average]
[info]   (min, avg, max) = (2952.001, 2992.946, 3058.227), stdev = 41.067
[info]   CI (99.9%): [2834.812, 3151.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.291 ±(99.9%) 2.420 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 1.415), stdev = 0.628
[info]   CI (99.9%): [≈ 0, 2.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.471 ±(99.9%) 12.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.471, 7.146), stdev = 3.173
[info]   CI (99.9%): [≈ 0, 13.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.303 ±(99.9%) 1160.891 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.303, 674.440), stdev = 301.480
[info]   CI (99.9%): [≈ 0, 1700.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2732.074 ±(99.9%) 5881.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2732.074, 3438.065), stdev = 1527.365
[info]   CI (99.9%): [≈ 0, 8613.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 360316.067 ops/s
[info] # Warmup Iteration   2: 534405.140 ops/s
[info] # Warmup Iteration   3: 517506.915 ops/s
[info] # Warmup Iteration   4: 558383.432 ops/s
[info] # Warmup Iteration   5: 556923.410 ops/s
[info] Iteration   1: 557834.638 ops/s
[info]                  ·gc.alloc.rate:      419.715 MB/sec
[info]                  ·gc.alloc.rate.norm: 1184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 556114.729 ops/s
[info]                  ·gc.alloc.rate:                   418.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1905.919 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 553207.947 ops/s
[info]                  ·gc.alloc.rate:                   433.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1915.936 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 559478.057 ops/s
[info]                  ·gc.alloc.rate:      421.104 MB/sec
[info]                  ·gc.alloc.rate.norm: 1184.195 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 563028.379 ops/s
[info]                  ·gc.alloc.rate:                   423.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1880.690 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   557932.750 ±(99.9%) 14147.121 ops/s [Average]
[info]   (min, avg, max) = (553207.947, 557932.750, 563028.379), stdev = 3673.962
[info]   CI (99.9%): [543785.629, 572079.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   423.207 ±(99.9%) 22.900 MB/sec [Average]
[info]   (min, avg, max) = (418.425, 423.207, 433.302), stdev = 5.947
[info]   CI (99.9%): [400.307, 446.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1193.795 ±(99.9%) 83.910 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1193.795, 1232.776), stdev = 21.791
[info]   CI (99.9%): [1109.885, 1277.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.589 ±(99.9%) 5.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.589, 2.945), stdev = 1.317
[info]   CI (99.9%): [≈ 0, 5.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.676 ±(99.9%) 14.431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.676, 8.380), stdev = 3.748
[info]   CI (99.9%): [≈ 0, 16.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   403.931 ±(99.9%) 1419.874 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.931, 673.549), stdev = 368.737
[info]   CI (99.9%): [≈ 0, 1823.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1140.509 ±(99.9%) 4009.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1140.509, 1915.936), stdev = 1041.217
[info]   CI (99.9%): [≈ 0, 5149.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 830325.143 ops/s
[info] # Warmup Iteration   2: 1305145.712 ops/s
[info] # Warmup Iteration   3: 1567107.853 ops/s
[info] # Warmup Iteration   4: 1544742.923 ops/s
[info] # Warmup Iteration   5: 1546391.520 ops/s
[info] Iteration   1: 1549554.216 ops/s
[info]                  ·gc.alloc.rate:                   518.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              526.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 684.706 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1534076.762 ops/s
[info]                  ·gc.alloc.rate:                   511.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              525.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 691.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1559612.307 ops/s
[info]                  ·gc.alloc.rate:      499.373 MB/sec
[info]                  ·gc.alloc.rate.norm: 504.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1566436.428 ops/s
[info]                  ·gc.alloc.rate:                   517.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              519.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 676.665 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1568002.752 ops/s
[info]                  ·gc.alloc.rate:                   522.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              524.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 676.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   1555536.493 ±(99.9%) 54016.731 ops/s [Average]
[info]   (min, avg, max) = (1534076.762, 1555536.493, 1568002.752), stdev = 14027.973
[info]   CI (99.9%): [1501519.762, 1609553.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   513.871 ±(99.9%) 34.492 MB/sec [Average]
[info]   (min, avg, max) = (499.373, 513.871, 522.585), stdev = 8.958
[info]   CI (99.9%): [479.379, 548.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   519.948 ±(99.9%) 35.683 B/op [Average]
[info]   (min, avg, max) = (504.000, 519.948, 526.408), stdev = 9.267
[info]   CI (99.9%): [484.265, 555.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.564 ±(99.9%) 4.856 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.564, 2.820), stdev = 1.261
[info]   CI (99.9%): [≈ 0, 5.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.579 ±(99.9%) 4.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.894), stdev = 1.294
[info]   CI (99.9%): [≈ 0, 5.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   539.058 ±(99.9%) 1160.364 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.058, 674.177), stdev = 301.343
[info]   CI (99.9%): [≈ 0, 1699.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   545.798 ±(99.9%) 1175.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 545.798, 691.616), stdev = 305.178
[info]   CI (99.9%): [≈ 0, 1720.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2151157.010 ops/s
[info] # Warmup Iteration   2: 3537466.507 ops/s
[info] # Warmup Iteration   3: 3796027.295 ops/s
[info] # Warmup Iteration   4: 3786861.816 ops/s
[info] # Warmup Iteration   5: 3718862.883 ops/s
[info] Iteration   1: 3833469.197 ops/s
[info]                  ·gc.alloc.rate:      311.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 128.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3788604.724 ops/s
[info]                  ·gc.alloc.rate:                   318.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              132.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212.530 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3787503.818 ops/s
[info]                  ·gc.alloc.rate:      307.995 MB/sec
[info]                  ·gc.alloc.rate.norm: 128.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3752629.712 ops/s
[info]                  ·gc.alloc.rate:                   324.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 282.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3792890.306 ops/s
[info]                  ·gc.alloc.rate:      308.494 MB/sec
[info]                  ·gc.alloc.rate.norm: 128.035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   3791019.552 ±(99.9%) 110558.480 ops/s [Average]
[info]   (min, avg, max) = (3752629.712, 3791019.552, 3833469.197), stdev = 28711.686
[info]   CI (99.9%): [3680461.072, 3901578.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   314.330 ±(99.9%) 27.749 MB/sec [Average]
[info]   (min, avg, max) = (307.995, 314.330, 324.676), stdev = 7.206
[info]   CI (99.9%): [286.582, 342.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   130.532 ±(99.9%) 14.238 B/op [Average]
[info]   (min, avg, max) = (128.000, 130.532, 136.189), stdev = 3.698
[info]   CI (99.9%): [116.294, 144.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   237.108 ±(99.9%) 1269.614 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 237.108, 673.996), stdev = 329.715
[info]   CI (99.9%): [≈ 0, 1506.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   99.049 ±(99.9%) 530.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.049, 282.715), stdev = 137.880
[info]   CI (99.9%): [≈ 0, 629.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354.762 ops/s
[info] # Warmup Iteration   2: 80440.006 ops/s
[info] # Warmup Iteration   3: 213000.118 ops/s
[info] # Warmup Iteration   4: 232826.674 ops/s
[info] # Warmup Iteration   5: 234681.832 ops/s
[info] Iteration   1: 231762.140 ops/s
[info]                  ·gc.alloc.rate:                   1587.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              10781.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9155.854 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 232830.889 ops/s
[info]                  ·gc.alloc.rate:                   1614.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              10917.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13675.649 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 232171.084 ops/s
[info]                  ·gc.alloc.rate:                   1589.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              10773.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9153.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 232604.298 ops/s
[info]                  ·gc.alloc.rate:                   1591.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              10770.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9143.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 232795.343 ops/s
[info]                  ·gc.alloc.rate:                   1606.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              10859.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9142.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   232432.751 ±(99.9%) 1762.068 ops/s [Average]
[info]   (min, avg, max) = (231762.140, 232432.751, 232830.889), stdev = 457.604
[info]   CI (99.9%): [230670.682, 234194.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1597.847 ±(99.9%) 46.194 MB/sec [Average]
[info]   (min, avg, max) = (1587.534, 1597.847, 1614.846), stdev = 11.996
[info]   CI (99.9%): [1551.653, 1644.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10820.308 ±(99.9%) 251.661 B/op [Average]
[info]   (min, avg, max) = (10770.169, 10820.308, 10917.052), stdev = 65.355
[info]   CI (99.9%): [10568.647, 11071.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.197 ±(99.9%) 1.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.563), stdev = 0.274
[info]   CI (99.9%): [≈ 0, 1.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1484.930 ±(99.9%) 1158.026 MB/sec [Average]
[info]   (min, avg, max) = (1348.193, 1484.930, 2022.897), stdev = 300.736
[info]   CI (99.9%): [326.904, 2642.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10054.203 ±(99.9%) 7795.470 B/op [Average]
[info]   (min, avg, max) = (9142.568, 10054.203, 13675.649), stdev = 2024.459
[info]   CI (99.9%): [2258.733, 17849.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1022264.383 ops/s
[info] # Warmup Iteration   2: 1316777.644 ops/s
[info] # Warmup Iteration   3: 1360048.387 ops/s
[info] # Warmup Iteration   4: 1367773.987 ops/s
[info] # Warmup Iteration   5: 1365638.040 ops/s
[info] Iteration   1: 1368891.206 ops/s
[info]                  ·gc.alloc.rate:      76.522 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1368381.332 ops/s
[info]                  ·gc.alloc.rate:      76.521 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1370048.979 ops/s
[info]                  ·gc.alloc.rate:      76.600 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1369394.834 ops/s
[info]                  ·gc.alloc.rate:      76.746 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.196 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1369725.528 ops/s
[info]                  ·gc.alloc.rate:      76.604 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1369288.376 ±(99.9%) 2555.263 ops/s [Average]
[info]   (min, avg, max) = (1368381.332, 1369288.376, 1370048.979), stdev = 663.594
[info]   CI (99.9%): [1366733.113, 1371843.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   76.599 ±(99.9%) 0.354 MB/sec [Average]
[info]   (min, avg, max) = (76.521, 76.599, 76.746), stdev = 0.092
[info]   CI (99.9%): [76.245, 76.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88.039 ±(99.9%) 0.337 B/op [Average]
[info]   (min, avg, max) = (88.000, 88.039, 88.196), stdev = 0.087
[info]   CI (99.9%): [87.703, 88.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16061.050 ops/s
[info] # Warmup Iteration   2: 69826.926 ops/s
[info] # Warmup Iteration   3: 74356.876 ops/s
[info] # Warmup Iteration   4: 75581.342 ops/s
[info] # Warmup Iteration   5: 75543.114 ops/s
[info] Iteration   1: 76129.767 ops/s
[info]                  ·gc.alloc.rate:                   3332.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              68892.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3385.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69991.825 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 76075.951 ops/s
[info]                  ·gc.alloc.rate:                   3372.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              69751.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70173.339 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 75157.800 ops/s
[info]                  ·gc.alloc.rate:                   3331.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              69774.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71129.856 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 75906.770 ops/s
[info]                  ·gc.alloc.rate:                   3338.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              69211.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56408.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 75834.649 ops/s
[info]                  ·gc.alloc.rate:                   3361.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70603.684 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   75820.987 ±(99.9%) 1500.903 ops/s [Average]
[info]   (min, avg, max) = (75157.800, 75820.987, 76129.767), stdev = 389.780
[info]   CI (99.9%): [74320.084, 77321.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3347.283 ±(99.9%) 72.135 MB/sec [Average]
[info]   (min, avg, max) = (3331.428, 3347.283, 3372.407), stdev = 18.733
[info]   CI (99.9%): [3275.148, 3419.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69483.054 ±(99.9%) 1577.204 B/op [Average]
[info]   (min, avg, max) = (68892.571, 69483.054, 69784.997), stdev = 409.595
[info]   CI (99.9%): [67905.851, 71060.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.951 ±(99.9%) 1.400 B/op [Average]
[info]   (min, avg, max) = (0.432, 0.951, 1.308), stdev = 0.364
[info]   CI (99.9%): [≈ 0, 2.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3259.314 ±(99.9%) 1159.503 MB/sec [Average]
[info]   (min, avg, max) = (2720.755, 3259.314, 3401.422), stdev = 301.119
[info]   CI (99.9%): [2099.811, 4418.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67661.346 ±(99.9%) 24282.455 B/op [Average]
[info]   (min, avg, max) = (56408.024, 67661.346, 71129.856), stdev = 6306.077
[info]   CI (99.9%): [43378.890, 91943.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 629488.487 ops/s
[info] # Warmup Iteration   2: 1485188.734 ops/s
[info] # Warmup Iteration   3: 1502161.553 ops/s
[info] # Warmup Iteration   4: 1499495.865 ops/s
[info] # Warmup Iteration   5: 1507374.189 ops/s
[info] Iteration   1: 1502925.074 ops/s
[info]                  ·gc.alloc.rate:                   812.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              850.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 705.951 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1480549.043 ops/s
[info]                  ·gc.alloc.rate:                   803.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              854.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 716.596 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1480588.221 ops/s
[info]                  ·gc.alloc.rate:                   797.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 716.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1480256.241 ops/s
[info]                  ·gc.alloc.rate:                   797.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 716.776 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1450941.011 ops/s
[info]                  ·gc.alloc.rate:                   776.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              842.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 731.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1479051.918 ±(99.9%) 71164.095 ops/s [Average]
[info]   (min, avg, max) = (1450941.011, 1479051.918, 1502925.074), stdev = 18481.090
[info]   CI (99.9%): [1407887.823, 1550216.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   797.619 ±(99.9%) 51.289 MB/sec [Average]
[info]   (min, avg, max) = (776.354, 797.619, 812.544), stdev = 13.320
[info]   CI (99.9%): [746.329, 848.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   848.731 ±(99.9%) 16.665 B/op [Average]
[info]   (min, avg, max) = (842.255, 848.731, 854.044), stdev = 4.328
[info]   CI (99.9%): [832.066, 865.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.004 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.122 ±(99.9%) 0.276 MB/sec [Average]
[info]   (min, avg, max) = (674.044, 674.122, 674.205), stdev = 0.072
[info]   CI (99.9%): [673.846, 674.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   717.439 ±(99.9%) 34.700 B/op [Average]
[info]   (min, avg, max) = (705.951, 717.439, 731.260), stdev = 9.012
[info]   CI (99.9%): [682.739, 752.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676687.871 ops/s
[info] # Warmup Iteration   2: 880095.581 ops/s
[info] # Warmup Iteration   3: 950363.522 ops/s
[info] # Warmup Iteration   4: 918558.853 ops/s
[info] # Warmup Iteration   5: 930187.657 ops/s
[info] Iteration   1: 927386.703 ops/s
[info]                  ·gc.alloc.rate:                   267.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              454.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 868.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 912097.380 ops/s
[info]                  ·gc.alloc.rate:      255.014 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 954542.609 ops/s
[info]                  ·gc.alloc.rate:                   281.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              463.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 843.526 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 957573.850 ops/s
[info]                  ·gc.alloc.rate:      267.687 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.040 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 958976.380 ops/s
[info]                  ·gc.alloc.rate:                   280.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              460.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1105.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   942115.384 ±(99.9%) 81587.046 ops/s [Average]
[info]   (min, avg, max) = (912097.380, 942115.384, 958976.380), stdev = 21187.897
[info]   CI (99.9%): [860528.338, 1023702.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   270.443 ±(99.9%) 41.591 MB/sec [Average]
[info]   (min, avg, max) = (255.014, 270.443, 281.061), stdev = 10.801
[info]   CI (99.9%): [228.852, 312.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   451.738 ±(99.9%) 42.935 B/op [Average]
[info]   (min, avg, max) = (440.000, 451.738, 463.476), stdev = 11.150
[info]   CI (99.9%): [408.803, 494.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.011 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.290 ±(99.9%) 1219.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.290, 673.381), stdev = 316.697
[info]   CI (99.9%): [≈ 0, 1558.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   563.396 ±(99.9%) 2019.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 563.396, 1105.248), stdev = 524.361
[info]   CI (99.9%): [≈ 0, 2582.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:22:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 712093.403 ops/s
[info] # Warmup Iteration   2: 965820.168 ops/s
[info] # Warmup Iteration   3: 986118.534 ops/s
[info] # Warmup Iteration   4: 982441.490 ops/s
[info] # Warmup Iteration   5: 985883.665 ops/s
[info] Iteration   1: 986514.387 ops/s
[info]                  ·gc.alloc.rate:      10.028 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 984527.572 ops/s
[info]                  ·gc.alloc.rate:      10.027 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 984686.950 ops/s
[info]                  ·gc.alloc.rate:      10.009 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 986091.110 ops/s
[info]                  ·gc.alloc.rate:      10.024 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 986237.843 ops/s
[info]                  ·gc.alloc.rate:      10.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   985611.572 ±(99.9%) 3585.044 ops/s [Average]
[info]   (min, avg, max) = (984527.572, 985611.572, 986514.387), stdev = 931.025
[info]   CI (99.9%): [982026.528, 989196.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10.023 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (10.009, 10.023, 10.028), stdev = 0.008
[info]   CI (99.9%): [9.992, 10.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.006 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.006, 16.027), stdev = 0.012
[info]   CI (99.9%): [15.960, 16.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10340.094 ops/s
[info] # Warmup Iteration   2: 49838.518 ops/s
[info] # Warmup Iteration   3: 48550.442 ops/s
[info] # Warmup Iteration   4: 50843.547 ops/s
[info] # Warmup Iteration   5: 51087.904 ops/s
[info] Iteration   1: 50933.896 ops/s
[info]                  ·gc.alloc.rate:                   2114.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              65330.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62574.517 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 50977.667 ops/s
[info]                  ·gc.alloc.rate:                   2103.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              64941.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62602.780 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 50616.006 ops/s
[info]                  ·gc.alloc.rate:                   2088.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              64939.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63119.193 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 50286.289 ops/s
[info]                  ·gc.alloc.rate:                   2088.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              65376.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63598.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 50311.859 ops/s
[info]                  ·gc.alloc.rate:                   2103.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              65804.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63646.352 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   50625.143 ±(99.9%) 1266.409 ops/s [Average]
[info]   (min, avg, max) = (50286.289, 50625.143, 50977.667), stdev = 328.882
[info]   CI (99.9%): [49358.734, 51891.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2099.691 ±(99.9%) 43.350 MB/sec [Average]
[info]   (min, avg, max) = (2088.214, 2099.691, 2114.678), stdev = 11.258
[info]   CI (99.9%): [2056.341, 2143.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   65278.731 ±(99.9%) 1385.106 B/op [Average]
[info]   (min, avg, max) = (64939.661, 65278.731, 65804.733), stdev = 359.708
[info]   CI (99.9%): [63893.625, 66663.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.421 ±(99.9%) 3.690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.421, 2.589), stdev = 0.958
[info]   CI (99.9%): [≈ 0, 5.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2029.826 ±(99.9%) 13.269 MB/sec [Average]
[info]   (min, avg, max) = (2025.462, 2029.826, 2034.347), stdev = 3.446
[info]   CI (99.9%): [2016.557, 2043.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   63108.247 ±(99.9%) 1991.832 B/op [Average]
[info]   (min, avg, max) = (62574.517, 63108.247, 63646.352), stdev = 517.272
[info]   CI (99.9%): [61116.415, 65100.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182914.889 ops/s
[info] # Warmup Iteration   2: 243213.281 ops/s
[info] # Warmup Iteration   3: 248076.791 ops/s
[info] # Warmup Iteration   4: 251477.267 ops/s
[info] # Warmup Iteration   5: 253387.915 ops/s
[info] Iteration   1: 253638.036 ops/s
[info]                  ·gc.alloc.rate:                   1009.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              6263.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4170.661 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 251443.980 ops/s
[info]                  ·gc.alloc.rate:                   1029.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              6442.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8414.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 253124.270 ops/s
[info]                  ·gc.alloc.rate:                   1007.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              6264.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4179.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 253360.503 ops/s
[info]                  ·gc.alloc.rate:                   1022.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              6352.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8354.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 250548.030 ops/s
[info]                  ·gc.alloc.rate:                   1007.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              6327.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4226.290 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   252422.964 ±(99.9%) 5209.409 ops/s [Average]
[info]   (min, avg, max) = (250548.030, 252422.964, 253638.036), stdev = 1352.867
[info]   CI (99.9%): [247213.555, 257632.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1015.090 ±(99.9%) 38.816 MB/sec [Average]
[info]   (min, avg, max) = (1007.222, 1015.090, 1029.086), stdev = 10.080
[info]   CI (99.9%): [976.274, 1053.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6330.347 ±(99.9%) 284.883 B/op [Average]
[info]   (min, avg, max) = (6263.891, 6330.347, 6442.886), stdev = 73.983
[info]   CI (99.9%): [6045.463, 6615.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.078 ±(99.9%) 0.668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.388), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   941.078 ±(99.9%) 1417.499 MB/sec [Average]
[info]   (min, avg, max) = (671.983, 941.078, 1344.730), stdev = 368.120
[info]   CI (99.9%): [≈ 0, 2358.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5868.913 ±(99.9%) 8842.521 B/op [Average]
[info]   (min, avg, max) = (4170.661, 5868.913, 8414.092), stdev = 2296.375
[info]   CI (99.9%): [≈ 0, 14711.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:21:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4940.338 ops/s
[info] # Warmup Iteration   2: 35537.046 ops/s
[info] # Warmup Iteration   3: 38328.316 ops/s
[info] # Warmup Iteration   4: 38294.838 ops/s
[info] # Warmup Iteration   5: 38678.792 ops/s
[info] Iteration   1: 38814.952 ops/s
[info]                  ·gc.alloc.rate:                   1923.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              78013.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82112.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 38906.870 ops/s
[info]                  ·gc.alloc.rate:                   1924.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              77870.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82023.574 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 39033.672 ops/s
[info]                  ·gc.alloc.rate:                   1917.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              77318.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54545.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39048.271 ops/s
[info]                  ·gc.alloc.rate:                   1945.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              78415.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81888.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 38965.034 ops/s
[info]                  ·gc.alloc.rate:                   1941.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              78425.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82145.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   38953.760 ±(99.9%) 369.901 ops/s [Average]
[info]   (min, avg, max) = (38814.952, 38953.760, 39048.271), stdev = 96.062
[info]   CI (99.9%): [38583.859, 39323.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1930.780 ±(99.9%) 46.962 MB/sec [Average]
[info]   (min, avg, max) = (1917.976, 1930.780, 1945.720), stdev = 12.196
[info]   CI (99.9%): [1883.819, 1977.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78008.543 ±(99.9%) 1759.067 B/op [Average]
[info]   (min, avg, max) = (77318.166, 78008.543, 78425.370), stdev = 456.824
[info]   CI (99.9%): [76249.476, 79767.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.681 ±(99.9%) 3.232 B/op [Average]
[info]   (min, avg, max) = (0.839, 1.681, 2.522), stdev = 0.839
[info]   CI (99.9%): [≈ 0, 4.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1894.200 ±(99.9%) 1164.926 MB/sec [Average]
[info]   (min, avg, max) = (1353.061, 1894.200, 2033.899), stdev = 302.528
[info]   CI (99.9%): [729.274, 3059.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   76542.995 ±(99.9%) 47353.733 B/op [Average]
[info]   (min, avg, max) = (54545.074, 76542.995, 82145.763), stdev = 12297.614
[info]   CI (99.9%): [29189.262, 123896.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30995.552 ops/s
[info] # Warmup Iteration   2: 97875.031 ops/s
[info] # Warmup Iteration   3: 100192.414 ops/s
[info] # Warmup Iteration   4: 100775.783 ops/s
[info] # Warmup Iteration   5: 101284.154 ops/s
[info] Iteration   1: 101518.052 ops/s
[info]                  ·gc.alloc.rate:                   958.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              14854.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20913.273 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 101361.641 ops/s
[info]                  ·gc.alloc.rate:                   941.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              14620.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10467.556 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 100371.047 ops/s
[info]                  ·gc.alloc.rate:                   964.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              15120.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21141.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 101253.521 ops/s
[info]                  ·gc.alloc.rate:                   944.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              14688.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10483.689 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 101255.525 ops/s
[info]                  ·gc.alloc.rate:                   940.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              14616.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10483.482 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   101151.957 ±(99.9%) 1731.566 ops/s [Average]
[info]   (min, avg, max) = (100371.047, 101151.957, 101518.052), stdev = 449.682
[info]   CI (99.9%): [99420.392, 102883.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   949.741 ±(99.9%) 41.151 MB/sec [Average]
[info]   (min, avg, max) = (940.154, 949.741, 964.018), stdev = 10.687
[info]   CI (99.9%): [908.591, 990.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14780.167 ±(99.9%) 820.486 B/op [Average]
[info]   (min, avg, max) = (14616.646, 14780.167, 15120.191), stdev = 213.078
[info]   CI (99.9%): [13959.682, 15600.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.390 ±(99.9%) 2.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.390, 1.306), stdev = 0.583
[info]   CI (99.9%): [≈ 0, 2.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   943.924 ±(99.9%) 1421.887 MB/sec [Average]
[info]   (min, avg, max) = (674.083, 943.924, 1348.919), stdev = 369.260
[info]   CI (99.9%): [≈ 0, 2365.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14697.956 ±(99.9%) 22251.523 B/op [Average]
[info]   (min, avg, max) = (10467.556, 14697.956, 21141.782), stdev = 5778.650
[info]   CI (99.9%): [≈ 0, 36949.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214981.088 ops/s
[info] # Warmup Iteration   2: 296939.352 ops/s
[info] # Warmup Iteration   3: 317538.039 ops/s
[info] # Warmup Iteration   4: 319000.649 ops/s
[info] # Warmup Iteration   5: 319914.441 ops/s
[info] Iteration   1: 318738.681 ops/s
[info]                  ·gc.alloc.rate:      429.246 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 315047.669 ops/s
[info]                  ·gc.alloc.rate:                   450.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              2248.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3364.383 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 318604.660 ops/s
[info]                  ·gc.alloc.rate:                   450.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3326.859 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 321318.232 ops/s
[info]                  ·gc.alloc.rate:      432.992 MB/sec
[info]                  ·gc.alloc.rate.norm: 2121.182 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 321501.465 ops/s
[info]                  ·gc.alloc.rate:                   455.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              2228.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3293.543 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   319042.142 ±(99.9%) 10090.626 ops/s [Average]
[info]   (min, avg, max) = (315047.669, 319042.142, 321501.465), stdev = 2620.504
[info]   CI (99.9%): [308951.516, 329132.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   443.555 ±(99.9%) 44.723 MB/sec [Average]
[info]   (min, avg, max) = (429.246, 443.555, 455.218), stdev = 11.614
[info]   CI (99.9%): [398.832, 488.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2188.532 ±(99.9%) 241.333 B/op [Average]
[info]   (min, avg, max) = (2120.002, 2188.532, 2248.350), stdev = 62.674
[info]   CI (99.9%): [1947.199, 2429.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.612 ±(99.9%) 5.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 3.049), stdev = 1.362
[info]   CI (99.9%): [≈ 0, 5.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.023 ±(99.9%) 25.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.023, 15.065), stdev = 6.732
[info]   CI (99.9%): [≈ 0, 28.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   403.916 ±(99.9%) 1419.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403.916, 673.482), stdev = 368.723
[info]   CI (99.9%): [≈ 0, 1823.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1996.957 ±(99.9%) 7020.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1996.957, 3364.383), stdev = 1823.136
[info]   CI (99.9%): [≈ 0, 9017.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230940.527 ops/s
[info] # Warmup Iteration   2: 325856.478 ops/s
[info] # Warmup Iteration   3: 325059.206 ops/s
[info] # Warmup Iteration   4: 342249.516 ops/s
[info] # Warmup Iteration   5: 342837.728 ops/s
[info] Iteration   1: 342630.547 ops/s
[info]                  ·gc.alloc.rate:      3.484 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 341942.124 ops/s
[info]                  ·gc.alloc.rate:      3.476 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 342774.173 ops/s
[info]                  ·gc.alloc.rate:      3.485 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 342615.913 ops/s
[info]                  ·gc.alloc.rate:      3.564 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.373 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 341623.329 ops/s
[info]                  ·gc.alloc.rate:      5.017 MB/sec
[info]                  ·gc.alloc.rate.norm: 23.118 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   342317.217 ±(99.9%) 1942.934 ops/s [Average]
[info]   (min, avg, max) = (341623.329, 342317.217, 342774.173), stdev = 504.574
[info]   CI (99.9%): [340374.283, 344260.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.805 ±(99.9%) 2.613 MB/sec [Average]
[info]   (min, avg, max) = (3.476, 3.805, 5.017), stdev = 0.679
[info]   CI (99.9%): [1.192, 6.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17.499 ±(99.9%) 12.111 B/op [Average]
[info]   (min, avg, max) = (16.001, 17.499, 23.118), stdev = 3.145
[info]   CI (99.9%): [5.388, 29.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:20:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15525.512 ops/s
[info] # Warmup Iteration   2: 51404.201 ops/s
[info] # Warmup Iteration   3: 49961.107 ops/s
[info] # Warmup Iteration   4: 52413.846 ops/s
[info] # Warmup Iteration   5: 51448.181 ops/s
[info] Iteration   1: 52213.781 ops/s
[info]                  ·gc.alloc.rate:                   1222.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              36861.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40680.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 52310.157 ops/s
[info]                  ·gc.alloc.rate:                   1232.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              37069.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40606.590 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 52227.999 ops/s
[info]                  ·gc.alloc.rate:                   1228.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              37013.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40620.494 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 52046.684 ops/s
[info]                  ·gc.alloc.rate:                   1201.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              36349.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20415.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 52148.584 ops/s
[info]                  ·gc.alloc.rate:                   1224.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              36964.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40772.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   52189.441 ±(99.9%) 378.757 ops/s [Average]
[info]   (min, avg, max) = (52046.684, 52189.441, 52310.157), stdev = 98.362
[info]   CI (99.9%): [51810.684, 52568.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1222.019 ±(99.9%) 45.845 MB/sec [Average]
[info]   (min, avg, max) = (1201.832, 1222.019, 1232.431), stdev = 11.906
[info]   CI (99.9%): [1176.174, 1267.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36851.634 ±(99.9%) 1120.990 B/op [Average]
[info]   (min, avg, max) = (36349.223, 36851.634, 37069.779), stdev = 291.118
[info]   CI (99.9%): [35730.644, 37972.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.752 ±(99.9%) 2.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.752, 1.255), stdev = 0.524
[info]   CI (99.9%): [≈ 0, 2.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1214.679 ±(99.9%) 1161.713 MB/sec [Average]
[info]   (min, avg, max) = (674.996, 1214.679, 1350.740), stdev = 301.693
[info]   CI (99.9%): [52.966, 2376.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36618.971 ±(99.9%) 34880.821 B/op [Average]
[info]   (min, avg, max) = (20415.164, 36618.971, 40772.148), stdev = 9058.438
[info]   CI (99.9%): [1738.151, 71499.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26501.832 ops/s
[info] # Warmup Iteration   2: 71399.104 ops/s
[info] # Warmup Iteration   3: 69606.363 ops/s
[info] # Warmup Iteration   4: 71593.628 ops/s
[info] # Warmup Iteration   5: 70452.952 ops/s
[info] Iteration   1: 70274.122 ops/s
[info]                  ·gc.alloc.rate:                   1447.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              32422.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30180.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 71352.646 ops/s
[info]                  ·gc.alloc.rate:                   1460.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              32220.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29753.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 70910.072 ops/s
[info]                  ·gc.alloc.rate:                   1461.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              32429.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29969.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 71497.796 ops/s
[info]                  ·gc.alloc.rate:                   1471.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              32394.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29752.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 70237.109 ops/s
[info]                  ·gc.alloc.rate:                   1457.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              32672.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30314.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   70854.349 ±(99.9%) 2264.262 ops/s [Average]
[info]   (min, avg, max) = (70237.109, 70854.349, 71497.796), stdev = 588.022
[info]   CI (99.9%): [68590.087, 73118.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1459.864 ±(99.9%) 32.546 MB/sec [Average]
[info]   (min, avg, max) = (1447.911, 1459.864, 1471.546), stdev = 8.452
[info]   CI (99.9%): [1427.319, 1492.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32427.794 ±(99.9%) 620.953 B/op [Average]
[info]   (min, avg, max) = (32220.641, 32427.794, 32672.655), stdev = 161.259
[info]   CI (99.9%): [31806.841, 33048.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.554 ±(99.9%) 2.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.554, 1.375), stdev = 0.600
[info]   CI (99.9%): [≈ 0, 2.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1350.260 ±(99.9%) 7.721 MB/sec [Average]
[info]   (min, avg, max) = (1347.809, 1350.260, 1352.718), stdev = 2.005
[info]   CI (99.9%): [1342.539, 1357.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   29994.099 ±(99.9%) 970.627 B/op [Average]
[info]   (min, avg, max) = (29752.765, 29994.099, 30314.551), stdev = 252.069
[info]   CI (99.9%): [29023.472, 30964.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40835.508 ops/s
[info] # Warmup Iteration   2: 120496.896 ops/s
[info] # Warmup Iteration   3: 118592.067 ops/s
[info] # Warmup Iteration   4: 123528.715 ops/s
[info] # Warmup Iteration   5: 122061.414 ops/s
[info] Iteration   1: 121841.768 ops/s
[info]                  ·gc.alloc.rate:                   614.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              7938.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8703.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 118470.485 ops/s
[info]                  ·gc.alloc.rate:                   603.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              8011.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8955.910 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 121438.694 ops/s
[info]                  ·gc.alloc.rate:                   611.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              7930.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8737.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 122017.315 ops/s
[info]                  ·gc.alloc.rate:                   609.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              7867.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8686.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 121995.844 ops/s
[info]                  ·gc.alloc.rate:                   616.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              7949.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8688.646 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   121152.821 ±(99.9%) 5842.753 ops/s [Average]
[info]   (min, avg, max) = (118470.485, 121152.821, 122017.315), stdev = 1517.344
[info]   CI (99.9%): [115310.068, 126995.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   611.113 ±(99.9%) 19.485 MB/sec [Average]
[info]   (min, avg, max) = (603.134, 611.113, 616.127), stdev = 5.060
[info]   CI (99.9%): [591.628, 630.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7939.577 ±(99.9%) 198.704 B/op [Average]
[info]   (min, avg, max) = (7867.209, 7939.577, 8011.847), stdev = 51.603
[info]   CI (99.9%): [7740.872, 8138.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.289 ±(99.9%) 2.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.289, 1.343), stdev = 0.589
[info]   CI (99.9%): [≈ 0, 2.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.743 ±(99.9%) 29.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.743, 17.349), stdev = 7.612
[info]   CI (99.9%): [≈ 0, 33.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.782 ±(99.9%) 1.574 MB/sec [Average]
[info]   (min, avg, max) = (673.396, 673.782, 674.219), stdev = 0.409
[info]   CI (99.9%): [672.208, 675.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8754.467 ±(99.9%) 440.530 B/op [Average]
[info]   (min, avg, max) = (8686.794, 8754.467, 8955.910), stdev = 114.404
[info]   CI (99.9%): [8313.936, 9194.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154318.404 ops/s
[info] # Warmup Iteration   2: 246124.651 ops/s
[info] # Warmup Iteration   3: 251068.229 ops/s
[info] # Warmup Iteration   4: 251723.693 ops/s
[info] # Warmup Iteration   5: 250755.634 ops/s
[info] Iteration   1: 252559.940 ops/s
[info]                  ·gc.alloc.rate:                   1067.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              6651.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8366.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 251861.874 ops/s
[info]                  ·gc.alloc.rate:                   1057.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              6610.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4200.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 250775.189 ops/s
[info]                  ·gc.alloc.rate:                   1065.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              6688.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8438.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 252650.213 ops/s
[info]                  ·gc.alloc.rate:                   1054.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              6570.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4188.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 251992.990 ops/s
[info]                  ·gc.alloc.rate:                   1066.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              6659.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8403.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   251968.041 ±(99.9%) 2888.300 ops/s [Average]
[info]   (min, avg, max) = (250775.189, 251968.041, 252650.213), stdev = 750.082
[info]   CI (99.9%): [249079.742, 254856.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1062.397 ±(99.9%) 22.023 MB/sec [Average]
[info]   (min, avg, max) = (1054.860, 1062.397, 1067.654), stdev = 5.719
[info]   CI (99.9%): [1040.374, 1084.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6636.044 ±(99.9%) 177.337 B/op [Average]
[info]   (min, avg, max) = (6570.417, 6636.044, 6688.085), stdev = 46.054
[info]   CI (99.9%): [6458.706, 6813.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.130 ±(99.9%) 0.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.261), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1075.464 ±(99.9%) 1417.200 MB/sec [Average]
[info]   (min, avg, max) = (672.061, 1075.464, 1345.437), stdev = 368.042
[info]   CI (99.9%): [≈ 0, 2492.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6719.554 ±(99.9%) 8876.290 B/op [Average]
[info]   (min, avg, max) = (4188.993, 6719.554, 8438.558), stdev = 2305.144
[info]   CI (99.9%): [≈ 0, 15595.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1420.223 ops/s
[info] # Warmup Iteration   2: 24851.007 ops/s
[info] # Warmup Iteration   3: 28634.329 ops/s
[info] # Warmup Iteration   4: 28683.601 ops/s
[info] # Warmup Iteration   5: 27757.832 ops/s
[info] Iteration   1: 28793.584 ops/s
[info]                  ·gc.alloc.rate:                   1448.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              79205.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73686.474 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28684.868 ops/s
[info]                  ·gc.alloc.rate:                   1437.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              78883.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74008.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 28849.089 ops/s
[info]                  ·gc.alloc.rate:                   1437.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              78453.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73621.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28197.418 ops/s
[info]                  ·gc.alloc.rate:                   1405.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              78441.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75402.884 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28882.032 ops/s
[info]                  ·gc.alloc.rate:                   1437.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              78349.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73689.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   28681.398 ±(99.9%) 1080.942 ops/s [Average]
[info]   (min, avg, max) = (28197.418, 28681.398, 28882.032), stdev = 280.717
[info]   CI (99.9%): [27600.457, 29762.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1433.432 ±(99.9%) 63.527 MB/sec [Average]
[info]   (min, avg, max) = (1405.194, 1433.432, 1448.793), stdev = 16.498
[info]   CI (99.9%): [1369.905, 1496.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78666.829 ±(99.9%) 1407.141 B/op [Average]
[info]   (min, avg, max) = (78349.777, 78666.829, 79205.717), stdev = 365.430
[info]   CI (99.9%): [77259.688, 80073.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.149 ±(99.9%) 4.436 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.149, 2.324), stdev = 1.152
[info]   CI (99.9%): [≈ 0, 5.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1349.770 ±(99.9%) 6.599 MB/sec [Average]
[info]   (min, avg, max) = (1347.838, 1349.770, 1352.165), stdev = 1.714
[info]   CI (99.9%): [1343.171, 1356.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   74081.742 ±(99.9%) 2902.442 B/op [Average]
[info]   (min, avg, max) = (73621.256, 74081.742, 75402.884), stdev = 753.755
[info]   CI (99.9%): [71179.301, 76984.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54901.589 ops/s
[info] # Warmup Iteration   2: 139386.642 ops/s
[info] # Warmup Iteration   3: 143219.226 ops/s
[info] # Warmup Iteration   4: 143831.927 ops/s
[info] # Warmup Iteration   5: 144020.537 ops/s
[info] Iteration   1: 138423.431 ops/s
[info]                  ·gc.alloc.rate:                   725.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              8242.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7665.173 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 140521.300 ops/s
[info]                  ·gc.alloc.rate:                   755.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              8457.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15101.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 144845.518 ops/s
[info]                  ·gc.alloc.rate:                   766.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7325.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 144906.459 ops/s
[info]                  ·gc.alloc.rate:                   759.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              8252.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7322.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 145006.770 ops/s
[info]                  ·gc.alloc.rate:                   768.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              8339.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7317.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   142740.696 ±(99.9%) 11840.400 ops/s [Average]
[info]   (min, avg, max) = (138423.431, 142740.696, 145006.770), stdev = 3074.914
[info]   CI (99.9%): [130900.295, 154581.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   754.934 ±(99.9%) 67.378 MB/sec [Average]
[info]   (min, avg, max) = (725.077, 754.934, 768.207), stdev = 17.498
[info]   CI (99.9%): [687.556, 822.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8324.151 ±(99.9%) 333.147 B/op [Average]
[info]   (min, avg, max) = (8242.333, 8324.151, 8457.733), stdev = 86.517
[info]   CI (99.9%): [7991.004, 8657.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.277 ±(99.9%) 1.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.277, 0.678), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   808.974 ±(99.9%) 1160.943 MB/sec [Average]
[info]   (min, avg, max) = (674.033, 808.974, 1348.302), stdev = 301.493
[info]   CI (99.9%): [≈ 0, 1969.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8946.148 ±(99.9%) 13261.299 B/op [Average]
[info]   (min, avg, max) = (7317.126, 8946.148, 15101.058), stdev = 3443.917
[info]   CI (99.9%): [≈ 0, 22207.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294156.640 ops/s
[info] # Warmup Iteration   2: 408994.867 ops/s
[info] # Warmup Iteration   3: 440026.450 ops/s
[info] # Warmup Iteration   4: 441028.121 ops/s
[info] # Warmup Iteration   5: 415534.469 ops/s
[info] Iteration   1: 442076.112 ops/s
[info]                  ·gc.alloc.rate:                   1336.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              4759.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4781.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 443906.423 ops/s
[info]                  ·gc.alloc.rate:                   1333.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              4726.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4763.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 440608.580 ops/s
[info]                  ·gc.alloc.rate:                   1341.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              4793.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4801.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 442168.161 ops/s
[info]                  ·gc.alloc.rate:                   1322.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              4707.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4791.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 441156.055 ops/s
[info]                  ·gc.alloc.rate:                   1331.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              4751.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4807.507 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   441983.066 ±(99.9%) 4838.414 ops/s [Average]
[info]   (min, avg, max) = (440608.580, 441983.066, 443906.423), stdev = 1256.521
[info]   CI (99.9%): [437144.652, 446821.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1333.127 ±(99.9%) 27.601 MB/sec [Average]
[info]   (min, avg, max) = (1322.313, 1333.127, 1341.780), stdev = 7.168
[info]   CI (99.9%): [1305.526, 1360.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4747.875 ±(99.9%) 127.404 B/op [Average]
[info]   (min, avg, max) = (4707.030, 4747.875, 4793.749), stdev = 33.086
[info]   CI (99.9%): [4620.472, 4875.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.207 ±(99.9%) 0.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.207, 0.445), stdev = 0.199
[info]   CI (99.9%): [≈ 0, 0.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1344.730 ±(99.9%) 7.507 MB/sec [Average]
[info]   (min, avg, max) = (1342.490, 1344.730, 1347.337), stdev = 1.949
[info]   CI (99.9%): [1337.223, 1352.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4789.184 ±(99.9%) 67.028 B/op [Average]
[info]   (min, avg, max) = (4763.796, 4789.184, 4807.507), stdev = 17.407
[info]   CI (99.9%): [4722.155, 4856.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 323765.657 ops/s
[info] # Warmup Iteration   2: 465727.817 ops/s
[info] # Warmup Iteration   3: 468439.967 ops/s
[info] # Warmup Iteration   4: 472042.923 ops/s
[info] # Warmup Iteration   5: 481210.024 ops/s
[info] Iteration   1: 482115.586 ops/s
[info]                  ·gc.alloc.rate:                   907.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              2962.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2196.326 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 475908.731 ops/s
[info]                  ·gc.alloc.rate:                   890.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              2945.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2222.820 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 474059.708 ops/s
[info]                  ·gc.alloc.rate:                                  894.989 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2971.259 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.255 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.847 B/op
[info]                  ·gc.churn.Compressed_Class_Space:                0.011 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm:           0.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    0.553 B/op
[info]                  ·gc.churn.PS_Old_Gen:                            0.037 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:                       0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     1323.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                4392.507 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Iteration   4: 481764.671 ops/s
[info]                  ·gc.alloc.rate:                   905.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              2957.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2195.809 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 482139.193 ops/s
[info]                  ·gc.alloc.rate:                   903.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              2948.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2194.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   479197.578 ±(99.9%) 15033.800 ops/s [Average]
[info]   (min, avg, max) = (474059.708, 479197.578, 482139.193), stdev = 3904.230
[info]   CI (99.9%): [464163.778, 494231.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   900.219 ±(99.9%) 27.427 MB/sec [Average]
[info]   (min, avg, max) = (890.573, 900.219, 907.271), stdev = 7.123
[info]   CI (99.9%): [872.792, 927.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2957.031 ±(99.9%) 40.031 B/op [Average]
[info]   (min, avg, max) = (2945.755, 2957.031, 2971.259), stdev = 10.396
[info]   CI (99.9%): [2917.000, 2997.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.051 ±(99.9%) 0.439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.255), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.169 ±(99.9%) 1.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.169, 0.847), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.Compressed_Class_Space":
[info]   0.002 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.Compressed_Class_Space.norm":
[info]   0.008 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.167), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.165 ±(99.9%) 0.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.165, 0.553), stdev = 0.222
[info]   CI (99.9%): [≈ 0, 1.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Old_Gen":
[info]   0.007 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Old_Gen.norm":
[info]   0.024 ±(99.9%) 0.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.122), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   802.376 ±(99.9%) 1120.879 MB/sec [Average]
[info]   (min, avg, max) = (672.012, 802.376, 1323.091), stdev = 291.089
[info]   CI (99.9%): [≈ 0, 1923.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2640.309 ±(99.9%) 3772.017 B/op [Average]
[info]   (min, avg, max) = (2194.083, 2640.309, 4392.507), stdev = 979.581
[info]   CI (99.9%): [≈ 0, 6412.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19204.208 ops/s
[info] # Warmup Iteration   2: 64926.422 ops/s
[info] # Warmup Iteration   3: 67074.226 ops/s
[info] # Warmup Iteration   4: 67691.634 ops/s
[info] # Warmup Iteration   5: 67701.540 ops/s
[info] Iteration   1: 67197.108 ops/s
[info]                  ·gc.alloc.rate:                   1183.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              27722.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31578.821 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 67796.228 ops/s
[info]                  ·gc.alloc.rate:                   1173.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              27251.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15648.773 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 67751.964 ops/s
[info]                  ·gc.alloc.rate:                   1195.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              27766.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31334.726 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 67265.358 ops/s
[info]                  ·gc.alloc.rate:                   1185.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              27742.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31577.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 67694.641 ops/s
[info]                  ·gc.alloc.rate:                   1176.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              27355.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15704.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   67541.060 ±(99.9%) 1101.804 ops/s [Average]
[info]   (min, avg, max) = (67197.108, 67541.060, 67796.228), stdev = 286.135
[info]   CI (99.9%): [66439.256, 68642.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1182.887 ±(99.9%) 32.816 MB/sec [Average]
[info]   (min, avg, max) = (1173.728, 1182.887, 1195.425), stdev = 8.522
[info]   CI (99.9%): [1150.071, 1215.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   27567.495 ±(99.9%) 941.575 B/op [Average]
[info]   (min, avg, max) = (27251.130, 27567.495, 27766.402), stdev = 244.524
[info]   CI (99.9%): [26625.920, 28509.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.195 ±(99.9%) 1.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.195, 0.488), stdev = 0.267
[info]   CI (99.9%): [≈ 0, 1.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1079.156 ±(99.9%) 1421.823 MB/sec [Average]
[info]   (min, avg, max) = (674.005, 1079.156, 1349.427), stdev = 369.243
[info]   CI (99.9%): [≈ 0, 2500.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   25168.694 ±(99.9%) 33369.049 B/op [Average]
[info]   (min, avg, max) = (15648.773, 25168.694, 31578.821), stdev = 8665.836
[info]   CI (99.9%): [≈ 0, 58537.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51650.487 ops/s
[info] # Warmup Iteration   2: 91983.709 ops/s
[info] # Warmup Iteration   3: 95215.905 ops/s
[info] # Warmup Iteration   4: 96843.003 ops/s
[info] # Warmup Iteration   5: 96968.390 ops/s
[info] Iteration   1: 97199.473 ops/s
[info]                  ·gc.alloc.rate:                   1497.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              24247.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21787.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 87690.522 ops/s
[info]                  ·gc.alloc.rate:                                  1361.034 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24430.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.328 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.883 B/op
[info]                  ·gc.churn.Compressed_Class_Space:                0.006 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm:           0.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    2.989 B/op
[info]                  ·gc.churn.PS_Old_Gen:                            0.020 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:                       0.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     1359.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                24398.452 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        72.000 ms
[info] Iteration   3: 96865.972 ops/s
[info]                  ·gc.alloc.rate:                   1485.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              24142.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21895.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 97025.896 ops/s
[info]                  ·gc.alloc.rate:                   1488.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              24129.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21878.646 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 96911.609 ops/s
[info]                  ·gc.alloc.rate:                   1498.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              24344.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21927.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   95138.694 ±(99.9%) 16040.408 ops/s [Average]
[info]   (min, avg, max) = (87690.522, 95138.694, 97199.473), stdev = 4165.643
[info]   CI (99.9%): [79098.287, 111179.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1466.148 ±(99.9%) 227.302 MB/sec [Average]
[info]   (min, avg, max) = (1361.034, 1466.148, 1498.739), stdev = 59.030
[info]   CI (99.9%): [1238.846, 1693.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24258.710 ±(99.9%) 498.396 B/op [Average]
[info]   (min, avg, max) = (24129.659, 24258.710, 24430.026), stdev = 129.432
[info]   CI (99.9%): [23760.314, 24757.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.066 ±(99.9%) 0.564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.328), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.177 ±(99.9%) 10.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.177, 5.883), stdev = 2.631
[info]   CI (99.9%): [≈ 0, 11.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.Compressed_Class_Space":
[info]   0.001 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm":
[info]   0.023 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.115), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.167), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.071 ±(99.9%) 4.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.071, 2.989), stdev = 1.134
[info]   CI (99.9%): [≈ 0, 5.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Old_Gen":
[info]   0.004 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm":
[info]   0.073 ±(99.9%) 0.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.364), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1350.251 ±(99.9%) 20.596 MB/sec [Average]
[info]   (min, avg, max) = (1345.343, 1350.251, 1359.275), stdev = 5.349
[info]   CI (99.9%): [1329.655, 1370.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22377.623 ±(99.9%) 4354.578 B/op [Average]
[info]   (min, avg, max) = (21787.808, 22377.623, 24398.452), stdev = 1130.870
[info]   CI (99.9%): [18023.046, 26732.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   78.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 15.600, 72.000), stdev = 31.533
[info]   CI (99.9%): [78.000, 78.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56857.341 ops/s
[info] # Warmup Iteration   2: 165139.731 ops/s
[info] # Warmup Iteration   3: 168333.512 ops/s
[info] # Warmup Iteration   4: 169735.844 ops/s
[info] # Warmup Iteration   5: 166132.085 ops/s
[info] Iteration   1: 170359.670 ops/s
[info]                  ·gc.alloc.rate:                   718.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              6639.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6227.934 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 167537.363 ops/s
[info]                  ·gc.alloc.rate:                   715.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              6724.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6332.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 170458.953 ops/s
[info]                  ·gc.alloc.rate:                   724.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              6687.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6224.317 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 170173.532 ops/s
[info]                  ·gc.alloc.rate:                   723.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              6689.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6234.556 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 169643.815 ops/s
[info]                  ·gc.alloc.rate:                   714.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              6632.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6253.994 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   169634.667 ±(99.9%) 4674.300 ops/s [Average]
[info]   (min, avg, max) = (167537.363, 169634.667, 170458.953), stdev = 1213.901
[info]   CI (99.9%): [164960.367, 174308.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   719.292 ±(99.9%) 16.605 MB/sec [Average]
[info]   (min, avg, max) = (714.716, 719.292, 724.182), stdev = 4.312
[info]   CI (99.9%): [702.688, 735.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6674.564 ±(99.9%) 148.039 B/op [Average]
[info]   (min, avg, max) = (6632.058, 6674.564, 6724.475), stdev = 38.445
[info]   CI (99.9%): [6526.525, 6822.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.155 ±(99.9%) 0.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.386), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.034 ±(99.9%) 0.283 MB/sec [Average]
[info]   (min, avg, max) = (673.971, 674.034, 674.151), stdev = 0.073
[info]   CI (99.9%): [673.751, 674.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6254.732 ±(99.9%) 173.860 B/op [Average]
[info]   (min, avg, max) = (6224.317, 6254.732, 6332.857), stdev = 45.151
[info]   CI (99.9%): [6080.872, 6428.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:17:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182302.478 ops/s
[info] # Warmup Iteration   2: 257366.672 ops/s
[info] # Warmup Iteration   3: 264549.795 ops/s
[info] # Warmup Iteration   4: 266206.162 ops/s
[info] # Warmup Iteration   5: 266994.400 ops/s
[info] Iteration   1: 265455.135 ops/s
[info]                  ·gc.alloc.rate:                   989.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              5867.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7997.855 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 267286.303 ops/s
[info]                  ·gc.alloc.rate:                   976.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              5753.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3969.516 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 266334.223 ops/s
[info]                  ·gc.alloc.rate:                   984.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              5820.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7959.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 267618.877 ops/s
[info]                  ·gc.alloc.rate:                   969.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              5699.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3960.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 267969.929 ops/s
[info]                  ·gc.alloc.rate:                   970.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              5698.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3955.326 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   266932.894 ±(99.9%) 3951.880 ops/s [Average]
[info]   (min, avg, max) = (265455.135, 266932.894, 267969.929), stdev = 1026.291
[info]   CI (99.9%): [262981.014, 270884.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   978.129 ±(99.9%) 34.048 MB/sec [Average]
[info]   (min, avg, max) = (969.290, 978.129, 989.301), stdev = 8.842
[info]   CI (99.9%): [944.081, 1012.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5767.859 ±(99.9%) 287.961 B/op [Average]
[info]   (min, avg, max) = (5698.378, 5767.859, 5867.181), stdev = 74.782
[info]   CI (99.9%): [5479.898, 6055.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.099 ±(99.9%) 0.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.099, 0.247), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   943.269 ±(99.9%) 1421.390 MB/sec [Average]
[info]   (min, avg, max) = (673.432, 943.269, 1348.567), stdev = 369.131
[info]   CI (99.9%): [≈ 0, 2364.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5568.542 ±(99.9%) 8471.580 B/op [Average]
[info]   (min, avg, max) = (3955.326, 5568.542, 7997.855), stdev = 2200.042
[info]   CI (99.9%): [≈ 0, 14040.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9845.353 ops/s
[info] # Warmup Iteration   2: 61245.637 ops/s
[info] # Warmup Iteration   3: 64693.387 ops/s
[info] # Warmup Iteration   4: 64152.744 ops/s
[info] # Warmup Iteration   5: 63893.348 ops/s
[info] Iteration   1: 65608.931 ops/s
[info]                  ·gc.alloc.rate:                   2533.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              60778.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48664.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 64739.829 ops/s
[info]                  ·gc.alloc.rate:                   2514.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              61117.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65844.698 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 64807.809 ops/s
[info]                  ·gc.alloc.rate:                   2530.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              61444.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49412.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 64612.337 ops/s
[info]                  ·gc.alloc.rate:                   2551.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              62134.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66136.355 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 64674.339 ops/s
[info]                  ·gc.alloc.rate:                   2552.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              62104.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66136.783 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   64888.649 ±(99.9%) 1575.668 ops/s [Average]
[info]   (min, avg, max) = (64612.337, 64888.649, 65608.931), stdev = 409.196
[info]   CI (99.9%): [63312.981, 66464.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2536.350 ±(99.9%) 61.537 MB/sec [Average]
[info]   (min, avg, max) = (2514.212, 2536.350, 2552.291), stdev = 15.981
[info]   CI (99.9%): [2474.813, 2597.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61515.996 ±(99.9%) 2307.450 B/op [Average]
[info]   (min, avg, max) = (60778.996, 61515.996, 62134.286), stdev = 599.237
[info]   CI (99.9%): [59208.546, 63823.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.010 ±(99.9%) 1.379 B/op [Average]
[info]   (min, avg, max) = (0.506, 1.010, 1.518), stdev = 0.358
[info]   CI (99.9%): [≈ 0, 2.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2441.163 ±(99.9%) 1439.684 MB/sec [Average]
[info]   (min, avg, max) = (2028.473, 2441.163, 2717.984), stdev = 373.881
[info]   CI (99.9%): [1001.479, 3880.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   59238.915 ±(99.9%) 35873.761 B/op [Average]
[info]   (min, avg, max) = (48664.140, 59238.915, 66136.783), stdev = 9316.302
[info]   CI (99.9%): [23365.154, 95112.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87485.218 ops/s
[info] # Warmup Iteration   2: 182720.173 ops/s
[info] # Warmup Iteration   3: 185335.819 ops/s
[info] # Warmup Iteration   4: 184863.439 ops/s
[info] # Warmup Iteration   5: 186603.234 ops/s
[info] Iteration   1: 184907.458 ops/s
[info]                  ·gc.alloc.rate:                   901.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              7671.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11487.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 186779.234 ops/s
[info]                  ·gc.alloc.rate:                   904.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              7618.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5686.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 186577.606 ops/s
[info]                  ·gc.alloc.rate:                   902.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              7612.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5694.935 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 178573.792 ops/s
[info]                  ·gc.alloc.rate:                   870.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              7672.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5950.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 186791.168 ops/s
[info]                  ·gc.alloc.rate:                   913.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              7693.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11382.679 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   184725.852 ±(99.9%) 13585.698 ops/s [Average]
[info]   (min, avg, max) = (178573.792, 184725.852, 186791.168), stdev = 3528.163
[info]   CI (99.9%): [171140.153, 198311.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   898.296 ±(99.9%) 61.868 MB/sec [Average]
[info]   (min, avg, max) = (870.779, 898.296, 913.025), stdev = 16.067
[info]   CI (99.9%): [836.427, 960.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7653.824 ±(99.9%) 139.082 B/op [Average]
[info]   (min, avg, max) = (7612.393, 7653.824, 7693.780), stdev = 36.119
[info]   CI (99.9%): [7514.742, 7792.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.181 ±(99.9%) 0.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.181, 0.550), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   945.093 ±(99.9%) 1424.041 MB/sec [Average]
[info]   (min, avg, max) = (674.729, 945.093, 1350.789), stdev = 369.819
[info]   CI (99.9%): [≈ 0, 2369.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8040.304 ±(99.9%) 11941.508 B/op [Average]
[info]   (min, avg, max) = (5686.031, 8040.304, 11487.795), stdev = 3101.172
[info]   CI (99.9%): [≈ 0, 19981.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132708.243 ops/s
[info] # Warmup Iteration   2: 450088.134 ops/s
[info] # Warmup Iteration   3: 469497.270 ops/s
[info] # Warmup Iteration   4: 483037.861 ops/s
[info] # Warmup Iteration   5: 464306.281 ops/s
[info] Iteration   1: 484649.257 ops/s
[info]                  ·gc.alloc.rate:      381.766 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 481048.403 ops/s
[info]                  ·gc.alloc.rate:                   396.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1298.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2206.709 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 482454.613 ops/s
[info]                  ·gc.alloc.rate:                   401.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              1309.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2200.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 484165.796 ops/s
[info]                  ·gc.alloc.rate:      381.483 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 480747.013 ops/s
[info]                  ·gc.alloc.rate:                   396.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              1298.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2209.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   482613.017 ±(99.9%) 6810.437 ops/s [Average]
[info]   (min, avg, max) = (480747.013, 482613.017, 484649.257), stdev = 1768.649
[info]   CI (99.9%): [475802.579, 489423.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   391.632 ±(99.9%) 35.990 MB/sec [Average]
[info]   (min, avg, max) = (381.483, 391.632, 401.523), stdev = 9.346
[info]   CI (99.9%): [355.642, 427.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1277.371 ±(99.9%) 132.598 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1277.371, 1309.944), stdev = 34.435
[info]   CI (99.9%): [1144.773, 1409.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.258 ±(99.9%) 2.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.291), stdev = 0.577
[info]   CI (99.9%): [≈ 0, 2.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.842 ±(99.9%) 7.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.842, 4.210), stdev = 1.883
[info]   CI (99.9%): [≈ 0, 8.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.703 ±(99.9%) 1422.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.703, 674.753), stdev = 369.442
[info]   CI (99.9%): [≈ 0, 1827.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1323.218 ±(99.9%) 4651.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1323.218, 2209.177), stdev = 1207.931
[info]   CI (99.9%): [≈ 0, 5974.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:16:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437826.951 ops/s
[info] # Warmup Iteration   2: 548351.388 ops/s
[info] # Warmup Iteration   3: 587639.907 ops/s
[info] # Warmup Iteration   4: 585717.901 ops/s
[info] # Warmup Iteration   5: 585575.334 ops/s
[info] Iteration   1: 590832.797 ops/s
[info]                  ·gc.alloc.rate:      318.300 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 543861.288 ops/s
[info]                  ·gc.alloc.rate:                        293.275 MB/sec
[info]                  ·gc.alloc.rate.norm:                   848.832 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.009 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:               3.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          9.036 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  0.027 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           492.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      1426.645 B/op
[info]                  ·gc.count:                             2.000 counts
[info]                  ·gc.time:                              44.000 ms
[info] Iteration   3: 580605.485 ops/s
[info]                  ·gc.alloc.rate:      312.785 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 580790.909 ops/s
[info]                  ·gc.alloc.rate:                   333.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              903.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1825.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 581478.697 ops/s
[info]                  ·gc.alloc.rate:      313.276 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   575513.835 ±(99.9%) 70106.743 ops/s [Average]
[info]   (min, avg, max) = (543861.288, 575513.835, 590832.797), stdev = 18206.498
[info]   CI (99.9%): [505407.092, 645620.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   314.237 ±(99.9%) 55.532 MB/sec [Average]
[info]   (min, avg, max) = (293.275, 314.237, 333.550), stdev = 14.421
[info]   CI (99.9%): [258.705, 369.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   859.302 ±(99.9%) 95.506 B/op [Average]
[info]   (min, avg, max) = (848.001, 859.302, 903.666), stdev = 24.803
[info]   CI (99.9%): [763.796, 954.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space":
[info]   0.002 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.005 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.624 ±(99.9%) 5.376 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.624, 3.122), stdev = 1.396
[info]   CI (99.9%): [≈ 0, 6.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.807 ±(99.9%) 15.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.807, 9.036), stdev = 4.041
[info]   CI (99.9%): [≈ 0, 17.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen":
[info]   0.005 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen.norm":
[info]   0.015 ±(99.9%) 0.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   233.307 ±(99.9%) 1254.521 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 233.307, 673.623), stdev = 325.795
[info]   CI (99.9%): [≈ 0, 1487.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   650.330 ±(99.9%) 3471.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 650.330, 1825.007), stdev = 901.571
[info]   CI (99.9%): [≈ 0, 4121.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 9.000, 44.000), stdev = 19.570
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 492618.159 ops/s
[info] # Warmup Iteration   2: 546757.000 ops/s
[info] # Warmup Iteration   3: 591981.062 ops/s
[info] # Warmup Iteration   4: 597180.241 ops/s
[info] # Warmup Iteration   5: 596984.597 ops/s
[info] Iteration   1: 591387.609 ops/s
[info]                  ·gc.alloc.rate:      6.012 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 590978.950 ops/s
[info]                  ·gc.alloc.rate:      6.007 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 592168.462 ops/s
[info]                  ·gc.alloc.rate:      6.019 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 595277.444 ops/s
[info]                  ·gc.alloc.rate:      6.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 593922.931 ops/s
[info]                  ·gc.alloc.rate:      6.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   592747.079 ±(99.9%) 6967.063 ops/s [Average]
[info]   (min, avg, max) = (590978.950, 592747.079, 595277.444), stdev = 1809.324
[info]   CI (99.9%): [585780.017, 599714.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.026 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (6.007, 6.026, 6.051), stdev = 0.019
[info]   CI (99.9%): [5.953, 6.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15950.445 ops/s
[info] # Warmup Iteration   2: 32577.055 ops/s
[info] # Warmup Iteration   3: 33917.238 ops/s
[info] # Warmup Iteration   4: 33799.143 ops/s
[info] # Warmup Iteration   5: 33698.886 ops/s
[info] Iteration   1: 34084.847 ops/s
[info]                  ·gc.alloc.rate:                   1694.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              78243.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93504.768 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 34001.550 ops/s
[info]                  ·gc.alloc.rate:                   1692.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              78311.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62547.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 34049.403 ops/s
[info]                  ·gc.alloc.rate:                   1695.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              78383.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93772.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 34045.379 ops/s
[info]                  ·gc.alloc.rate:                   1681.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              77724.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62602.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 34030.185 ops/s
[info]                  ·gc.alloc.rate:                   1679.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              77712.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62663.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   34042.273 ±(99.9%) 116.756 ops/s [Average]
[info]   (min, avg, max) = (34001.550, 34042.273, 34084.847), stdev = 30.321
[info]   CI (99.9%): [33925.516, 34159.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1688.561 ±(99.9%) 28.698 MB/sec [Average]
[info]   (min, avg, max) = (1679.968, 1688.561, 1695.570), stdev = 7.453
[info]   CI (99.9%): [1659.862, 1717.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78075.035 ±(99.9%) 1268.831 B/op [Average]
[info]   (min, avg, max) = (77712.332, 78075.035, 78383.669), stdev = 329.511
[info]   CI (99.9%): [76806.204, 79343.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.539 ±(99.9%) 4.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.539, 2.887), stdev = 1.290
[info]   CI (99.9%): [≈ 0, 6.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1622.627 ±(99.9%) 1419.764 MB/sec [Average]
[info]   (min, avg, max) = (1351.425, 1622.627, 2028.466), stdev = 368.708
[info]   CI (99.9%): [202.863, 3042.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   75018.169 ±(99.9%) 65455.578 B/op [Average]
[info]   (min, avg, max) = (62547.017, 75018.169, 93772.962), stdev = 16998.606
[info]   CI (99.9%): [9562.591, 140473.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130703.863 ops/s
[info] # Warmup Iteration   2: 801398.744 ops/s
[info] # Warmup Iteration   3: 841742.821 ops/s
[info] # Warmup Iteration   4: 856600.838 ops/s
[info] # Warmup Iteration   5: 856125.844 ops/s
[info] Iteration   1: 857973.259 ops/s
[info]                  ·gc.alloc.rate:                   2229.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              4089.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3696.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 840253.708 ops/s
[info]                  ·gc.alloc.rate:                   2213.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              4145.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2691.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5042.826 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 841848.378 ops/s
[info]                  ·gc.alloc.rate:                   2188.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              4092.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3781.550 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 837016.041 ops/s
[info]                  ·gc.alloc.rate:                   2203.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              4142.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3811.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 843088.848 ops/s
[info]                  ·gc.alloc.rate:                   2218.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              4140.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3789.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   844036.047 ±(99.9%) 31254.062 ops/s [Average]
[info]   (min, avg, max) = (837016.041, 844036.047, 857973.259), stdev = 8116.581
[info]   CI (99.9%): [812781.985, 875290.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2210.483 ±(99.9%) 58.929 MB/sec [Average]
[info]   (min, avg, max) = (2188.892, 2210.483, 2229.228), stdev = 15.304
[info]   CI (99.9%): [2151.554, 2269.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4122.385 ±(99.9%) 110.098 B/op [Average]
[info]   (min, avg, max) = (4089.914, 4122.385, 4145.902), stdev = 28.592
[info]   CI (99.9%): [4012.287, 4232.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.116 ±(99.9%) 0.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.195), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2157.164 ±(99.9%) 1151.078 MB/sec [Average]
[info]   (min, avg, max) = (2014.796, 2157.164, 2691.814), stdev = 298.931
[info]   CI (99.9%): [1006.086, 3308.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4024.282 ±(99.9%) 2198.924 B/op [Average]
[info]   (min, avg, max) = (3696.502, 4024.282, 5042.826), stdev = 571.054
[info]   CI (99.9%): [1825.358, 6223.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15962.638 ops/s
[info] # Warmup Iteration   2: 1577839.302 ops/s
[info] # Warmup Iteration   3: 1724313.994 ops/s
[info] # Warmup Iteration   4: 1735072.870 ops/s
[info] # Warmup Iteration   5: 1729145.118 ops/s
[info] Iteration   1: 1727523.197 ops/s
[info]                  ·gc.alloc.rate:                   1143.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              1042.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1227.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1669153.781 ops/s
[info]                  ·gc.alloc.rate:                   1075.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              1013.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 634.992 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1716978.289 ops/s
[info]                  ·gc.alloc.rate:                   1132.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              1037.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1235.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1705433.295 ops/s
[info]                  ·gc.alloc.rate:                   1115.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              1029.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1244.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1677968.260 ops/s
[info]                  ·gc.alloc.rate:                   1091.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              1023.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 632.599 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1699411.365 ±(99.9%) 96467.348 ops/s [Average]
[info]   (min, avg, max) = (1669153.781, 1699411.365, 1727523.197), stdev = 25052.264
[info]   CI (99.9%): [1602944.016, 1795878.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1111.727 ±(99.9%) 109.100 MB/sec [Average]
[info]   (min, avg, max) = (1075.156, 1111.727, 1143.644), stdev = 28.333
[info]   CI (99.9%): [1002.627, 1220.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1029.367 ±(99.9%) 43.868 B/op [Average]
[info]   (min, avg, max) = (1013.556, 1029.367, 1042.158), stdev = 11.392
[info]   CI (99.9%): [985.499, 1073.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.038 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.095), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1078.283 ±(99.9%) 1420.960 MB/sec [Average]
[info]   (min, avg, max) = (673.585, 1078.283, 1348.904), stdev = 369.019
[info]   CI (99.9%): [≈ 0, 2499.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   994.900 ±(99.9%) 1269.558 B/op [Average]
[info]   (min, avg, max) = (632.599, 994.900, 1244.537), stdev = 329.700
[info]   CI (99.9%): [≈ 0, 2264.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4007726.386 ops/s
[info] # Warmup Iteration   2: 7629625.427 ops/s
[info] # Warmup Iteration   3: 7640724.740 ops/s
[info] # Warmup Iteration   4: 7711737.500 ops/s
[info] # Warmup Iteration   5: 7661136.935 ops/s
[info] Iteration   1: 7710735.614 ops/s
[info]                  ·gc.alloc.rate:      235.126 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7676828.556 ops/s
[info]                  ·gc.alloc.rate:                   246.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.883 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7702101.023 ops/s
[info]                  ·gc.alloc.rate:      235.980 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.213 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7658872.902 ops/s
[info]                  ·gc.alloc.rate:                   249.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              51.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7697376.284 ops/s
[info]                  ·gc.alloc.rate:      234.807 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7689182.876 ±(99.9%) 80997.605 ops/s [Average]
[info]   (min, avg, max) = (7658872.902, 7689182.876, 7710735.614), stdev = 21034.821
[info]   CI (99.9%): [7608185.271, 7770180.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   240.351 ±(99.9%) 26.947 MB/sec [Average]
[info]   (min, avg, max) = (234.807, 240.351, 249.362), stdev = 6.998
[info]   CI (99.9%): [213.404, 267.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.203 ±(99.9%) 6.025 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.203, 51.250), stdev = 1.565
[info]   CI (99.9%): [43.179, 55.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.614 ±(99.9%) 1078.870 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.614, 511.564), stdev = 280.179
[info]   CI (99.9%): [≈ 0, 1283.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42.002 ±(99.9%) 221.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.002, 105.127), stdev = 57.514
[info]   CI (99.9%): [≈ 0, 263.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1847.152 ops/s
[info] # Warmup Iteration   2: 125546.222 ops/s
[info] # Warmup Iteration   3: 244697.103 ops/s
[info] # Warmup Iteration   4: 311571.790 ops/s
[info] # Warmup Iteration   5: 312296.174 ops/s
[info] Iteration   1: 310236.604 ops/s
[info]                  ·gc.alloc.rate:                   2059.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              10450.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10263.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 307664.479 ops/s
[info]                  ·gc.alloc.rate:                   2030.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              10386.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10362.642 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 309545.578 ops/s
[info]                  ·gc.alloc.rate:                   2038.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              10368.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10309.842 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 311289.038 ops/s
[info]                  ·gc.alloc.rate:                   2048.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              10360.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10266.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 304445.607 ops/s
[info]                  ·gc.alloc.rate:                   2003.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              10358.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7004.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   308636.261 ±(99.9%) 10355.855 ops/s [Average]
[info]   (min, avg, max) = (304445.607, 308636.261, 311289.038), stdev = 2689.383
[info]   CI (99.9%): [298280.406, 318992.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2036.215 ±(99.9%) 82.256 MB/sec [Average]
[info]   (min, avg, max) = (2003.408, 2036.215, 2059.558), stdev = 21.362
[info]   CI (99.9%): [1953.959, 2118.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10385.044 ±(99.9%) 147.371 B/op [Average]
[info]   (min, avg, max) = (10358.537, 10385.044, 10450.557), stdev = 38.272
[info]   CI (99.9%): [10237.673, 10532.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.276 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (0.210, 0.276, 0.323), stdev = 0.060
[info]   CI (99.9%): [0.047, 0.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1892.132 ±(99.9%) 1156.884 MB/sec [Average]
[info]   (min, avg, max) = (1354.714, 1892.132, 2030.363), stdev = 300.439
[info]   CI (99.9%): [735.248, 3049.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9641.450 ±(99.9%) 5678.366 B/op [Average]
[info]   (min, avg, max) = (7004.488, 9641.450, 10362.642), stdev = 1474.654
[info]   CI (99.9%): [3963.083, 15319.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:14:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137650.966 ops/s
[info] # Warmup Iteration   2: 1046665.814 ops/s
[info] # Warmup Iteration   3: 1133507.448 ops/s
[info] # Warmup Iteration   4: 1113951.148 ops/s
[info] # Warmup Iteration   5: 1138629.737 ops/s
[info] Iteration   1: 1140656.819 ops/s
[info]                  ·gc.alloc.rate:                   1620.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              2237.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1862.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1109903.236 ops/s
[info]                  ·gc.alloc.rate:                   1591.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              2257.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2872.988 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1132634.668 ops/s
[info]                  ·gc.alloc.rate:                   1611.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              2240.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1879.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1133075.575 ops/s
[info]                  ·gc.alloc.rate:                   1611.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              2239.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1880.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1114780.256 ops/s
[info]                  ·gc.alloc.rate:                   1614.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              2278.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2868.885 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1126210.111 ±(99.9%) 50708.487 ops/s [Average]
[info]   (min, avg, max) = (1109903.236, 1126210.111, 1140656.819), stdev = 13168.833
[info]   CI (99.9%): [1075501.623, 1176918.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1610.051 ±(99.9%) 42.573 MB/sec [Average]
[info]   (min, avg, max) = (1591.407, 1610.051, 1620.907), stdev = 11.056
[info]   CI (99.9%): [1567.478, 1652.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2250.443 ±(99.9%) 68.248 B/op [Average]
[info]   (min, avg, max) = (2237.077, 2250.443, 2278.777), stdev = 17.724
[info]   CI (99.9%): [2182.196, 2318.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.082 ±(99.9%) 0.203 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.082, 0.148), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1622.588 ±(99.9%) 1428.377 MB/sec [Average]
[info]   (min, avg, max) = (1349.571, 1622.588, 2032.119), stdev = 370.945
[info]   CI (99.9%): [194.211, 3050.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2272.734 ±(99.9%) 2102.945 B/op [Average]
[info]   (min, avg, max) = (1862.596, 2272.734, 2872.988), stdev = 546.128
[info]   CI (99.9%): [169.790, 4375.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f6a7f336/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 312224.744 ops/s
[info] # Warmup Iteration   2: 2485419.232 ops/s
[info] # Warmup Iteration   3: 2500577.289 ops/s
[info] # Warmup Iteration   4: 2556944.341 ops/s
[info] # Warmup Iteration   5: 2557923.988 ops/s
[info] Iteration   1: 2549911.590 ops/s
[info]                  ·gc.alloc.rate:                   1034.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              638.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 416.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2535248.849 ops/s
[info]                  ·gc.alloc.rate:                   1045.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              649.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 837.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2561532.785 ops/s
[info]                  ·gc.alloc.rate:                   1035.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              636.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 414.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2541663.795 ops/s
[info]                  ·gc.alloc.rate:                   1044.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              647.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 835.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2548540.175 ops/s
[info]                  ·gc.alloc.rate:                   1036.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              639.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 416.735 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2547379.439 ±(99.9%) 37919.366 ops/s [Average]
[info]   (min, avg, max) = (2535248.849, 2547379.439, 2561532.785), stdev = 9847.539
[info]   CI (99.9%): [2509460.073, 2585298.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1039.313 ±(99.9%) 20.601 MB/sec [Average]
[info]   (min, avg, max) = (1034.663, 1039.313, 1045.512), stdev = 5.350
[info]   CI (99.9%): [1018.712, 1059.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   642.166 ±(99.9%) 21.560 B/op [Average]
[info]   (min, avg, max) = (636.149, 642.166, 649.122), stdev = 5.599
[info]   CI (99.9%): [620.606, 663.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.010 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.015 ±(99.9%) 1421.730 MB/sec [Average]
[info]   (min, avg, max) = (673.992, 944.015, 1348.812), stdev = 369.219
[info]   CI (99.9%): [≈ 0, 2365.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   583.873 ±(99.9%) 886.838 B/op [Average]
[info]   (min, avg, max) = (414.208, 583.873, 837.011), stdev = 230.309
[info]   CI (99.9%): [≈ 0, 1470.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2226005.591 ops/s
[info] # Warmup Iteration   2: 5458343.113 ops/s
[info] # Warmup Iteration   3: 5748410.210 ops/s
[info] # Warmup Iteration   4: 5711394.061 ops/s
[info] # Warmup Iteration   5: 5763933.126 ops/s
[info] Iteration   1: 5619024.132 ops/s
[info]                  ·gc.alloc.rate:                   651.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              182.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5789616.807 ops/s
[info]                  ·gc.alloc.rate:                   673.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              183.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.241 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5794881.096 ops/s
[info]                  ·gc.alloc.rate:                   662.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              179.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5801293.973 ops/s
[info]                  ·gc.alloc.rate:                   664.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              180.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182.706 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 5800818.848 ops/s
[info]                  ·gc.alloc.rate:                   673.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              182.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5761126.971 ±(99.9%) 306441.237 ops/s [Average]
[info]   (min, avg, max) = (5619024.132, 5761126.971, 5801293.973), stdev = 79581.816
[info]   CI (99.9%): [5454685.734, 6067568.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   665.084 ±(99.9%) 35.540 MB/sec [Average]
[info]   (min, avg, max) = (651.147, 665.084, 673.504), stdev = 9.230
[info]   CI (99.9%): [629.544, 700.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   181.714 ±(99.9%) 5.504 B/op [Average]
[info]   (min, avg, max) = (179.999, 181.714, 183.079), stdev = 1.429
[info]   CI (99.9%): [176.210, 187.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.556 ±(99.9%) 4.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.556, 2.675), stdev = 1.185
[info]   CI (99.9%): [≈ 0, 5.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.156 ±(99.9%) 1.278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.749), stdev = 0.332
[info]   CI (99.9%): [≈ 0, 1.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.916 ±(99.9%) 2.250 MB/sec [Average]
[info]   (min, avg, max) = (673.323, 673.916, 674.755), stdev = 0.584
[info]   CI (99.9%): [671.666, 676.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   184.153 ±(99.9%) 10.499 B/op [Average]
[info]   (min, avg, max) = (182.706, 184.153, 189.013), stdev = 2.727
[info]   CI (99.9%): [173.654, 194.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2608998.687 ops/s
[info] # Warmup Iteration   2: 5660344.559 ops/s
[info] # Warmup Iteration   3: 6106505.306 ops/s
[info] # Warmup Iteration   4: 6141458.039 ops/s
[info] # Warmup Iteration   5: 6108657.673 ops/s
[info] Iteration   1: 6108242.295 ops/s
[info]                  ·gc.alloc.rate:                   384.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              99.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6143730.102 ops/s
[info]                  ·gc.alloc.rate:      374.835 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6121543.597 ops/s
[info]                  ·gc.alloc.rate:                   391.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.157 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6142918.358 ops/s
[info]                  ·gc.alloc.rate:      374.673 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6094170.581 ops/s
[info]                  ·gc.alloc.rate:                   394.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.936 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6122120.986 ±(99.9%) 83339.116 ops/s [Average]
[info]   (min, avg, max) = (6094170.581, 6122120.986, 6143730.102), stdev = 21642.904
[info]   CI (99.9%): [6038781.870, 6205460.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   383.931 ±(99.9%) 34.696 MB/sec [Average]
[info]   (min, avg, max) = (374.673, 383.931, 394.062), stdev = 9.010
[info]   CI (99.9%): [349.235, 418.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   98.697 ±(99.9%) 10.139 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.697, 101.770), stdev = 2.633
[info]   CI (99.9%): [88.559, 108.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.612 ±(99.9%) 5.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 3.019), stdev = 1.345
[info]   CI (99.9%): [≈ 0, 5.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.158 ±(99.9%) 1.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.780), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   371.753 ±(99.9%) 1331.252 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.753, 673.493), stdev = 345.722
[info]   CI (99.9%): [≈ 0, 1703.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   95.783 ±(99.9%) 343.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.783, 173.936), stdev = 89.082
[info]   CI (99.9%): [≈ 0, 438.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:13:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3682.287 ops/s
[info] # Warmup Iteration   2: 314463.002 ops/s
[info] # Warmup Iteration   3: 417402.611 ops/s
[info] # Warmup Iteration   4: 427702.993 ops/s
[info] # Warmup Iteration   5: 421422.084 ops/s
[info] Iteration   1: 421790.453 ops/s
[info]                  ·gc.alloc.rate:                   2273.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              8486.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7552.501 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 418853.320 ops/s
[info]                  ·gc.alloc.rate:                   2285.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              8590.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2701.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10153.533 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 428741.227 ops/s
[info]                  ·gc.alloc.rate:                   2309.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              8476.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7450.982 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 429330.246 ops/s
[info]                  ·gc.alloc.rate:                   2325.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              8526.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7451.786 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 427429.265 ops/s
[info]                  ·gc.alloc.rate:                   2356.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              8678.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9989.089 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   425228.902 ±(99.9%) 17903.427 ops/s [Average]
[info]   (min, avg, max) = (418853.320, 425228.902, 429330.246), stdev = 4649.463
[info]   CI (99.9%): [407325.475, 443132.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2310.194 ±(99.9%) 125.613 MB/sec [Average]
[info]   (min, avg, max) = (2273.998, 2310.194, 2356.199), stdev = 32.621
[info]   CI (99.9%): [2184.581, 2435.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8551.502 ±(99.9%) 322.140 B/op [Average]
[info]   (min, avg, max) = (8476.578, 8551.502, 8678.125), stdev = 83.659
[info]   CI (99.9%): [8229.362, 8873.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.146), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.232 ±(99.9%) 0.710 B/op [Average]
[info]   (min, avg, max) = (0.076, 0.232, 0.548), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 0.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2300.042 ±(99.9%) 1430.707 MB/sec [Average]
[info]   (min, avg, max) = (2023.730, 2300.042, 2712.139), stdev = 371.550
[info]   CI (99.9%): [869.336, 3730.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8519.578 ±(99.9%) 5461.466 B/op [Average]
[info]   (min, avg, max) = (7450.982, 8519.578, 10153.533), stdev = 1418.325
[info]   CI (99.9%): [3058.112, 13981.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45773.612 ops/s
[info] # Warmup Iteration   2: 72521.184 ops/s
[info] # Warmup Iteration   3: 83033.907 ops/s
[info] # Warmup Iteration   4: 82509.527 ops/s
[info] # Warmup Iteration   5: 82794.028 ops/s
[info] Iteration   1: 83996.941 ops/s
[info]                  ·gc.alloc.rate:                   2250.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              42182.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37812.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 83756.643 ops/s
[info]                  ·gc.alloc.rate:                   2244.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              42170.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37982.904 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 83208.710 ops/s
[info]                  ·gc.alloc.rate:                   2284.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              43197.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2701.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51078.754 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 83874.107 ops/s
[info]                  ·gc.alloc.rate:                   2272.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              42655.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38092.878 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 83731.165 ops/s
[info]                  ·gc.alloc.rate:                   2270.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              42678.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38194.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   83713.513 ±(99.9%) 1160.187 ops/s [Average]
[info]   (min, avg, max) = (83208.710, 83713.513, 83996.941), stdev = 301.297
[info]   CI (99.9%): [82553.326, 84873.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2264.490 ±(99.9%) 63.590 MB/sec [Average]
[info]   (min, avg, max) = (2244.294, 2264.490, 2284.377), stdev = 16.514
[info]   CI (99.9%): [2200.900, 2328.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   42576.931 ±(99.9%) 1637.273 B/op [Average]
[info]   (min, avg, max) = (42170.195, 42576.931, 43197.725), stdev = 425.195
[info]   CI (99.9%): [40939.658, 44214.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.018 ±(99.9%) 2.949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.018, 1.969), stdev = 0.766
[info]   CI (99.9%): [≈ 0, 3.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2160.311 ±(99.9%) 1164.387 MB/sec [Average]
[info]   (min, avg, max) = (2017.684, 2160.311, 2701.141), stdev = 302.388
[info]   CI (99.9%): [995.924, 3324.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   40632.309 ±(99.9%) 22493.343 B/op [Average]
[info]   (min, avg, max) = (37812.891, 40632.309, 51078.754), stdev = 5841.450
[info]   CI (99.9%): [18138.966, 63125.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19016.985 ops/s
[info] # Warmup Iteration   2: 113630.984 ops/s
[info] # Warmup Iteration   3: 120463.639 ops/s
[info] # Warmup Iteration   4: 122912.393 ops/s
[info] # Warmup Iteration   5: 122613.588 ops/s
[info] Iteration   1: 120799.812 ops/s
[info]                  ·gc.alloc.rate:                   1908.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              24863.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26370.619 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 123316.450 ops/s
[info]                  ·gc.alloc.rate:                   1954.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              24947.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25866.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 119853.359 ops/s
[info]                  ·gc.alloc.rate:                   1875.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              24630.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17757.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 119773.078 ops/s
[info]                  ·gc.alloc.rate:                   1888.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              24814.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26682.893 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 119834.495 ops/s
[info]                  ·gc.alloc.rate:                   1902.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              24990.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26701.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   120715.439 ±(99.9%) 5833.332 ops/s [Average]
[info]   (min, avg, max) = (119773.078, 120715.439, 123316.450), stdev = 1514.898
[info]   CI (99.9%): [114882.106, 126548.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1906.060 ±(99.9%) 116.102 MB/sec [Average]
[info]   (min, avg, max) = (1875.876, 1906.060, 1954.894), stdev = 30.151
[info]   CI (99.9%): [1789.958, 2022.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24849.074 ±(99.9%) 540.912 B/op [Average]
[info]   (min, avg, max) = (24630.305, 24849.074, 24990.665), stdev = 140.473
[info]   CI (99.9%): [24308.163, 25389.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.594 ±(99.9%) 1.328 B/op [Average]
[info]   (min, avg, max) = (0.273, 0.594, 1.063), stdev = 0.345
[info]   CI (99.9%): [≈ 0, 1.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1893.410 ±(99.9%) 1164.603 MB/sec [Average]
[info]   (min, avg, max) = (1352.412, 1893.410, 2032.797), stdev = 302.444
[info]   CI (99.9%): [728.807, 3058.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24675.735 ±(99.9%) 14949.344 B/op [Average]
[info]   (min, avg, max) = (17757.204, 24675.735, 26701.492), stdev = 3882.297
[info]   CI (99.9%): [9726.391, 39625.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107448.836 ops/s
[info] # Warmup Iteration   2: 171885.271 ops/s
[info] # Warmup Iteration   3: 174433.621 ops/s
[info] # Warmup Iteration   4: 172763.562 ops/s
[info] # Warmup Iteration   5: 174906.139 ops/s
[info] Iteration   1: 172524.144 ops/s
[info]                  ·gc.alloc.rate:                   2628.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              23983.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2701.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24647.783 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 170393.520 ops/s
[info]                  ·gc.alloc.rate:                   2593.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              23959.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24992.904 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 172516.115 ops/s
[info]                  ·gc.alloc.rate:                   2642.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              24108.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24733.863 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 169250.025 ops/s
[info]                  ·gc.alloc.rate:                   2566.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              23867.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18929.981 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 170725.533 ops/s
[info]                  ·gc.alloc.rate:                   2616.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              24118.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25042.564 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   171081.867 ±(99.9%) 5477.422 ops/s [Average]
[info]   (min, avg, max) = (169250.025, 171081.867, 172524.144), stdev = 1422.469
[info]   CI (99.9%): [165604.446, 176559.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2609.469 ±(99.9%) 114.543 MB/sec [Average]
[info]   (min, avg, max) = (2566.771, 2609.469, 2642.107), stdev = 29.747
[info]   CI (99.9%): [2494.926, 2724.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24007.536 ±(99.9%) 409.545 B/op [Average]
[info]   (min, avg, max) = (23867.352, 24007.536, 24118.881), stdev = 106.358
[info]   CI (99.9%): [23597.990, 24417.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.727 ±(99.9%) 0.597 B/op [Average]
[info]   (min, avg, max) = (0.577, 0.727, 0.950), stdev = 0.155
[info]   CI (99.9%): [0.130, 1.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2573.955 ±(99.9%) 1158.645 MB/sec [Average]
[info]   (min, avg, max) = (2035.790, 2573.955, 2716.445), stdev = 300.896
[info]   CI (99.9%): [1415.310, 3732.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23669.419 ±(99.9%) 10222.290 B/op [Average]
[info]   (min, avg, max) = (18929.981, 23669.419, 25042.564), stdev = 2654.696
[info]   CI (99.9%): [13447.129, 33891.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12876.909 ops/s
[info] # Warmup Iteration   2: 57709.323 ops/s
[info] # Warmup Iteration   3: 58640.593 ops/s
[info] # Warmup Iteration   4: 61072.184 ops/s
[info] # Warmup Iteration   5: 60711.028 ops/s
[info] Iteration   1: 60243.362 ops/s
[info]                  ·gc.alloc.rate:                   3013.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              78737.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70760.128 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 60117.081 ops/s
[info]                  ·gc.alloc.rate:                   3063.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              80187.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3391.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88769.261 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 60930.168 ops/s
[info]                  ·gc.alloc.rate:                   3089.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              79810.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70167.751 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 60853.742 ops/s
[info]                  ·gc.alloc.rate:                   3084.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              79799.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70325.434 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 60353.799 ops/s
[info]                  ·gc.alloc.rate:                   3088.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              80557.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88681.298 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   60499.630 ±(99.9%) 1420.102 ops/s [Average]
[info]   (min, avg, max) = (60117.081, 60499.630, 60930.168), stdev = 368.796
[info]   CI (99.9%): [59079.529, 61919.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3068.200 ±(99.9%) 123.684 MB/sec [Average]
[info]   (min, avg, max) = (3013.972, 3068.200, 3089.891), stdev = 32.120
[info]   CI (99.9%): [2944.516, 3191.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79818.728 ±(99.9%) 2618.859 B/op [Average]
[info]   (min, avg, max) = (78737.984, 79818.728, 80557.274), stdev = 680.109
[info]   CI (99.9%): [77199.869, 82437.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.628 ±(99.9%) 2.978 B/op [Average]
[info]   (min, avg, max) = (0.538, 1.628, 2.180), stdev = 0.773
[info]   CI (99.9%): [≈ 0, 4.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2987.073 ±(99.9%) 1436.782 MB/sec [Average]
[info]   (min, avg, max) = (2708.592, 2987.073, 3400.064), stdev = 373.128
[info]   CI (99.9%): [1550.290, 4423.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   77740.775 ±(99.9%) 38621.303 B/op [Average]
[info]   (min, avg, max) = (70167.751, 77740.775, 88769.261), stdev = 10029.830
[info]   CI (99.9%): [39119.472, 116362.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81882.219 ops/s
[info] # Warmup Iteration   2: 170039.456 ops/s
[info] # Warmup Iteration   3: 175879.838 ops/s
[info] # Warmup Iteration   4: 175365.073 ops/s
[info] # Warmup Iteration   5: 178509.021 ops/s
[info] Iteration   1: 178026.019 ops/s
[info]                  ·gc.alloc.rate:                   872.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              7712.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5965.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 177449.864 ops/s
[info]                  ·gc.alloc.rate:                   891.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              7905.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11970.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 176064.536 ops/s
[info]                  ·gc.alloc.rate:                   862.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              7712.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6032.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 177473.806 ops/s
[info]                  ·gc.alloc.rate:                   869.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              7709.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5984.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 177106.967 ops/s
[info]                  ·gc.alloc.rate:                   863.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              7673.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6002.484 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   177224.238 ±(99.9%) 2799.809 ops/s [Average]
[info]   (min, avg, max) = (176064.536, 177224.238, 178026.019), stdev = 727.101
[info]   CI (99.9%): [174424.429, 180024.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   871.788 ±(99.9%) 45.134 MB/sec [Average]
[info]   (min, avg, max) = (862.674, 871.788, 891.497), stdev = 11.721
[info]   CI (99.9%): [826.654, 916.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7742.901 ±(99.9%) 356.605 B/op [Average]
[info]   (min, avg, max) = (7673.385, 7742.901, 7905.863), stdev = 92.609
[info]   CI (99.9%): [7386.296, 8099.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.332 ±(99.9%) 1.908 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 1.108), stdev = 0.495
[info]   CI (99.9%): [≈ 0, 2.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   809.830 ±(99.9%) 1162.365 MB/sec [Average]
[info]   (min, avg, max) = (674.605, 809.830, 1349.818), stdev = 301.863
[info]   CI (99.9%): [≈ 0, 1972.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7190.914 ±(99.9%) 10288.398 B/op [Average]
[info]   (min, avg, max) = (5965.581, 7190.914, 11970.288), stdev = 2671.864
[info]   CI (99.9%): [≈ 0, 17479.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130853.146 ops/s
[info] # Warmup Iteration   2: 445212.086 ops/s
[info] # Warmup Iteration   3: 451593.547 ops/s
[info] # Warmup Iteration   4: 454140.642 ops/s
[info] # Warmup Iteration   5: 455224.146 ops/s
[info] Iteration   1: 449972.787 ops/s
[info]                  ·gc.alloc.rate:                   409.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              1433.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2357.895 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 454042.742 ops/s
[info]                  ·gc.alloc.rate:      392.924 MB/sec
[info]                  ·gc.alloc.rate.norm: 1361.797 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 452589.384 ops/s
[info]                  ·gc.alloc.rate:                   427.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              1484.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2344.212 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 454066.491 ops/s
[info]                  ·gc.alloc.rate:      392.310 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 456641.037 ops/s
[info]                  ·gc.alloc.rate:                   408.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              1409.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2323.327 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   453462.488 ±(99.9%) 9381.872 ops/s [Average]
[info]   (min, avg, max) = (449972.787, 453462.488, 456641.037), stdev = 2436.442
[info]   CI (99.9%): [444080.616, 462844.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   406.169 ±(99.9%) 55.214 MB/sec [Average]
[info]   (min, avg, max) = (392.310, 406.169, 427.028), stdev = 14.339
[info]   CI (99.9%): [350.955, 461.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1409.752 ±(99.9%) 201.203 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1409.752, 1484.517), stdev = 52.252
[info]   CI (99.9%): [1208.548, 1610.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.265 ±(99.9%) 2.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.265, 1.323), stdev = 0.591
[info]   CI (99.9%): [≈ 0, 2.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.920 ±(99.9%) 7.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.920, 4.598), stdev = 2.056
[info]   CI (99.9%): [≈ 0, 8.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   404.491 ±(99.9%) 1421.844 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.491, 674.323), stdev = 369.248
[info]   CI (99.9%): [≈ 0, 1826.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1405.087 ±(99.9%) 4939.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1405.087, 2357.895), stdev = 1282.722
[info]   CI (99.9%): [≈ 0, 6344.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:11:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 492904.860 ops/s
[info] # Warmup Iteration   2: 552797.878 ops/s
[info] # Warmup Iteration   3: 637868.951 ops/s
[info] # Warmup Iteration   4: 640226.613 ops/s
[info] # Warmup Iteration   5: 638538.819 ops/s
[info] Iteration   1: 640305.351 ops/s
[info]                  ·gc.alloc.rate:      344.921 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 630662.136 ops/s
[info]                  ·gc.alloc.rate:                   360.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              899.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1679.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 642132.413 ops/s
[info]                  ·gc.alloc.rate:      345.979 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 641707.183 ops/s
[info]                  ·gc.alloc.rate:                   366.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              899.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1650.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 642300.295 ops/s
[info]                  ·gc.alloc.rate:      346.032 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   639421.476 ±(99.9%) 19095.515 ops/s [Average]
[info]   (min, avg, max) = (630662.136, 639421.476, 642300.295), stdev = 4959.045
[info]   CI (99.9%): [620325.960, 658516.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   352.806 ±(99.9%) 38.836 MB/sec [Average]
[info]   (min, avg, max) = (344.921, 352.806, 366.820), stdev = 10.086
[info]   CI (99.9%): [313.970, 391.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   868.564 ±(99.9%) 108.426 B/op [Average]
[info]   (min, avg, max) = (848.001, 868.564, 899.654), stdev = 28.158
[info]   CI (99.9%): [760.138, 976.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.010 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   269.110 ±(99.9%) 1418.941 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.110, 672.804), stdev = 368.494
[info]   CI (99.9%): [≈ 0, 1688.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   665.823 ±(99.9%) 3510.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 665.823, 1679.012), stdev = 911.773
[info]   CI (99.9%): [≈ 0, 4176.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 480224.139 ops/s
[info] # Warmup Iteration   2: 576558.721 ops/s
[info] # Warmup Iteration   3: 606199.188 ops/s
[info] # Warmup Iteration   4: 604086.245 ops/s
[info] # Warmup Iteration   5: 604883.071 ops/s
[info] Iteration   1: 603984.777 ops/s
[info]                  ·gc.alloc.rate:      6.140 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 604340.257 ops/s
[info]                  ·gc.alloc.rate:      6.577 MB/sec
[info]                  ·gc.alloc.rate.norm: 17.130 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 604624.073 ops/s
[info]                  ·gc.alloc.rate:      6.146 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 605807.496 ops/s
[info]                  ·gc.alloc.rate:      6.158 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 602449.019 ops/s
[info]                  ·gc.alloc.rate:      6.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   604241.124 ±(99.9%) 4671.577 ops/s [Average]
[info]   (min, avg, max) = (602449.019, 604241.124, 605807.496), stdev = 1213.194
[info]   CI (99.9%): [599569.548, 608912.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.229 ±(99.9%) 0.750 MB/sec [Average]
[info]   (min, avg, max) = (6.125, 6.229, 6.577), stdev = 0.195
[info]   CI (99.9%): [5.480, 6.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.227 ±(99.9%) 1.945 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.227, 17.130), stdev = 0.505
[info]   CI (99.9%): [14.282, 18.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13073.167 ops/s
[info] # Warmup Iteration   2: 32371.186 ops/s
[info] # Warmup Iteration   3: 33175.632 ops/s
[info] # Warmup Iteration   4: 33100.855 ops/s
[info] # Warmup Iteration   5: 33388.970 ops/s
[info] Iteration   1: 33386.154 ops/s
[info]                  ·gc.alloc.rate:                   1719.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              81028.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95496.380 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 33376.288 ops/s
[info]                  ·gc.alloc.rate:                   1697.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              80027.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63733.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 33269.842 ops/s
[info]                  ·gc.alloc.rate:                   1730.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              81853.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96021.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33137.997 ops/s
[info]                  ·gc.alloc.rate:                   1708.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              81175.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64319.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32889.264 ops/s
[info]                  ·gc.alloc.rate:                   1712.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              81924.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97321.777 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   33211.909 ±(99.9%) 794.532 ops/s [Average]
[info]   (min, avg, max) = (32889.264, 33211.909, 33386.154), stdev = 206.337
[info]   CI (99.9%): [32417.378, 34006.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1713.480 ±(99.9%) 47.049 MB/sec [Average]
[info]   (min, avg, max) = (1697.138, 1713.480, 1730.121), stdev = 12.218
[info]   CI (99.9%): [1666.431, 1760.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81202.101 ±(99.9%) 2956.005 B/op [Average]
[info]   (min, avg, max) = (80027.349, 81202.101, 81924.472), stdev = 767.665
[info]   CI (99.9%): [78246.095, 84158.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.185 ±(99.9%) 3.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.185, 1.992), stdev = 0.830
[info]   CI (99.9%): [≈ 0, 4.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1759.037 ±(99.9%) 1427.906 MB/sec [Average]
[info]   (min, avg, max) = (1351.600, 1759.037, 2033.989), stdev = 370.823
[info]   CI (99.9%): [331.131, 3186.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83378.619 ±(99.9%) 68077.003 B/op [Average]
[info]   (min, avg, max) = (63733.770, 83378.619, 97321.777), stdev = 17679.381
[info]   CI (99.9%): [15301.616, 151455.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2239419.684 ops/s
[info] # Warmup Iteration   2: 3330490.398 ops/s
[info] # Warmup Iteration   3: 3457195.302 ops/s
[info] # Warmup Iteration   4: 3492341.019 ops/s
[info] # Warmup Iteration   5: 3489325.677 ops/s
[info] Iteration   1: 3470243.448 ops/s
[info]                  ·gc.alloc.rate:                   2402.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              1089.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2697.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1223.563 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3472449.354 ops/s
[info]                  ·gc.alloc.rate:                   2377.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              1077.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 918.618 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3481398.895 ops/s
[info]                  ·gc.alloc.rate:                   2424.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              1096.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1223.864 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3459042.915 ops/s
[info]                  ·gc.alloc.rate:                   2385.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              1085.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 925.357 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3456902.845 ops/s
[info]                  ·gc.alloc.rate:                   2379.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              1083.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 926.849 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3468007.491 ±(99.9%) 38877.020 ops/s [Average]
[info]   (min, avg, max) = (3456902.845, 3468007.491, 3481398.895), stdev = 10096.239
[info]   CI (99.9%): [3429130.472, 3506884.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2393.855 ±(99.9%) 76.198 MB/sec [Average]
[info]   (min, avg, max) = (2377.528, 2393.855, 2424.736), stdev = 19.788
[info]   CI (99.9%): [2317.658, 2470.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1086.515 ±(99.9%) 27.216 B/op [Average]
[info]   (min, avg, max) = (1077.440, 1086.515, 1096.380), stdev = 7.068
[info]   CI (99.9%): [1059.299, 1113.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.038 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.038, 0.047), stdev = 0.009
[info]   CI (99.9%): [0.002, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2299.961 ±(99.9%) 1413.176 MB/sec [Average]
[info]   (min, avg, max) = (2027.065, 2299.961, 2706.676), stdev = 366.997
[info]   CI (99.9%): [886.785, 3713.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1043.650 ±(99.9%) 633.060 B/op [Average]
[info]   (min, avg, max) = (918.618, 1043.650, 1223.864), stdev = 164.404
[info]   CI (99.9%): [410.590, 1676.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:10:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.845 ops/s
[info] # Warmup Iteration   2: 3577045.447 ops/s
[info] # Warmup Iteration   3: 3768133.214 ops/s
[info] # Warmup Iteration   4: 3777615.026 ops/s
[info] # Warmup Iteration   5: 3799934.016 ops/s
[info] Iteration   1: 3785652.073 ops/s
[info]                  ·gc.alloc.rate:                   416.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              173.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 279.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3769244.263 ops/s
[info]                  ·gc.alloc.rate:      408.025 MB/sec
[info]                  ·gc.alloc.rate.norm: 170.360 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3798314.277 ops/s
[info]                  ·gc.alloc.rate:                   419.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              174.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 278.228 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3796264.088 ops/s
[info]                  ·gc.alloc.rate:                   424.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 278.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3792966.025 ops/s
[info]                  ·gc.alloc.rate:      404.815 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   3788488.145 ±(99.9%) 45375.548 ops/s [Average]
[info]   (min, avg, max) = (3769244.263, 3788488.145, 3798314.277), stdev = 11783.886
[info]   CI (99.9%): [3743112.597, 3833863.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   414.941 ±(99.9%) 32.240 MB/sec [Average]
[info]   (min, avg, max) = (404.815, 414.941, 424.987), stdev = 8.373
[info]   CI (99.9%): [382.701, 447.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   172.390 ±(99.9%) 12.413 B/op [Average]
[info]   (min, avg, max) = (168.000, 172.390, 176.208), stdev = 3.224
[info]   CI (99.9%): [159.977, 184.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.725 ±(99.9%) 6.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.613), stdev = 1.614
[info]   CI (99.9%): [≈ 0, 6.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.301 ±(99.9%) 2.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.301, 1.497), stdev = 0.669
[info]   CI (99.9%): [≈ 0, 2.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.710 ±(99.9%) 1415.581 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.710, 671.455), stdev = 367.622
[info]   CI (99.9%): [≈ 0, 1818.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   167.099 ±(99.9%) 587.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 167.099, 279.156), stdev = 152.540
[info]   CI (99.9%): [≈ 0, 754.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1287418.931 ops/s
[info] # Warmup Iteration   2: 2715481.848 ops/s
[info] # Warmup Iteration   3: 2791526.765 ops/s
[info] # Warmup Iteration   4: 2748446.384 ops/s
[info] # Warmup Iteration   5: 2785726.390 ops/s
[info] Iteration   1: 2787317.711 ops/s
[info]                  ·gc.alloc.rate:                   1344.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              759.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 761.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2786541.109 ops/s
[info]                  ·gc.alloc.rate:                   1336.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              755.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 762.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2727137.607 ops/s
[info]                  ·gc.alloc.rate:                   1314.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              759.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 779.273 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2788564.705 ops/s
[info]                  ·gc.alloc.rate:                   1343.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              758.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 762.854 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2765560.477 ops/s
[info]                  ·gc.alloc.rate:                   1322.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 769.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   2771024.322 ±(99.9%) 101327.695 ops/s [Average]
[info]   (min, avg, max) = (2727137.607, 2771024.322, 2788564.705), stdev = 26314.481
[info]   CI (99.9%): [2669696.626, 2872352.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1332.537 ±(99.9%) 50.964 MB/sec [Average]
[info]   (min, avg, max) = (1314.973, 1332.537, 1344.590), stdev = 13.235
[info]   CI (99.9%): [1281.573, 1383.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   756.985 ±(99.9%) 11.115 B/op [Average]
[info]   (min, avg, max) = (752.856, 756.985, 759.389), stdev = 2.887
[info]   CI (99.9%): [745.869, 768.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.038 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.059), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1350.163 ±(99.9%) 6.013 MB/sec [Average]
[info]   (min, avg, max) = (1348.005, 1350.163, 1351.894), stdev = 1.562
[info]   CI (99.9%): [1344.150, 1356.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   767.053 ±(99.9%) 29.166 B/op [Average]
[info]   (min, avg, max) = (761.317, 767.053, 779.273), stdev = 7.574
[info]   CI (99.9%): [737.886, 796.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3153048.268 ops/s
[info] # Warmup Iteration   2: 3873015.559 ops/s
[info] # Warmup Iteration   3: 3966124.002 ops/s
[info] # Warmup Iteration   4: 3950149.786 ops/s
[info] # Warmup Iteration   5: 3897135.947 ops/s
[info] Iteration   1: 3978713.331 ops/s
[info]                  ·gc.alloc.rate:      424.626 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3965254.027 ops/s
[info]                  ·gc.alloc.rate:                   441.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              175.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267.453 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3956736.097 ops/s
[info]                  ·gc.alloc.rate:                   441.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              175.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 268.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3971387.286 ops/s
[info]                  ·gc.alloc.rate:      423.850 MB/sec
[info]                  ·gc.alloc.rate.norm: 168.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3968920.443 ops/s
[info]                  ·gc.alloc.rate:                   447.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              177.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   3968202.237 ±(99.9%) 31122.861 ops/s [Average]
[info]   (min, avg, max) = (3956736.097, 3968202.237, 3978713.331), stdev = 8082.508
[info]   CI (99.9%): [3937079.376, 3999325.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   435.748 ±(99.9%) 41.731 MB/sec [Average]
[info]   (min, avg, max) = (423.850, 435.748, 447.729), stdev = 10.838
[info]   CI (99.9%): [394.017, 477.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   172.862 ±(99.9%) 17.452 B/op [Average]
[info]   (min, avg, max) = (168.000, 172.862, 177.597), stdev = 4.532
[info]   CI (99.9%): [155.410, 190.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.585 ±(99.9%) 5.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.585, 2.924), stdev = 1.308
[info]   CI (99.9%): [≈ 0, 5.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.233 ±(99.9%) 2.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.233, 1.163), stdev = 0.520
[info]   CI (99.9%): [≈ 0, 2.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   404.010 ±(99.9%) 1420.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.010, 673.746), stdev = 368.810
[info]   CI (99.9%): [≈ 0, 1824.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   160.452 ±(99.9%) 564.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 160.452, 268.021), stdev = 146.473
[info]   CI (99.9%): [≈ 0, 724.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1492434.602 ops/s
[info] # Warmup Iteration   2: 2798116.420 ops/s
[info] # Warmup Iteration   3: 2910843.316 ops/s
[info] # Warmup Iteration   4: 2919552.798 ops/s
[info] # Warmup Iteration   5: 2904304.118 ops/s
[info] Iteration   1: 2912894.243 ops/s
[info]                  ·gc.alloc.rate:                   1412.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              763.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2910162.938 ops/s
[info]                  ·gc.alloc.rate:                   1407.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              761.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 729.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2920554.652 ops/s
[info]                  ·gc.alloc.rate:                   1431.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              771.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 727.672 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2874164.758 ops/s
[info]                  ·gc.alloc.rate:                   1385.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              759.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 740.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2920900.393 ops/s
[info]                  ·gc.alloc.rate:                   1421.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              765.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 729.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   2907735.397 ±(99.9%) 74496.399 ops/s [Average]
[info]   (min, avg, max) = (2874164.758, 2907735.397, 2920900.393), stdev = 19346.478
[info]   CI (99.9%): [2833238.998, 2982231.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1411.787 ±(99.9%) 65.863 MB/sec [Average]
[info]   (min, avg, max) = (1385.999, 1411.787, 1431.825), stdev = 17.104
[info]   CI (99.9%): [1345.925, 1477.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   764.222 ±(99.9%) 18.695 B/op [Average]
[info]   (min, avg, max) = (759.017, 764.222, 771.675), stdev = 4.855
[info]   CI (99.9%): [745.527, 782.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.029 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.029, 0.068), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1350.430 ±(99.9%) 6.910 MB/sec [Average]
[info]   (min, avg, max) = (1348.335, 1350.430, 1352.816), stdev = 1.795
[info]   CI (99.9%): [1343.520, 1357.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   731.054 ±(99.9%) 19.828 B/op [Average]
[info]   (min, avg, max) = (727.672, 731.054, 740.168), stdev = 5.149
[info]   CI (99.9%): [711.225, 750.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1186991.523 ops/s
[info] # Warmup Iteration   2: 2171733.106 ops/s
[info] # Warmup Iteration   3: 2243497.766 ops/s
[info] # Warmup Iteration   4: 2247039.230 ops/s
[info] # Warmup Iteration   5: 2235497.452 ops/s
[info] Iteration   1: 2252598.933 ops/s
[info]                  ·gc.alloc.rate:                   554.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              387.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 471.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2253772.785 ops/s
[info]                  ·gc.alloc.rate:                   561.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 471.251 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2232747.206 ops/s
[info]                  ·gc.alloc.rate:                   546.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              385.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 475.663 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2235159.456 ops/s
[info]                  ·gc.alloc.rate:      537.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 378.706 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2242774.700 ops/s
[info]                  ·gc.alloc.rate:                   553.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              388.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2243410.616 ±(99.9%) 37233.659 ops/s [Average]
[info]   (min, avg, max) = (2232747.206, 2243410.616, 2253772.785), stdev = 9669.463
[info]   CI (99.9%): [2206176.957, 2280644.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   550.886 ±(99.9%) 34.450 MB/sec [Average]
[info]   (min, avg, max) = (537.770, 550.886, 561.258), stdev = 8.947
[info]   CI (99.9%): [516.435, 585.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   386.514 ±(99.9%) 19.059 B/op [Average]
[info]   (min, avg, max) = (378.706, 386.514, 392.008), stdev = 4.950
[info]   CI (99.9%): [367.455, 405.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 1.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.624), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.096 ±(99.9%) 0.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.436), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   539.708 ±(99.9%) 1161.763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.708, 674.719), stdev = 301.706
[info]   CI (99.9%): [≈ 0, 1701.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   378.344 ±(99.9%) 814.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 378.344, 475.663), stdev = 211.509
[info]   CI (99.9%): [≈ 0, 1192.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.814 ops/s
[info] # Warmup Iteration   2: 5341463.418 ops/s
[info] # Warmup Iteration   3: 5430496.708 ops/s
[info] # Warmup Iteration   4: 5829451.557 ops/s
[info] # Warmup Iteration   5: 5798049.511 ops/s
[info] Iteration   1: 5818570.198 ops/s
[info]                  ·gc.alloc.rate:                   574.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.443 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5643533.240 ops/s
[info]                  ·gc.alloc.rate:                   557.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186.706 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5852112.050 ops/s
[info]                  ·gc.alloc.rate:      565.732 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.133 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5612506.534 ops/s
[info]                  ·gc.alloc.rate:                   562.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187.751 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5850414.299 ops/s
[info]                  ·gc.alloc.rate:                   583.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5755427.264 ±(99.9%) 452774.665 ops/s [Average]
[info]   (min, avg, max) = (5612506.534, 5755427.264, 5852112.050), stdev = 117584.143
[info]   CI (99.9%): [5302652.599, 6208201.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   568.747 ±(99.9%) 39.580 MB/sec [Average]
[info]   (min, avg, max) = (557.942, 568.747, 583.616), stdev = 10.279
[info]   CI (99.9%): [529.166, 608.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   155.529 ±(99.9%) 8.164 B/op [Average]
[info]   (min, avg, max) = (152.133, 155.529, 157.611), stdev = 2.120
[info]   CI (99.9%): [147.366, 163.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.796 ±(99.9%) 6.764 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.796, 3.938), stdev = 1.756
[info]   CI (99.9%): [≈ 0, 7.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.215 ±(99.9%) 1.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.215, 1.065), stdev = 0.475
[info]   CI (99.9%): [≈ 0, 2.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   535.919 ±(99.9%) 1153.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.919, 670.763), stdev = 299.588
[info]   CI (99.9%): [≈ 0, 1689.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   147.201 ±(99.9%) 317.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 147.201, 187.751), stdev = 82.353
[info]   CI (99.9%): [≈ 0, 464.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1834507.384 ops/s
[info] # Warmup Iteration   2: 3333465.273 ops/s
[info] # Warmup Iteration   3: 3357882.361 ops/s
[info] # Warmup Iteration   4: 3377644.429 ops/s
[info] # Warmup Iteration   5: 3395034.336 ops/s
[info] Iteration   1: 3368051.937 ops/s
[info]                  ·gc.alloc.rate:                   912.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              426.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 315.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3331947.222 ops/s
[info]                  ·gc.alloc.rate:                   908.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              428.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 318.430 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3353882.370 ops/s
[info]                  ·gc.alloc.rate:                   931.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              437.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 633.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3350989.874 ops/s
[info]                  ·gc.alloc.rate:                   902.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316.936 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3366573.416 ops/s
[info]                  ·gc.alloc.rate:                   905.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              423.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 315.455 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   3354288.964 ±(99.9%) 56149.794 ops/s [Average]
[info]   (min, avg, max) = (3331947.222, 3354288.964, 3368051.937), stdev = 14581.923
[info]   CI (99.9%): [3298139.170, 3410438.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   911.996 ±(99.9%) 43.205 MB/sec [Average]
[info]   (min, avg, max) = (902.800, 911.996, 931.102), stdev = 11.220
[info]   CI (99.9%): [868.790, 955.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   427.939 ±(99.9%) 21.230 B/op [Average]
[info]   (min, avg, max) = (423.427, 427.939, 437.007), stdev = 5.513
[info]   CI (99.9%): [406.709, 449.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.059), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809.313 ±(99.9%) 1161.091 MB/sec [Average]
[info]   (min, avg, max) = (674.136, 809.313, 1348.708), stdev = 301.532
[info]   CI (99.9%): [≈ 0, 1970.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   379.772 ±(99.9%) 545.133 B/op [Average]
[info]   (min, avg, max) = (315.031, 379.772, 633.008), stdev = 141.569
[info]   CI (99.9%): [≈ 0, 924.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4321332.090 ops/s
[info] # Warmup Iteration   2: 5018845.455 ops/s
[info] # Warmup Iteration   3: 5350272.167 ops/s
[info] # Warmup Iteration   4: 5268814.033 ops/s
[info] # Warmup Iteration   5: 5438494.829 ops/s
[info] Iteration   1: 5384253.925 ops/s
[info]                  ·gc.alloc.rate:                   535.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196.870 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5375870.856 ops/s
[info]                  ·gc.alloc.rate:                   536.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.168 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5441774.943 ops/s
[info]                  ·gc.alloc.rate:                   544.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.587 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5435993.864 ops/s
[info]                  ·gc.alloc.rate:                   538.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.793 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5430967.906 ops/s
[info]                  ·gc.alloc.rate:      524.571 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   5413772.299 ±(99.9%) 119950.628 ops/s [Average]
[info]   (min, avg, max) = (5375870.856, 5413772.299, 5441774.943), stdev = 31150.797
[info]   CI (99.9%): [5293821.670, 5533722.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   535.920 ±(99.9%) 28.250 MB/sec [Average]
[info]   (min, avg, max) = (524.571, 535.920, 544.917), stdev = 7.336
[info]   CI (99.9%): [507.671, 564.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   155.794 ±(99.9%) 8.545 B/op [Average]
[info]   (min, avg, max) = (152.000, 155.794, 157.596), stdev = 2.219
[info]   CI (99.9%): [147.249, 164.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.604 ±(99.9%) 5.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.987), stdev = 1.333
[info]   CI (99.9%): [≈ 0, 5.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.177 ±(99.9%) 1.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.177, 0.875), stdev = 0.390
[info]   CI (99.9%): [≈ 0, 1.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.540 ±(99.9%) 1159.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.540, 673.467), stdev = 301.053
[info]   CI (99.9%): [≈ 0, 1697.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   156.684 ±(99.9%) 337.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 156.684, 197.168), stdev = 87.597
[info]   CI (99.9%): [≈ 0, 493.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5185731.326 ops/s
[info] # Warmup Iteration   2: 6368471.417 ops/s
[info] # Warmup Iteration   3: 6516148.493 ops/s
[info] # Warmup Iteration   4: 6271156.722 ops/s
[info] # Warmup Iteration   5: 6477506.028 ops/s
[info] Iteration   1: 6513582.006 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6508052.580 ops/s
[info]                  ·gc.alloc.rate:      1.605 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.388 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6535602.762 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6538222.741 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6530222.571 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6525136.532 ±(99.9%) 52091.511 ops/s [Average]
[info]   (min, avg, max) = (6508052.580, 6525136.532, 6538222.741), stdev = 13528.000
[info]   CI (99.9%): [6473045.021, 6577228.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.321 ±(99.9%) 2.763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.321, 1.605), stdev = 0.717
[info]   CI (99.9%): [≈ 0, 3.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.078 ±(99.9%) 0.668 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.078, 0.388), stdev = 0.174
[info]   CI (99.9%): [≈ 0, 0.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1797474.366 ops/s
[info] # Warmup Iteration   2: 3453965.223 ops/s
[info] # Warmup Iteration   3: 3499891.668 ops/s
[info] # Warmup Iteration   4: 3537663.421 ops/s
[info] # Warmup Iteration   5: 3534879.783 ops/s
[info] Iteration   1: 3501068.119 ops/s
[info]                  ·gc.alloc.rate:                   985.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 3522403.511 ops/s
[info]                  ·gc.alloc.rate:                   1018.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              454.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 602.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3554102.808 ops/s
[info]                  ·gc.alloc.rate:                   994.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 298.817 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3519848.142 ops/s
[info]                  ·gc.alloc.rate:                   999.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              447.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 603.752 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3546530.025 ops/s
[info]                  ·gc.alloc.rate:                   989.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              438.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299.745 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3528790.521 ±(99.9%) 82692.376 ops/s [Average]
[info]   (min, avg, max) = (3501068.119, 3528790.521, 3554102.808), stdev = 21474.947
[info]   CI (99.9%): [3446098.145, 3611482.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   997.387 ±(99.9%) 49.962 MB/sec [Average]
[info]   (min, avg, max) = (985.096, 997.387, 1018.334), stdev = 12.975
[info]   CI (99.9%): [947.425, 1047.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   444.826 ±(99.9%) 24.918 B/op [Average]
[info]   (min, avg, max) = (438.887, 444.826, 454.981), stdev = 6.471
[info]   CI (99.9%): [419.908, 469.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.015 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   944.934 ±(99.9%) 1423.743 MB/sec [Average]
[info]   (min, avg, max) = (674.301, 944.934, 1350.559), stdev = 369.742
[info]   CI (99.9%): [≈ 0, 2368.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   421.681 ±(99.9%) 638.516 B/op [Average]
[info]   (min, avg, max) = (298.817, 421.681, 603.752), stdev = 165.821
[info]   CI (99.9%): [≈ 0, 1060.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 438295.301 ops/s
[info] # Warmup Iteration   2: 1034978.509 ops/s
[info] # Warmup Iteration   3: 1063263.773 ops/s
[info] # Warmup Iteration   4: 1075094.123 ops/s
[info] # Warmup Iteration   5: 1074368.852 ops/s
[info] Iteration   1: 1075932.855 ops/s
[info]                  ·gc.alloc.rate:                   1767.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              2586.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2951.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1061073.844 ops/s
[info]                  ·gc.alloc.rate:                   1751.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              2597.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1996.911 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1076678.645 ops/s
[info]                  ·gc.alloc.rate:                   1777.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              2599.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2955.403 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1075750.766 ops/s
[info]                  ·gc.alloc.rate:                   1762.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              2578.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1974.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1074931.479 ops/s
[info]                  ·gc.alloc.rate:                   1788.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              2617.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2969.427 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1072873.517 ±(99.9%) 25512.122 ops/s [Average]
[info]   (min, avg, max) = (1061073.844, 1072873.517, 1076678.645), stdev = 6625.417
[info]   CI (99.9%): [1047361.396, 1098385.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1769.537 ±(99.9%) 55.125 MB/sec [Average]
[info]   (min, avg, max) = (1751.128, 1769.537, 1788.446), stdev = 14.316
[info]   CI (99.9%): [1714.412, 1824.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2595.973 ±(99.9%) 57.411 B/op [Average]
[info]   (min, avg, max) = (2578.743, 2595.973, 2617.835), stdev = 14.910
[info]   CI (99.9%): [2538.562, 2653.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.073 ±(99.9%) 0.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.183), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1752.641 ±(99.9%) 1422.969 MB/sec [Average]
[info]   (min, avg, max) = (1346.034, 1752.641, 2028.647), stdev = 369.541
[info]   CI (99.9%): [329.672, 3175.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2569.582 ±(99.9%) 2052.677 B/op [Average]
[info]   (min, avg, max) = (1974.565, 2569.582, 2969.427), stdev = 533.074
[info]   CI (99.9%): [516.905, 4622.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.637 ops/s
[info] # Warmup Iteration   2: 1738201.612 ops/s
[info] # Warmup Iteration   3: 1790119.647 ops/s
[info] # Warmup Iteration   4: 1745913.709 ops/s
[info] # Warmup Iteration   5: 1794439.822 ops/s
[info] Iteration   1: 1802537.407 ops/s
[info]                  ·gc.alloc.rate:                   524.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              457.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 585.705 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1716627.478 ops/s
[info]                  ·gc.alloc.rate:      479.863 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1762316.378 ops/s
[info]                  ·gc.alloc.rate:                   511.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              456.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 598.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1795496.035 ops/s
[info]                  ·gc.alloc.rate:                   517.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              453.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587.415 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1796547.330 ops/s
[info]                  ·gc.alloc.rate:      502.277 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   1774704.926 ±(99.9%) 138976.695 ops/s [Average]
[info]   (min, avg, max) = (1716627.478, 1774704.926, 1802537.407), stdev = 36091.806
[info]   CI (99.9%): [1635728.230, 1913681.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   506.922 ±(99.9%) 66.040 MB/sec [Average]
[info]   (min, avg, max) = (479.863, 506.922, 524.337), stdev = 17.150
[info]   CI (99.9%): [440.882, 572.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   449.535 ±(99.9%) 34.144 B/op [Average]
[info]   (min, avg, max) = (440.000, 449.535, 457.913), stdev = 8.867
[info]   CI (99.9%): [415.390, 483.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.794 ±(99.9%) 6.791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.794, 3.949), stdev = 1.764
[info]   CI (99.9%): [≈ 0, 7.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.693 ±(99.9%) 5.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.693, 3.448), stdev = 1.540
[info]   CI (99.9%): [≈ 0, 6.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   402.156 ±(99.9%) 1413.634 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.156, 670.666), stdev = 367.116
[info]   CI (99.9%): [≈ 0, 1815.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   354.317 ±(99.9%) 1245.617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 354.317, 598.466), stdev = 323.483
[info]   CI (99.9%): [≈ 0, 1599.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139071.789 ops/s
[info] # Warmup Iteration   2: 1163716.798 ops/s
[info] # Warmup Iteration   3: 1244553.543 ops/s
[info] # Warmup Iteration   4: 1244042.873 ops/s
[info] # Warmup Iteration   5: 1243346.347 ops/s
[info] Iteration   1: 1252148.119 ops/s
[info]                  ·gc.alloc.rate:                   782.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              983.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 846.539 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1244252.091 ops/s
[info]                  ·gc.alloc.rate:                   791.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              1001.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 851.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1230634.074 ops/s
[info]                  ·gc.alloc.rate:                   797.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              1020.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1723.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1252372.289 ops/s
[info]                  ·gc.alloc.rate:                   794.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              998.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 847.216 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1253988.739 ops/s
[info]                  ·gc.alloc.rate:                   790.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              992.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 846.140 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1246679.063 ±(99.9%) 37486.301 ops/s [Average]
[info]   (min, avg, max) = (1230634.074, 1246679.063, 1253988.739), stdev = 9735.073
[info]   CI (99.9%): [1209192.762, 1284165.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   791.489 ±(99.9%) 21.930 MB/sec [Average]
[info]   (min, avg, max) = (782.587, 791.489, 797.920), stdev = 5.695
[info]   CI (99.9%): [769.559, 813.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   999.417 ±(99.9%) 52.490 B/op [Average]
[info]   (min, avg, max) = (983.896, 999.417, 1020.593), stdev = 13.632
[info]   CI (99.9%): [946.926, 1051.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.011 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   808.481 ±(99.9%) 1160.146 MB/sec [Average]
[info]   (min, avg, max) = (673.333, 808.481, 1347.438), stdev = 301.286
[info]   CI (99.9%): [≈ 0, 1968.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1023.052 ±(99.9%) 1507.714 B/op [Average]
[info]   (min, avg, max) = (846.140, 1023.052, 1723.463), stdev = 391.549
[info]   CI (99.9%): [≈ 0, 2530.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 964941.151 ops/s
[info] # Warmup Iteration   2: 1514153.455 ops/s
[info] # Warmup Iteration   3: 1701827.222 ops/s
[info] # Warmup Iteration   4: 1717636.248 ops/s
[info] # Warmup Iteration   5: 1724036.376 ops/s
[info] Iteration   1: 1725050.444 ops/s
[info]                  ·gc.alloc.rate:                   503.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              459.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 615.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1725012.346 ops/s
[info]                  ·gc.alloc.rate:      482.307 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1708152.114 ops/s
[info]                  ·gc.alloc.rate:                   494.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              456.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 621.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1721666.285 ops/s
[info]                  ·gc.alloc.rate:                   505.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              462.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 615.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1713925.756 ops/s
[info]                  ·gc.alloc.rate:                   493.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              453.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 617.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1718761.389 ±(99.9%) 28751.520 ops/s [Average]
[info]   (min, avg, max) = (1708152.114, 1718761.389, 1725050.444), stdev = 7466.678
[info]   CI (99.9%): [1690009.869, 1747512.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   495.910 ±(99.9%) 35.481 MB/sec [Average]
[info]   (min, avg, max) = (482.307, 495.910, 505.411), stdev = 9.214
[info]   CI (99.9%): [460.428, 531.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   454.112 ±(99.9%) 32.995 B/op [Average]
[info]   (min, avg, max) = (440.001, 454.112, 462.045), stdev = 8.569
[info]   CI (99.9%): [421.117, 487.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.595 ±(99.9%) 5.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.956), stdev = 1.319
[info]   CI (99.9%): [≈ 0, 5.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.549 ±(99.9%) 4.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.549, 2.724), stdev = 1.216
[info]   CI (99.9%): [≈ 0, 5.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.751 ±(99.9%) 1159.705 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.751, 674.172), stdev = 301.172
[info]   CI (99.9%): [≈ 0, 1698.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   493.806 ±(99.9%) 1062.998 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 493.806, 621.117), stdev = 276.057
[info]   CI (99.9%): [≈ 0, 1556.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291716.177 ops/s
[info] # Warmup Iteration   2: 1139086.822 ops/s
[info] # Warmup Iteration   3: 1226011.427 ops/s
[info] # Warmup Iteration   4: 1258681.397 ops/s
[info] # Warmup Iteration   5: 1261553.257 ops/s
[info] Iteration   1: 1260822.354 ops/s
[info]                  ·gc.alloc.rate:                   830.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              1037.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 841.510 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1255158.654 ops/s
[info]                  ·gc.alloc.rate:                   832.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              1044.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 845.320 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1263227.401 ops/s
[info]                  ·gc.alloc.rate:                   833.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              1038.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 839.907 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1263384.900 ops/s
[info]                  ·gc.alloc.rate:                   839.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              1046.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 840.595 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1261116.785 ops/s
[info]                  ·gc.alloc.rate:                   852.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1684.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1260742.019 ±(99.9%) 12841.018 ops/s [Average]
[info]   (min, avg, max) = (1255158.654, 1260742.019, 1263384.900), stdev = 3334.772
[info]   CI (99.9%): [1247901.001, 1273583.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   837.844 ±(99.9%) 34.829 MB/sec [Average]
[info]   (min, avg, max) = (830.607, 837.844, 852.875), stdev = 9.045
[info]   CI (99.9%): [803.016, 872.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1046.031 ±(99.9%) 42.494 B/op [Average]
[info]   (min, avg, max) = (1037.066, 1046.031, 1064.565), stdev = 11.036
[info]   CI (99.9%): [1003.538, 1088.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.036 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.078), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   809.270 ±(99.9%) 1162.598 MB/sec [Average]
[info]   (min, avg, max) = (673.982, 809.270, 1349.366), stdev = 301.923
[info]   CI (99.9%): [≈ 0, 1971.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1010.324 ±(99.9%) 1450.779 B/op [Average]
[info]   (min, avg, max) = (839.907, 1010.324, 1684.287), stdev = 376.763
[info]   CI (99.9%): [≈ 0, 2461.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236931.032 ops/s
[info] # Warmup Iteration   2: 1038834.003 ops/s
[info] # Warmup Iteration   3: 1055457.040 ops/s
[info] # Warmup Iteration   4: 1041430.786 ops/s
[info] # Warmup Iteration   5: 1043337.156 ops/s
[info] Iteration   1: 1043074.451 ops/s
[info]                  ·gc.alloc.rate:                   890.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              1342.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1016.678 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1035580.980 ops/s
[info]                  ·gc.alloc.rate:                   883.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              1342.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1025.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1059951.112 ops/s
[info]                  ·gc.alloc.rate:                   937.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2003.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1065094.469 ops/s
[info]                  ·gc.alloc.rate:                   912.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              1348.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 997.134 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1063207.898 ops/s
[info]                  ·gc.alloc.rate:                   908.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              1345.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 999.887 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1053381.782 ±(99.9%) 50939.425 ops/s [Average]
[info]   (min, avg, max) = (1035580.980, 1053381.782, 1065094.469), stdev = 13228.807
[info]   CI (99.9%): [1002442.357, 1104321.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   906.504 ±(99.9%) 81.366 MB/sec [Average]
[info]   (min, avg, max) = (883.589, 906.504, 937.297), stdev = 21.130
[info]   CI (99.9%): [825.139, 987.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1354.402 ±(99.9%) 81.186 B/op [Average]
[info]   (min, avg, max) = (1342.699, 1354.402, 1391.860), stdev = 21.084
[info]   CI (99.9%): [1273.216, 1435.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.043 ±(99.9%) 0.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.185), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   809.513 ±(99.9%) 1161.585 MB/sec [Average]
[info]   (min, avg, max) = (673.972, 809.513, 1349.138), stdev = 301.660
[info]   CI (99.9%): [≈ 0, 1971.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1208.437 ±(99.9%) 1711.871 B/op [Average]
[info]   (min, avg, max) = (997.134, 1208.437, 2003.432), stdev = 444.567
[info]   CI (99.9%): [≈ 0, 2920.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.698 ops/s
[info] # Warmup Iteration   2: 764975.080 ops/s
[info] # Warmup Iteration   3: 780096.440 ops/s
[info] # Warmup Iteration   4: 800181.131 ops/s
[info] # Warmup Iteration   5: 799681.365 ops/s
[info] Iteration   1: 802344.325 ops/s
[info]                  ·gc.alloc.rate:      208.129 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.334 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 798078.772 ops/s
[info]                  ·gc.alloc.rate:                   214.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              423.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1008.928 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 819385.505 ops/s
[info]                  ·gc.alloc.rate:      212.961 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.952 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 818658.075 ops/s
[info]                  ·gc.alloc.rate:      212.207 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 792746.575 ops/s
[info]                  ·gc.alloc.rate:                   222.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1331.749 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   806242.650 ±(99.9%) 46800.268 ops/s [Average]
[info]   (min, avg, max) = (792746.575, 806242.650, 819385.505), stdev = 12153.881
[info]   CI (99.9%): [759442.382, 853042.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   214.010 ±(99.9%) 19.723 MB/sec [Average]
[info]   (min, avg, max) = (208.129, 214.010, 222.109), stdev = 5.122
[info]   CI (99.9%): [194.288, 233.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   417.917 ±(99.9%) 55.561 B/op [Average]
[info]   (min, avg, max) = (408.000, 417.917, 441.014), stdev = 14.429
[info]   CI (99.9%): [362.355, 473.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.003 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   236.467 ±(99.9%) 1265.496 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 236.467, 670.712), stdev = 328.645
[info]   CI (99.9%): [≈ 0, 1501.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   468.136 ±(99.9%) 2507.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 468.136, 1331.749), stdev = 651.103
[info]   CI (99.9%): [≈ 0, 2975.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366242.743 ops/s
[info] # Warmup Iteration   2: 1824599.904 ops/s
[info] # Warmup Iteration   3: 1963036.622 ops/s
[info] # Warmup Iteration   4: 1975942.928 ops/s
[info] # Warmup Iteration   5: 1954529.528 ops/s
[info] Iteration   1: 1973481.080 ops/s
[info]                  ·gc.alloc.rate:                   976.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              778.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1075.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1976352.876 ops/s
[info]                  ·gc.alloc.rate:                   957.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              762.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 536.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1975682.518 ops/s
[info]                  ·gc.alloc.rate:                   956.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              762.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 537.291 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1947444.054 ops/s
[info]                  ·gc.alloc.rate:                   970.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              783.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1090.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1972646.358 ops/s
[info]                  ·gc.alloc.rate:                   948.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 538.384 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   1969121.377 ±(99.9%) 47029.984 ops/s [Average]
[info]   (min, avg, max) = (1947444.054, 1969121.377, 1976352.876), stdev = 12213.538
[info]   CI (99.9%): [1922091.393, 2016151.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   961.892 ±(99.9%) 42.806 MB/sec [Average]
[info]   (min, avg, max) = (948.545, 961.892, 976.310), stdev = 11.117
[info]   CI (99.9%): [919.086, 1004.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   768.912 ±(99.9%) 45.097 B/op [Average]
[info]   (min, avg, max) = (756.922, 768.912, 783.991), stdev = 11.711
[info]   CI (99.9%): [723.815, 814.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.027 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.101), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.116 ±(99.9%) 1422.026 MB/sec [Average]
[info]   (min, avg, max) = (674.139, 944.116, 1349.154), stdev = 369.296
[info]   CI (99.9%): [≈ 0, 2366.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   755.639 ±(99.9%) 1150.318 B/op [Average]
[info]   (min, avg, max) = (536.857, 755.639, 1090.431), stdev = 298.734
[info]   CI (99.9%): [≈ 0, 1905.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1178001.835 ops/s
[info] # Warmup Iteration   2: 2028672.870 ops/s
[info] # Warmup Iteration   3: 2086304.031 ops/s
[info] # Warmup Iteration   4: 2202597.252 ops/s
[info] # Warmup Iteration   5: 2192531.913 ops/s
[info] Iteration   1: 2205805.227 ops/s
[info]                  ·gc.alloc.rate:      571.684 MB/sec
[info]                  ·gc.alloc.rate.norm: 408.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2184363.368 ops/s
[info]                  ·gc.alloc.rate:                   587.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              423.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 486.458 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2170808.355 ops/s
[info]                  ·gc.alloc.rate:                   579.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              419.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488.755 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2195964.605 ops/s
[info]                  ·gc.alloc.rate:                   585.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              419.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 483.140 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2200463.139 ops/s
[info]                  ·gc.alloc.rate:                   584.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              418.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 481.692 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2191480.939 ±(99.9%) 53908.464 ops/s [Average]
[info]   (min, avg, max) = (2170808.355, 2191480.939, 2205805.227), stdev = 13999.857
[info]   CI (99.9%): [2137572.475, 2245389.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   581.508 ±(99.9%) 24.096 MB/sec [Average]
[info]   (min, avg, max) = (571.684, 581.508, 587.201), stdev = 6.258
[info]   CI (99.9%): [557.412, 605.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   417.686 ±(99.9%) 22.025 B/op [Average]
[info]   (min, avg, max) = (408.003, 417.686, 423.110), stdev = 5.720
[info]   CI (99.9%): [395.662, 439.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.535 ±(99.9%) 4.517 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.535, 2.633), stdev = 1.173
[info]   CI (99.9%): [≈ 0, 5.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.385 ±(99.9%) 3.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.385, 1.897), stdev = 0.845
[info]   CI (99.9%): [≈ 0, 3.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   539.336 ±(99.9%) 1160.964 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.336, 675.116), stdev = 301.499
[info]   CI (99.9%): [≈ 0, 1700.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   388.009 ±(99.9%) 835.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 388.009, 488.755), stdev = 216.921
[info]   CI (99.9%): [≈ 0, 1223.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1338207.278 ops/s
[info] # Warmup Iteration   2: 2238044.725 ops/s
[info] # Warmup Iteration   3: 2176049.945 ops/s
[info] # Warmup Iteration   4: 2304210.445 ops/s
[info] # Warmup Iteration   5: 2314927.169 ops/s
[info] Iteration   1: 2315747.067 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2316046.061 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2298131.679 ops/s
[info]                  ·gc.alloc.rate:      0.925 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.634 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2310926.656 ops/s
[info]                  ·gc.alloc.rate:      0.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2317163.442 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2311602.981 ±(99.9%) 30427.796 ops/s [Average]
[info]   (min, avg, max) = (2298131.679, 2311602.981, 2317163.442), stdev = 7902.002
[info]   CI (99.9%): [2281175.185, 2342030.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.195 ±(99.9%) 1.573 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.195, 0.925), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.134 ±(99.9%) 1.078 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.134, 0.634), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1122639.855 ops/s
[info] # Warmup Iteration   2: 1924459.856 ops/s
[info] # Warmup Iteration   3: 2013299.980 ops/s
[info] # Warmup Iteration   4: 2011453.210 ops/s
[info] # Warmup Iteration   5: 1987589.640 ops/s
[info] Iteration   1: 2007911.553 ops/s
[info]                  ·gc.alloc.rate:                   901.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              706.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 526.325 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2005962.962 ops/s
[info]                  ·gc.alloc.rate:                   904.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              709.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 526.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1978842.714 ops/s
[info]                  ·gc.alloc.rate:                   907.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              721.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1067.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2010843.680 ops/s
[info]                  ·gc.alloc.rate:                   896.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              701.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2010756.079 ops/s
[info]                  ·gc.alloc.rate:                   894.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              700.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2002863.398 ±(99.9%) 52305.855 ops/s [Average]
[info]   (min, avg, max) = (1978842.714, 2002863.398, 2010843.680), stdev = 13583.665
[info]   CI (99.9%): [1950557.542, 2055169.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   900.775 ±(99.9%) 20.930 MB/sec [Average]
[info]   (min, avg, max) = (894.490, 900.775, 907.444), stdev = 5.435
[info]   CI (99.9%): [879.845, 921.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   707.956 ±(99.9%) 33.049 B/op [Average]
[info]   (min, avg, max) = (700.244, 707.956, 721.726), stdev = 8.583
[info]   CI (99.9%): [674.908, 741.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.033), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   805.025 ±(99.9%) 1155.047 MB/sec [Average]
[info]   (min, avg, max) = (670.696, 805.025, 1341.613), stdev = 299.962
[info]   CI (99.9%): [≈ 0, 1960.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   633.949 ±(99.9%) 932.260 B/op [Average]
[info]   (min, avg, max) = (525.018, 633.949, 1067.038), stdev = 242.105
[info]   CI (99.9%): [≈ 0, 1566.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1125.295 ops/s
[info] # Warmup Iteration   2: 4991.922 ops/s
[info] # Warmup Iteration   3: 5976.923 ops/s
[info] # Warmup Iteration   4: 6107.270 ops/s
[info] # Warmup Iteration   5: 6111.832 ops/s
[info] Iteration   1: 6106.265 ops/s
[info]                  ·gc.alloc.rate:                   742.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              191363.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173932.780 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 6106.903 ops/s
[info]                  ·gc.alloc.rate:                   767.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              197761.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347636.935 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6108.449 ops/s
[info]                  ·gc.alloc.rate:                   754.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              194296.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173675.763 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6114.862 ops/s
[info]                  ·gc.alloc.rate:                   748.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              192582.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173676.829 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6115.262 ops/s
[info]                  ·gc.alloc.rate:                   754.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              194297.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173648.437 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   6110.348 ±(99.9%) 16.858 ops/s [Average]
[info]   (min, avg, max) = (6106.265, 6110.348, 6115.262), stdev = 4.378
[info]   CI (99.9%): [6093.490, 6127.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   753.360 ±(99.9%) 35.824 MB/sec [Average]
[info]   (min, avg, max) = (742.335, 753.360, 767.328), stdev = 9.303
[info]   CI (99.9%): [717.536, 789.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   194060.312 ±(99.9%) 9287.830 B/op [Average]
[info]   (min, avg, max) = (191363.330, 194060.312, 197761.784), stdev = 2412.020
[info]   CI (99.9%): [184772.482, 203348.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.202 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.795 ±(99.9%) 52.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.795, 32.194), stdev = 13.516
[info]   CI (99.9%): [≈ 0, 64.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   809.401 ±(99.9%) 1161.212 MB/sec [Average]
[info]   (min, avg, max) = (674.017, 809.401, 1348.853), stdev = 301.563
[info]   CI (99.9%): [≈ 0, 1970.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   208514.149 ±(99.9%) 299472.618 B/op [Average]
[info]   (min, avg, max) = (173648.437, 208514.149, 347636.935), stdev = 77772.088
[info]   CI (99.9%): [≈ 0, 507986.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295.843 ops/s
[info] # Warmup Iteration   2: 13270.075 ops/s
[info] # Warmup Iteration   3: 18853.844 ops/s
[info] # Warmup Iteration   4: 18735.641 ops/s
[info] # Warmup Iteration   5: 18828.500 ops/s
[info] Iteration   1: 18047.629 ops/s
[info]                  ·gc.alloc.rate:                   243.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              21195.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44615.311 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 18676.623 ops/s
[info]                  ·gc.alloc.rate:      253.262 MB/sec
[info]                  ·gc.alloc.rate.norm: 21342.752 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18708.755 ops/s
[info]                  ·gc.alloc.rate:                   258.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              21754.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56766.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18822.522 ops/s
[info]                  ·gc.alloc.rate:      247.315 MB/sec
[info]                  ·gc.alloc.rate.norm: 20680.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18710.058 ops/s
[info]                  ·gc.alloc.rate:      245.824 MB/sec
[info]                  ·gc.alloc.rate.norm: 20680.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   18593.118 ±(99.9%) 1193.397 ops/s [Average]
[info]   (min, avg, max) = (18047.629, 18593.118, 18822.522), stdev = 309.921
[info]   CI (99.9%): [17399.721, 19786.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   249.600 ±(99.9%) 24.116 MB/sec [Average]
[info]   (min, avg, max) = (243.017, 249.600, 258.582), stdev = 6.263
[info]   CI (99.9%): [225.484, 273.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21130.551 ±(99.9%) 1769.361 B/op [Average]
[info]   (min, avg, max) = (20680.022, 21130.551, 21754.540), stdev = 459.498
[info]   CI (99.9%): [19361.189, 22899.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.363 ±(99.9%) 3.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.363, 1.815), stdev = 0.812
[info]   CI (99.9%): [≈ 0, 3.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   237.256 ±(99.9%) 1270.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 237.256, 674.741), stdev = 329.960
[info]   CI (99.9%): [≈ 0, 1507.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20276.285 ±(99.9%) 108183.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20276.285, 56766.112), stdev = 28094.834
[info]   CI (99.9%): [≈ 0, 128459.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12640.561 ops/s
[info] # Warmup Iteration   2: 19710.167 ops/s
[info] # Warmup Iteration   3: 19009.105 ops/s
[info] # Warmup Iteration   4: 18953.929 ops/s
[info] # Warmup Iteration   5: 20145.532 ops/s
[info] Iteration   1: 19928.236 ops/s
[info]                  ·gc.alloc.rate:                   197.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              15586.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40404.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 20112.773 ops/s
[info]                  ·gc.alloc.rate:      184.617 MB/sec
[info]                  ·gc.alloc.rate.norm: 14448.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20139.989 ops/s
[info]                  ·gc.alloc.rate:      184.934 MB/sec
[info]                  ·gc.alloc.rate.norm: 14453.910 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20054.361 ops/s
[info]                  ·gc.alloc.rate:                   195.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              15333.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40146.885 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20166.684 ops/s
[info]                  ·gc.alloc.rate:      185.101 MB/sec
[info]                  ·gc.alloc.rate.norm: 14448.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   20080.409 ±(99.9%) 364.672 ops/s [Average]
[info]   (min, avg, max) = (19928.236, 20080.409, 20166.684), stdev = 94.704
[info]   CI (99.9%): [19715.736, 20445.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   189.466 ±(99.9%) 24.314 MB/sec [Average]
[info]   (min, avg, max) = (184.617, 189.466, 197.308), stdev = 6.314
[info]   CI (99.9%): [165.152, 213.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14853.975 ±(99.9%) 2157.807 B/op [Average]
[info]   (min, avg, max) = (14448.020, 14853.975, 15586.445), stdev = 560.376
[info]   CI (99.9%): [12696.169, 17011.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.602 ±(99.9%) 1078.809 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.602, 511.530), stdev = 280.163
[info]   CI (99.9%): [≈ 0, 1283.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16110.320 ±(99.9%) 84945.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16110.320, 40404.715), stdev = 22060.152
[info]   CI (99.9%): [≈ 0, 101056.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 341.706 ops/s
[info] # Warmup Iteration   2: 3405.451 ops/s
[info] # Warmup Iteration   3: 7054.372 ops/s
[info] # Warmup Iteration   4: 7038.212 ops/s
[info] # Warmup Iteration   5: 7269.336 ops/s
[info] Iteration   1: 7293.257 ops/s
[info]                  ·gc.alloc.rate:                   2036.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              439476.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 432798.127 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7263.858 ops/s
[info]                  ·gc.alloc.rate:                   2020.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              437779.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 435523.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7255.799 ops/s
[info]                  ·gc.alloc.rate:                   2027.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              439913.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 436870.544 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7307.042 ops/s
[info]                  ·gc.alloc.rate:                   2041.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              439849.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 289796.623 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7267.697 ops/s
[info]                  ·gc.alloc.rate:                   2011.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              435768.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 437880.375 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   7277.531 ±(99.9%) 83.349 ops/s [Average]
[info]   (min, avg, max) = (7255.799, 7277.531, 7307.042), stdev = 21.645
[info]   CI (99.9%): [7194.182, 7360.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2027.605 ±(99.9%) 46.222 MB/sec [Average]
[info]   (min, avg, max) = (2011.891, 2027.605, 2041.806), stdev = 12.004
[info]   CI (99.9%): [1981.383, 2073.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   438557.413 ±(99.9%) 6870.620 B/op [Average]
[info]   (min, avg, max) = (435768.749, 438557.413, 439913.564), stdev = 1784.278
[info]   CI (99.9%): [431686.793, 445428.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.042), stdev = 0.009
[info]   CI (99.9%): [0.002, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8.102 ±(99.9%) 7.737 B/op [Average]
[info]   (min, avg, max) = (4.508, 8.102, 9.031), stdev = 2.009
[info]   CI (99.9%): [0.365, 15.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1879.169 ±(99.9%) 1149.527 MB/sec [Average]
[info]   (min, avg, max) = (1345.253, 1879.169, 2021.640), stdev = 298.529
[info]   CI (99.9%): [729.641, 3028.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   406573.830 ±(99.9%) 251479.056 B/op [Average]
[info]   (min, avg, max) = (289796.623, 406573.830, 437880.375), stdev = 65308.312
[info]   CI (99.9%): [155094.774, 658052.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f6a7f336/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 4955.196 ops/s
[info] # Warmup Iteration   2: 49288.473 ops/s
[info] # Warmup Iteration   3: 53701.625 ops/s
[info] # Warmup Iteration   4: 53673.449 ops/s
[info] # Warmup Iteration   5: 53116.304 ops/s
[info] Iteration   1: 53534.335 ops/s
[info]                  ·gc.alloc.rate:                   688.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              20244.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19799.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 51854.096 ops/s
[info]                  ·gc.alloc.rate:                   669.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              20304.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20440.984 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 53504.171 ops/s
[info]                  ·gc.alloc.rate:                   696.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              20486.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19810.333 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 53608.666 ops/s
[info]                  ·gc.alloc.rate:                   696.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              20451.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19771.169 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 53790.514 ops/s
[info]                  ·gc.alloc.rate:                   691.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              20224.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19705.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   53258.356 ±(99.9%) 3052.984 ops/s [Average]
[info]   (min, avg, max) = (51854.096, 53258.356, 53790.514), stdev = 792.850
[info]   CI (99.9%): [50205.372, 56311.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   688.338 ±(99.9%) 43.641 MB/sec [Average]
[info]   (min, avg, max) = (669.051, 688.338, 696.554), stdev = 11.333
[info]   CI (99.9%): [644.697, 731.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20342.407 ±(99.9%) 461.876 B/op [Average]
[info]   (min, avg, max) = (20224.362, 20342.407, 20486.374), stdev = 119.948
[info]   CI (99.9%): [19880.531, 20804.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.489 ±(99.9%) 1.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.489, 1.222), stdev = 0.511
[info]   CI (99.9%): [≈ 0, 2.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.423 ±(99.9%) 0.382 MB/sec [Average]
[info]   (min, avg, max) = (673.315, 673.423, 673.544), stdev = 0.099
[info]   CI (99.9%): [673.042, 673.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19905.348 ±(99.9%) 1163.714 B/op [Average]
[info]   (min, avg, max) = (19705.019, 19905.348, 20440.984), stdev = 302.213
[info]   CI (99.9%): [18741.634, 21069.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32048.583 ops/s
[info] # Warmup Iteration   2: 79861.195 ops/s
[info] # Warmup Iteration   3: 80966.034 ops/s
[info] # Warmup Iteration   4: 81948.226 ops/s
[info] # Warmup Iteration   5: 82371.585 ops/s
[info] Iteration   1: 81256.566 ops/s
[info]                  ·gc.alloc.rate:                   546.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              10590.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.945 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13018.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 80840.560 ops/s
[info]                  ·gc.alloc.rate:                   539.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              10498.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13085.963 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 81993.327 ops/s
[info]                  ·gc.alloc.rate:                   554.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              10644.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12901.498 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 80853.012 ops/s
[info]                  ·gc.alloc.rate:      539.502 MB/sec
[info]                  ·gc.alloc.rate.norm: 10502.564 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 81457.065 ops/s
[info]                  ·gc.alloc.rate:                   542.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              10482.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12993.292 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   81280.106 ±(99.9%) 1842.849 ops/s [Average]
[info]   (min, avg, max) = (80840.560, 81280.106, 81993.327), stdev = 478.582
[info]   CI (99.9%): [79437.257, 83122.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   544.483 ±(99.9%) 24.440 MB/sec [Average]
[info]   (min, avg, max) = (539.304, 544.483, 554.530), stdev = 6.347
[info]   CI (99.9%): [520.044, 568.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10543.746 ±(99.9%) 271.764 B/op [Average]
[info]   (min, avg, max) = (10482.486, 10543.746, 10644.824), stdev = 70.576
[info]   CI (99.9%): [10271.982, 10815.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.416), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 0.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.862 ±(99.9%) 13.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.862, 8.106), stdev = 3.506
[info]   CI (99.9%): [≈ 0, 15.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   537.735 ±(99.9%) 1157.516 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.735, 672.407), stdev = 300.603
[info]   CI (99.9%): [≈ 0, 1695.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10399.946 ±(99.9%) 22388.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10399.946, 13085.963), stdev = 5814.123
[info]   CI (99.9%): [≈ 0, 32788.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37066.586 ops/s
[info] # Warmup Iteration   2: 83862.667 ops/s
[info] # Warmup Iteration   3: 84859.070 ops/s
[info] # Warmup Iteration   4: 84165.371 ops/s
[info] # Warmup Iteration   5: 85912.325 ops/s
[info] Iteration   1: 85571.437 ops/s
[info]                  ·gc.alloc.rate:      23.119 MB/sec
[info]                  ·gc.alloc.rate.norm: 425.300 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 85073.052 ops/s
[info]                  ·gc.alloc.rate:      22.918 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 85378.286 ops/s
[info]                  ·gc.alloc.rate:      23.434 MB/sec
[info]                  ·gc.alloc.rate.norm: 432.045 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 85341.515 ops/s
[info]                  ·gc.alloc.rate:      25.548 MB/sec
[info]                  ·gc.alloc.rate.norm: 471.171 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 85282.894 ops/s
[info]                  ·gc.alloc.rate:                   50.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              929.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9440.983 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   85329.437 ±(99.9%) 691.498 ops/s [Average]
[info]   (min, avg, max) = (85073.052, 85329.437, 85571.437), stdev = 179.580
[info]   CI (99.9%): [84637.938, 86020.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   29.078 ±(99.9%) 46.019 MB/sec [Average]
[info]   (min, avg, max) = (22.918, 29.078, 50.374), stdev = 11.951
[info]   CI (99.9%): [≈ 0, 75.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   536.449 ±(99.9%) 849.813 B/op [Average]
[info]   (min, avg, max) = (424.005, 536.449, 929.722), stdev = 220.694
[info]   CI (99.9%): [≈ 0, 1386.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   102.306 ±(99.9%) 880.886 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.306, 511.530), stdev = 228.763
[info]   CI (99.9%): [≈ 0, 983.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1888.197 ±(99.9%) 16257.941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1888.197, 9440.983), stdev = 4222.136
[info]   CI (99.9%): [≈ 0, 18146.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141062.190 ops/s
[info] # Warmup Iteration   2: 299150.241 ops/s
[info] # Warmup Iteration   3: 301580.238 ops/s
[info] # Warmup Iteration   4: 294452.500 ops/s
[info] # Warmup Iteration   5: 305477.889 ops/s
[info] Iteration   1: 304939.746 ops/s
[info]                  ·gc.alloc.rate:                   1682.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              8684.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10436.389 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 303607.773 ops/s
[info]                  ·gc.alloc.rate:                   1660.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              8610.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6996.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 301793.555 ops/s
[info]                  ·gc.alloc.rate:                   1667.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              8697.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10569.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 305382.826 ops/s
[info]                  ·gc.alloc.rate:                   1673.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              8624.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6972.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 305511.936 ops/s
[info]                  ·gc.alloc.rate:                   1686.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              8691.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6976.437 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   304247.167 ±(99.9%) 6026.616 ops/s [Average]
[info]   (min, avg, max) = (301793.555, 304247.167, 305511.936), stdev = 1565.093
[info]   CI (99.9%): [298220.552, 310273.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1674.232 ±(99.9%) 41.146 MB/sec [Average]
[info]   (min, avg, max) = (1660.824, 1674.232, 1686.915), stdev = 10.685
[info]   CI (99.9%): [1633.087, 1715.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8661.737 ±(99.9%) 157.942 B/op [Average]
[info]   (min, avg, max) = (8610.163, 8661.737, 8697.517), stdev = 41.017
[info]   CI (99.9%): [8503.795, 8819.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.281 ±(99.9%) 0.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.281, 0.651), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1620.939 ±(99.9%) 1417.600 MB/sec [Average]
[info]   (min, avg, max) = (1349.495, 1620.939, 2026.438), stdev = 368.146
[info]   CI (99.9%): [203.339, 3038.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8390.201 ±(99.9%) 7428.786 B/op [Average]
[info]   (min, avg, max) = (6972.586, 8390.201, 10569.447), stdev = 1929.232
[info]   CI (99.9%): [961.415, 15818.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147215.624 ops/s
[info] # Warmup Iteration   2: 464603.417 ops/s
[info] # Warmup Iteration   3: 489684.035 ops/s
[info] # Warmup Iteration   4: 490637.404 ops/s
[info] # Warmup Iteration   5: 490025.503 ops/s
[info] Iteration   1: 487002.987 ops/s
[info]                  ·gc.alloc.rate:                   524.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              1695.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2180.775 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 489642.255 ops/s
[info]                  ·gc.alloc.rate:      512.864 MB/sec
[info]                  ·gc.alloc.rate.norm: 1648.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 490829.876 ops/s
[info]                  ·gc.alloc.rate:                   537.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1724.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2163.695 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 488155.827 ops/s
[info]                  ·gc.alloc.rate:                   530.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              1711.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2175.603 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 489386.443 ops/s
[info]                  ·gc.alloc.rate:                   530.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              1704.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2167.953 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   489003.478 ±(99.9%) 5649.731 ops/s [Average]
[info]   (min, avg, max) = (487002.987, 489003.478, 490829.876), stdev = 1467.217
[info]   CI (99.9%): [483353.747, 494653.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   527.228 ±(99.9%) 35.706 MB/sec [Average]
[info]   (min, avg, max) = (512.864, 527.228, 537.719), stdev = 9.273
[info]   CI (99.9%): [491.522, 562.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1696.966 ±(99.9%) 112.659 B/op [Average]
[info]   (min, avg, max) = (1648.001, 1696.966, 1724.231), stdev = 29.257
[info]   CI (99.9%): [1584.308, 1809.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.316 ±(99.9%) 2.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.316, 1.519), stdev = 0.673
[info]   CI (99.9%): [≈ 0, 2.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.022 ±(99.9%) 8.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.022, 4.911), stdev = 2.175
[info]   CI (99.9%): [≈ 0, 9.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.625 ±(99.9%) 1161.585 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.625, 674.770), stdev = 301.660
[info]   CI (99.9%): [≈ 0, 1701.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1737.605 ±(99.9%) 3740.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1737.605, 2180.775), stdev = 971.373
[info]   CI (99.9%): [≈ 0, 5478.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 846274.111 ops/s
[info] # Warmup Iteration   2: 1184464.748 ops/s
[info] # Warmup Iteration   3: 1145674.956 ops/s
[info] # Warmup Iteration   4: 1190044.377 ops/s
[info] # Warmup Iteration   5: 1192220.546 ops/s
[info] Iteration   1: 1191004.303 ops/s
[info]                  ·gc.alloc.rate:                   638.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              843.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 891.714 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1190956.922 ops/s
[info]                  ·gc.alloc.rate:                   639.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              845.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 890.866 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1190102.618 ops/s
[info]                  ·gc.alloc.rate:                   637.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              842.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 891.511 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1188162.521 ops/s
[info]                  ·gc.alloc.rate:                   640.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              849.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 892.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1182302.993 ops/s
[info]                  ·gc.alloc.rate:                   637.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              849.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 896.524 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1188505.872 ±(99.9%) 14068.426 ops/s [Average]
[info]   (min, avg, max) = (1182302.993, 1188505.872, 1191004.303), stdev = 3653.526
[info]   CI (99.9%): [1174437.445, 1202574.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   638.817 ±(99.9%) 5.747 MB/sec [Average]
[info]   (min, avg, max) = (637.070, 638.817, 640.903), stdev = 1.493
[info]   CI (99.9%): [633.070, 644.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   846.019 ±(99.9%) 11.921 B/op [Average]
[info]   (min, avg, max) = (842.490, 846.019, 849.355), stdev = 3.096
[info]   CI (99.9%): [834.098, 857.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.547 ±(99.9%) 4.447 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.547, 2.612), stdev = 1.155
[info]   CI (99.9%): [≈ 0, 4.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.724 ±(99.9%) 5.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.452), stdev = 1.526
[info]   CI (99.9%): [≈ 0, 6.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.950 ±(99.9%) 2.275 MB/sec [Average]
[info]   (min, avg, max) = (673.378, 673.950, 674.789), stdev = 0.591
[info]   CI (99.9%): [671.675, 676.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   892.546 ±(99.9%) 8.738 B/op [Average]
[info]   (min, avg, max) = (890.866, 892.546, 896.524), stdev = 2.269
[info]   CI (99.9%): [883.808, 901.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26091.532 ops/s
[info] # Warmup Iteration   2: 97669.046 ops/s
[info] # Warmup Iteration   3: 104004.192 ops/s
[info] # Warmup Iteration   4: 105564.324 ops/s
[info] # Warmup Iteration   5: 105530.145 ops/s
[info] Iteration   1: 104377.457 ops/s
[info]                  ·gc.alloc.rate:                   3297.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              49730.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40866.460 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 103528.516 ops/s
[info]                  ·gc.alloc.rate:                   3327.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              50575.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3393.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51574.624 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 105188.410 ops/s
[info]                  ·gc.alloc.rate:                   3378.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              50544.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50841.075 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 105670.029 ops/s
[info]                  ·gc.alloc.rate:                   3393.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              50545.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50647.937 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 103723.241 ops/s
[info]                  ·gc.alloc.rate:                   3306.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              50179.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41320.404 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   104497.531 ±(99.9%) 3552.726 ops/s [Average]
[info]   (min, avg, max) = (103528.516, 104497.531, 105670.029), stdev = 922.632
[info]   CI (99.9%): [100944.804, 108050.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3340.574 ±(99.9%) 165.333 MB/sec [Average]
[info]   (min, avg, max) = (3297.520, 3340.574, 3393.296), stdev = 42.937
[info]   CI (99.9%): [3175.241, 3505.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50315.007 ±(99.9%) 1405.947 B/op [Average]
[info]   (min, avg, max) = (49730.651, 50315.007, 50575.403), stdev = 365.120
[info]   CI (99.9%): [48909.060, 51720.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.068 ±(99.9%) 1.866 B/op [Average]
[info]   (min, avg, max) = (0.620, 1.068, 1.899), stdev = 0.485
[info]   CI (99.9%): [≈ 0, 2.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3124.766 ±(99.9%) 1436.158 MB/sec [Average]
[info]   (min, avg, max) = (2709.757, 3124.766, 3400.176), stdev = 372.966
[info]   CI (99.9%): [1688.608, 4560.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   47050.100 ±(99.9%) 20989.901 B/op [Average]
[info]   (min, avg, max) = (40866.460, 47050.100, 51574.624), stdev = 5451.011
[info]   CI (99.9%): [26060.199, 68040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 164558.021 ops/s
[info] # Warmup Iteration   2: 322445.950 ops/s
[info] # Warmup Iteration   3: 337642.584 ops/s
[info] # Warmup Iteration   4: 339843.745 ops/s
[info] # Warmup Iteration   5: 339666.845 ops/s
[info] Iteration   1: 337844.779 ops/s
[info]                  ·gc.alloc.rate:                   553.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              2577.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3137.498 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 337729.786 ops/s
[info]                  ·gc.alloc.rate:                   554.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              2583.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3141.633 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 338575.977 ops/s
[info]                  ·gc.alloc.rate:      539.491 MB/sec
[info]                  ·gc.alloc.rate.norm: 2508.163 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 339783.331 ops/s
[info]                  ·gc.alloc.rate:                   563.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              2610.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3122.626 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 335693.921 ops/s
[info]                  ·gc.alloc.rate:                   555.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              2603.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3162.360 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   337925.559 ±(99.9%) 5743.600 ops/s [Average]
[info]   (min, avg, max) = (335693.921, 337925.559, 339783.331), stdev = 1491.595
[info]   CI (99.9%): [332181.958, 343669.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   553.137 ±(99.9%) 33.387 MB/sec [Average]
[info]   (min, avg, max) = (539.491, 553.137, 563.559), stdev = 8.671
[info]   CI (99.9%): [519.750, 586.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2576.422 ±(99.9%) 156.253 B/op [Average]
[info]   (min, avg, max) = (2508.163, 2576.422, 2610.554), stdev = 40.578
[info]   CI (99.9%): [2420.169, 2732.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.423 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.250), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.252 ±(99.9%) 1.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.252, 1.164), stdev = 0.511
[info]   CI (99.9%): [≈ 0, 2.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   539.226 ±(99.9%) 1160.727 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.226, 674.580), stdev = 301.437
[info]   CI (99.9%): [≈ 0, 1699.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2512.823 ±(99.9%) 5409.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2512.823, 3162.360), stdev = 1404.783
[info]   CI (99.9%): [≈ 0, 7922.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241188.423 ops/s
[info] # Warmup Iteration   2: 671673.096 ops/s
[info] # Warmup Iteration   3: 688158.310 ops/s
[info] # Warmup Iteration   4: 705180.390 ops/s
[info] # Warmup Iteration   5: 703537.125 ops/s
[info] Iteration   1: 702679.348 ops/s
[info]                  ·gc.alloc.rate:                   550.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1508.463 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 719144.430 ops/s
[info]                  ·gc.alloc.rate:                   561.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              1229.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1475.426 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 724693.184 ops/s
[info]                  ·gc.alloc.rate:      552.436 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 724269.058 ops/s
[info]                  ·gc.alloc.rate:                   567.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              1233.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1464.953 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 711870.768 ops/s
[info]                  ·gc.alloc.rate:                   567.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              1255.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1490.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   716531.357 ±(99.9%) 35860.373 ops/s [Average]
[info]   (min, avg, max) = (702679.348, 716531.357, 724693.184), stdev = 9312.825
[info]   CI (99.9%): [680670.985, 752391.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   559.977 ±(99.9%) 31.908 MB/sec [Average]
[info]   (min, avg, max) = (550.188, 559.977, 567.926), stdev = 8.287
[info]   CI (99.9%): [528.069, 591.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1230.238 ±(99.9%) 76.561 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1230.238, 1255.801), stdev = 19.883
[info]   CI (99.9%): [1153.677, 1306.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.216 ±(99.9%) 1.775 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 1.041), stdev = 0.461
[info]   CI (99.9%): [≈ 0, 1.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.485 ±(99.9%) 3.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.485, 2.331), stdev = 1.033
[info]   CI (99.9%): [≈ 0, 4.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.135 ±(99.9%) 1160.529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.135, 674.204), stdev = 301.386
[info]   CI (99.9%): [≈ 0, 1699.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1187.853 ±(99.9%) 2557.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1187.853, 1508.463), stdev = 664.232
[info]   CI (99.9%): [≈ 0, 3745.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 996890.125 ops/s
[info] # Warmup Iteration   2: 1390120.774 ops/s
[info] # Warmup Iteration   3: 1336685.593 ops/s
[info] # Warmup Iteration   4: 1376225.175 ops/s
[info] # Warmup Iteration   5: 1371753.706 ops/s
[info] Iteration   1: 1360587.074 ops/s
[info]                  ·gc.alloc.rate:                   645.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 779.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1364339.588 ops/s
[info]                  ·gc.alloc.rate:                   650.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 776.114 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1363927.547 ops/s
[info]                  ·gc.alloc.rate:                   655.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 776.373 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1364422.175 ops/s
[info]                  ·gc.alloc.rate:                   647.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 775.322 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1367591.777 ops/s
[info]                  ·gc.alloc.rate:                   654.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 773.524 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1364173.632 ±(99.9%) 9568.091 ops/s [Average]
[info]   (min, avg, max) = (1360587.074, 1364173.632, 1367591.777), stdev = 2484.803
[info]   CI (99.9%): [1354605.541, 1373741.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   650.991 ±(99.9%) 16.934 MB/sec [Average]
[info]   (min, avg, max) = (645.545, 650.991, 655.701), stdev = 4.398
[info]   CI (99.9%): [634.057, 667.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   751.011 ±(99.9%) 16.402 B/op [Average]
[info]   (min, avg, max) = (746.741, 751.011, 756.652), stdev = 4.260
[info]   CI (99.9%): [734.609, 767.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.606 ±(99.9%) 5.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.606, 3.008), stdev = 1.343
[info]   CI (99.9%): [≈ 0, 5.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.701 ±(99.9%) 5.982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.701, 3.480), stdev = 1.553
[info]   CI (99.9%): [≈ 0, 6.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.709 ±(99.9%) 1.897 MB/sec [Average]
[info]   (min, avg, max) = (672.189, 672.709, 673.451), stdev = 0.493
[info]   CI (99.9%): [670.812, 674.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   776.071 ±(99.9%) 7.666 B/op [Average]
[info]   (min, avg, max) = (773.524, 776.071, 779.022), stdev = 1.991
[info]   CI (99.9%): [768.405, 783.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1032737.791 ops/s
[info] # Warmup Iteration   2: 1438273.987 ops/s
[info] # Warmup Iteration   3: 1488704.317 ops/s
[info] # Warmup Iteration   4: 1495035.211 ops/s
[info] # Warmup Iteration   5: 1495338.418 ops/s
[info] Iteration   1: 1496834.145 ops/s
[info]                  ·gc.alloc.rate:      0.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1496263.036 ops/s
[info]                  ·gc.alloc.rate:      0.025 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1496113.353 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1493920.436 ops/s
[info]                  ·gc.alloc.rate:      0.278 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.293 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1494214.606 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1495469.115 ±(99.9%) 5050.387 ops/s [Average]
[info]   (min, avg, max) = (1493920.436, 1495469.115, 1496834.145), stdev = 1311.569
[info]   CI (99.9%): [1490418.729, 1500519.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.061 ±(99.9%) 0.468 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.061, 0.278), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.065 ±(99.9%) 0.494 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.065, 0.293), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205838.491 ops/s
[info] # Warmup Iteration   2: 414578.094 ops/s
[info] # Warmup Iteration   3: 445139.297 ops/s
[info] # Warmup Iteration   4: 437483.190 ops/s
[info] # Warmup Iteration   5: 425857.862 ops/s
[info] Iteration   1: 439202.093 ops/s
[info]                  ·gc.alloc.rate:                   667.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              2390.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2415.727 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 443356.923 ops/s
[info]                  ·gc.alloc.rate:                   672.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              2386.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2393.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 443480.082 ops/s
[info]                  ·gc.alloc.rate:                   671.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2392.514 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 442889.825 ops/s
[info]                  ·gc.alloc.rate:                   673.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              2394.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2395.728 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 443472.051 ops/s
[info]                  ·gc.alloc.rate:                   679.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              2412.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2392.492 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   442480.195 ±(99.9%) 7117.433 ops/s [Average]
[info]   (min, avg, max) = (439202.093, 442480.195, 443480.082), stdev = 1848.375
[info]   CI (99.9%): [435362.762, 449597.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   672.908 ±(99.9%) 17.443 MB/sec [Average]
[info]   (min, avg, max) = (667.099, 672.908, 679.685), stdev = 4.530
[info]   CI (99.9%): [655.465, 690.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2393.671 ±(99.9%) 43.320 B/op [Average]
[info]   (min, avg, max) = (2384.027, 2393.671, 2412.508), stdev = 11.250
[info]   CI (99.9%): [2350.351, 2436.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.074 ±(99.9%) 0.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.222), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   674.092 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (674.025, 674.092, 674.182), stdev = 0.061
[info]   CI (99.9%): [673.856, 674.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2397.924 ±(99.9%) 38.664 B/op [Average]
[info]   (min, avg, max) = (2392.492, 2397.924, 2415.727), stdev = 10.041
[info]   CI (99.9%): [2359.259, 2436.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:55:38
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                                       (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                                             N/A  thrpt    5    772454.608 ±   35940.929   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                              N/A  thrpt    5      2141.694 ±     135.015  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                                         N/A  thrpt    5      4363.301 ±     110.672    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                                     N/A  thrpt    5         0.071 ±       0.091  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                                N/A  thrpt    5         0.144 ±       0.185    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                                 N/A  thrpt    5      2166.014 ±    1170.031  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                            N/A  thrpt    5      4413.167 ±    2378.648    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                                   N/A  thrpt    5        16.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                                    N/A  thrpt    5        14.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                                      N/A  thrpt    5   1968845.387 ±   80628.548   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                                       N/A  thrpt    5      1283.456 ±      45.901  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                  N/A  thrpt    5      1026.137 ±      37.807    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                              N/A  thrpt    5         0.042 ±       0.127  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                         N/A  thrpt    5         0.033 ±       0.101    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                          N/A  thrpt    5      1214.640 ±    1161.465  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                                     N/A  thrpt    5       971.743 ±     937.139    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                            N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                             N/A  thrpt    5        10.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                                     N/A  thrpt    5   5683302.611 ±  239301.944   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                                      N/A  thrpt    5       385.665 ±      26.927  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                                 N/A  thrpt    5       106.826 ±      10.999    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                             N/A  thrpt    5         0.524 ±       4.471  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                        N/A  thrpt    5         0.148 ±       1.262    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                         N/A  thrpt    5       372.238 ±    1333.297  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                                    N/A  thrpt    5       103.691 ±     372.157    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                           N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                            N/A  thrpt    5         8.000                    ms
[info] AdtBenchmark.readPlayJson                                                                                          N/A  thrpt    5    272554.978 ±    6590.019   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                           N/A  thrpt    5      2362.277 ±      49.791  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                      N/A  thrpt    5     13643.033 ±     253.815    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                                  N/A  thrpt    5         0.067 ±       0.105  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                             N/A  thrpt    5         0.384 ±       0.597    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                              N/A  thrpt    5      2300.952 ±    1417.360  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                         N/A  thrpt    5     13284.397 ±    8039.500    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                                N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                                 N/A  thrpt    5        16.000                    ms
[info] AdtBenchmark.writeCirce                                                                                            N/A  thrpt    5    877900.564 ±   23936.652   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                             N/A  thrpt    5      2192.828 ±      68.986  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                                        N/A  thrpt    5      3931.701 ±      92.199    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                                    N/A  thrpt    5         0.042 ±       0.080  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                               N/A  thrpt    5         0.075 ±       0.144    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                                N/A  thrpt    5      2167.602 ±    1168.043  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                           N/A  thrpt    5      3888.431 ±    2170.799    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                                  N/A  thrpt    5        16.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                                   N/A  thrpt    5        16.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                                     N/A  thrpt    5   2690806.247 ±   67884.063   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                                      N/A  thrpt    5      1151.293 ±      26.708  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                                 N/A  thrpt    5       673.513 ±      10.424    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                             N/A  thrpt    5         0.029 ±       0.122  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                                        N/A  thrpt    5         0.017 ±       0.072    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                         N/A  thrpt    5      1078.947 ±    1421.609  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                                    N/A  thrpt    5       632.061 ±     842.300    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                           N/A  thrpt    5         8.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                            N/A  thrpt    5         9.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                                    N/A  thrpt    5  13573789.926 ±   66173.630   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                     N/A  thrpt    5       714.122 ±      14.734  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5        82.811 ±       1.516    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                            N/A  thrpt    5         0.618 ±       5.009  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                       N/A  thrpt    5         0.072 ±       0.582    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                                        N/A  thrpt    5       672.596 ±       2.068  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                                   N/A  thrpt    5        77.995 ±       0.485    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                                          N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                           N/A  thrpt    5         7.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                                            N/A  thrpt    5  14596714.094 ±  582922.725   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                             N/A  thrpt    5         0.035 ±       0.291  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                        N/A  thrpt    5         0.004 ±       0.032    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                  N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                                         N/A  thrpt    5    471471.743 ±   17141.624   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                                          N/A  thrpt    5      1422.995 ±      44.781  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                     N/A  thrpt    5      4751.086 ±     114.900    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                                 N/A  thrpt    5         0.033 ±       0.108  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                            N/A  thrpt    5         0.111 ±       0.354    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                             N/A  thrpt    5      1349.835 ±       2.488  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                                        N/A  thrpt    5      4507.025 ±     160.556    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                               N/A  thrpt    5        10.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                                N/A  thrpt    5        10.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                                         N/A  thrpt    5   1976910.968 ±   11833.808   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                                          N/A  thrpt    5      2735.951 ±      62.499  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                                     N/A  thrpt    5      2178.502 ±      59.345    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                                 N/A  thrpt    5         0.054 ±       0.108  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                            N/A  thrpt    5         0.043 ±       0.086    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                             N/A  thrpt    5      2705.752 ±      31.363  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                        N/A  thrpt    5      2154.451 ±      36.115    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                               N/A  thrpt    5        20.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                                N/A  thrpt    5        17.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                                   N/A  thrpt    5   9619847.049 ±  524570.003   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                                    N/A  thrpt    5      1203.832 ±      78.749  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                               N/A  thrpt    5       196.947 ±       5.565    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                                           N/A  thrpt    5         0.029 ±       0.166  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                                      N/A  thrpt    5         0.005 ±       0.027    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                                       N/A  thrpt    5      1071.050 ±    1410.315  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                                  N/A  thrpt    5       175.182 ±     229.992    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                                         N/A  thrpt    5         8.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                                          N/A  thrpt    5         8.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                                  N/A  thrpt    5   3220018.540 ±   17222.736   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                                   N/A  thrpt    5      1971.487 ±      66.200  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5       963.664 ±      32.124    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                          N/A  thrpt    5         0.046 ±       0.143  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                     N/A  thrpt    5         0.022 ±       0.070    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                      N/A  thrpt    5      1893.625 ±    1167.977  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                                 N/A  thrpt    5       925.686 ±     572.811    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                                        N/A  thrpt    5        14.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                                         N/A  thrpt    5        14.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                                 N/A  thrpt    5  13250665.420 ±  442652.295   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                                  N/A  thrpt    5      1735.507 ±      61.497  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                             N/A  thrpt    5       206.152 ±       4.913    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                         N/A  thrpt    5         0.067 ±       0.132  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                    N/A  thrpt    5         0.008 ±       0.016    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                     N/A  thrpt    5      1754.248 ±    1424.049  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                                N/A  thrpt    5       208.546 ±     172.618    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                                       N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                                        N/A  thrpt    5        11.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                                      N/A  thrpt    5   1207725.443 ±   21351.333   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                                       N/A  thrpt    5      2628.705 ±      75.996  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                  N/A  thrpt    5      3425.791 ±      44.285    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                              N/A  thrpt    5         0.092 ±       0.146  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                         N/A  thrpt    5         0.119 ±       0.189    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                          N/A  thrpt    5      2571.605 ±    1153.790  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                     N/A  thrpt    5      3351.575 ±    1508.720    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                            N/A  thrpt    5        19.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                             N/A  thrpt    5        18.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                                        N/A  thrpt    5   2537967.614 ±   53227.803   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                                         N/A  thrpt    5      2030.719 ±      15.629  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                    N/A  thrpt    5      1259.297 ±      33.656    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                                N/A  thrpt    5         0.071 ±       0.134  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                           N/A  thrpt    5         0.044 ±       0.083    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                            N/A  thrpt    5      2030.930 ±      14.964  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                       N/A  thrpt    5      1259.428 ±      33.595    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                              N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                               N/A  thrpt    5        14.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                                  N/A  thrpt    5  17883329.199 ± 2117703.697   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                   N/A  thrpt    5       562.187 ±      75.369  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                              N/A  thrpt    5        49.481 ±       2.823    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                                          N/A  thrpt    5         0.818 ±       6.956  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                                     N/A  thrpt    5         0.071 ±       0.602    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                                      N/A  thrpt    5       535.775 ±    1153.298  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                                 N/A  thrpt    5        47.071 ±     101.565    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                                        N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                                         N/A  thrpt    5         6.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                                 N/A  thrpt    5   6002226.299 ± 1048605.756   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                                  N/A  thrpt    5      1702.011 ±     260.972  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                             N/A  thrpt    5       446.472 ±      19.566    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                         N/A  thrpt    5         0.054 ±       0.044  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                                    N/A  thrpt    5         0.014 ±       0.010    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                     N/A  thrpt    5      1622.441 ±    1428.784  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                                N/A  thrpt    5       428.603 ±     435.395    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                                       N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                                        N/A  thrpt    5        11.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                                N/A  thrpt    5  20620220.382 ± 2278097.708   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                 N/A  thrpt    5       650.432 ±      55.858  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5        49.659 ±       2.104    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                        N/A  thrpt    5         0.591 ±       4.956  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                   N/A  thrpt    5         0.047 ±       0.397    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                                    N/A  thrpt    5       672.606 ±       2.039  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                               N/A  thrpt    5        51.378 ±       5.987    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                                      N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                                       N/A  thrpt    5         6.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                                        N/A  thrpt    5  23080005.403 ± 1698394.202   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                         N/A  thrpt    5         0.046 ±       0.292  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                    N/A  thrpt    5         0.003 ±       0.020    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                                     N/A  thrpt    5   1734355.424 ±   48452.219   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                                      N/A  thrpt    5      2686.264 ±      78.063  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                 N/A  thrpt    5      2437.861 ±      64.566    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                             N/A  thrpt    5         0.079 ±       0.105  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                        N/A  thrpt    5         0.072 ±       0.097    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                         N/A  thrpt    5      2574.912 ±    1155.845  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                                    N/A  thrpt    5      2335.442 ±     999.955    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                           N/A  thrpt    5        19.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                            N/A  thrpt    5        18.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                                           128  thrpt    5    298744.880 ±   39876.792   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1684.835 ±     226.096  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      8877.398 ±     291.157    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.172 ±       0.627    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                               128  thrpt    5      1616.479 ±    1419.836  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5      8512.784 ±    7262.354    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                                 128  thrpt    5        12.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        11.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                                    128  thrpt    5    506280.485 ±   34682.972   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       678.350 ±      46.405  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      2108.952 ±      49.274    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.077 ±       0.323    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                        128  thrpt    5       674.095 ±       0.562  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5      2096.236 ±     147.127    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5         5.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                                   128  thrpt    5   1273753.319 ±   30906.737   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       873.373 ±      44.948  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1079.328 ±      64.117    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.026 ±       0.099    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       807.404 ±    1158.183  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5       998.895 ±    1452.691    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         6.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                                        128  thrpt    5    120523.239 ±    4468.838   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3592.813 ±     127.104  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     46918.512 ±      77.754    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.042 ±       0.127  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.545 ±       1.661    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5      3399.178 ±      19.519  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5     44392.945 ±    1650.744    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        25.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        22.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                                          128  thrpt    5    346323.554 ±   15580.233   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                           128  thrpt    5       549.083 ±      41.474  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                      128  thrpt    5      2495.533 ±     120.539    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.104 ±       0.807  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.477 ±       3.708    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       539.230 ±    1160.733  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5      2446.659 ±    5268.178    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                                128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                                 128  thrpt    5         4.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                                   128  thrpt    5    832999.362 ±   15789.723   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       620.215 ±      21.361  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5      1171.985 ±      30.344    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.246 ±       1.936  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.463 ±       3.650    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       673.369 ±       0.266  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5      1272.456 ±      24.276    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5         6.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2116622.553 ±   31467.574   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5      1006.995 ±      34.112  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       748.885 ±      23.261    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.042 ±       0.160  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.031 ±       0.119    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       940.985 ±    1418.261  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       700.049 ±    1058.291    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5         7.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2311474.465 ±  130189.825   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         0.380 ±       2.919  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5         0.265 ±       2.038    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                                       128  thrpt    5    458332.984 ±   25903.979   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5       682.026 ±      52.887  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5      2342.050 ±      65.217    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.072 ±       0.389    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5       674.030 ±       1.154  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5      2315.120 ±     130.809    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5         5.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                              128  thrpt    5     17594.175 ±     546.779   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1218.017 ±      47.684  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5    108958.869 ±    2180.459    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         1.112 ±       9.576    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5      1210.166 ±    1158.345  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5    108092.626 ±  101433.410    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                                       128  thrpt    5     30408.880 ±     360.466   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       779.604 ±      19.360  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     40351.103 ±     967.419    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.215 ±       1.850    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5       808.761 ±    1158.340  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5     41879.366 ±   60323.397    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5         6.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                                      128  thrpt    5     40013.477 ±    1503.807   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       590.942 ±      23.943  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5     23249.470 ±    1435.115    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.579 ±       4.804  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5        23.145 ±     192.268    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5       538.705 ±    1159.604  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     21232.667 ±   45715.368    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         4.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5         7.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                           128  thrpt    5     28384.773 ±     962.088   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1431.973 ±      58.665  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     79410.005 ±    1933.173    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.042 ±       0.113  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         2.315 ±       6.381    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               128  thrpt    5      1485.653 ±    1170.235  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5     82365.412 ±   64160.216    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                             128  thrpt    5     23616.265 ±     180.173   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5      1384.339 ±      27.941  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     92265.406 ±    1913.491    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.037 ±       0.174  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         2.494 ±      11.572    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5      1351.181 ±       6.686  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5     90055.566 ±     845.547    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                                      128  thrpt    5     21571.716 ±     516.981   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1253.605 ±      46.294  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     91461.004 ±    3638.410    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.609 ±       3.210    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      1214.226 ±    1160.690  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     88679.678 ±   85869.557    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                                     128  thrpt    5     26056.190 ±     396.649   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1391.776 ±       8.477  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5     84074.650 ±    1678.289    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.054 ±       0.292  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         3.267 ±      17.611    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      1345.728 ±       6.700  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     81292.532 ±    1062.658    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5     26465.927 ±    1098.534   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5      1353.867 ±      75.984  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5     80515.943 ±    1439.300    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.493 ±       2.601    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1345.063 ±       6.960  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     80003.051 ±    3694.122    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                                          128  thrpt    5      7551.172 ±     322.954   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1014.344 ±      56.032  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    211438.275 ±    5851.663    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         2.583 ±       9.079    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       943.037 ±    1420.390  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5    196235.177 ±  291074.799    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                                  128  thrpt    5     17539.473 ±     428.388   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      1393.128 ±      25.487  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5    125031.561 ±    4497.564    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                          128  thrpt    5         0.033 ±       0.072  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                     128  thrpt    5         2.984 ±       6.362    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                      128  thrpt    5      1348.850 ±       6.995  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                 128  thrpt    5    121055.715 ±    2427.933    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        10.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        10.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                           128  thrpt    5     35563.413 ±    1016.454   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       898.506 ±      31.072  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     39765.851 ±    1618.580    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.046 ±       0.268  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         2.032 ±      11.886    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       944.568 ±    1422.626  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5     41867.049 ±   63843.702    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         7.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                                          128  thrpt    5     57903.277 ±   19957.119   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       770.528 ±     277.520  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5     20940.684 ±    1261.059    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.435 ±       2.731    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       806.783 ±    1156.851  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5     21928.361 ±   29352.859    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                               128  thrpt    5     28191.742 ±     222.984   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1788.694 ±      52.650  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     99867.286 ±    3392.707    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         1.395 ±       3.747    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5      1758.080 ±    1423.541  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5     98187.693 ±   80119.839    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        13.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                                          128  thrpt    5     25963.995 ±     172.719   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1510.485 ±      27.966  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     91568.132 ±    1882.836    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.050 ±       0.166  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         3.027 ±      10.057    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5      1350.395 ±       6.509  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5     81863.172 ±     700.057    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        10.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                                         128  thrpt    5     35106.517 ±     437.803   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5      1423.976 ±      27.317  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5     63843.738 ±    1437.163    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.067 ±       0.174  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         2.989 ±       7.792    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5      1481.763 ±    1163.801  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5     66453.065 ±   52735.729    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        11.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5     35263.448 ±    1691.441   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5      1363.105 ±      52.523  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5     60847.053 ±    1289.354    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.067 ±       0.143  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         2.961 ±       6.326    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1345.287 ±       5.408  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     60056.861 ±    2809.214    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5        10.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                        128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                                 128  thrpt    5    328808.170 ±    5238.841   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1701.622 ±      37.328  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      8145.654 ±     133.983    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.042 ±       0.188  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         0.199 ±       0.899    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5      1482.964 ±    1157.430  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5      7098.631 ±    5529.973    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        11.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                           128  thrpt    5   1272467.677 ±  304875.213   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       412.132 ±     121.416  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5       509.483 ±      49.695    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.713 ±       6.086  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.853 ±       7.280    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       403.125 ±    1417.043  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5       487.030 ±    1712.310    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                                          128  thrpt    5    660777.229 ±   92366.027   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       543.808 ±     102.578  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1294.948 ±      73.934    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.208 ±       1.704  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.489 ±       4.009    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       539.243 ±    1160.762  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5      1264.245 ±    2721.557    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5         5.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                                         128  thrpt    5   1775586.552 ±   70922.135   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       352.168 ±      28.995  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       312.211 ±      29.896    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.543 ±       4.611  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         0.488 ±       4.141    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       372.218 ±    1333.265  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5       331.251 ±    1189.423    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                              128  thrpt    5    100897.013 ±    7076.472   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      3393.186 ±     211.287  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     52938.246 ±     982.526    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         1.235 ±       1.052    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5      3260.208 ±    1162.774  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5     50890.798 ±   19216.325    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        24.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        22.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                                128  thrpt    5    362741.881 ±   20185.504   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5       577.757 ±      62.247  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      2506.618 ±     144.643    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.050 ±       0.314  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         0.217 ±       1.370    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5       539.137 ±    1160.534  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5      2327.339 ±    5010.621    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5         4.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                                          128  thrpt    5   1262975.468 ±  245544.600   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       603.299 ±     120.798  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5       751.714 ±      14.610    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.773 ±       6.475  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         1.052 ±       8.844    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       670.457 ±       2.608  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5       837.279 ±     175.726    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                                         128  thrpt    5    956447.018 ±  103401.846   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       696.247 ±      71.079  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1145.866 ±      24.929    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         0.020 ±       0.071    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       673.795 ±       1.541  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5      1109.583 ±     123.343    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5         6.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                                        128  thrpt    5   2506593.728 ±   37882.892   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5      1190.546 ±      46.271  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       747.618 ±      22.200    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.079 ±       0.262  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.050 ±       0.165    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5      1210.633 ±    1159.303  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5       760.131 ±     726.594    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5   2807523.566 ±   16221.702   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5         0.365 ±       2.535  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5         0.205 ±       1.424    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                             128  thrpt    5    602679.743 ±    3058.172   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5       673.452 ±      20.678  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5      1758.926 ±      45.708    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.129 ±       0.934  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         0.337 ±       2.441    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       673.435 ±       0.999  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5      1758.896 ±       9.419    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5         5.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                                    128  thrpt    5    164998.398 ±    4881.690   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                                     128  thrpt    5      2056.898 ±      63.498  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                                128  thrpt    5     19622.180 ±     258.717    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                            128  thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                       128  thrpt    5         0.476 ±       0.866    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                        128  thrpt    5      2022.878 ±      21.438  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                   128  thrpt    5     19298.431 ±     568.424    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                                          128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                           128  thrpt    5        15.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                             128  thrpt    5    431146.306 ±   76370.708   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                              128  thrpt    5       338.768 ±      73.052  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5      1236.477 ±     107.986    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.150 ±       1.290  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         0.536 ±       4.618    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       269.489 ±    1420.940  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5       970.462 ±    5117.132    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                                   128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                                    128  thrpt    5         3.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                            128  thrpt    5   1181787.799 ±   77050.855   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5       236.079 ±      20.369  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5       314.494 ±      38.662    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       204.649 ±    1079.056  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5       274.101 ±    1445.254    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                                  128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                                   128  thrpt    5         5.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                                 128  thrpt    5     80203.788 ±    1631.078   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                                  128  thrpt    5      3213.220 ±     117.150  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     63061.129 ±    1737.313    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         1.717 ±       2.081    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5      3124.054 ±    1430.831  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5     61299.391 ±   27581.169    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                                       128  thrpt    5        23.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                                   128  thrpt    5    282871.257 ±   12178.664   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                                    128  thrpt    5      1290.609 ±      54.631  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                               128  thrpt    5      7181.653 ±     198.613    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                           128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                      128  thrpt    5         0.140 ±       0.377    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                       128  thrpt    5      1216.733 ±    1165.295  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                  128  thrpt    5      6776.709 ±    6563.920    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                                         128  thrpt    5         9.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                                          128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                            128  thrpt    5   1808676.136 ±   34851.360   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       951.767 ±      62.768  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5       828.144 ±      39.783    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.046 ±       0.230  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.040 ±       0.198    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       809.701 ±    1163.180  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5       703.785 ±     996.881    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                                  128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                           128  thrpt    5   2466175.779 ±  200987.998   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       681.798 ±      92.260  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5       435.045 ±      24.373    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.005 ±       0.028    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       537.923 ±    1157.921  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5       340.153 ±     732.220    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                                   128  thrpt    5   2608563.815 ±  105902.374   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    128  thrpt    5         1.945 ±      16.743  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               128  thrpt    5         1.196 ±      10.294    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                                128  thrpt    5     45531.125 ±    3554.461   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                                 128  thrpt    5      1982.754 ±     159.783  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     68540.880 ±     762.383    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.046 ±       0.105  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         1.590 ±       3.648    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      1895.212 ±    1159.202  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     65589.728 ±   41678.235    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                                      128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                                       128  thrpt    5        14.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                                    128  thrpt    5    241165.283 ±    6770.368   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                                     128  thrpt    5      2567.815 ±      84.753  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                                128  thrpt    5     16760.334 ±     471.098    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                            128  thrpt    5         0.083 ±       0.113  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                       128  thrpt    5         0.543 ±       0.736    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                        128  thrpt    5      2436.403 ±    1420.842  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                   128  thrpt    5     15904.597 ±    9333.909    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                                          128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                           128  thrpt    5        17.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                             128  thrpt    5    376039.447 ±   13561.590   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                              128  thrpt    5      1856.133 ±      48.847  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5      7769.417 ±     178.639    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.042 ±       0.150  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         0.174 ±       0.623    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5      1894.649 ±    1165.080  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5      7933.818 ±    4954.182    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                                   128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                            128  thrpt    5   2183005.910 ±   21163.460   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5       778.929 ±      40.338  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5       561.612 ±      34.341    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.025 ±       0.215  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.018 ±       0.156    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       809.217 ±    1160.052  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5       583.880 ±     845.023    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                                  128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                                   128  thrpt    5         5.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                                 128  thrpt    5     84426.686 ±    1690.029   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                                  128  thrpt    5      3331.162 ±     112.601  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     62106.961 ±    1789.938    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.054 ±       0.072  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         1.008 ±       1.320    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5      3259.764 ±    1166.641  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5     60756.945 ±   20856.600    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                                       128  thrpt    5        24.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                                   128  thrpt    5    252001.462 ±    4095.885   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                                    128  thrpt    5      1686.593 ±      47.575  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                               128  thrpt    5     10534.019 ±     233.376    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                           128  thrpt    5         0.050 ±       0.108  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                      128  thrpt    5         0.312 ±       0.668    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                       128  thrpt    5      1623.982 ±    1424.921  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                  128  thrpt    5     10142.513 ±    8887.291    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                                         128  thrpt    5        12.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                                          128  thrpt    5        11.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                            128  thrpt    5   1393418.846 ±   35060.548   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       841.008 ±      57.574  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5       949.969 ±      58.877    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.019 ±       0.118    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       809.053 ±    1160.714  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5       913.562 ±    1304.529    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                                  128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                           128  thrpt    5   2779911.285 ±  206014.699   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       975.816 ±      90.194  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5       552.528 ±      23.243    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.050 ±       0.263  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.028 ±       0.148    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       941.604 ±    1418.425  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5       532.574 ±     793.232    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                                 128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                                   128  thrpt    5   3102873.289 ±   34947.765   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    128  thrpt    5         0.449 ±       3.340  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               128  thrpt    5         0.229 ±       1.704    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                                128  thrpt    5    378530.288 ±    3460.482   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                                 128  thrpt    5      2418.667 ±      93.691  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     10057.429 ±     423.626    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.062 ±       0.170  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         0.260 ±       0.707    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      2304.403 ±    1439.705  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5      9583.904 ±    6039.267    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                                      128  thrpt    5        17.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                                       128  thrpt    5        17.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                                  128  thrpt    5     24506.116 ±    2812.073   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      1440.429 ±     197.610  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     92504.971 ±    2737.494    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.078 ±       0.676  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         5.316 ±      45.773    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.Compressed_Class_Space                                                 128  thrpt    5         0.003 ±       0.027  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm                                            128  thrpt    5         0.216 ±       1.856    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                          128  thrpt    5         0.067 ±       0.250  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                     128  thrpt    5         4.370 ±      16.894    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Old_Gen                                                             128  thrpt    5         0.010 ±       0.088  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm                                                        128  thrpt    5         0.691 ±       5.954    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                      128  thrpt    5      1482.435 ±    1146.579  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                 128  thrpt    5     95127.124 ±   69498.034    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        77.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                            128  thrpt    5     87638.837 ±    1864.581   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       813.080 ±      48.086  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5     14601.693 ±     569.848    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.298 ±       1.572    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       802.924 ±    1153.428  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5     14397.153 ±   20268.300    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                                  128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                           128  thrpt    5     59899.356 ±    2248.557   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1016.430 ±      50.586  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     26708.918 ±    1176.682    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.438 ±       2.309    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       944.128 ±    1421.923  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5     24816.464 ±   37463.727    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                                          128  thrpt    5    133014.073 ±    1502.473   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       883.482 ±      44.235  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5     10453.418 ±     538.793    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.029 ±       0.209  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.345 ±       2.472    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       806.819 ±    1157.813  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5      9545.293 ±   13679.384    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                               128  thrpt    5     35747.823 ±    1184.916   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1775.047 ±      59.360  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     78152.977 ±    1181.828    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         2.205 ±       6.450    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5      1757.363 ±    1419.664  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5     77411.503 ±   63267.292    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        13.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                                 128  thrpt    5     30831.038 ±     233.896   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       359.414 ±      36.537  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     18350.711 ±    1996.030    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.092 ±       0.789  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         4.685 ±      40.336    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5       269.363 ±    1420.274  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5     13780.867 ±   72662.534    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5         3.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                                          128  thrpt    5     29945.272 ±     513.592   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       342.666 ±      37.112  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     18011.751 ±    2174.161    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.160 ±       1.336  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         8.459 ±      70.498    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       269.250 ±    1419.676  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5     14203.328 ±   74890.051    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5         3.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                                         128  thrpt    5     33469.167 ±     302.288   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       377.814 ±      27.360  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5     17768.349 ±    1412.382    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.618 ±       5.323  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5        29.176 ±     251.211    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       371.675 ±    1331.030  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5     17501.608 ±   62691.772    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5         8.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5     33343.592 ±     544.352   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5       338.338 ±      31.664  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5     15972.775 ±    1727.393    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.606 ±       5.215  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        28.680 ±     246.943    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       371.664 ±    1330.995  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     17595.158 ±   62994.569    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                        128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                                128  thrpt    5     20171.148 ±     553.253   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5       725.238 ±      26.377  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     56588.845 ±     915.836    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         0.653 ±       3.441    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5       673.876 ±       1.468  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     52583.729 ±    1442.330    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                                         128  thrpt    5     19383.236 ±     245.119   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       567.654 ±      42.517  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     46097.333 ±    3799.954    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.246 ±       2.070  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5        19.934 ±     168.037    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       539.241 ±    1160.756  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5     43804.169 ±   94294.170    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5         5.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                                        128  thrpt    5    102367.217 ±    3947.501   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       276.050 ±      34.289  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      4244.181 ±     531.209    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.002 ±       0.018  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.032 ±       0.277    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       339.501 ±    1220.456  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5      5227.081 ±   18813.744    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                             128  thrpt    5     16165.489 ±     662.242   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1015.954 ±      88.356  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     98919.734 ±    5490.545    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         0.403 ±       3.467    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       944.089 ±    1422.388  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5     91712.417 ±  135359.291    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                               128  thrpt    5     43719.506 ±     180.045   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       679.841 ±      17.135  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     24476.916 ±     593.032    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         0.749 ±       2.886    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5       674.708 ±       0.118  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5     24292.155 ±     100.322    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5         5.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                                        128  thrpt    5     55834.086 ±    4322.052   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       798.124 ±      41.250  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     22502.306 ±    1180.820    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.042 ±       0.234  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         1.200 ±       6.838    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       809.200 ±    1162.637  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5     22955.906 ±   35448.618    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    170151.373 ±    2090.467   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       277.531 ±      26.697  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      2567.337 ±     271.356    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.077 ±       0.407    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5       339.293 ±    1219.507  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5      3145.361 ±   11306.435    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    177851.617 ±     448.537   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5         0.208 ±       1.119  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         1.841 ±       9.911    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                            128  thrpt    5     53417.908 ±     653.881   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       853.940 ±      38.696  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     25162.923 ±    1160.721    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.490 ±       2.585    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       807.656 ±    1159.113  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5     23800.194 ±   34177.452    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                                    128  thrpt    5     94882.482 ±     640.354   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                                     128  thrpt    5      1967.569 ±      55.450  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                                128  thrpt    5     32640.030 ±    1030.705    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                            128  thrpt    5         0.046 ±       0.119  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                       128  thrpt    5         0.759 ±       1.969    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                        128  thrpt    5      1895.825 ±    1168.748  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                   128  thrpt    5     31452.072 ±   19444.684    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                                          128  thrpt    5        14.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                           128  thrpt    5        13.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                             128  thrpt    5    119852.041 ±    1019.821   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                              128  thrpt    5      1620.262 ±      42.041  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5     21276.889 ±     385.756    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.042 ±       0.127  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         0.547 ±       1.663    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5      1621.514 ±    1422.143  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5     21286.864 ±   18522.686    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                                   128  thrpt    5        12.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                            128  thrpt    5    145496.789 ±    9428.531   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5      1363.998 ±      97.078  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5     14757.013 ±     394.941    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.050 ±       0.185  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.537 ±       1.981    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5      1213.375 ±    1160.947  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5     13107.405 ±   12291.871    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                                 128  thrpt    5     53870.263 ±     821.306   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                                  128  thrpt    5      2862.485 ±      74.423  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     83641.941 ±    2905.295    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.079 ±       0.104  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         2.311 ±       3.052    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5      2848.499 ±    1178.022  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5     83256.199 ±   35638.422    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                                       128  thrpt    5        21.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                                        128  thrpt    5        20.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                                   128  thrpt    5    175605.344 ±    9241.443   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                                    128  thrpt    5       627.868 ±      35.325  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                               128  thrpt    5      5628.008 ±     105.155    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                           128  thrpt    5         0.135 ±       1.078  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                      128  thrpt    5         1.201 ±       9.559    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                       128  thrpt    5       673.902 ±       1.441  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                  128  thrpt    5      6041.582 ±     327.170    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                                         128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                                          128  thrpt    5         5.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                            128  thrpt    5    369427.791 ±   21118.039   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       386.458 ±      42.902  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5      1646.248 ±     129.573    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.164 ±       1.416  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.710 ±       6.112    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       404.050 ±    1420.293  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5      1722.033 ±    6054.611    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                                  128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                                   128  thrpt    5         4.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                           128  thrpt    5    643378.115 ±   11799.845   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       507.940 ±       9.392  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1242.776 ±      34.644    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.616 ±       5.304  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         1.518 ±      13.072    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       538.410 ±    1158.969  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5      1318.404 ±    2838.126    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                                   128  thrpt    5    704112.158 ±    5897.968   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    128  thrpt    5         0.443 ±       3.810  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               128  thrpt    5         0.992 ±       8.538    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                                128  thrpt    5    255767.340 ±   20546.856   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                                 128  thrpt    5       725.154 ±      70.074  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5      4461.833 ±     118.984    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         0.155 ±       0.544    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5       674.415 ±       1.512  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5      4151.359 ±     339.007    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                                      128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                                       128  thrpt    5         6.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                                   128  thrpt    5     36399.076 ±    1607.958   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                                    128  thrpt    5      1731.456 ±      81.368  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                               128  thrpt    5     74874.265 ±    1511.097    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                           128  thrpt    5         0.037 ±       0.088  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                      128  thrpt    5         1.622 ±       3.813    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                       128  thrpt    5      1621.746 ±    1425.009  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                  128  thrpt    5     70161.494 ±   62293.583    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                                         128  thrpt    5        12.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                                          128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                             128  thrpt    5    283411.049 ±   20637.023   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                              128  thrpt    5       301.773 ±      37.481  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                         128  thrpt    5      1675.906 ±     169.215    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.785 ±       6.738  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         4.325 ±      37.097    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       370.577 ±    1326.454  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5      2065.992 ±    7358.435    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                                   128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                            128  thrpt    5    104917.650 ±    1841.304   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                             128  thrpt    5      1178.792 ±      42.923  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5     17683.894 ±     769.885    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.312 ±       2.078    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5      1079.765 ±    1422.592  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5     16201.940 ±   21389.643    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                                  128  thrpt    5         8.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                           128  thrpt    5    435298.709 ±   46774.711   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       290.870 ±      57.420  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1051.417 ±     145.920    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.002 ±       0.018  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.007 ±       0.064    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       237.170 ±    1269.969  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5       849.963 ±    4549.148    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                                 128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                                128  thrpt    5     39837.116 ±    1671.857   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                                 128  thrpt    5      1957.819 ±      86.366  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     77344.825 ±     859.990    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         2.465 ±       4.473    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      1894.763 ±    1158.827  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     74908.988 ±   47016.101    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                                      128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                                       128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                                  128  thrpt    5     73240.423 ±     359.537   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                                   128  thrpt    5       358.227 ±      34.082  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                              128  thrpt    5      7698.947 ±     765.686    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                          128  thrpt    5         0.108 ±       0.845  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                     128  thrpt    5         2.329 ±      18.190    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                      128  thrpt    5       269.379 ±    1420.356  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                 128  thrpt    5      5796.477 ±   30563.148    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                                        128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                                         128  thrpt    5         3.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                            128  thrpt    5     80929.198 ±   22527.301   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       416.795 ±     139.276  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5      8099.115 ±     761.800    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.803 ±       6.867  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5        15.063 ±     128.862    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       402.382 ±    1414.431  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5      7614.839 ±   26776.278    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                           128  thrpt    5     72135.224 ±     984.497   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       391.197 ±      41.685  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      8535.993 ±     970.739    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.158 ±       1.232  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         3.463 ±      26.983    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       404.327 ±    1421.265  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5      8831.385 ±   31043.789    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                                          128  thrpt    5     83365.919 ±    1118.764   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       428.485 ±      37.790  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      8090.187 ±     793.647    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.635 ±       5.469  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5        12.061 ±     103.847    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       403.559 ±    1418.568  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5      7627.742 ±   26813.062    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                                  128  thrpt    5     84395.714 ±    2998.517   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                   128  thrpt    5       367.445 ±      41.978  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                              128  thrpt    5      6852.552 ±     778.649    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.620 ±       5.342  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5        11.539 ±      99.356    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       371.697 ±    1331.143  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      6938.629 ±   24870.885    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                         128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                                 128  thrpt    5     10096.824 ±     353.452   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1677.599 ±      67.076  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5    261498.522 ±    9128.428    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.017 ±       0.036  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         2.594 ±       5.584    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5      1623.612 ±    1424.916  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5    252960.699 ±  219323.022    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        12.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                                          128  thrpt    5      9355.802 ±     311.121   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1432.135 ±      23.448  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5    240938.251 ±    7903.846    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         5.580 ±      15.294    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5      1350.307 ±       6.285  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5    227173.324 ±    7512.247    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                                         128  thrpt    5    151042.123 ±    1868.957   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       399.902 ±      25.979  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      4167.031 ±     296.178    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.593 ±       4.715  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         6.187 ±      49.168    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       371.955 ±    1332.218  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5      3883.486 ±   13903.586    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                              128  thrpt    5      5508.224 ±      70.299   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      1423.826 ±      16.737  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5    406876.120 ±    4785.275    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         1.185 ±      10.206    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5      1349.625 ±       6.491  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5    385674.336 ±    5904.539    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                                128  thrpt    5     20125.117 ±    1442.075   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5      1114.134 ±      42.942  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     87142.201 ±    5112.949    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.042 ±       0.234  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         3.250 ±      18.163    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      1080.460 ±    1422.832  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     84727.055 ±  114095.895    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5         8.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                                         128  thrpt    5     22051.350 ±    1018.411   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5      1243.791 ±      71.013  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     88777.750 ±    2463.783    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.050 ±       0.166  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         3.541 ±      11.739    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5      1214.709 ±    1161.663  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5     86558.739 ±   80985.743    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                                        128  thrpt    5    130755.218 ±    9338.256   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       295.631 ±      31.307  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3559.745 ±     436.805    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.052 ±       0.446    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       236.980 ±    1268.799  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5      2890.091 ±   15418.779    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    135575.021 ±   11388.689   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5         1.098 ±       9.090  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        12.603 ±     104.240    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                             128  thrpt    5     22295.017 ±     604.055   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1248.136 ±      27.130  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     88118.244 ±    1447.454    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         1.762 ±       6.172    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5      1214.342 ±    1159.383  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5     85763.811 ±   82267.939    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                                     128  thrpt    5    131611.558 ±    1730.097   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                      128  thrpt    5      1744.267 ±      51.937  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                                 128  thrpt    5     20862.449 ±     744.680    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                             128  thrpt    5         0.046 ±       0.067  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                        128  thrpt    5         0.548 ±       0.804    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                         128  thrpt    5      1618.114 ±    1421.765  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                    128  thrpt    5     19356.402 ±   17075.137    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                           128  thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                            128  thrpt    5        12.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                               128  thrpt    5    515244.526 ±    3264.215   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                                128  thrpt    5       548.063 ±      30.236  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                           128  thrpt    5      1674.301 ±      83.244    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.750 ±       6.322  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         2.287 ±      19.287    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5       536.566 ±    1155.000  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5      1638.279 ±    3526.530    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                                     128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                                      128  thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                              128  thrpt    5    308002.412 ±    5506.268   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                               128  thrpt    5       450.865 ±      31.415  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                          128  thrpt    5      2304.255 ±     187.243    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.192 ±       1.649  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         0.987 ±       8.496    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5       539.003 ±    1160.245  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5      2756.579 ±    5933.990    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                             128  thrpt    5    720223.228 ±   10137.897   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                              128  thrpt    5       480.044 ±      30.860  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                         128  thrpt    5      1049.068 ±      54.393    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.550 ±       4.643  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         1.200 ±      10.135    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       539.524 ±    1161.367  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5      1177.356 ±    2534.358    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                                   128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                                  128  thrpt    5     75380.513 ±    2268.462   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                   128  thrpt    5      3117.208 ±     103.765  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                              128  thrpt    5     65095.532 ±    1871.887    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                          128  thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                     128  thrpt    5         1.306 ±       2.086    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                      128  thrpt    5      2986.174 ±    1434.701  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                 128  thrpt    5     62364.863 ±   30171.406    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                                        128  thrpt    5        22.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                                         128  thrpt    5        21.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                                    128  thrpt    5    185867.339 ±    1375.052   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                     128  thrpt    5       951.761 ±      56.366  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                128  thrpt    5      8059.409 ±     433.676    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                            128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                       128  thrpt    5         0.141 ±       0.884    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                        128  thrpt    5       944.510 ±    1421.163  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                   128  thrpt    5      7994.877 ±   11988.457    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                                          128  thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                           128  thrpt    5         6.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                              128  thrpt    5    621389.082 ±   13600.884   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                               128  thrpt    5       343.766 ±      27.731  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                          128  thrpt    5       870.806 ±      82.259    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.803 ±       6.834  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         2.044 ±      17.400    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5       268.356 ±    1414.964  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5       682.644 ±    3599.390    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                                    128  thrpt    5         2.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                             128  thrpt    5    622010.944 ±   17095.411   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                              128  thrpt    5       471.987 ±      28.645  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5      1194.499 ±      98.841    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.125 ±       1.031  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         0.319 ±       2.634    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       403.920 ±    1419.837  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5      1026.077 ±    3606.863    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                                   128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                                    128  thrpt    5         3.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                            128  thrpt    5    996977.196 ±   35060.243   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5       562.122 ±      21.336  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5       887.499 ±      25.781    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.608 ±       5.143  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.975 ±       8.251    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       672.855 ±       2.133  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5      1062.386 ±      40.190    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                  128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                    128  thrpt    5   1076237.966 ±    4162.449   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                     128  thrpt    5         0.088 ±       0.496  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                128  thrpt    5         0.128 ±       0.725    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                                 128  thrpt    5     33144.567 ±     640.302   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                  128  thrpt    5      1729.707 ±      75.687  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     82141.902 ±    2115.672    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.050 ±       0.134  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         2.373 ±       6.375    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5      1757.998 ±    1427.210  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5     83446.902 ±   66902.468    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                                       128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                                        128  thrpt    5        13.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                                128  thrpt    5    122571.530 ±    1305.535   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1388.961 ±      29.744  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     17837.379 ±     258.016    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.042 ±       0.150  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         0.534 ±       1.924    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      1351.248 ±       6.100  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     17353.201 ±     140.960    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                                         128  thrpt    5    170445.592 ±     729.229   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       926.632 ±      32.400  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      8556.667 ±     331.652    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.033 ±       0.166  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         0.308 ±       1.536    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       943.866 ±    1421.578  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5      8718.688 ±   13168.248    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5         7.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                                        128  thrpt    5    223874.230 ±    3127.786   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5      1046.933 ±      35.740  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      7360.327 ±     312.600    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.147 ±       0.798    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       941.761 ±    1419.356  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5      6623.776 ±   10019.745    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5         7.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                             128  thrpt    5     66984.013 ±    1840.170   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      2649.459 ±     149.397  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     62255.136 ±    2082.037    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         1.568 ±       2.489    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5      2575.316 ±    1173.317  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5     60500.597 ±   27031.302    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        19.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        20.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                               128  thrpt    5    176930.779 ±    5337.526   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       629.768 ±      17.758  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      5602.766 ±     141.165    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.135 ±       0.996  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         1.204 ±       8.877    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5       674.113 ±       1.253  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5      5997.452 ±     174.699    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5         5.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                                        128  thrpt    5    669914.000 ±   34933.515   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       695.177 ±      44.736  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1633.327 ±      41.486    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.039 ±       0.243    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       674.743 ±       0.624  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5      1585.584 ±      82.901    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5         5.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    635501.703 ±   77295.003   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       505.528 ±      55.369  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1252.408 ±      94.561    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.057 ±       0.487  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.148 ±       1.277    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space                                      128  thrpt    5         0.001 ±       0.012  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space.norm                                 128  thrpt    5         0.004 ±       0.032    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.537 ±       4.233  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         1.322 ±      10.354    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen                                                  128  thrpt    5         0.005 ±       0.040  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen.norm                                             128  thrpt    5         0.012 ±       0.105    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5       542.827 ±    1168.692  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5      1353.079 ±    2923.929    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        70.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    677618.278 ±  164394.135   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5         0.016 ±       0.139  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.037 ±       0.315    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                            128  thrpt    5    345828.854 ±   11578.973   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       955.386 ±      62.632  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      4348.438 ±     216.129    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.037 ±       0.215  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.170 ±       0.972    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       943.924 ±    1420.688  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5      4293.854 ±    6429.477    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                           128  thrpt    5     10231.218 ±      61.683   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1249.742 ±      32.186  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5    192245.886 ±    4864.250    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         3.204 ±       8.734    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                               128  thrpt    5      1213.731 ±    1163.967  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5    186725.141 ±  179291.506    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                                 128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                                    128  thrpt    5      9914.361 ±     551.590   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1143.094 ±      59.096  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5    181466.590 ±    9404.819    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.017 ±       0.036  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         2.639 ±       5.684    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1079.429 ±    1423.007  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5    171683.195 ±  229855.456    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                                   128  thrpt    5    261798.290 ±    7490.421   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1759.175 ±      67.523  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     10576.538 ±     244.202    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.125 ±       0.343    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1619.035 ±    1422.429  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5      9738.019 ±    8638.342    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5        11.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                                        128  thrpt    5      7802.357 ±      28.086   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      1402.149 ±      19.998  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    282843.870 ±    4013.628    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         5.882 ±      27.078    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5      1350.122 ±       6.040  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5    272349.018 ±    1945.123    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        10.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                                          128  thrpt    5     24657.090 ±    1032.033   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                           128  thrpt    5      1020.804 ±      65.724  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                      128  thrpt    5     65163.277 ±    2403.937    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.037 ±       0.215  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         2.375 ±      13.645    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       944.613 ±    1423.143  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5     60172.857 ±   88982.647    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                                128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                                 128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                                   128  thrpt    5     29126.084 ±    2468.872   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1095.365 ±      97.242  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     59198.918 ±    3014.811    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.033 ±       0.156  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         1.805 ±       8.552    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1079.255 ±    1420.876  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     58382.104 ±   77386.030    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                                  128  thrpt    5    379462.632 ±    9504.168   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       703.167 ±      22.198  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      2916.968 ±      59.624    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.052 ±       0.297    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       672.953 ±       1.285  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      2791.725 ±      74.897    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5         5.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5    534598.193 ±    3004.322   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         0.188 ±       1.613  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5         0.552 ±       4.748    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                                       128  thrpt    5     26917.393 ±    1039.751   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      1113.675 ±      71.426  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     65123.037 ±    3694.372    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         1.458 ±       3.897    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      1078.617 ±    1423.996  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5     63026.421 ±   82703.532    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                               128  thrpt    5     30870.448 ±    1293.976   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1535.996 ±      93.211  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     78316.593 ±    2067.390    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.033 ±       0.108  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         1.700 ±       5.511    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5      1484.669 ±    1162.114  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5     75637.916 ±   57165.990    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        12.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                                        128  thrpt    5     29642.848 ±     406.745   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1344.439 ±      39.848  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     71385.686 ±    2384.520    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         1.548 ±       7.113    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5      1214.774 ±    1159.762  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5     64516.082 ±   61784.310    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                                       128  thrpt    5    441229.464 ±   10158.942   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1180.780 ±      46.073  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      4212.076 ±     142.927    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.042 ±       0.127  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.148 ±       0.450    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      1211.641 ±    1160.138  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5      4323.837 ±    4160.152    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                            128  thrpt    5     17433.626 ±     473.027   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      1694.018 ±      50.792  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5    152958.737 ±    3259.746    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         1.875 ±      12.510    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                128  thrpt    5      1621.299 ±    1424.890  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5    146461.205 ±  130158.092    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        12.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                              128  thrpt    5     53088.948 ±    2923.261   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5      1220.015 ±      69.031  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     36168.034 ±    1262.881    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.054 ±       0.209  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         1.597 ±       6.085    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5      1216.000 ±    1163.651  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5     36085.413 ±   34968.069    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                                       128  thrpt    5    133726.861 ±    8202.989   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5      1162.376 ±      33.237  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     13684.475 ±     674.610    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.348 ±       1.621    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      1079.495 ±    1422.254  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5     12736.638 ±   17100.029    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5         8.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                                      128  thrpt    5    755328.185 ±  412474.082   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       832.594 ±     469.576  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1734.420 ±      73.152    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.033 ±       0.201  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.065 ±       0.373    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5       806.509 ±    1157.094  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5      1675.582 ±    1932.708    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5         6.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5         5.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5    951273.932 ±   27087.933   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5         1.073 ±       8.878  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5         1.799 ±      14.889    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                           128  thrpt    5     61875.104 ±    1261.369   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5      1355.578 ±      37.203  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     34481.830 ±     899.784    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.037 ±       0.174  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.949 ±       4.397    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                               128  thrpt    5      1350.492 ±       6.928  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5     34353.065 ±     838.386    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                               128  thrpt    5     16176.585 ±     672.713   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1439.664 ±      46.888  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5    140078.153 ±    2419.202    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         3.222 ±       8.820    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5      1352.017 ±       6.377  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5    131558.764 ±    5387.921    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                                        128  thrpt    5     15755.355 ±     650.950   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1255.167 ±      68.988  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5    125390.383 ±    6206.328    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         1.665 ±       6.747    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5      1214.531 ±    1160.132  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5    121213.300 ±  114389.374    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        10.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                                       128  thrpt    5    567024.433 ±   19795.051   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1514.636 ±      43.289  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      4204.743 ±     116.367    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.070 ±       0.292    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      1482.215 ±    1158.948  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5      4118.472 ±    3327.699    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        11.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                            128  thrpt    5     11792.320 ±     368.464   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      1577.042 ±      64.217  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5    210495.406 ±    6776.179    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         2.222 ±       8.968    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                128  thrpt    5      1485.422 ±    1158.130  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5    198383.998 ±  157969.693    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                              128  thrpt    5     42868.973 ±    1265.612   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5      1370.008 ±      30.235  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     50299.357 ±     982.744    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.037 ±       0.104  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         1.376 ±       3.844    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5      1351.674 ±       5.468  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5     49627.486 ±    1444.319    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                                       128  thrpt    5     54455.351 ±     682.332   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5      1481.818 ±      30.644  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     42828.954 ±     583.675    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         1.444 ±       4.199    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      1351.137 ±       6.934  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5     39052.302 ±     518.992    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                                      128  thrpt    5   1012496.408 ±    8593.840   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       947.257 ±      31.481  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1472.684 ±      56.881    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.045 ±       0.244    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5       940.963 ±    1417.833  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5      1463.780 ±    2216.845    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5         7.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5   1134129.178 ±   47985.339   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5         0.239 ±       2.058  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5         0.331 ±       2.844    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                           128  thrpt    5     39142.875 ±    1192.629   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5      1217.796 ±      42.549  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     48965.167 ±    1803.511    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.670 ±       2.711    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                               128  thrpt    5      1080.089 ±    1424.157  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5     43497.765 ±   58111.296    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                                    128  thrpt    5    125625.454 ±    4171.120   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                                     128  thrpt    5      1808.380 ±      82.224  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                                128  thrpt    5     22658.781 ±     947.444    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                            128  thrpt    5         0.042 ±       0.113  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                       128  thrpt    5         0.522 ±       1.420    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                        128  thrpt    5      1752.296 ±    1424.800  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                   128  thrpt    5     21959.189 ±   17916.990    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                                          128  thrpt    5        13.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                           128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                              128  thrpt    5    354208.459 ±    5747.960   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                               128  thrpt    5       728.196 ±      21.816  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                          128  thrpt    5      3236.214 ±      70.566    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         0.111 ±       0.463    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5       669.622 ±       1.404  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5      2975.958 ±      47.039    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                                    128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                                     128  thrpt    5         5.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                             128  thrpt    5    248280.660 ±    3130.046   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                              128  thrpt    5       560.005 ±      32.943  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5      3550.192 ±     220.375    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.216 ±       1.775  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         1.378 ±      11.301    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       539.253 ±    1160.782  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5      3422.242 ±    7366.730    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                                   128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                            128  thrpt    5    482225.275 ±    4325.502   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5       629.090 ±      22.995  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5      2053.247 ±      65.948    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.573 ±       4.617  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         1.874 ±      15.116    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       673.309 ±       2.357  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5      2197.594 ±      23.662    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                                  128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                                 128  thrpt    5     72817.935 ±    3062.439   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                                  128  thrpt    5      3071.791 ±     132.346  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     66388.281 ±    2150.418    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.096 ±       0.134  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         2.068 ±       2.910    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5      2985.931 ±    1433.941  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5     64534.388 ±   31004.709    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                                       128  thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                                        128  thrpt    5        22.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                                   128  thrpt    5    126460.718 ±     762.686   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                                    128  thrpt    5       710.180 ±      16.465  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                               128  thrpt    5      8839.323 ±     168.640    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                           128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                      128  thrpt    5         0.259 ±       1.225    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                       128  thrpt    5       674.201 ±       1.089  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                  128  thrpt    5      8391.556 ±      54.337    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                                         128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                                          128  thrpt    5         5.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                             128  thrpt    5    205484.797 ±    6119.367   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                              128  thrpt    5       164.579 ±      16.281  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                         128  thrpt    5      1260.762 ±     156.492    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         0.032 ±       0.278    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       204.619 ±    1078.897  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5      1577.594 ±    8318.398    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                                   128  thrpt    5         2.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                            128  thrpt    5    395108.293 ±    9381.554   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       398.808 ±      36.576  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5      1588.733 ±     165.143    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.162 ±       1.398  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.646 ±       5.563    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       404.195 ±    1420.802  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5      1613.107 ±    5670.568    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                                   128  thrpt    5         4.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                           128  thrpt    5    442132.426 ±    8836.755   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       355.759 ±      32.438  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1266.663 ±     137.321    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.514 ±       4.404  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         1.842 ±      15.777    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       372.462 ±    1334.376  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5      1330.442 ±    4768.586    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                                   128  thrpt    5    467422.890 ±    1011.647   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    128  thrpt    5         0.061 ±       0.524  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               128  thrpt    5         0.206 ±       1.765    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                                128  thrpt    5     26958.805 ±     155.793   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                                 128  thrpt    5      1369.380 ±      16.598  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     79940.037 ±    1129.775    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         0.485 ±       2.559    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      1351.435 ±       6.216  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     78892.517 ±     766.321    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                                      128  thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                                       128  thrpt    5        10.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                                          128  thrpt    5      7816.053 ±     198.329   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                           128  thrpt    5      1099.278 ±      37.898  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                      128  thrpt    5    221363.323 ±    8855.833    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         4.202 ±      16.218    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              128  thrpt    5      1079.820 ±    1424.168  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5    217521.233 ±  287763.980    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                                   128  thrpt    5      7328.765 ±      93.412   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       983.120 ±      55.842  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5    211127.228 ±   11244.092    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         3.582 ±      18.888    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       944.851 ±    1423.366  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5    202889.275 ±  305377.650    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                                          128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                                  128  thrpt    5    179518.917 ±    4757.305   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5      1795.755 ±      68.748  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5     15744.941 ±     657.987    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.029 ±       0.072  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.255 ±       0.627    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1755.749 ±    1426.588  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     15390.047 ±   12422.671    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                                         128  thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                                       128  thrpt    5      7267.614 ±     174.971   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                        128  thrpt    5      1216.356 ±      22.533  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5    263441.741 ±    4789.098    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         1.804 ±       9.510    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      1214.099 ±    1162.493  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5    263058.778 ±  253180.513    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                             128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                              128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                                         128  thrpt    5     18906.710 ±    1434.819   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                          128  thrpt    5       810.228 ±      38.041  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                     128  thrpt    5     67459.563 ±    4218.767    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.058 ±       0.337  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         4.953 ±      28.823    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       809.866 ±    1163.350  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5     67729.541 ±  102576.816    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                               128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                                128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                                  128  thrpt    5     23785.518 ±     187.423   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       944.836 ±      51.586  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5     62520.809 ±    3668.279    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.826 ±       7.114    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       944.030 ±    1421.134  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     62493.725 ±   94417.273    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                                         128  thrpt    5         7.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                                 128  thrpt    5    312788.393 ±    6060.778   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       730.642 ±      15.262  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      3676.864 ±      58.012    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.063 ±       0.221    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       672.311 ±       1.301  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      3383.373 ±      64.949    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                                        128  thrpt    5         5.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                                         128  thrpt    5    335156.221 ±   45695.321   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          128  thrpt    5         0.017 ±       0.146  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     128  thrpt    5         0.078 ±       0.663    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                                      128  thrpt    5     22460.890 ±     487.098   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                       128  thrpt    5       974.184 ±      43.726  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     68264.990 ±    1977.130    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         1.453 ±       7.905    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          128  thrpt    5       944.172 ±    1422.383  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     66106.047 ±   98856.015    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                            128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                             128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                              128  thrpt    5     13071.178 ±     465.388   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1243.169 ±      45.539  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5    149709.511 ±    4617.637    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         1.003 ±       5.291    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5      1212.855 ±    1157.819  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5    146224.515 ±  141566.016    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                                    128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                                       128  thrpt    5     12780.246 ±     784.377   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5      1128.751 ±      79.157  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5    139008.935 ±    5308.882    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         1.032 ±       5.442    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      1079.139 ±    1422.499  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5    133005.172 ±  176412.312    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                                      128  thrpt    5    267311.104 ±   10677.554   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5      1594.757 ±      82.679  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      9390.028 ±     442.315    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.171 ±       0.714    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      1482.346 ±    1165.077  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5      8727.858 ±    6844.843    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        11.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                           128  thrpt    5     11553.282 ±     195.596   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1414.081 ±      16.963  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5    192661.758 ±    3280.771    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         2.837 ±       7.703    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               128  thrpt    5      1349.768 ±       6.228  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5    183899.804 ±    2792.651    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                             128  thrpt    5     30044.133 ±    1855.416   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5      1008.350 ±      58.538  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     52828.958 ±    1572.312    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         0.657 ±       2.310    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       944.646 ±    1423.277  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5     49647.944 ±   76732.179    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         7.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                                      128  thrpt    5     72046.167 ±    4590.106   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1615.773 ±     105.365  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     35298.901 ±    1171.460    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.046 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.999 ±       1.467    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      1622.748 ±    1427.973  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     35513.150 ±   32517.892    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        11.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                                     128  thrpt    5    484405.864 ±   11188.962   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       683.508 ±      23.299  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      2221.137 ±      38.829    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.556 ±       4.606  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         1.823 ±      15.120    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         128  thrpt    5       673.869 ±       2.104  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5      2189.905 ±      56.614    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         5.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5         7.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    677262.924 ±   11377.109   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5         0.397 ±       3.420  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.931 ±       8.009    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                                          128  thrpt    5     68007.732 ±    1103.420   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1509.619 ±      18.010  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     34935.482 ±     595.008    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.483 ±       2.628    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              128  thrpt    5      1485.805 ±    1162.925  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5     34398.713 ±   27343.509    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                                  128  thrpt    5     18489.971 ±     794.686   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       667.887 ±      17.783  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     56862.667 ±    2719.827    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                          128  thrpt    5         0.087 ±       0.667  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                     128  thrpt    5         7.415 ±      56.596    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                      128  thrpt    5       673.890 ±       1.252  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                 128  thrpt    5     57374.281 ±    2514.754    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5         5.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                           128  thrpt    5     19135.217 ±     349.166   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       556.383 ±      58.938  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     45769.183 ±    5602.637    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.225 ±       1.935  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5        18.492 ±     159.219    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       538.755 ±    1159.710  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5     44356.302 ±   95484.613    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                                          128  thrpt    5    115511.701 ±    2063.385   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       297.351 ±      34.916  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      4052.093 ±     527.499    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       237.253 ±    1270.537  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5      3244.547 ±   17365.440    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                               128  thrpt    5     16513.715 ±     483.949   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1028.467 ±      31.386  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     98035.010 ±    5323.780    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         0.794 ±       4.187    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5       944.328 ±    1420.790  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5     90118.656 ±  136944.310    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                                 128  thrpt    5     46763.014 ±    1201.824   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       858.297 ±      34.598  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     28887.834 ±    1445.688    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.029 ±       0.209  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         0.982 ±       7.049    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5       809.902 ±    1162.060  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5     27267.017 ±   39273.928    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                                          128  thrpt    5     63019.615 ±    2014.594   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1051.187 ±      61.007  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     26255.115 ±    1309.058    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.729 ±       3.912    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5      1079.801 ±    1423.135  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5     26964.386 ±   35470.256    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    301171.832 ±   11166.096   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       590.217 ±      21.106  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      3084.935 ±     174.057    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.600 ±       5.073  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         3.185 ±      26.962    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       538.179 ±    1158.473  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5      2817.277 ±    6065.829    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5         5.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    328696.721 ±    3290.525   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5         1.779 ±      14.657  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         8.554 ±      70.485    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                              128  thrpt    5     60693.186 ±     554.090   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1116.432 ±      55.316  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     28951.755 ±    1407.754    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         0.539 ±       2.075    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5      1080.366 ±    1424.904  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5     28013.073 ±   36908.555    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                                   128  thrpt    5    153190.773 ±    5745.750   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                                    128  thrpt    5      1933.430 ±      37.499  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                               128  thrpt    5     19864.727 ±     634.129    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                           128  thrpt    5         0.054 ±       0.166  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                      128  thrpt    5         0.555 ±       1.697    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                       128  thrpt    5      1893.843 ±    1163.726  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                  128  thrpt    5     19467.753 ±   12202.256    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                                         128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                                          128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                             128  thrpt    5    762685.456 ±    6871.946   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                              128  thrpt    5       433.692 ±      41.935  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                         128  thrpt    5       894.913 ±      82.110    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.777 ±       6.646  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         1.604 ±      13.719    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       402.330 ±    1414.248  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5       829.478 ±    2915.745    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                                   128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                                    128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                            128  thrpt    5    375982.186 ±    6534.601   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       387.009 ±      44.799  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5      1620.088 ±     180.061    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.229 ±       1.971  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.958 ±       8.252    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       404.448 ±    1421.693  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5      1691.557 ±    5946.214    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                                  128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                                   128  thrpt    5         5.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                           128  thrpt    5   1117402.642 ±   19387.002   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       397.582 ±      34.620  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5       560.102 ±      58.147    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.610 ±       4.732  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.859 ±       6.664    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       371.919 ±    1332.084  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5       525.434 ±    1881.490    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                                128  thrpt    5     75059.548 ±    3953.987   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                                 128  thrpt    5      3029.989 ±     145.243  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     63541.332 ±    1591.446    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         1.917 ±       1.840    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      2986.101 ±    1423.916  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     62586.348 ±   28290.075    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                                      128  thrpt    5        22.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                                       128  thrpt    5        21.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                                  128  thrpt    5    252553.043 ±    2822.306   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                                   128  thrpt    5      1182.651 ±      31.966  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                              128  thrpt    5      7370.105 ±     245.080    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                          128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                     128  thrpt    5         0.078 ±       0.274    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                      128  thrpt    5      1080.940 ±    1424.049  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                 128  thrpt    5      6740.183 ±    8923.424    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                                        128  thrpt    5         8.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                                         128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                            128  thrpt    5   1125042.828 ±  102639.912   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       392.267 ±      54.613  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5       548.648 ±      39.475    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.741 ±       6.380  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         1.047 ±       9.014    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       403.032 ±    1416.717  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5       560.478 ±    1970.519    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                                  128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                           128  thrpt    5    907720.239 ±   17483.350   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       549.987 ±      40.254  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5       953.656 ±      76.712    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.196 ±       1.640  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.338 ±       2.835    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       539.203 ±    1160.675  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5       936.331 ±    2015.604    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                                  128  thrpt    5         5.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                                          128  thrpt    5   1790709.401 ±  110091.918   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       628.703 ±      49.661  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       552.576 ±      13.325    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.608 ±       5.144  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.550 ±       4.654    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       672.637 ±       2.013  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5       591.349 ±      38.672    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                                128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                                 128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                                  128  thrpt    5   1884566.653 ±   36125.651   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                   128  thrpt    5         0.478 ±       4.116  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                              128  thrpt    5         0.403 ±       3.465    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                               128  thrpt    5     40672.767 ±    1649.490   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                                128  thrpt    5      1882.402 ±      62.999  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     72850.336 ±    1888.866    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         1.284 ±       4.693    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5      1894.364 ±    1165.208  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5     73362.143 ±   46234.609    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                                     128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                                      128  thrpt    5        14.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                                    128  thrpt    5     38322.901 ±    1988.872   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                                     128  thrpt    5       735.472 ±      32.353  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                                128  thrpt    5     30209.893 ±     796.507    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                            128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                       128  thrpt    5         0.682 ±       2.737    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                        128  thrpt    5       674.168 ±       1.030  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                   128  thrpt    5     27694.685 ±    1418.626    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                                          128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                           128  thrpt    5         5.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                             128  thrpt    5     55741.160 ±    1783.052   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                              128  thrpt    5       600.708 ±      13.566  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5     16963.697 ±     266.177    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.212 ±       1.783  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         5.978 ±      50.224    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       673.895 ±       1.244  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5     19031.144 ±     622.949    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                                   128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                            128  thrpt    5    204880.350 ±   13798.309   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5       684.584 ±      41.441  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5      5258.959 ±     105.505    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.560 ±       4.687  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         4.295 ±      35.960    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       673.341 ±       2.343  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5      5173.711 ±     359.501    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                                  128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                                 128  thrpt    5     24026.905 ±     672.843   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                                  128  thrpt    5      1227.419 ±      44.495  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     80410.720 ±    3872.351    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         0.815 ±       2.865    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5      1214.492 ±    1161.404  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5     79569.169 ±   76197.133    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                                       128  thrpt    5         9.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                                        128  thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                                   128  thrpt    5     46138.276 ±     618.600   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                                    128  thrpt    5       705.695 ±      16.370  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                               128  thrpt    5     24075.113 ±     414.488    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                           128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                      128  thrpt    5         0.712 ±       4.749    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                       128  thrpt    5       674.444 ±       1.441  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                  128  thrpt    5     23009.249 ±     318.105    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                                         128  thrpt    5         5.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                                          128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                            128  thrpt    5    100367.934 ±     723.523   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                             128  thrpt    5      1414.222 ±      41.054  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5     22179.947 ±     747.513    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.033 ±       0.108  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.522 ±       1.687    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5      1351.131 ±       6.588  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5     21190.337 ±     228.642    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                                  128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                           128  thrpt    5    177171.131 ±    2696.365   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       581.809 ±      34.675  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5      5169.527 ±     360.442    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.608 ±       5.055  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         5.421 ±      45.094    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       538.157 ±    1158.425  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5      4786.256 ±   10303.130    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                                   128  thrpt    5    193046.822 ±     440.655   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    128  thrpt    5         0.097 ±       0.836  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               128  thrpt    5         0.795 ±       6.825    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                                128  thrpt    5     67408.537 ±    1348.434   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                                 128  thrpt    5      1028.060 ±      45.097  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     24006.366 ±    1200.093    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.025 ±       0.143  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         0.583 ±       3.350    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      1079.537 ±    1422.803  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     25222.045 ±   33399.128    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                                      128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                               128  thrpt    5     23890.996 ±     879.266   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1215.795 ±      78.496  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     80099.273 ±    2804.640    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         1.365 ±       3.702    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5      1213.772 ±    1161.822  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5     79829.153 ±   74669.940    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                                     128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                                      128  thrpt    5         9.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                                        128  thrpt    5     27198.093 ±     348.696   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1089.949 ±      42.670  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     63076.559 ±    2789.407    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         1.444 ±       6.052    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5      1078.917 ±    1421.873  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5     62456.241 ±   82516.675    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5         7.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                                       128  thrpt    5    536005.453 ±   17067.735   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1436.921 ±      48.816  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      4219.892 ±     127.667    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.097 ±       0.355    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      1346.325 ±       6.712  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5      3953.961 ±     124.905    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        10.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                                            128  thrpt    5     22320.243 ±     391.288   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      1660.688 ±      58.313  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5    117102.330 ±    2899.990    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         1.760 ±       7.341    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                128  thrpt    5      1620.209 ±    1422.224  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5    114178.637 ±   98644.731    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        12.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                                              128  thrpt    5     69337.611 ±     375.068   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5      1370.915 ±      40.496  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     31117.751 ±     819.161    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         0.472 ±       2.571    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5      1351.704 ±       6.725  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5     30681.837 ±     190.570    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                                       128  thrpt    5    146652.166 ±    8968.102   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5      1437.957 ±      86.452  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     15432.211 ±     308.910    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.758 ±       0.958    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      1351.781 ±       5.640  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5     14510.290 ±     949.876    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5         9.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                                      128  thrpt    5   1032085.398 ±   52517.619   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       877.523 ±      34.924  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1338.315 ±      56.815    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.025 ±       0.134    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5       808.112 ±    1159.624  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5      1235.098 ±    1818.860    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5         6.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5         6.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5   1189134.930 ±    3556.960   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5         0.208 ±       1.781  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5         0.275 ±       2.361    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                                           128  thrpt    5    118396.042 ±    3397.194   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5      1375.837 ±      54.942  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     18290.054 ±     316.970    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.046 ±       0.200  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.609 ±       2.648    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                               128  thrpt    5      1350.845 ±       5.000  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5     17958.863 ±     536.775    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                                             128  thrpt    5     38183.098 ±     736.628   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                                              128  thrpt    5      1405.838 ±      15.423  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5     57955.182 ±    1013.849    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.033 ±       0.072  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         1.374 ±       2.973    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5      1349.928 ±       5.927  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5     55650.587 ±    1087.045    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                                   128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                                            128  thrpt    5    723198.673 ±   17335.591   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5      1450.879 ±      41.053  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5      3157.612 ±     113.219    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.063 ±       0.290    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5      1347.382 ±       6.587  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5      2932.383 ±      79.451    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                                  128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                                 128  thrpt    5     29330.991 ±    1085.065   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                                  128  thrpt    5      2137.870 ±      77.187  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5    114723.659 ±    2505.945    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         1.559 ±       4.901    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5      2029.150 ±      16.766  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5    108894.620 ±    3434.572    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                                       128  thrpt    5        15.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                                        128  thrpt    5        15.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                                            128  thrpt    5    342855.343 ±    2221.445   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       977.127 ±      21.602  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5      4485.736 ±     107.822    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.037 ±       0.132  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.172 ±       0.605    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       944.135 ±    1422.365  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5      4335.889 ±    6552.420    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                                  128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                                           128  thrpt    5   1428107.065 ±  182799.530   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       856.311 ±     126.701  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5       943.728 ±      33.018    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.056 ±       0.479  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.065 ±       0.561    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space                                          128  thrpt    5         0.001 ±       0.008  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space.norm                                     128  thrpt    5         0.001 ±       0.010    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.050 ±       0.201  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.056 ±       0.233    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen                                                      128  thrpt    5         0.003 ±       0.025  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen.norm                                                 128  thrpt    5         0.003 ±       0.029    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       853.228 ±    1126.610  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5       942.012 ±    1240.655    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                                 128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                                  128  thrpt    5        68.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                                   128  thrpt    5   1635493.430 ±   12614.612   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    128  thrpt    5         0.056 ±       0.328  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               128  thrpt    5         0.054 ±       0.316    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                                128  thrpt    5    222392.902 ±   10172.408   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                                 128  thrpt    5      1480.171 ±      58.797  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     10477.144 ±     397.119    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.033 ±       0.209  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         0.239 ±       1.497    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      1486.479 ±    1169.507  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     10533.625 ±    8622.239    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                                       128  thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                                  128  thrpt    5     57544.357 ±    1210.675   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      1050.750 ±      39.142  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     28739.894 ±    1363.163    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                          128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                     128  thrpt    5         0.227 ±       1.959    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                      128  thrpt    5       943.610 ±    1421.810  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                 128  thrpt    5     25832.511 ±   39220.046    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5         6.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                           128  thrpt    5     58546.837 ±    3484.727   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       694.024 ±      38.389  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     18659.099 ±     556.100    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.443 ±       2.766    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       673.399 ±       0.674  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5     18107.382 ±    1083.046    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                                          128  thrpt    5     66794.766 ±     632.214   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       745.784 ±      15.425  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5     17575.796 ±     265.420    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.295 ±       1.035    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       672.261 ±       1.280  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5     15843.228 ±     174.627    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5         4.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                               128  thrpt    5     35229.353 ±     267.283   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1605.466 ±      37.312  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     71729.275 ±    1323.794    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.046 ±       0.183  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         2.047 ±       8.171    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5      1620.340 ±    1422.003  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5     72395.423 ±   63561.170    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                                 128  thrpt    5    115824.624 ±    1648.185   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       524.447 ±      29.165  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      7127.203 ±     455.368    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.164 ±       1.372  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         2.239 ±      18.674    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5       538.664 ±    1159.515  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5      7327.526 ±   15773.393    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5         5.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                                          128  thrpt    5    237005.461 ±    4415.134   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       357.442 ±      33.249  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      2373.941 ±     203.595    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.196 ±       1.685  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         1.291 ±      11.116    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       269.354 ±    1420.227  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5      1785.008 ±    9411.975    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         2.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5         3.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    743710.830 ±   26899.552   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       948.001 ±      42.551  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      2006.431 ±      77.599    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.037 ±       0.200  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         0.079 ±       0.424    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       940.074 ±    1415.594  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5      1988.926 ±    2985.257    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5         7.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    800063.222 ±   14541.246   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5         0.057 ±       0.417  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.112 ±       0.823    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                              128  thrpt    5    186952.052 ±    2025.399   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5       617.303 ±      24.077  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5      5197.730 ±     228.128    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         0.035 ±       0.302    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5       538.818 ±    1159.846  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5      4540.891 ±    9774.687    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5         4.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                              128  thrpt    5    117049.606 ±    1322.253   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1317.324 ±      26.938  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     17715.826 ±     467.857    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         0.280 ±       1.079    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5      1215.523 ±    1164.192  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5     16352.951 ±   15737.740    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                                       128  thrpt    5    167445.036 ±    1499.695   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       909.857 ±      32.704  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      8552.379 ±     307.652    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.196 ±       0.534    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5       943.609 ±    1422.312  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5      8870.012 ±   13374.503    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                                      128  thrpt    5    447747.358 ±   20897.594   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       891.277 ±      70.244  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      3133.239 ±     154.140    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.046 ±       0.154  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.161 ±       0.540    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5       806.589 ±    1157.117  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5      2832.103 ±    3994.652    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                           128  thrpt    5     63442.359 ±    1643.258   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      2516.676 ±      58.031  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     62437.992 ±    1102.739    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.050 ±       0.122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         1.238 ±       3.015    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               128  thrpt    5      2438.832 ±    1428.631  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5     60531.507 ±   36158.963    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        18.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        18.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                             128  thrpt    5    178849.450 ±    4629.785   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       630.396 ±      20.007  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      5547.953 ±     286.920    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.087 ±       0.590  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         0.764 ±       5.148    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       673.976 ±       1.340  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5      5931.345 ±     161.252    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                                      128  thrpt    5    399632.217 ±   19374.908   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       406.411 ±      45.998  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1600.759 ±     172.077    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.150 ±       1.290  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.586 ±       5.049    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5       404.168 ±    1420.710  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5      1595.034 ±    5607.913    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5         4.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                                     128  thrpt    5   1058351.101 ±    8925.299   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       808.173 ±      21.331  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1201.872 ±      32.022    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.029 ±       0.209  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.043 ±       0.311    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         128  thrpt    5       807.354 ±    1160.318  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5      1200.617 ±    1724.812    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5         7.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5   1154392.771 ±   20410.521   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5         0.392 ±       2.790  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.539 ±       3.835    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                                          128  thrpt    5    299236.535 ±    3492.532   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       840.047 ±      35.915  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      4419.015 ±     171.900    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.087 ±       0.352    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       809.223 ±    1161.406  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5      4255.244 ±    6077.263    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                           128  thrpt    5      4784.086 ±      48.136   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5       875.628 ±      38.776  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5    288033.131 ±   12825.990    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         6.840 ±      32.255    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       806.990 ±    1155.901  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5    265533.231 ±  381733.563    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                                 128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                                    128  thrpt    5      4704.973 ±     232.897   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       832.292 ±      14.589  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5    278439.273 ±   12271.484    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         1.425 ±      12.272    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                        128  thrpt    5       805.122 ±    1155.958  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5    270407.361 ±  407085.631    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5         7.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                                   128  thrpt    5     35055.376 ±    1369.978   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       589.787 ±      39.810  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     26483.033 ±    1612.380    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.987 ±       8.450  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5        44.960 ±     385.113    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       532.860 ±    1147.023  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     23899.017 ±   51458.074    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         7.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                                        128  thrpt    5      4030.354 ±     157.325   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5       968.396 ±      57.983  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    378103.130 ±   11404.870    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.029 ±       0.209  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5        11.476 ±      82.594    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       940.947 ±    1416.194  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5    367489.492 ±  554137.367    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5         7.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                                          128  thrpt    5     14269.228 ±     113.198   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                           128  thrpt    5       761.806 ±      18.328  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                      128  thrpt    5     84025.406 ±    2214.568    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.042 ±       0.234  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         4.589 ±      25.758    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       806.258 ±    1154.697  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5     88921.069 ±  127224.497    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                                   128  thrpt    5     16808.218 ±     221.322   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       864.638 ±      42.756  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     80966.190 ±    3629.977    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         1.556 ±       6.273    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       805.923 ±    1155.409  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     75460.304 ±  108025.171    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5         7.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                                  128  thrpt    5    238161.627 ±    1101.459   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       861.408 ±      31.531  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      5692.623 ±     222.891    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.085 ±       0.730  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.560 ±       4.820    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space                                 128  thrpt    5         0.002 ±       0.020  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space.norm                            128  thrpt    5         0.016 ±       0.135    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.062 ±       0.272  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.412 ±       1.794    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen                                             128  thrpt    5         0.007 ±       0.063  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen.norm                                        128  thrpt    5         0.048 ±       0.416    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       861.016 ±    1136.178  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      5690.300 ±    7517.462    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        89.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5    268016.497 ±    3168.598   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         0.147 ±       1.261  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5         0.864 ±       7.429    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                                       128  thrpt    5     15952.646 ±     547.670   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5       848.547 ±      34.959  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     83723.103 ±    2012.287    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.025 ±       0.174  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         2.442 ±      16.912    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5       806.217 ±    1156.478  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5     79576.672 ±  114624.310    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5         7.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                                  128  thrpt    5   1329964.556 ±  219393.194   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                                   128  thrpt    5        60.223 ±      43.368  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                              128  thrpt    5        71.870 ±      67.037    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                      128  thrpt    5       102.305 ±     880.877  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                                 128  thrpt    5       131.127 ±    1129.044    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                                        128  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                                         128  thrpt    5         2.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                                       128  thrpt    5     82605.735 ±    1274.780   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                                        128  thrpt    5      3528.382 ±      68.328  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                   128  thrpt    5     67236.037 ±    1413.050    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                               128  thrpt    5         0.079 ±       0.191  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                          128  thrpt    5         1.505 ±       3.632    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                           128  thrpt    5      3397.079 ±      23.252  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                      128  thrpt    5     64734.474 ±    1318.317    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                                             128  thrpt    5        25.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                                              128  thrpt    5        26.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                                  128  thrpt    5   1685387.624 ±   17653.400   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                                   128  thrpt    5       910.264 ±      42.082  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                              128  thrpt    5       850.099 ±      42.685    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                          128  thrpt    5         0.025 ±       0.143  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                                     128  thrpt    5         0.023 ±       0.134    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                      128  thrpt    5       943.963 ±    1421.465  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                                 128  thrpt    5       881.816 ±    1331.067    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                                        128  thrpt    5         7.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                                         128  thrpt    5         7.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                                 128  thrpt    5   2017221.129 ±   35468.768   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                  128  thrpt    5       578.363 ±      29.253  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                             128  thrpt    5       451.292 ±      26.621    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.537 ±       4.447  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         0.418 ±       3.459    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5       539.263 ±    1160.805  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5       421.396 ±     907.102    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                                       128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                                        128  thrpt    5         5.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                                         128  thrpt    5   2123447.138 ±    4595.642   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                          128  thrpt    5        21.583 ±       0.051  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                     128  thrpt    5        16.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                               128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                                      128  thrpt    5     48617.463 ±    1830.718   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                                       128  thrpt    5      2019.490 ±      68.223  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                  128  thrpt    5     65380.348 ±    1446.563    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                              128  thrpt    5         0.046 ±       0.132  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                         128  thrpt    5         1.485 ±       4.272    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                          128  thrpt    5      2030.168 ±      14.490  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                                     128  thrpt    5     65730.499 ±    2868.574    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                                            128  thrpt    5        15.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                                             128  thrpt    5        14.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                                   N/A  thrpt    5    876883.800 ±   10728.841   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                                    N/A  thrpt    5      2783.151 ±      81.448  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                               N/A  thrpt    5      4995.404 ±     107.595    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                           N/A  thrpt    5         0.071 ±       0.238  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                      N/A  thrpt    5         0.127 ±       0.428    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                       N/A  thrpt    5      2706.569 ±      29.311  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                  N/A  thrpt    5      4858.016 ±      74.449    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                                         N/A  thrpt    5        20.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                                          N/A  thrpt    5        22.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                             N/A  thrpt    5   4824528.342 ±   36930.480   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                              N/A  thrpt    5       302.518 ±      28.112  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                         N/A  thrpt    5        98.705 ±       9.859    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5         0.803 ±       6.900  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5         0.262 ±       2.253    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5       370.588 ±    1326.478  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5       121.077 ±     433.381    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                                   N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                                    N/A  thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                            N/A  thrpt    5    999620.380 ±    5184.176   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5      1169.114 ±      52.639  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5      1840.981 ±      84.211    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5         0.054 ±       0.193  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5         0.085 ±       0.304    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5      1213.903 ±    1161.404  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5      1911.745 ±    1831.927    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                                  N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                                   N/A  thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                           N/A  thrpt    5   8790571.188 ±  378207.099   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       413.765 ±      24.632  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5        74.093 ±       6.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.579 ±       4.827  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         0.104 ±       0.863    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5       506.665 ±    1123.764  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5        91.026 ±     202.462    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                                 N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                                  N/A  thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                                N/A  thrpt    5    515915.697 ±   16978.442   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                                 N/A  thrpt    5      2472.181 ±      98.228  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                            N/A  thrpt    5      7542.509 ±     259.368    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                        N/A  thrpt    5         0.062 ±       0.127  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                   N/A  thrpt    5         0.190 ±       0.384    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                    N/A  thrpt    5      2301.638 ±    1429.796  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                               N/A  thrpt    5      7020.043 ±    4289.623    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                                      N/A  thrpt    5        17.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                                       N/A  thrpt    5        17.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                                         N/A  thrpt    5      4526.083 ±     180.357   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                                          N/A  thrpt    5      2139.803 ±     120.482  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                                     N/A  thrpt    5    744034.406 ±   16850.473    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                                 N/A  thrpt    5         0.133 ±       0.303  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                            N/A  thrpt    5        46.397 ±     105.790    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                             N/A  thrpt    5      2030.511 ±      14.018  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                        N/A  thrpt    5    706107.577 ±   25691.125    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                               N/A  thrpt    5        15.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                                N/A  thrpt    5        16.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                                  N/A  thrpt    5      6172.511 ±     210.772   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                                   N/A  thrpt    5      2207.911 ±      26.389  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5    562971.731 ±   16870.266    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                          N/A  thrpt    5         0.021 ±       0.057  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                     N/A  thrpt    5         5.298 ±      14.361    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                      N/A  thrpt    5      2164.435 ±    1172.635  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                                 N/A  thrpt    5    552410.732 ±  320130.477    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                                        N/A  thrpt    5        16.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                                         N/A  thrpt    5        18.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                                 N/A  thrpt    5     47056.360 ±    1803.312   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                                  N/A  thrpt    5       781.244 ±      21.590  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                             N/A  thrpt    5     26134.457 ±    1471.721    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                         N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                    N/A  thrpt    5         0.280 ±       1.476    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                     N/A  thrpt    5       806.488 ±    1157.475  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                                N/A  thrpt    5     27053.887 ±   40184.560    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                                       N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                                        N/A  thrpt    5         7.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                                        N/A  thrpt    5      4777.862 ±      46.111   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                                         N/A  thrpt    5       866.918 ±      45.601  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                                    N/A  thrpt    5    285581.826 ±   17640.943    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                                N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                           N/A  thrpt    5         5.496 ±      22.158    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                            N/A  thrpt    5       944.525 ±    1422.428  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                       N/A  thrpt    5    311347.660 ±  471501.661    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                                              N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                               N/A  thrpt    5         8.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                                 N/A  thrpt    5      5110.418 ±     111.934   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                                  N/A  thrpt    5       261.037 ±      21.427  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                             N/A  thrpt    5     80400.836 ±    8385.660    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                         N/A  thrpt    5         0.010 ±       0.056  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                                    N/A  thrpt    5         3.202 ±      17.393    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                     N/A  thrpt    5       237.276 ±    1270.696  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                                N/A  thrpt    5     73531.915 ±  394026.541    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                                       N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                                        N/A  thrpt    5         6.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                                N/A  thrpt    5      6539.779 ±      42.860   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                 N/A  thrpt    5       177.211 ±      18.130  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5     42647.539 ±    4612.309    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                        N/A  thrpt    5         0.006 ±       0.053  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                   N/A  thrpt    5         1.491 ±      12.837    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                                    N/A  thrpt    5       102.325 ±     881.047  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                               N/A  thrpt    5     24691.288 ±  212599.439    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                                      N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                                       N/A  thrpt    5         2.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                                        N/A  thrpt    5      6601.351 ±     126.918   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                         N/A  thrpt    5       130.003 ±       9.985  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                    N/A  thrpt    5     30997.896 ±    2951.757    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5       102.344 ±     881.212  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5     24593.262 ±  211755.404    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                              N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                               N/A  thrpt    5         3.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                                   N/A  thrpt    5      7379.207 ±      64.083   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                                    N/A  thrpt    5      1390.396 ±      32.578  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                               N/A  thrpt    5    296548.149 ±    5090.099    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                           N/A  thrpt    5         0.010 ±       0.039  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                      N/A  thrpt    5         2.135 ±       8.219    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                       N/A  thrpt    5      1351.511 ±       4.894  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                  N/A  thrpt    5    288257.622 ±    3393.576    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                                         N/A  thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                                          N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                             N/A  thrpt    5     16880.108 ±    1041.538   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                              N/A  thrpt    5       401.416 ±      32.575  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                         N/A  thrpt    5     37424.779 ±    2298.203    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5         0.806 ±       6.892  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5        75.928 ±     649.684    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5       402.256 ±    1413.989  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5     37221.045 ±  130871.032    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                                    N/A  thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                            N/A  thrpt    5     14911.242 ±     500.150   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       382.228 ±      29.486  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     40350.825 ±    3731.883    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5         0.308 ±       2.652  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5        32.481 ±     279.667    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5       404.044 ±    1420.271  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5     42795.584 ±  150446.585    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                                   N/A  thrpt    5         5.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                           N/A  thrpt    5     20551.915 ±    1656.456   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       356.372 ±      41.637  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5     27295.906 ±    3251.882    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.606 ±       5.218  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5        46.153 ±     397.392    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5       371.690 ±    1331.034  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5     28573.683 ±  101781.716    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                                 N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                                  N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                                N/A  thrpt    5      3420.353 ±      78.638   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                                 N/A  thrpt    5      2057.242 ±      75.724  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                            N/A  thrpt    5    946658.493 ±   30936.140    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                        N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                   N/A  thrpt    5         5.758 ±      20.242    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                    N/A  thrpt    5      1893.218 ±    1167.006  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                               N/A  thrpt    5    871253.144 ±  538724.312    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                                      N/A  thrpt    5        14.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                                       N/A  thrpt    5        20.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                                  N/A  thrpt    5      9565.608 ±     273.390   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                                   N/A  thrpt    5      1742.155 ±      73.644  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                              N/A  thrpt    5    286670.190 ±    8022.764    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                          N/A  thrpt    5         0.037 ±       0.174  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                     N/A  thrpt    5         6.134 ±      28.394    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                      N/A  thrpt    5      1758.576 ±    1424.536  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                 N/A  thrpt    5    289199.889 ±  230565.133    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                                        N/A  thrpt    5        13.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                                         N/A  thrpt    5        14.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                            N/A  thrpt    5     52076.284 ±    3821.986   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                             N/A  thrpt    5       497.944 ±      38.437  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                        N/A  thrpt    5     15052.437 ±    1254.605    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5         0.725 ±       6.241  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5        22.662 ±     195.131    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5       402.621 ±    1415.269  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5     12234.800 ±   43031.015    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                                   N/A  thrpt    5         5.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                           N/A  thrpt    5     41114.931 ±    1497.759   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                            N/A  thrpt    5       610.671 ±      33.523  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5     23376.747 ±     507.509    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.271 ±       2.240  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5        10.524 ±      87.210    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5       673.756 ±       1.277  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5     25794.357 ±     938.816    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                                 N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                                  N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                                          N/A  thrpt    5     85574.258 ±    1684.165   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                           N/A  thrpt    5       660.401 ±      20.695  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5     12146.984 ±     351.397    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5         0.673 ±       5.658  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5        12.373 ±     104.066    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5       671.937 ±       2.160  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5     12359.370 ±     253.474    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                                N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                                 N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                                  N/A  thrpt    5     92256.095 ±     500.456   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                   N/A  thrpt    5         0.002 ±       0.011  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                              N/A  thrpt    5         0.029 ±       0.191    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                        N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                               N/A  thrpt    5      7427.489 ±     170.247   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                                N/A  thrpt    5      2202.323 ±      28.317  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                           N/A  thrpt    5    466714.108 ±    9081.326    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                       N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                  N/A  thrpt    5         2.653 ±       9.324    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                   N/A  thrpt    5      2030.351 ±      14.136  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                              N/A  thrpt    5    430275.801 ±   11860.029    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                                     N/A  thrpt    5        15.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                                      N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.readCirce                                                                                             N/A  thrpt    5   8599525.836 ±  234096.233   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                              N/A  thrpt    5      4679.453 ±     149.101  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                                         N/A  thrpt    5       856.506 ±      10.142    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                                     N/A  thrpt    5         0.117 ±       0.091  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                                N/A  thrpt    5         0.021 ±       0.016    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                                 N/A  thrpt    5      4488.973 ±    1430.475  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                            N/A  thrpt    5       821.558 ±     255.901    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                                   N/A  thrpt    5        33.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                                    N/A  thrpt    5        29.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                                       N/A  thrpt    5  32232732.505 ±  209615.399   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                                        N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                                   N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                             N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                                      N/A  thrpt    5  10039690.442 ±  418998.974   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                                       N/A  thrpt    5      3603.839 ±     139.653  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                  N/A  thrpt    5       564.979 ±       1.726    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                              N/A  thrpt    5         0.117 ±       0.044  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                         N/A  thrpt    5         0.018 ±       0.007    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                          N/A  thrpt    5      3398.747 ±      21.786  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                                     N/A  thrpt    5       532.879 ±      24.958    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                            N/A  thrpt    5        25.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                             N/A  thrpt    5        22.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                                     N/A  thrpt    5  45371135.618 ±  161356.056   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                                      N/A  thrpt    5         0.344 ±       1.779  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                                 N/A  thrpt    5         0.012 ±       0.062    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                           N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                                        N/A  thrpt    5  24568038.472 ±  814196.651   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                                         N/A  thrpt    5       896.429 ±      49.968  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                                    N/A  thrpt    5        57.434 ±       2.045    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                                N/A  thrpt    5         0.025 ±       0.215  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                                           N/A  thrpt    5         0.002 ±       0.014    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                                            N/A  thrpt    5       809.133 ±    1160.367  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                                       N/A  thrpt    5        51.797 ±      73.418    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                              N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                               N/A  thrpt    5         6.000                    ms
[info] IntBenchmark.readPlayJson                                                                                          N/A  thrpt    5   7936175.787 ±  262735.487   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                           N/A  thrpt    5      3560.102 ±     109.774  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                      N/A  thrpt    5       706.115 ±       5.184    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                                  N/A  thrpt    5         0.067 ±       0.132  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                             N/A  thrpt    5         0.013 ±       0.026    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                              N/A  thrpt    5      3398.944 ±      18.780  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                         N/A  thrpt    5       674.190 ±      24.334    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                                N/A  thrpt    5        25.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                                 N/A  thrpt    5        24.000                    ms
[info] IntBenchmark.writeCirce                                                                                            N/A  thrpt    5  15468576.743 ±  240648.442   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                             N/A  thrpt    5      1291.146 ±      44.550  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                                        N/A  thrpt    5       131.376 ±       4.006    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                                    N/A  thrpt    5         0.054 ±       0.166  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                               N/A  thrpt    5         0.005 ±       0.017    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                                N/A  thrpt    5      1214.117 ±    1161.175  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                           N/A  thrpt    5       123.526 ±     117.996    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                                  N/A  thrpt    5         9.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                                   N/A  thrpt    5         8.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                                      N/A  thrpt    5  43628346.369 ±  524124.232   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                       N/A  thrpt    5       915.072 ±      29.773  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                                  N/A  thrpt    5        33.013 ±       1.279    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                                              N/A  thrpt    5         0.029 ±       0.134  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                                         N/A  thrpt    5         0.001 ±       0.005    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                                          N/A  thrpt    5       937.680 ±    1413.256  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                                     N/A  thrpt    5        33.856 ±      51.375    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                            N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                             N/A  thrpt    5         8.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                                     N/A  thrpt    5  12351483.255 ±  365613.764   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                                      N/A  thrpt    5      2534.370 ±     117.356  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                                 N/A  thrpt    5       322.920 ±      11.088    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                             N/A  thrpt    5         0.075 ±       0.185  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                                        N/A  thrpt    5         0.010 ±       0.023    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                         N/A  thrpt    5      2441.084 ±    1429.350  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                                    N/A  thrpt    5       311.058 ±     182.612    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                           N/A  thrpt    5        18.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                            N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                                    N/A  thrpt    5  40962545.587 ± 1804695.666   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                     N/A  thrpt    5       854.952 ±      72.623  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5        32.847 ±       1.833    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                            N/A  thrpt    5         0.029 ±       0.251  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                       N/A  thrpt    5         0.001 ±       0.010    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                                        N/A  thrpt    5       808.395 ±    1158.841  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                                   N/A  thrpt    5        31.017 ±      43.645    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                                          N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                           N/A  thrpt    5         6.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                            N/A  thrpt    5  56057566.254 ±  598092.632   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                             N/A  thrpt    5         0.089 ±       0.757  MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                        N/A  thrpt    5         0.003 ±       0.021    B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                  N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                                       N/A  thrpt    5  22748343.952 ±  870918.782   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                                        N/A  thrpt    5       951.550 ±      80.442  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                                   N/A  thrpt    5        65.826 ±       3.136    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                               N/A  thrpt    5         0.058 ±       0.307  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                                          N/A  thrpt    5         0.004 ±       0.021    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                                           N/A  thrpt    5       943.078 ±    1421.770  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                                      N/A  thrpt    5        65.057 ±      95.643    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                             N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                              N/A  thrpt    5         7.000                    ms
[info] IntBenchmark.writePlayJson                                                                                         N/A  thrpt    5   2540601.724 ±   63756.810   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                                          N/A  thrpt    5      1923.216 ±      61.637  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                     N/A  thrpt    5      1191.473 ±      27.618    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                                 N/A  thrpt    5         0.054 ±       0.091  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                            N/A  thrpt    5         0.033 ±       0.056    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                             N/A  thrpt    5      1884.328 ±    1164.413  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                                        N/A  thrpt    5      1166.968 ±     711.423    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                               N/A  thrpt    5        14.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                                N/A  thrpt    5        13.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                                        128  thrpt    5    167661.866 ±    4651.006   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5      3199.234 ±     139.660  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     30035.500 ±     513.336    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.100 ±       0.174  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.939 ±       1.643    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5      3120.956 ±    1429.523  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5     29284.430 ±   12726.863    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        23.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        21.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                                             128  thrpt    5     35150.903 ±    1193.631   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      2517.377 ±      44.412  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5    112726.178 ±    3395.169    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.054 ±       0.184  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         2.415 ±       8.238    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5      2437.920 ±    1435.241  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5    109216.644 ±   65776.564    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        18.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        18.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                                        128  thrpt    5    121243.214 ±    9402.867   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       999.401 ±      55.698  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     12977.345 ±     608.467    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.021 ±       0.139  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.269 ±       1.779    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       943.874 ±    1421.633  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5     12298.074 ±   19054.330    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5         7.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                                       128  thrpt    5    409703.088 ±   17693.119   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1634.774 ±      89.075  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      6279.709 ±     132.587    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.050 ±       0.176  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.192 ±       0.673    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      1482.044 ±    1160.601  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5      5691.987 ±    4413.461    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        11.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    456101.729 ±    8148.194   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5      1305.939 ±      25.362  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5      4506.600 ±     134.560    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.054 ±       0.193  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.187 ±       0.667    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1211.024 ±    1160.305  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      4180.885 ±    4028.551    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5         8.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                                            128  thrpt    5     68185.018 ±    2524.802   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5      1190.040 ±      47.601  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     27472.996 ±     739.540    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.029 ±       0.091  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.674 ±       2.124    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                128  thrpt    5      1214.860 ±    1162.666  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5     28051.287 ±   26913.023    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5         9.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                                  128  thrpt    5    311078.310 ±    8522.046   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      2171.133 ±      80.012  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     10985.402 ±     270.503    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                          128  thrpt    5         0.054 ±       0.146  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                     128  thrpt    5         0.274 ±       0.739    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                      128  thrpt    5      2025.224 ±      20.296  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                 128  thrpt    5     10247.571 ±     311.535    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        15.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        15.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                                           128  thrpt    5    490107.963 ±   18869.446   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1283.932 ±      81.010  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      4123.517 ±     164.404    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.080 ±       0.333    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5      1214.567 ±    1162.581  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5      3896.788 ±    3680.227    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5         8.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                                          128  thrpt    5   1324172.617 ±   18737.376   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5      2681.220 ±      69.986  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      3186.743 ±      69.383    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.096 ±       0.134  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.114 ±       0.159    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5      2573.655 ±    1172.875  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5      3058.300 ±    1373.042    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        17.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                               128  thrpt    5    107826.231 ±    2994.345   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3622.618 ±      88.681  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     52882.252 ±     410.504    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.092 ±       0.209  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         1.340 ±       3.090    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5      3533.692 ±    1148.573  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5     51572.639 ±   15965.117    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        26.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        24.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                                 128  thrpt    5    352211.219 ±    4257.463   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       561.171 ±      37.876  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      2507.789 ±     151.173    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                         128  thrpt    5         0.092 ±       0.745  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                    128  thrpt    5         0.410 ±       3.335    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                     128  thrpt    5       539.659 ±    1161.656  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                128  thrpt    5      2410.221 ±    5188.267    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5         5.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                                          128  thrpt    5    823552.555 ±   15273.521   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       611.551 ±       5.066  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1168.817 ±      24.246    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.241 ±       1.856  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.465 ±       3.579    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       674.077 ±       0.431  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5      1288.320 ±      24.051    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5         6.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                                         128  thrpt    5   1979041.937 ±   23470.928   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       942.044 ±      31.611  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       749.178 ±      30.947    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.033 ±       0.209  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         0.027 ±       0.167    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       940.904 ±    1417.379  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5       748.882 ±    1135.907    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5         7.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2162176.490 ±    4771.720   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5         0.292 ±       2.510  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.213 ±       1.829    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                                              128  thrpt    5    438164.732 ±   22970.657   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5       648.353 ±      37.631  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5      2329.133 ±      81.865    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         0.075 ±       0.202    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5       538.550 ±    1159.270  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5      1931.719 ±    4159.963    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5         4.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                                             128  thrpt    5     59292.586 ±     283.350   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1907.632 ±      57.081  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     50637.034 ±    1750.998    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.042 ±       0.098  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         1.105 ±       2.605    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5      1896.751 ±    1168.960  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5     50350.806 ±   31100.771    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        14.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        14.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                                      128  thrpt    5     88612.805 ±     720.310   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1634.284 ±      47.470  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     29028.089 ±     942.011    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.033 ±       0.146  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.592 ±       2.589    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      1620.300 ±    1428.474  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     28784.711 ±   25489.613    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5        12.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        12.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                                     128  thrpt    5    163608.799 ±    3381.472   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      2593.090 ±     123.486  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5     24947.400 ±     846.578    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.075 ±       0.072  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.722 ±       0.697    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      2436.726 ±    1434.696  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     23434.976 ±   13541.528    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5        18.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        17.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                                          128  thrpt    5     33586.797 ±    1360.631   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      2166.045 ±      98.466  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    101510.204 ±    1004.410    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.037 ±       0.067  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         1.756 ±       3.155    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                              128  thrpt    5      2165.032 ±    1150.991  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5    101509.046 ±   55584.246    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        15.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                                     128  thrpt    5    133585.131 ±    3528.424   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       845.291 ±      50.356  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      9959.772 ±     486.528    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.021 ±       0.139  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.245 ±       1.635    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                         128  thrpt    5       808.967 ±    1161.036  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5      9531.569 ±   13668.774    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         6.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5         5.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                                    128  thrpt    5    431043.863 ±   10519.904   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       489.581 ±      45.396  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1787.618 ±     124.237    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.618 ±       5.324  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         2.260 ±      19.458    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                        128  thrpt    5       537.927 ±    1157.930  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5      1959.386 ±    4217.816    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5         8.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5    446634.228 ±    5596.535   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5         4.988 ±       3.438  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        17.585 ±      12.392    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                                         128  thrpt    5     68466.418 ±    4595.131   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1197.716 ±      39.382  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     27540.352 ±    2047.740    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.017 ±       0.143  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         0.381 ±       3.277    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                             128  thrpt    5      1079.266 ±    1422.648  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5     24869.302 ±   33411.554    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5         8.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                                 N/A  thrpt    5   2865641.433 ±   98647.427   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      3585.864 ±     123.464  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5      1969.700 ±       1.917    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                         N/A  thrpt    5         0.104 ±       0.127  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                    N/A  thrpt    5         0.057 ±       0.069    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                     N/A  thrpt    5      3391.669 ±      34.848  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                N/A  thrpt    5      1863.122 ±      51.526    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        25.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                           N/A  thrpt    5    741720.294 ±    7488.240   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       461.055 ±      20.127  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5       978.300 ±      37.682    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.831 ±       7.082  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         1.767 ±      15.058    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5       536.136 ±    1154.077  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5      1136.846 ±    2447.180    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                                          N/A  thrpt    5    310573.237 ±    6008.767   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       590.542 ±      35.041  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2992.946 ±     158.134    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5         0.291 ±       2.420  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5         1.471 ±      12.216    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5       539.303 ±    1160.891  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5      2732.074 ±    5881.337    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5         5.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                                         N/A  thrpt    5    557932.750 ±   14147.121   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       423.207 ±      22.900  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1193.795 ±      83.910    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.589 ±       5.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         1.676 ±      14.431    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5       403.931 ±    1419.874  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5      1140.509 ±    4009.355    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                                     N/A  thrpt    5   1555536.493 ±   54016.731   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                                      N/A  thrpt    5       513.871 ±      34.492  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                                 N/A  thrpt    5       519.948 ±      35.683    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.564 ±       4.856  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.579 ±       4.983    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5       539.058 ±    1160.364  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5       545.798 ±    1175.131    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                           N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                            N/A  thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                               N/A  thrpt    5   3791019.552 ±  110558.480   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                                N/A  thrpt    5       314.330 ±      27.749  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                           N/A  thrpt    5       130.532 ±      14.238    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.002 ±       0.018  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0.001 ±       0.007    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       237.108 ±    1269.614  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5        99.049 ±     530.926    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                                     N/A  thrpt    5         2.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                                      N/A  thrpt    5         5.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                              N/A  thrpt    5    232432.751 ±    1762.068   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1597.847 ±      46.194  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5     10820.308 ±     251.661    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5         0.029 ±       0.156  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5         0.197 ±       1.056    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5      1484.930 ±    1158.026  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5     10054.203 ±    7795.470    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        10.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                                           128  thrpt    5   1369288.376 ±    2555.263   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5        76.599 ±       0.354  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5        88.039 ±       0.337    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                                 128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.readPlayJson                                                                                128  thrpt    5     75820.987 ±    1500.903   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                                 128  thrpt    5      3347.283 ±      72.135  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     69483.054 ±    1577.204    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.046 ±       0.067  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         0.951 ±       1.400    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      3259.314 ±    1159.503  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     67661.346 ±   24282.455    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                                      128  thrpt    5        24.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                                       128  thrpt    5        24.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                                           128  thrpt    5   1479051.918 ±   71164.095   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       797.619 ±      51.289  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5       848.731 ±      16.665    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.004 ±       0.038    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                               128  thrpt    5       674.122 ±       0.276  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5       717.439 ±      34.700    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                                 128  thrpt    5         5.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                                  128  thrpt    5         5.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                                          128  thrpt    5    942115.384 ±   81587.046   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       270.443 ±      41.591  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       451.738 ±      42.935    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.006 ±       0.054  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.011 ±       0.091    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       339.290 ±    1219.489  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5       563.396 ±    2019.127    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                                 128  thrpt    5         9.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                                  128  thrpt    5    985611.572 ±    3585.044   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                   128  thrpt    5        10.023 ±       0.031  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                              128  thrpt    5        16.006 ±       0.046    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                        128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                               128  thrpt    5     50625.143 ±    1266.409   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                                128  thrpt    5      2099.691 ±      43.350  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     65278.731 ±    1385.106    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.046 ±       0.119  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         1.421 ±       3.690    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5      2029.826 ±      13.269  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5     63108.247 ±    1991.832    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                                     128  thrpt    5        15.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                                      128  thrpt    5        17.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                                128  thrpt    5    252422.964 ±    5209.409   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1015.090 ±      38.816  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      6330.347 ±     284.883    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.012 ±       0.108  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.078 ±       0.668    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       941.078 ±    1417.499  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      5868.913 ±    8842.521    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5         7.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5         6.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                                     128  thrpt    5     38953.760 ±     369.901   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1930.780 ±      46.962  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     78008.543 ±    1759.067    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.042 ±       0.080  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         1.681 ±       3.232    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      1894.200 ±    1164.926  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     76542.995 ±   47353.733    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        14.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        14.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                                128  thrpt    5    101151.957 ±    1731.566   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       949.741 ±      41.151  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     14780.167 ±     820.486    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.025 ±       0.143  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.390 ±       2.245    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       943.924 ±    1421.887  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     14697.956 ±   22251.523    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         7.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5         7.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                               128  thrpt    5    319042.142 ±   10090.626   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       443.555 ±      44.723  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      2188.532 ±     241.333    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.612 ±       5.246  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         3.023 ±      25.921    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       403.916 ±    1419.823  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      1996.957 ±    7020.248    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5         6.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    342317.217 ±    1942.934   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         3.805 ±       2.613  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        17.499 ±      12.111    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                                    128  thrpt    5     52189.441 ±     378.757   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1222.019 ±      45.845  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     36851.634 ±    1120.990    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.025 ±       0.067  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.752 ±       2.019    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1214.679 ±    1161.713  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     36618.971 ±   34880.821    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        10.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                                      128  thrpt    5     70854.349 ±    2264.262   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1459.864 ±      32.546  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     32427.794 ±     620.953    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.025 ±       0.105  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.554 ±       2.310    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      1350.260 ±       7.721  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     29994.099 ±     970.627    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                            128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                             128  thrpt    5         9.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                               128  thrpt    5    121152.821 ±    5842.753   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       611.113 ±      19.485  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      7939.577 ±     198.704    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.289 ±       2.269  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         3.743 ±      29.310    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       673.782 ±       1.574  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      8754.467 ±     440.530    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5         6.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                                              128  thrpt    5    251968.041 ±    2888.300   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      1062.397 ±      22.023  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      6636.044 ±     177.337    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.021 ±       0.080  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.130 ±       0.501    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1075.464 ±    1417.200  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      6719.554 ±    8876.290    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                                   128  thrpt    5     28681.398 ±    1080.942   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1433.432 ±      63.527  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     78666.829 ±    1407.141    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.021 ±       0.080  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         1.149 ±       4.436    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1349.770 ±       6.599  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     74081.742 ±    2902.442    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        11.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                                              128  thrpt    5    142740.696 ±   11840.400   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       754.934 ±      67.378  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      8324.151 ±     333.147    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.025 ±       0.105  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.277 ±       1.147    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       808.974 ±    1160.943  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      8946.148 ±   13261.299    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                                             128  thrpt    5    441983.066 ±    4838.414   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1333.127 ±      27.601  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      4747.875 ±     127.404    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.058 ±       0.215  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.207 ±       0.765    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1344.730 ±       7.507  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      4789.184 ±      67.028    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    479197.578 ±   15033.800   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5       900.219 ±      27.427  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5      2957.031 ±      40.031    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'          128  thrpt    5         0.051 ±       0.439  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     128  thrpt    5         0.169 ±       1.459    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.Compressed_Class_Space                    128  thrpt    5         0.002 ±       0.020  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.Compressed_Class_Space.norm               128  thrpt    5         0.008 ±       0.065    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.050 ±       0.257  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.165 ±       0.855    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Old_Gen                                128  thrpt    5         0.007 ±       0.063  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Old_Gen.norm                           128  thrpt    5         0.024 ±       0.210    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                         128  thrpt    5       802.376 ±    1120.879  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      2640.309 ±    3772.017    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                            128  thrpt    5         6.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                                  128  thrpt    5     67541.060 ±    1101.804   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1182.887 ±      32.816  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     27567.495 ±     941.575    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.195 ±       1.028    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1079.156 ±    1421.823  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     25168.694 ±   33369.049    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5         8.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                                128  thrpt    5     95138.694 ±   16040.408   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1466.148 ±     227.302  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     24258.710 ±     498.396    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.066 ±       0.564  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         1.177 ±      10.131    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.Compressed_Class_Space                                               128  thrpt    5         0.001 ±       0.011  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm                                          128  thrpt    5         0.023 ±       0.199    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.062 ±       0.240  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         1.071 ±       4.365    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Old_Gen                                                           128  thrpt    5         0.004 ±       0.035  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm                                                      128  thrpt    5         0.073 ±       0.627    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      1350.251 ±      20.596  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     22377.623 ±    4354.578    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        78.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                                         128  thrpt    5    169634.667 ±    4674.300   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       719.292 ±      16.605  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      6674.564 ±     148.039    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.017 ±       0.067  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         0.155 ±       0.623    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       674.034 ±       0.283  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5      6254.732 ±     173.860    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5         6.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                                        128  thrpt    5    266932.894 ±    3951.880   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       978.129 ±      34.048  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      5767.859 ±     287.961    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.017 ±       0.088  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.099 ±       0.520    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       943.269 ±    1421.390  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5      5568.542 ±    8471.580    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5         7.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                                             128  thrpt    5     64888.649 ±    1575.668   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      2536.350 ±      61.537  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     61515.996 ±    2307.450    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.042 ±       0.057  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         1.010 ±       1.379    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5      2441.163 ±    1439.684  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5     59238.915 ±   35873.761    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        18.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        18.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                               128  thrpt    5    184725.852 ±   13585.698   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       898.296 ±      61.868  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      7653.824 ±     139.082    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.021 ±       0.113  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         0.181 ±       0.991    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5       945.093 ±    1424.041  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5      8040.304 ±   11941.508    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5         7.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                                        128  thrpt    5    482613.017 ±    6810.437   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       391.632 ±      35.990  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1277.371 ±     132.598    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.258 ±       2.222  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.842 ±       7.250    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       404.703 ±    1422.588  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5      1323.218 ±    4651.313    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5         5.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    575513.835 ±   70106.743   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       314.237 ±      55.532  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       859.302 ±      95.506    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space                                      128  thrpt    5         0.002 ±       0.015  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.Compressed_Class_Space.norm                                 128  thrpt    5         0.005 ±       0.043    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.624 ±       5.376  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         1.807 ±      15.561    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen                                                  128  thrpt    5         0.005 ±       0.046  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Old_Gen.norm                                             128  thrpt    5         0.015 ±       0.132    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5       233.307 ±    1254.521  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5       650.330 ±    3471.628    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        45.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    592747.079 ±    6967.063   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5         6.026 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                                            128  thrpt    5     34042.273 ±     116.756   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5      1688.561 ±      28.698  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     78075.035 ±    1268.831    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.033 ±       0.108  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         1.539 ±       4.967    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                128  thrpt    5      1622.627 ±    1419.764  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5     75018.169 ±   65455.578    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        11.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                                      N/A  thrpt    5    844036.047 ±   31254.062   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                                       N/A  thrpt    5      2210.483 ±      58.929  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5      4122.385 ±     110.098    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                              N/A  thrpt    5         0.062 ±       0.150  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                         N/A  thrpt    5         0.116 ±       0.281    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                          N/A  thrpt    5      2157.164 ±    1151.078  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                     N/A  thrpt    5      4024.282 ±    2198.924    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                            N/A  thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                             N/A  thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                               N/A  thrpt    5   1699411.365 ±   96467.348   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5      1111.727 ±     109.100  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5      1029.367 ±      43.868    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                       N/A  thrpt    5         0.042 ±       0.170  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                  N/A  thrpt    5         0.038 ±       0.156    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                   N/A  thrpt    5      1078.283 ±    1420.960  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                              N/A  thrpt    5       994.900 ±    1269.558    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                                     N/A  thrpt    5         8.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                                      N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                              N/A  thrpt    5   7689182.876 ±   80997.605   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       240.351 ±      26.947  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5        49.203 ±       6.025    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5       204.614 ±    1078.870  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5        42.002 ±     221.465    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                                    N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                                     N/A  thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                                   N/A  thrpt    5    308636.261 ±   10355.855   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                                    N/A  thrpt    5      2036.215 ±      82.256  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                               N/A  thrpt    5     10385.044 ±     147.371    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                           N/A  thrpt    5         0.054 ±       0.044  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                      N/A  thrpt    5         0.276 ±       0.229    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                       N/A  thrpt    5      1892.132 ±    1156.884  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                  N/A  thrpt    5      9641.450 ±    5678.366    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                                         N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                                          N/A  thrpt    5        14.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                                     N/A  thrpt    5   1126210.111 ±   50708.487   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                                      N/A  thrpt    5      1610.051 ±      42.573  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                                 N/A  thrpt    5      2250.443 ±      68.248    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                             N/A  thrpt    5         0.058 ±       0.143  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                        N/A  thrpt    5         0.082 ±       0.203    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                         N/A  thrpt    5      1622.588 ±    1428.377  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                    N/A  thrpt    5      2272.734 ±    2102.945    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                           N/A  thrpt    5        12.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                            N/A  thrpt    5        11.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                              N/A  thrpt    5   2547379.439 ±   37919.366   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                               N/A  thrpt    5      1039.313 ±      20.601  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5       642.166 ±      21.560    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5         0.017 ±       0.105  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5         0.010 ±       0.065    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5       944.015 ±    1421.730  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5       583.873 ±     886.838    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                                    N/A  thrpt    5         7.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                                     N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                             N/A  thrpt    5   5761126.971 ±  306441.237   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                              N/A  thrpt    5       665.084 ±      35.540  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5       181.714 ±       5.504    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5         0.556 ±       4.562  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5         0.156 ±       1.278    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5       673.916 ±       2.250  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5       184.153 ±      10.499    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                                   N/A  thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                                    N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                                     N/A  thrpt    5   6122120.986 ±   83339.116   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                      N/A  thrpt    5       383.931 ±      34.696  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                 N/A  thrpt    5        98.697 ±      10.139    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.612 ±       5.181  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.158 ±       1.338    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5       371.753 ±    1331.252  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        95.783 ±     343.023    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                           N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                            N/A  thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                                  N/A  thrpt    5    425228.902 ±   17903.427   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                                   N/A  thrpt    5      2310.194 ±     125.613  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                              N/A  thrpt    5      8551.502 ±     322.140    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                          N/A  thrpt    5         0.062 ±       0.188  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                     N/A  thrpt    5         0.232 ±       0.710    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                      N/A  thrpt    5      2300.042 ±    1430.707  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                                 N/A  thrpt    5      8519.578 ±    5461.466    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                                        N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                                         N/A  thrpt    5        16.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                                       128  thrpt    5     83713.513 ±    1160.187   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                        128  thrpt    5      2264.490 ±      63.590  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                                   128  thrpt    5     42576.931 ±    1637.273    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                               128  thrpt    5         0.054 ±       0.156  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                          128  thrpt    5         1.018 ±       2.949    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                           128  thrpt    5      2160.311 ±    1164.387  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                      128  thrpt    5     40632.309 ±   22493.343    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                                             128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                                              128  thrpt    5        14.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                                128  thrpt    5    120715.439 ±    5833.332   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                                 128  thrpt    5      1906.060 ±     116.102  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                            128  thrpt    5     24849.074 ±     540.912    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.046 ±       0.105  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         0.594 ±       1.328    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      1893.410 ±    1164.603  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5     24675.735 ±   14949.344    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                                      128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                                       128  thrpt    5        14.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                               128  thrpt    5    171081.867 ±    5477.422   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                                128  thrpt    5      2609.469 ±     114.543  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                           128  thrpt    5     24007.536 ±     409.545    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.079 ±       0.067  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         0.727 ±       0.597    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5      2573.955 ±    1158.645  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5     23669.419 ±   10222.290    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                                     128  thrpt    5        19.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                                      128  thrpt    5        19.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                                    128  thrpt    5     60499.630 ±    1420.102   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                     128  thrpt    5      3068.200 ±     123.684  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                128  thrpt    5     79818.728 ±    2618.859    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                            128  thrpt    5         0.062 ±       0.113  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                       128  thrpt    5         1.628 ±       2.978    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                        128  thrpt    5      2987.073 ±    1436.782  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                   128  thrpt    5     77740.775 ±   38621.303    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                                          128  thrpt    5        22.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                                           128  thrpt    5        22.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                                      128  thrpt    5    177224.238 ±    2799.809   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                       128  thrpt    5       871.788 ±      45.134  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                  128  thrpt    5      7742.901 ±     356.605    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                              128  thrpt    5         0.037 ±       0.215  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                         128  thrpt    5         0.332 ±       1.908    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                          128  thrpt    5       809.830 ±    1162.365  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                                     128  thrpt    5      7190.914 ±   10288.398    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                                            128  thrpt    5         6.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                                             128  thrpt    5         6.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                               128  thrpt    5    453462.488 ±    9381.872   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                                128  thrpt    5       406.169 ±      55.214  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                           128  thrpt    5      1409.752 ±     201.203    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.265 ±       2.278  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         0.920 ±       7.918    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5       404.491 ±    1421.844  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5      1405.087 ±    4939.306    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                                     128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                                      128  thrpt    5         6.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                                              128  thrpt    5    639421.476 ±   19095.515   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                               128  thrpt    5       352.806 ±      38.836  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                          128  thrpt    5       868.564 ±     108.426    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         0.010 ±       0.088    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5       269.110 ±    1418.941  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5       665.823 ±    3510.911    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                    128  thrpt    5         2.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                     128  thrpt    5         3.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                      128  thrpt    5    604241.124 ±    4671.577   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                       128  thrpt    5         6.229 ±       0.750  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                  128  thrpt    5        16.227 ±       1.945    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                            128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                                   128  thrpt    5     33211.909 ±     794.532   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                    128  thrpt    5      1713.480 ±      47.049  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                               128  thrpt    5     81202.101 ±    2956.005    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                           128  thrpt    5         0.025 ±       0.067  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                                      128  thrpt    5         1.185 ±       3.195    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                       128  thrpt    5      1759.037 ±    1427.906  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                                  128  thrpt    5     83378.619 ±   68077.003    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                                         128  thrpt    5        13.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                                          128  thrpt    5        14.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                              128  thrpt    5   3468007.491 ±   38877.020   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      2393.855 ±      76.198  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      1086.515 ±      27.216    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      128  thrpt    5         0.083 ±       0.080  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 128  thrpt    5         0.038 ±       0.036    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  128  thrpt    5      2299.961 ±    1413.176  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             128  thrpt    5      1043.650 ±     633.060    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        17.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                                        128  thrpt    5   3788488.145 ±   45375.548   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                         128  thrpt    5       414.941 ±      32.240  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    128  thrpt    5       172.390 ±      12.413    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.725 ±       6.216  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.301 ±       2.576    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       402.710 ±    1415.581  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5       167.099 ±     587.378    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                              128  thrpt    5         3.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                               128  thrpt    5         7.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                                       128  thrpt    5   2771024.322 ±  101327.695   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5      1332.537 ±      50.964  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5       756.985 ±      11.115    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.067 ±       0.174  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.038 ±       0.098    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5      1350.163 ±       6.013  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5       767.053 ±      29.166    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                                      128  thrpt    5   3968202.237 ±   31122.861   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       435.748 ±      41.731  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       172.862 ±      17.452    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.585 ±       5.036  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.233 ±       2.003    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5       404.010 ±    1420.155  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5       160.452 ±     564.014    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         3.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5         6.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                           128  thrpt    5   2907735.397 ±   74496.399   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1411.787 ±      65.863  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5       764.222 ±      18.695    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.054 ±       0.166  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.029 ±       0.090    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               128  thrpt    5      1350.430 ±       6.910  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5       731.054 ±      19.828    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5         9.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                             128  thrpt    5   2243410.616 ±   37233.659   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       550.886 ±      34.450  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5       386.514 ±      19.059    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.137 ±       1.051  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         0.096 ±       0.734    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5       539.708 ±    1161.763  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5       378.344 ±     814.444    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5         5.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                                       128  thrpt    5   5755427.264 ±  452774.665   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        128  thrpt    5       568.747 ±      39.580  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   128  thrpt    5       155.529 ±       8.164    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.796 ±       6.764  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.215 ±       1.830    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           128  thrpt    5       535.919 ±    1153.607  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5       147.201 ±     317.114    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                             128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                              128  thrpt    5         6.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                                      128  thrpt    5   3354288.964 ±   56149.794   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       911.996 ±      43.205  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5       427.939 ±      21.230    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.029 ±       0.209  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         0.014 ±       0.098    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          128  thrpt    5       809.313 ±    1161.091  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5       379.772 ±     545.133    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5         7.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                                     128  thrpt    5   5413772.299 ±  119950.628   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       535.920 ±      28.250  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       155.794 ±       8.545    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.604 ±       5.131  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.177 ±       1.502    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         128  thrpt    5       538.540 ±    1159.248  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5       156.684 ±     337.304    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5         8.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5   6525136.532 ±   52091.511   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5         0.321 ±       2.763  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.078 ±       0.668    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                                          128  thrpt    5   3528790.521 ±   82692.376   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       997.387 ±      49.962  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5       444.826 ±      24.918    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.033 ±       0.185  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.015 ±       0.082    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       944.934 ±    1423.743  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5       421.681 ±     638.516    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                           128  thrpt    5   1072873.517 ±   25512.122   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1769.537 ±      55.125  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      2595.973 ±      57.411    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                   128  thrpt    5         0.050 ±       0.185  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                              128  thrpt    5         0.073 ±       0.270    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                               128  thrpt    5      1752.641 ±    1422.969  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                          128  thrpt    5      2569.582 ±    2052.677    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                                 128  thrpt    5        13.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                                     128  thrpt    5   1774704.926 ±  138976.695   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                      128  thrpt    5       506.922 ±      66.040  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                 128  thrpt    5       449.535 ±      34.144    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.794 ±       6.791  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.693 ±       5.931    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                         128  thrpt    5       402.156 ±    1413.634  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5       354.317 ±    1245.617    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                           128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                            128  thrpt    5         5.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                                    128  thrpt    5   1246679.063 ±   37486.301   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       791.489 ±      21.930  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5       999.417 ±      52.490    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.008 ±       0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.011 ±       0.092    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                        128  thrpt    5       808.481 ±    1160.146  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5      1023.052 ±    1507.714    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                                   128  thrpt    5   1718761.389 ±   28751.520   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       495.910 ±      35.481  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       454.112 ±      32.995    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.595 ±       5.081  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.549 ±       4.682    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       538.751 ±    1159.705  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5       493.806 ±    1062.998    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                                        128  thrpt    5   1260742.019 ±   12841.018   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5       837.844 ±      34.829  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5      1046.031 ±      42.494    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.029 ±       0.122  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.036 ±       0.152    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       809.270 ±    1162.598  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5      1010.324 ±    1450.779    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5         6.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                                          128  thrpt    5   1053381.782 ±   50939.425   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                           128  thrpt    5       906.504 ±      81.366  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                      128  thrpt    5      1354.402 ±      81.186    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                  128  thrpt    5         0.029 ±       0.209  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                             128  thrpt    5         0.043 ±       0.310    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                              128  thrpt    5       809.513 ±    1161.585  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                         128  thrpt    5      1208.437 ±    1711.871    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                                128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                                 128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                                    128  thrpt    5    806242.650 ±   46800.268   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                     128  thrpt    5       214.010 ±      19.723  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                128  thrpt    5       417.917 ±      55.561    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.003 ±       0.024  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.006 ±       0.048    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                        128  thrpt    5       236.467 ±    1265.496  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5       468.136 ±    2507.164    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                          128  thrpt    5         2.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                           128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                                   128  thrpt    5   1969121.377 ±   47029.984   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       961.892 ±      42.806  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       768.912 ±      45.097    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.033 ±       0.209  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.027 ±       0.169    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       944.116 ±    1422.026  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5       755.639 ±    1150.318    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2191480.939 ±   53908.464   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       581.508 ±      24.096  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       417.686 ±      22.025    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.535 ±       4.517  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.385 ±       3.255    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       539.336 ±    1160.964  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       388.009 ±     835.286    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5         5.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2311602.981 ±   30427.796   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         0.195 ±       1.573  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5         0.134 ±       1.078    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                                       128  thrpt    5   2002863.398 ±   52305.855   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5       900.775 ±      20.930  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5       707.956 ±      33.049    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.021 ±       0.080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.016 ±       0.063    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5       805.025 ±    1155.047  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5       633.949 ±     932.260    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5         5.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                                      N/A  thrpt    5      6110.348 ±      16.858   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                                       N/A  thrpt    5       753.360 ±      35.824  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5    194060.312 ±    9287.830    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                              N/A  thrpt    5         0.050 ±       0.202  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                         N/A  thrpt    5        12.795 ±      52.044    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                          N/A  thrpt    5       809.401 ±    1161.212  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                                     N/A  thrpt    5    208514.149 ±  299472.618    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                            N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                             N/A  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                               N/A  thrpt    5     18593.118 ±    1193.397   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5       249.600 ±      24.116  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5     21130.551 ±    1769.361    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                       N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                                  N/A  thrpt    5         0.363 ±       3.126    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                                   N/A  thrpt    5       237.256 ±    1270.560  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                              N/A  thrpt    5     20276.285 ±  108183.203    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                                     N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                                      N/A  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                              N/A  thrpt    5     20080.409 ±     364.672   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       189.466 ±      24.314  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5     14853.975 ±    2157.807    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5       204.602 ±    1078.809  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5     16110.320 ±   84945.792    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                                    N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                                     N/A  thrpt    5         3.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                                   N/A  thrpt    5      7277.531 ±      83.349   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                                    N/A  thrpt    5      2027.605 ±      46.222  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                               N/A  thrpt    5    438557.413 ±    6870.620    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                           N/A  thrpt    5         0.037 ±       0.036  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                      N/A  thrpt    5         8.102 ±       7.737    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                       N/A  thrpt    5      1879.169 ±    1149.527  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                                  N/A  thrpt    5    406573.830 ±  251479.056    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                                         N/A  thrpt    5        14.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                                          N/A  thrpt    5        15.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                              N/A  thrpt    5     53258.356 ±    3052.984   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                               N/A  thrpt    5       688.338 ±      43.641  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5     20342.407 ±     461.876    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5         0.489 ±       1.969    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5       673.423 ±       0.382  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5     19905.348 ±    1163.714    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                                    N/A  thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                                     N/A  thrpt    5         4.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                             N/A  thrpt    5     81280.106 ±    1842.849   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                              N/A  thrpt    5       544.483 ±      24.440  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5     10543.746 ±     271.764    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5         0.096 ±       0.693  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5         1.862 ±      13.501    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5       537.735 ±    1157.516  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5     10399.946 ±   22388.116    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                                   N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                                    N/A  thrpt    5         4.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                                     N/A  thrpt    5     85329.437 ±     691.498   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                      N/A  thrpt    5        29.078 ±      46.019  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                 N/A  thrpt    5       536.449 ±     849.813    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5       102.306 ±     880.886  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      1888.197 ±   16257.941    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                           N/A  thrpt    5         1.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                            N/A  thrpt    5         4.000                    ms
[info] VectorOfBooleansBenchmark.readCirce                                                                                128  thrpt    5    304247.167 ±    6026.616   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1674.232 ±      41.146  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      8661.737 ±     157.942    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                        128  thrpt    5         0.054 ±       0.185  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                   128  thrpt    5         0.281 ±       0.962    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                    128  thrpt    5      1620.939 ±    1417.600  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                               128  thrpt    5      8390.201 ±    7428.786    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        12.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        11.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                                         128  thrpt    5    489003.478 ±    5649.731   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       527.228 ±      35.706  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1696.966 ±     112.659    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                                 128  thrpt    5         0.316 ±       2.590  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                            128  thrpt    5         1.022 ±       8.373    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                             128  thrpt    5       539.625 ±    1161.585  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                        128  thrpt    5      1737.605 ±    3740.413    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5         5.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                                        128  thrpt    5   1188505.872 ±   14068.426   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       638.817 ±       5.747  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       846.019 ±      11.921    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.547 ±       4.447  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.724 ±       5.876    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       673.950 ±       2.275  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5       892.546 ±       8.738    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5         7.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                                             128  thrpt    5    104497.531 ±    3552.726   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      3340.574 ±     165.333  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     50315.007 ±    1405.947    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                     128  thrpt    5         0.071 ±       0.122  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                                128  thrpt    5         1.068 ±       1.866    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                                 128  thrpt    5      3124.766 ±    1436.158  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                            128  thrpt    5     47050.100 ±   20989.901    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        23.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        21.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                               128  thrpt    5    337925.559 ±    5743.600   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       553.137 ±      33.387  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      2576.422 ±     156.253    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                       128  thrpt    5         0.054 ±       0.423  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                  128  thrpt    5         0.252 ±       1.969    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                   128  thrpt    5       539.226 ±    1160.727  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                              128  thrpt    5      2512.823 ±    5409.318    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5         4.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                                        128  thrpt    5    716531.357 ±   35860.373   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       559.977 ±      31.908  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1230.238 ±      76.561    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                                128  thrpt    5         0.216 ±       1.775  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5         0.485 ±       3.976    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                            128  thrpt    5       539.135 ±    1160.529  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5      1187.853 ±    2557.721    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5         5.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                                       128  thrpt    5   1364173.632 ±    9568.091   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       650.991 ±      16.934  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       751.011 ±      16.402    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                               128  thrpt    5         0.606 ±       5.171  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5         0.701 ±       5.982    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                           128  thrpt    5       672.709 ±       1.897  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5       776.071 ±       7.666    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5         7.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5   1495469.115 ±    5050.387   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5         0.061 ±       0.468  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.065 ±       0.494    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                                            128  thrpt    5    442480.195 ±    7117.433   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       672.908 ±      17.443  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      2393.671 ±      43.320    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                    128  thrpt    5         0.021 ±       0.113  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                               128  thrpt    5         0.074 ±       0.404    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                                128  thrpt    5       674.092 ±       0.236  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                           128  thrpt    5      2397.924 ±      38.664    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5         6.000                    ms
[info] Benchmark result is saved to jdk10graal.json
[success] Total time: 7102 s, completed May 16, 2018 7:56:18 AM
